
mcu_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080038ec  080038ec  000138ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d0  080039d0  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  080039d0  080039d0  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d0  080039d0  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080039d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200000a8  08003a80  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003a80  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e04e  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257d  00000000  00000000  0002e11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000306a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000191b6  00000000  00000000  00031418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f047  00000000  00000000  0004a5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a043  00000000  00000000  00059615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000e3658  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c48  00000000  00000000  000e36b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d60  00000000  00000000  000e42f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	080038d4 	.word	0x080038d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	080038d4 	.word	0x080038d4

0800014c <WhichButtonIsPressed>:
	BUTTON_PRESS_MORE_THAN_1S
};

enum ButtonState buttonState = BUTTON_RELEASED;

int WhichButtonIsPressed() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return button_mode_is_pressed;
 8000150:	2000      	movs	r0, #0
 8000152:	f000 f971 	bl	8000438 <is_button_pressed>
 8000156:	4603      	mov	r3, r0
 8000158:	2b00      	cmp	r3, #0
 800015a:	d001      	beq.n	8000160 <WhichButtonIsPressed+0x14>
 800015c:	230a      	movs	r3, #10
 800015e:	e018      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(1)) return button_add_is_pressed;
 8000160:	2001      	movs	r0, #1
 8000162:	f000 f969 	bl	8000438 <is_button_pressed>
 8000166:	4603      	mov	r3, r0
 8000168:	2b00      	cmp	r3, #0
 800016a:	d001      	beq.n	8000170 <WhichButtonIsPressed+0x24>
 800016c:	230f      	movs	r3, #15
 800016e:	e010      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(2)) return button_confirm_is_pressed;
 8000170:	2002      	movs	r0, #2
 8000172:	f000 f961 	bl	8000438 <is_button_pressed>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d001      	beq.n	8000180 <WhichButtonIsPressed+0x34>
 800017c:	230c      	movs	r3, #12
 800017e:	e008      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(3)) return button_reset_is_pressed;
 8000180:	2003      	movs	r0, #3
 8000182:	f000 f959 	bl	8000438 <is_button_pressed>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <WhichButtonIsPressed+0x44>
 800018c:	230d      	movs	r3, #13
 800018e:	e000      	b.n	8000192 <WhichButtonIsPressed+0x46>

	return 0; // none of these button is pressed
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}
	...

08000198 <fsm_for_input_processing>:
void fsm_for_input_processing() {
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	switch(buttonState) {
 800019c:	4b60      	ldr	r3, [pc, #384]	; (8000320 <fsm_for_input_processing+0x188>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b02      	cmp	r3, #2
 80001a2:	f000 80ac 	beq.w	80002fe <fsm_for_input_processing+0x166>
 80001a6:	2b02      	cmp	r3, #2
 80001a8:	f300 80b2 	bgt.w	8000310 <fsm_for_input_processing+0x178>
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d003      	beq.n	80001b8 <fsm_for_input_processing+0x20>
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	f000 8091 	beq.w	80002d8 <fsm_for_input_processing+0x140>
				buttonState = BUTTON_RELEASED;
			}
			// TODO
			break;
		default:
			break;
 80001b6:	e0ab      	b.n	8000310 <fsm_for_input_processing+0x178>
			if (WhichButtonIsPressed()) {
 80001b8:	f7ff ffc8 	bl	800014c <WhichButtonIsPressed>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	f000 8086 	beq.w	80002d0 <fsm_for_input_processing+0x138>
				buttonState = BUTTON_PRESSED;
 80001c4:	4b56      	ldr	r3, [pc, #344]	; (8000320 <fsm_for_input_processing+0x188>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	701a      	strb	r2, [r3, #0]
				switch(WhichButtonIsPressed()) {
 80001ca:	f7ff ffbf 	bl	800014c <WhichButtonIsPressed>
 80001ce:	4603      	mov	r3, r0
 80001d0:	3b0a      	subs	r3, #10
 80001d2:	2b05      	cmp	r3, #5
 80001d4:	d878      	bhi.n	80002c8 <fsm_for_input_processing+0x130>
 80001d6:	a201      	add	r2, pc, #4	; (adr r2, 80001dc <fsm_for_input_processing+0x44>)
 80001d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001dc:	080001f5 	.word	0x080001f5
 80001e0:	080002c9 	.word	0x080002c9
 80001e4:	080002c3 	.word	0x080002c3
 80001e8:	080002d5 	.word	0x080002d5
 80001ec:	080002c9 	.word	0x080002c9
 80001f0:	0800028d 	.word	0x0800028d
						switch(status) {
 80001f4:	4b4b      	ldr	r3, [pc, #300]	; (8000324 <fsm_for_input_processing+0x18c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	3b01      	subs	r3, #1
 80001fa:	2b07      	cmp	r3, #7
 80001fc:	d841      	bhi.n	8000282 <fsm_for_input_processing+0xea>
 80001fe:	a201      	add	r2, pc, #4	; (adr r2, 8000204 <fsm_for_input_processing+0x6c>)
 8000200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000204:	08000225 	.word	0x08000225
 8000208:	0800022d 	.word	0x0800022d
 800020c:	0800024b 	.word	0x0800024b
 8000210:	08000269 	.word	0x08000269
 8000214:	08000245 	.word	0x08000245
 8000218:	08000263 	.word	0x08000263
 800021c:	08000277 	.word	0x08000277
 8000220:	0800027d 	.word	0x0800027d
								status = RED_MODE;
 8000224:	4b3f      	ldr	r3, [pc, #252]	; (8000324 <fsm_for_input_processing+0x18c>)
 8000226:	2202      	movs	r2, #2
 8000228:	601a      	str	r2, [r3, #0]
								break;
 800022a:	e02b      	b.n	8000284 <fsm_for_input_processing+0xec>
								light_time = man_amber_time;
 800022c:	4b3e      	ldr	r3, [pc, #248]	; (8000328 <fsm_for_input_processing+0x190>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a3e      	ldr	r2, [pc, #248]	; (800032c <fsm_for_input_processing+0x194>)
 8000232:	6013      	str	r3, [r2, #0]
								temp_value = light_time; // store value to temp variable if button add is pressed
 8000234:	4b3d      	ldr	r3, [pc, #244]	; (800032c <fsm_for_input_processing+0x194>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a3d      	ldr	r2, [pc, #244]	; (8000330 <fsm_for_input_processing+0x198>)
 800023a:	6013      	str	r3, [r2, #0]
								status = AMBER_MODE;
 800023c:	4b39      	ldr	r3, [pc, #228]	; (8000324 <fsm_for_input_processing+0x18c>)
 800023e:	2203      	movs	r2, #3
 8000240:	601a      	str	r2, [r3, #0]
								break;
 8000242:	e01f      	b.n	8000284 <fsm_for_input_processing+0xec>
								status = AMBER_MODE;
 8000244:	4b37      	ldr	r3, [pc, #220]	; (8000324 <fsm_for_input_processing+0x18c>)
 8000246:	2203      	movs	r2, #3
 8000248:	601a      	str	r2, [r3, #0]
								light_time = man_green_time;
 800024a:	4b3a      	ldr	r3, [pc, #232]	; (8000334 <fsm_for_input_processing+0x19c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a37      	ldr	r2, [pc, #220]	; (800032c <fsm_for_input_processing+0x194>)
 8000250:	6013      	str	r3, [r2, #0]
								temp_value = light_time; // store value to temp variable if button add is pressed
 8000252:	4b36      	ldr	r3, [pc, #216]	; (800032c <fsm_for_input_processing+0x194>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a36      	ldr	r2, [pc, #216]	; (8000330 <fsm_for_input_processing+0x198>)
 8000258:	6013      	str	r3, [r2, #0]
								status = GREEN_MODE;
 800025a:	4b32      	ldr	r3, [pc, #200]	; (8000324 <fsm_for_input_processing+0x18c>)
 800025c:	2204      	movs	r2, #4
 800025e:	601a      	str	r2, [r3, #0]
								break;
 8000260:	e010      	b.n	8000284 <fsm_for_input_processing+0xec>
								status = GREEN_MODE;
 8000262:	4b30      	ldr	r3, [pc, #192]	; (8000324 <fsm_for_input_processing+0x18c>)
 8000264:	2204      	movs	r2, #4
 8000266:	601a      	str	r2, [r3, #0]
								temp_value = light_time; // store value to temp variable if button add is pressed
 8000268:	4b30      	ldr	r3, [pc, #192]	; (800032c <fsm_for_input_processing+0x194>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a30      	ldr	r2, [pc, #192]	; (8000330 <fsm_for_input_processing+0x198>)
 800026e:	6013      	str	r3, [r2, #0]
								status = NORMAL_MODE;
 8000270:	4b2c      	ldr	r3, [pc, #176]	; (8000324 <fsm_for_input_processing+0x18c>)
 8000272:	2201      	movs	r2, #1
 8000274:	601a      	str	r2, [r3, #0]
								status = NORMAL_MODE;
 8000276:	4b2b      	ldr	r3, [pc, #172]	; (8000324 <fsm_for_input_processing+0x18c>)
 8000278:	2201      	movs	r2, #1
 800027a:	601a      	str	r2, [r3, #0]
								status = NORMAL_MODE;
 800027c:	4b29      	ldr	r3, [pc, #164]	; (8000324 <fsm_for_input_processing+0x18c>)
 800027e:	2201      	movs	r2, #1
 8000280:	601a      	str	r2, [r3, #0]
								break;
 8000282:	bf00      	nop
						buttonState = BUTTON_PRESSED;
 8000284:	4b26      	ldr	r3, [pc, #152]	; (8000320 <fsm_for_input_processing+0x188>)
 8000286:	2201      	movs	r2, #1
 8000288:	701a      	strb	r2, [r3, #0]
						break;
 800028a:	e024      	b.n	80002d6 <fsm_for_input_processing+0x13e>
						switch(status) {
 800028c:	4b25      	ldr	r3, [pc, #148]	; (8000324 <fsm_for_input_processing+0x18c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b04      	cmp	r3, #4
 8000292:	d00e      	beq.n	80002b2 <fsm_for_input_processing+0x11a>
 8000294:	2b04      	cmp	r3, #4
 8000296:	dc10      	bgt.n	80002ba <fsm_for_input_processing+0x122>
 8000298:	2b02      	cmp	r3, #2
 800029a:	d002      	beq.n	80002a2 <fsm_for_input_processing+0x10a>
 800029c:	2b03      	cmp	r3, #3
 800029e:	d004      	beq.n	80002aa <fsm_for_input_processing+0x112>
							break;
 80002a0:	e00b      	b.n	80002ba <fsm_for_input_processing+0x122>
							status = MAN_RED_MODE;
 80002a2:	4b20      	ldr	r3, [pc, #128]	; (8000324 <fsm_for_input_processing+0x18c>)
 80002a4:	2205      	movs	r2, #5
 80002a6:	601a      	str	r2, [r3, #0]
							break;
 80002a8:	e008      	b.n	80002bc <fsm_for_input_processing+0x124>
							status = MAN_AMBER_MODE;
 80002aa:	4b1e      	ldr	r3, [pc, #120]	; (8000324 <fsm_for_input_processing+0x18c>)
 80002ac:	2206      	movs	r2, #6
 80002ae:	601a      	str	r2, [r3, #0]
							break;
 80002b0:	e004      	b.n	80002bc <fsm_for_input_processing+0x124>
							status = MAN_GREEN_MODE;
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <fsm_for_input_processing+0x18c>)
 80002b4:	2207      	movs	r2, #7
 80002b6:	601a      	str	r2, [r3, #0]
							break;
 80002b8:	e000      	b.n	80002bc <fsm_for_input_processing+0x124>
							break;
 80002ba:	bf00      	nop
						updateTempTime();
 80002bc:	f000 fd7c 	bl	8000db8 <updateTempTime>
						break;
 80002c0:	e009      	b.n	80002d6 <fsm_for_input_processing+0x13e>
						confirmAdjustedTime();
 80002c2:	f000 fdd7 	bl	8000e74 <confirmAdjustedTime>
						break;
 80002c6:	e006      	b.n	80002d6 <fsm_for_input_processing+0x13e>
					default: buttonState = BUTTON_RELEASED;
 80002c8:	4b15      	ldr	r3, [pc, #84]	; (8000320 <fsm_for_input_processing+0x188>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	701a      	strb	r2, [r3, #0]
			break;
 80002ce:	e024      	b.n	800031a <fsm_for_input_processing+0x182>
			}
 80002d0:	bf00      	nop
 80002d2:	e022      	b.n	800031a <fsm_for_input_processing+0x182>
						break;
 80002d4:	bf00      	nop
			break;
 80002d6:	e020      	b.n	800031a <fsm_for_input_processing+0x182>
			if (!WhichButtonIsPressed()) {
 80002d8:	f7ff ff38 	bl	800014c <WhichButtonIsPressed>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d103      	bne.n	80002ea <fsm_for_input_processing+0x152>
				buttonState = BUTTON_RELEASED;
 80002e2:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <fsm_for_input_processing+0x188>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	701a      	strb	r2, [r3, #0]
			break;
 80002e8:	e014      	b.n	8000314 <fsm_for_input_processing+0x17c>
				if (is_button_pressed_1s(0)) {
 80002ea:	2000      	movs	r0, #0
 80002ec:	f000 f8c6 	bl	800047c <is_button_pressed_1s>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d00e      	beq.n	8000314 <fsm_for_input_processing+0x17c>
					buttonState = BUTTON_PRESS_MORE_THAN_1S;
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <fsm_for_input_processing+0x188>)
 80002f8:	2202      	movs	r2, #2
 80002fa:	701a      	strb	r2, [r3, #0]
			break;
 80002fc:	e00a      	b.n	8000314 <fsm_for_input_processing+0x17c>
			if (!WhichButtonIsPressed()) {
 80002fe:	f7ff ff25 	bl	800014c <WhichButtonIsPressed>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d107      	bne.n	8000318 <fsm_for_input_processing+0x180>
				buttonState = BUTTON_RELEASED;
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <fsm_for_input_processing+0x188>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
			break;
 800030e:	e003      	b.n	8000318 <fsm_for_input_processing+0x180>
			break;
 8000310:	bf00      	nop
 8000312:	e002      	b.n	800031a <fsm_for_input_processing+0x182>
			break;
 8000314:	bf00      	nop
 8000316:	e000      	b.n	800031a <fsm_for_input_processing+0x182>
			break;
 8000318:	bf00      	nop
	}
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	200000cc 	.word	0x200000cc
 8000324:	20000010 	.word	0x20000010
 8000328:	20000004 	.word	0x20000004
 800032c:	2000000c 	.word	0x2000000c
 8000330:	200000c4 	.word	0x200000c4
 8000334:	20000008 	.word	0x20000008

08000338 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800033e:	2300      	movs	r3, #0
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	e061      	b.n	8000408 <button_reading+0xd0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000344:	4a34      	ldr	r2, [pc, #208]	; (8000418 <button_reading+0xe0>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	7819      	ldrb	r1, [r3, #0]
 800034c:	4a33      	ldr	r2, [pc, #204]	; (800041c <button_reading+0xe4>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4413      	add	r3, r2
 8000352:	460a      	mov	r2, r1
 8000354:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000356:	4a32      	ldr	r2, [pc, #200]	; (8000420 <button_reading+0xe8>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800035e:	4931      	ldr	r1, [pc, #196]	; (8000424 <button_reading+0xec>)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000366:	4619      	mov	r1, r3
 8000368:	4610      	mov	r0, r2
 800036a:	f001 f923 	bl	80015b4 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	4619      	mov	r1, r3
 8000372:	4a29      	ldr	r2, [pc, #164]	; (8000418 <button_reading+0xe0>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4413      	add	r3, r2
 8000378:	460a      	mov	r2, r1
 800037a:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 800037c:	4a26      	ldr	r2, [pc, #152]	; (8000418 <button_reading+0xe0>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4413      	add	r3, r2
 8000382:	781a      	ldrb	r2, [r3, #0]
 8000384:	4925      	ldr	r1, [pc, #148]	; (800041c <button_reading+0xe4>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	440b      	add	r3, r1
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	429a      	cmp	r2, r3
 800038e:	d138      	bne.n	8000402 <button_reading+0xca>
			//valid input, can read now
			buttonBufferPrev[i] = buttonBuffer[i];
 8000390:	4a25      	ldr	r2, [pc, #148]	; (8000428 <button_reading+0xf0>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4413      	add	r3, r2
 8000396:	7819      	ldrb	r1, [r3, #0]
 8000398:	4a24      	ldr	r2, [pc, #144]	; (800042c <button_reading+0xf4>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4413      	add	r3, r2
 800039e:	460a      	mov	r2, r1
 80003a0:	701a      	strb	r2, [r3, #0]
			// chap nhan input
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80003a2:	4a1d      	ldr	r2, [pc, #116]	; (8000418 <button_reading+0xe0>)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4413      	add	r3, r2
 80003a8:	7819      	ldrb	r1, [r3, #0]
 80003aa:	4a1f      	ldr	r2, [pc, #124]	; (8000428 <button_reading+0xf0>)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4413      	add	r3, r2
 80003b0:	460a      	mov	r2, r1
 80003b2:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80003b4:	4a1c      	ldr	r2, [pc, #112]	; (8000428 <button_reading+0xf0>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d116      	bne.n	80003ee <button_reading+0xb6>
				//toggle pin to validate
				//HAL_GPIO_TogglePin(BRESP_GPIO_Port, BRESP_Pin);
				//if a button is pressed , we start counting
				if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80003c0:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <button_reading+0xf8>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c8:	2b63      	cmp	r3, #99	; 0x63
 80003ca:	d80a      	bhi.n	80003e2 <button_reading+0xaa>
					counterForButtonPress1s[i]++;
 80003cc:	4a18      	ldr	r2, [pc, #96]	; (8000430 <button_reading+0xf8>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003d4:	3301      	adds	r3, #1
 80003d6:	b299      	uxth	r1, r3
 80003d8:	4a15      	ldr	r2, [pc, #84]	; (8000430 <button_reading+0xf8>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80003e0:	e00f      	b.n	8000402 <button_reading+0xca>
				}

				else {
					//the flag is turned on when 1 second has passed
					//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 80003e2:	4a14      	ldr	r2, [pc, #80]	; (8000434 <button_reading+0xfc>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4413      	add	r3, r2
 80003e8:	2201      	movs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
 80003ec:	e009      	b.n	8000402 <button_reading+0xca>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 80003ee:	4a10      	ldr	r2, [pc, #64]	; (8000430 <button_reading+0xf8>)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2100      	movs	r1, #0
 80003f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80003f8:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <button_reading+0xfc>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	2200      	movs	r2, #0
 8000400:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	3301      	adds	r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2b03      	cmp	r3, #3
 800040c:	dd9a      	ble.n	8000344 <button_reading+0xc>
			}
		}
	}
}
 800040e:	bf00      	nop
 8000410:	bf00      	nop
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	200000d8 	.word	0x200000d8
 800041c:	200000dc 	.word	0x200000dc
 8000420:	20000014 	.word	0x20000014
 8000424:	20000024 	.word	0x20000024
 8000428:	200000d0 	.word	0x200000d0
 800042c:	200000d4 	.word	0x200000d4
 8000430:	200000e4 	.word	0x200000e4
 8000434:	200000e0 	.word	0x200000e0

08000438 <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2b03      	cmp	r3, #3
 8000446:	d901      	bls.n	800044c <is_button_pressed+0x14>
 8000448:	2300      	movs	r3, #0
 800044a:	e00d      	b.n	8000468 <is_button_pressed+0x30>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	4a09      	ldr	r2, [pc, #36]	; (8000474 <is_button_pressed+0x3c>)
 8000450:	5cd3      	ldrb	r3, [r2, r3]
			&& buttonBufferPrev[index] == BUTTON_IS_RELEASED);
 8000452:	2b00      	cmp	r3, #0
 8000454:	d106      	bne.n	8000464 <is_button_pressed+0x2c>
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	4a07      	ldr	r2, [pc, #28]	; (8000478 <is_button_pressed+0x40>)
 800045a:	5cd3      	ldrb	r3, [r2, r3]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d101      	bne.n	8000464 <is_button_pressed+0x2c>
 8000460:	2301      	movs	r3, #1
 8000462:	e000      	b.n	8000466 <is_button_pressed+0x2e>
 8000464:	2300      	movs	r3, #0
 8000466:	b2db      	uxtb	r3, r3
}
 8000468:	4618      	mov	r0, r3
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	200000d0 	.word	0x200000d0
 8000478:	200000d4 	.word	0x200000d4

0800047c <is_button_pressed_1s>:

// Check for button is pressed more than a second or not
unsigned char is_button_pressed_1s (unsigned char index ) {
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS ) return 0xff ;
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b03      	cmp	r3, #3
 800048a:	d901      	bls.n	8000490 <is_button_pressed_1s+0x14>
 800048c:	23ff      	movs	r3, #255	; 0xff
 800048e:	e007      	b.n	80004a0 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	4a06      	ldr	r2, [pc, #24]	; (80004ac <is_button_pressed_1s+0x30>)
 8000494:	5cd3      	ldrb	r3, [r2, r3]
 8000496:	2b01      	cmp	r3, #1
 8000498:	bf0c      	ite	eq
 800049a:	2301      	moveq	r3, #1
 800049c:	2300      	movne	r3, #0
 800049e:	b2db      	uxtb	r3, r3
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	200000e0 	.word	0x200000e0

080004b0 <update_buffer>:
#include "led7seg.h"
#include "global.h"
static uint8_t led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
static uint8_t led_buffer[4] = {0};
//static uint8_t man_led_buffer[3] = {0};
void update_buffer() {
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	if (status > 12) return;
 80004b4:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <update_buffer+0x78>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b0c      	cmp	r3, #12
 80004ba:	dc30      	bgt.n	800051e <update_buffer+0x6e>
	else {
		led_buffer[0] = 0;
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <update_buffer+0x7c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = status;
 80004c2:	4b19      	ldr	r3, [pc, #100]	; (8000528 <update_buffer+0x78>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	4b18      	ldr	r3, [pc, #96]	; (800052c <update_buffer+0x7c>)
 80004ca:	705a      	strb	r2, [r3, #1]
	}

	if (light_time >= 10) {
 80004cc:	4b18      	ldr	r3, [pc, #96]	; (8000530 <update_buffer+0x80>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b09      	cmp	r3, #9
 80004d2:	dd1b      	ble.n	800050c <update_buffer+0x5c>
		led_buffer[2] = light_time / 10;
 80004d4:	4b16      	ldr	r3, [pc, #88]	; (8000530 <update_buffer+0x80>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <update_buffer+0x84>)
 80004da:	fb82 1203 	smull	r1, r2, r2, r3
 80004de:	1092      	asrs	r2, r2, #2
 80004e0:	17db      	asrs	r3, r3, #31
 80004e2:	1ad3      	subs	r3, r2, r3
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <update_buffer+0x7c>)
 80004e8:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time % 10;
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <update_buffer+0x80>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	4b11      	ldr	r3, [pc, #68]	; (8000534 <update_buffer+0x84>)
 80004f0:	fb83 1302 	smull	r1, r3, r3, r2
 80004f4:	1099      	asrs	r1, r3, #2
 80004f6:	17d3      	asrs	r3, r2, #31
 80004f8:	1ac9      	subs	r1, r1, r3
 80004fa:	460b      	mov	r3, r1
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	440b      	add	r3, r1
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	1ad1      	subs	r1, r2, r3
 8000504:	b2ca      	uxtb	r2, r1
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <update_buffer+0x7c>)
 8000508:	70da      	strb	r2, [r3, #3]
 800050a:	e009      	b.n	8000520 <update_buffer+0x70>
	} else {
		led_buffer[2] = 0;
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <update_buffer+0x7c>)
 800050e:	2200      	movs	r2, #0
 8000510:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time;
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <update_buffer+0x80>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <update_buffer+0x7c>)
 800051a:	70da      	strb	r2, [r3, #3]
 800051c:	e000      	b.n	8000520 <update_buffer+0x70>
	if (status > 12) return;
 800051e:	bf00      	nop
	}
}
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000010 	.word	0x20000010
 800052c:	200000ec 	.word	0x200000ec
 8000530:	2000000c 	.word	0x2000000c
 8000534:	66666667 	.word	0x66666667

08000538 <led_init>:

void led_init() {
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
	GPIOB->BSRR = 0xFF00;
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <led_init+0x14>)
 800053e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000542:	611a      	str	r2, [r3, #16]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	40010c00 	.word	0x40010c00

08000550 <update7SEG>:

void update7SEG(int index){
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b03      	cmp	r3, #3
 800055c:	d872      	bhi.n	8000644 <update7SEG+0xf4>
 800055e:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <update7SEG+0x14>)
 8000560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000564:	08000575 	.word	0x08000575
 8000568:	080005a9 	.word	0x080005a9
 800056c:	080005dd 	.word	0x080005dd
 8000570:	08000611 	.word	0x08000611
	switch(index) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, ON_7SEG); // turn on the first SEG
 8000574:	2201      	movs	r2, #1
 8000576:	2110      	movs	r1, #16
 8000578:	4835      	ldr	r0, [pc, #212]	; (8000650 <update7SEG+0x100>)
 800057a:	f001 f832 	bl	80015e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 800057e:	2200      	movs	r2, #0
 8000580:	2120      	movs	r1, #32
 8000582:	4833      	ldr	r0, [pc, #204]	; (8000650 <update7SEG+0x100>)
 8000584:	f001 f82d 	bl	80015e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 8000588:	2200      	movs	r2, #0
 800058a:	2140      	movs	r1, #64	; 0x40
 800058c:	4830      	ldr	r0, [pc, #192]	; (8000650 <update7SEG+0x100>)
 800058e:	f001 f828 	bl	80015e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 8000592:	2200      	movs	r2, #0
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	482e      	ldr	r0, [pc, #184]	; (8000650 <update7SEG+0x100>)
 8000598:	f001 f823 	bl	80015e2 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 800059c:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <update7SEG+0x104>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f859 	bl	8000658 <display7SEG>
			break;
 80005a6:	e04e      	b.n	8000646 <update7SEG+0xf6>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 80005a8:	2200      	movs	r2, #0
 80005aa:	2110      	movs	r1, #16
 80005ac:	4828      	ldr	r0, [pc, #160]	; (8000650 <update7SEG+0x100>)
 80005ae:	f001 f818 	bl	80015e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, ON_7SEG); // turn on the second SEG
 80005b2:	2201      	movs	r2, #1
 80005b4:	2120      	movs	r1, #32
 80005b6:	4826      	ldr	r0, [pc, #152]	; (8000650 <update7SEG+0x100>)
 80005b8:	f001 f813 	bl	80015e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 80005bc:	2200      	movs	r2, #0
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	4823      	ldr	r0, [pc, #140]	; (8000650 <update7SEG+0x100>)
 80005c2:	f001 f80e 	bl	80015e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 80005c6:	2200      	movs	r2, #0
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4821      	ldr	r0, [pc, #132]	; (8000650 <update7SEG+0x100>)
 80005cc:	f001 f809 	bl	80015e2 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <update7SEG+0x104>)
 80005d2:	785b      	ldrb	r3, [r3, #1]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f83f 	bl	8000658 <display7SEG>
			break;
 80005da:	e034      	b.n	8000646 <update7SEG+0xf6>
		case 2:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 80005dc:	2200      	movs	r2, #0
 80005de:	2110      	movs	r1, #16
 80005e0:	481b      	ldr	r0, [pc, #108]	; (8000650 <update7SEG+0x100>)
 80005e2:	f000 fffe 	bl	80015e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 80005e6:	2200      	movs	r2, #0
 80005e8:	2120      	movs	r1, #32
 80005ea:	4819      	ldr	r0, [pc, #100]	; (8000650 <update7SEG+0x100>)
 80005ec:	f000 fff9 	bl	80015e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, ON_7SEG); // turn on the third SEG
 80005f0:	2201      	movs	r2, #1
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	4816      	ldr	r0, [pc, #88]	; (8000650 <update7SEG+0x100>)
 80005f6:	f000 fff4 	bl	80015e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 80005fa:	2200      	movs	r2, #0
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	4814      	ldr	r0, [pc, #80]	; (8000650 <update7SEG+0x100>)
 8000600:	f000 ffef 	bl	80015e2 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <update7SEG+0x104>)
 8000606:	789b      	ldrb	r3, [r3, #2]
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f825 	bl	8000658 <display7SEG>
			break;
 800060e:	e01a      	b.n	8000646 <update7SEG+0xf6>
		case 3:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 8000610:	2200      	movs	r2, #0
 8000612:	2110      	movs	r1, #16
 8000614:	480e      	ldr	r0, [pc, #56]	; (8000650 <update7SEG+0x100>)
 8000616:	f000 ffe4 	bl	80015e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 800061a:	2200      	movs	r2, #0
 800061c:	2120      	movs	r1, #32
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <update7SEG+0x100>)
 8000620:	f000 ffdf 	bl	80015e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 8000624:	2200      	movs	r2, #0
 8000626:	2140      	movs	r1, #64	; 0x40
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <update7SEG+0x100>)
 800062a:	f000 ffda 	bl	80015e2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, ON_7SEG); // turn on the fourth SEG
 800062e:	2201      	movs	r2, #1
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <update7SEG+0x100>)
 8000634:	f000 ffd5 	bl	80015e2 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <update7SEG+0x104>)
 800063a:	78db      	ldrb	r3, [r3, #3]
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f80b 	bl	8000658 <display7SEG>
			break;
 8000642:	e000      	b.n	8000646 <update7SEG+0xf6>
		default:
			break;
 8000644:	bf00      	nop
	}
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40010800 	.word	0x40010800
 8000654:	200000ec 	.word	0x200000ec

08000658 <display7SEG>:
void display7SEG(int num) {
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	GPIOB->BRR= 0xFF;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <display7SEG+0x24>)
 8000662:	22ff      	movs	r2, #255	; 0xff
 8000664:	615a      	str	r2, [r3, #20]
	GPIOB->BSRR = led7seg[num];
 8000666:	4a06      	ldr	r2, [pc, #24]	; (8000680 <display7SEG+0x28>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4413      	add	r3, r2
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	4b03      	ldr	r3, [pc, #12]	; (800067c <display7SEG+0x24>)
 8000670:	611a      	str	r2, [r3, #16]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40010c00 	.word	0x40010c00
 8000680:	2000002c 	.word	0x2000002c

08000684 <displayMode>:

void displayMode() {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	update_buffer();
 8000688:	f7ff ff12 	bl	80004b0 <update_buffer>
	if (index_led >= 4) index_led = 0;
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <displayMode+0x2c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b03      	cmp	r3, #3
 8000692:	dd02      	ble.n	800069a <displayMode+0x16>
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <displayMode+0x2c>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
	update7SEG(index_led++);
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <displayMode+0x2c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	4903      	ldr	r1, [pc, #12]	; (80006b0 <displayMode+0x2c>)
 80006a2:	600a      	str	r2, [r1, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff53 	bl	8000550 <update7SEG>
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000c8 	.word	0x200000c8

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fc92 	bl	8000fe0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f83c 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f8ec 	bl	800089c <MX_GPIO_Init>
  MX_TIM2_Init();
 80006c4:	f000 f874 	bl	80007b0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80006c8:	f000 f8be 	bl	8000848 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 80006cc:	4813      	ldr	r0, [pc, #76]	; (800071c <main+0x68>)
 80006ce:	f001 fc23 	bl	8001f18 <HAL_TIM_Base_Start_IT>
  //led7SEG_init();
  GPIOA->BRR=0xFF;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <main+0x6c>)
 80006d4:	22ff      	movs	r2, #255	; 0xff
 80006d6:	615a      	str	r2, [r3, #20]
  led_init();
 80006d8:	f7ff ff2e 	bl	8000538 <led_init>
  setTimer1(2);
 80006dc:	2002      	movs	r0, #2
 80006de:	f000 f967 	bl	80009b0 <setTimer1>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // display mode
//
	  if (timer1_flag == 1) {
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <main+0x70>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d104      	bne.n	80006f4 <main+0x40>
		 traffic_light_processing();
 80006ea:	f000 fc07 	bl	8000efc <traffic_light_processing>
		 setTimer1(50);
 80006ee:	2032      	movs	r0, #50	; 0x32
 80006f0:	f000 f95e 	bl	80009b0 <setTimer1>
	 }

	  fsm_for_input_processing();
 80006f4:	f7ff fd50 	bl	8000198 <fsm_for_input_processing>
	  if (WhichButtonIsPressed()) {
 80006f8:	f7ff fd28 	bl	800014c <WhichButtonIsPressed>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d0ef      	beq.n	80006e2 <main+0x2e>
		  printf("Time temp: %d\r\n", temp_value);
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <main+0x74>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4619      	mov	r1, r3
 8000708:	4808      	ldr	r0, [pc, #32]	; (800072c <main+0x78>)
 800070a:	f002 f983 	bl	8002a14 <iprintf>
		  printf("Light time: %d\r\n", light_time);
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <main+0x7c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4619      	mov	r1, r3
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <main+0x80>)
 8000716:	f002 f97d 	bl	8002a14 <iprintf>
	  if (timer1_flag == 1) {
 800071a:	e7e2      	b.n	80006e2 <main+0x2e>
 800071c:	20000170 	.word	0x20000170
 8000720:	40010800 	.word	0x40010800
 8000724:	200000f0 	.word	0x200000f0
 8000728:	200000c4 	.word	0x200000c4
 800072c:	080038ec 	.word	0x080038ec
 8000730:	2000000c 	.word	0x2000000c
 8000734:	080038fc 	.word	0x080038fc

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b090      	sub	sp, #64	; 0x40
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0318 	add.w	r3, r7, #24
 8000742:	2228      	movs	r2, #40	; 0x28
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f002 f95c 	bl	8002a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075a:	2302      	movs	r3, #2
 800075c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075e:	2301      	movs	r3, #1
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000762:	2310      	movs	r3, #16
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000766:	2300      	movs	r3, #0
 8000768:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 0318 	add.w	r3, r7, #24
 800076e:	4618      	mov	r0, r3
 8000770:	f000 ff68 	bl	8001644 <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800077a:	f000 f8fd 	bl	8000978 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f001 f9d4 	bl	8001b44 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007a2:	f000 f8e9 	bl	8000978 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3740      	adds	r7, #64	; 0x40
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_TIM2_Init+0x94>)
 80007ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_TIM2_Init+0x94>)
 80007d6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_TIM2_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_TIM2_Init+0x94>)
 80007e4:	2209      	movs	r2, #9
 80007e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_TIM2_Init+0x94>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_TIM2_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f4:	4813      	ldr	r0, [pc, #76]	; (8000844 <MX_TIM2_Init+0x94>)
 80007f6:	f001 fb3f 	bl	8001e78 <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000800:	f000 f8ba 	bl	8000978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	4619      	mov	r1, r3
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <MX_TIM2_Init+0x94>)
 8000812:	f001 fcd5 	bl	80021c0 <HAL_TIM_ConfigClockSource>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800081c:	f000 f8ac 	bl	8000978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_TIM2_Init+0x94>)
 800082e:	f001 fe9d 	bl	800256c <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000838:	f000 f89e 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000170 	.word	0x20000170

08000848 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <MX_USART1_UART_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USART1_UART_Init+0x4c>)
 8000880:	f001 fede 	bl	8002640 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800088a:	f000 f875 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000012c 	.word	0x2000012c
 8000898:	40013800 	.word	0x40013800

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b2e      	ldr	r3, [pc, #184]	; (800096c <MX_GPIO_Init+0xd0>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a2d      	ldr	r2, [pc, #180]	; (800096c <MX_GPIO_Init+0xd0>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b2b      	ldr	r3, [pc, #172]	; (800096c <MX_GPIO_Init+0xd0>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <MX_GPIO_Init+0xd0>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a27      	ldr	r2, [pc, #156]	; (800096c <MX_GPIO_Init+0xd0>)
 80008ce:	f043 0308 	orr.w	r3, r3, #8
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <MX_GPIO_Init+0xd0>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0308 	and.w	r3, r3, #8
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	21f0      	movs	r1, #240	; 0xf0
 80008e4:	4822      	ldr	r0, [pc, #136]	; (8000970 <MX_GPIO_Init+0xd4>)
 80008e6:	f000 fe7c 	bl	80015e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_Pin|D4_Pin|D5_Pin|D6_Pin
 80008ea:	2200      	movs	r2, #0
 80008ec:	f643 71f8 	movw	r1, #16376	; 0x3ff8
 80008f0:	4820      	ldr	r0, [pc, #128]	; (8000974 <MX_GPIO_Init+0xd8>)
 80008f2:	f000 fe76 	bl	80015e2 <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |GPIO_PIN_7|D1_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 80008f6:	23f0      	movs	r3, #240	; 0xf0
 80008f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2302      	movs	r3, #2
 8000904:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	4619      	mov	r1, r3
 800090c:	4818      	ldr	r0, [pc, #96]	; (8000970 <MX_GPIO_Init+0xd4>)
 800090e:	f000 fcd7 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin;
 8000912:	2307      	movs	r3, #7
 8000914:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091a:	2301      	movs	r3, #1
 800091c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	4619      	mov	r1, r3
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <MX_GPIO_Init+0xd8>)
 8000926:	f000 fccb 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D4_Pin D5_Pin D6_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           PB7 D1_Pin D2_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D4_Pin|D5_Pin|D6_Pin
 800092a:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 800092e:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |GPIO_PIN_7|D1_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2302      	movs	r3, #2
 800093a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4619      	mov	r1, r3
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_GPIO_Init+0xd8>)
 8000944:	f000 fcbc 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin CONFIRM_Pin RESET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|CONFIRM_Pin|RESET_Pin;
 8000948:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800094c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000952:	2301      	movs	r3, #1
 8000954:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	4619      	mov	r1, r3
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <MX_GPIO_Init+0xd4>)
 800095e:	f000 fcaf 	bl	80012c0 <HAL_GPIO_Init>

}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	40010800 	.word	0x40010800
 8000974:	40010c00 	.word	0x40010c00

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <_write>:
#include "output_display.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *ptr, int len)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	b29a      	uxth	r2, r3
 8000994:	f04f 33ff 	mov.w	r3, #4294967295
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	4804      	ldr	r0, [pc, #16]	; (80009ac <_write+0x28>)
 800099c:	f001 fe9d 	bl	80026da <HAL_UART_Transmit>
	return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000012c 	.word	0x2000012c

080009b0 <setTimer1>:

void set_Timer_mode_debounce(int duration) {
	timer0_mode_debounce_counter = duration ;
	timer0_mode_debounce_flag = 0;
}
void setTimer1(int duration) {
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
//	if (duration != DURATION_LED_BLINKING_2HZ) {
//		duration = DURATION_LED_BLINKING_2HZ;
//	}
	timer1_counter = duration ;
 80009b8:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <setTimer1+0x20>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <setTimer1+0x24>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000104 	.word	0x20000104
 80009d4:	200000f0 	.word	0x200000f0

080009d8 <timerRun>:
		duration = DURATION_LED_BLINKING_2HZ;
	}
	timer5_counter = duration;
	timer5_flag = 0;
}
void timerRun() {
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 80009dc:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <timerRun+0xcc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	dd0b      	ble.n	80009fc <timerRun+0x24>
		timer1_counter--;
 80009e4:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <timerRun+0xcc>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	4a2e      	ldr	r2, [pc, #184]	; (8000aa4 <timerRun+0xcc>)
 80009ec:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <timerRun+0xcc>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	dc02      	bgt.n	80009fc <timerRun+0x24>
			timer1_flag = 1;
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <timerRun+0xd0>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 80009fc:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <timerRun+0xd4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dd0b      	ble.n	8000a1c <timerRun+0x44>
		timer2_counter--;
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <timerRun+0xd4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	4a28      	ldr	r2, [pc, #160]	; (8000aac <timerRun+0xd4>)
 8000a0c:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <timerRun+0xd4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	dc02      	bgt.n	8000a1c <timerRun+0x44>
			timer2_flag = 1;
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <timerRun+0xd8>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <timerRun+0xdc>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	dd0b      	ble.n	8000a3c <timerRun+0x64>
		timer3_counter--;
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <timerRun+0xdc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	4a22      	ldr	r2, [pc, #136]	; (8000ab4 <timerRun+0xdc>)
 8000a2c:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <timerRun+0xdc>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	dc02      	bgt.n	8000a3c <timerRun+0x64>
			timer3_flag = 1;
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <timerRun+0xe0>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <timerRun+0xe4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	dd0b      	ble.n	8000a5c <timerRun+0x84>
		timer4_counter--;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <timerRun+0xe4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <timerRun+0xe4>)
 8000a4c:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <timerRun+0xe4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	dc02      	bgt.n	8000a5c <timerRun+0x84>
			timer4_flag = 1;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <timerRun+0xe8>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <timerRun+0xec>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	dd0b      	ble.n	8000a7c <timerRun+0xa4>
		timer5_counter--;
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <timerRun+0xec>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	4a16      	ldr	r2, [pc, #88]	; (8000ac4 <timerRun+0xec>)
 8000a6c:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <timerRun+0xec>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	dc02      	bgt.n	8000a7c <timerRun+0xa4>
			timer5_flag = 1;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <timerRun+0xf0>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer0_mode_debounce_counter > 0) {
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <timerRun+0xf4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	dd0b      	ble.n	8000a9c <timerRun+0xc4>
		timer0_mode_debounce_counter--;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <timerRun+0xf4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <timerRun+0xf4>)
 8000a8c:	6013      	str	r3, [r2, #0]
		if (timer0_mode_debounce_counter <= 0) {
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <timerRun+0xf4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	dc02      	bgt.n	8000a9c <timerRun+0xc4>
			timer0_mode_debounce_flag = 1;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <timerRun+0xf8>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	20000104 	.word	0x20000104
 8000aa8:	200000f0 	.word	0x200000f0
 8000aac:	20000108 	.word	0x20000108
 8000ab0:	200000f4 	.word	0x200000f4
 8000ab4:	2000010c 	.word	0x2000010c
 8000ab8:	200000f8 	.word	0x200000f8
 8000abc:	20000110 	.word	0x20000110
 8000ac0:	200000fc 	.word	0x200000fc
 8000ac4:	20000114 	.word	0x20000114
 8000ac8:	20000100 	.word	0x20000100
 8000acc:	2000011c 	.word	0x2000011c
 8000ad0:	20000118 	.word	0x20000118

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_MspInit+0x5c>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <HAL_MspInit+0x5c>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6193      	str	r3, [r2, #24]
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_MspInit+0x5c>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_MspInit+0x5c>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_MspInit+0x5c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	61d3      	str	r3, [r2, #28]
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_MspInit+0x5c>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_MspInit+0x60>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_MspInit+0x60>)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40010000 	.word	0x40010000

08000b38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b48:	d113      	bne.n	8000b72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_TIM_Base_MspInit+0x44>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <HAL_TIM_Base_MspInit+0x44>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	61d3      	str	r3, [r2, #28]
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_TIM_Base_MspInit+0x44>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	201c      	movs	r0, #28
 8000b68:	f000 fb73 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b6c:	201c      	movs	r0, #28
 8000b6e:	f000 fb8c 	bl	800128a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	; (8000c0c <HAL_UART_MspInit+0x8c>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d131      	bne.n	8000c04 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a1a      	ldr	r2, [pc, #104]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_UART_MspInit+0x90>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	4619      	mov	r1, r3
 8000be4:	480b      	ldr	r0, [pc, #44]	; (8000c14 <HAL_UART_MspInit+0x94>)
 8000be6:	f000 fb6b 	bl	80012c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <HAL_UART_MspInit+0x94>)
 8000c00:	f000 fb5e 	bl	80012c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40013800 	.word	0x40013800
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010800 	.word	0x40010800

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5e:	f000 fa05 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <TIM2_IRQHandler+0x10>)
 8000c6e:	f001 f99f 	bl	8001fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000170 	.word	0x20000170

08000c7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	e00a      	b.n	8000ca4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c8e:	f3af 8000 	nop.w
 8000c92:	4601      	mov	r1, r0
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60ba      	str	r2, [r7, #8]
 8000c9a:	b2ca      	uxtb	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbf0      	blt.n	8000c8e <_read+0x12>
	}

return len;
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
	return -1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cdc:	605a      	str	r2, [r3, #4]
	return 0;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr

08000cea <_isatty>:

int _isatty(int file)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
	return 1;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b085      	sub	sp, #20
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
	return 0;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
	...

08000d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <_sbrk+0x5c>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <_sbrk+0x60>)
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <_sbrk+0x64>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <_sbrk+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d207      	bcs.n	8000d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d48:	f001 fe32 	bl	80029b0 <__errno>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	e009      	b.n	8000d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <_sbrk+0x64>)
 8000d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20002800 	.word	0x20002800
 8000d78:	00000400 	.word	0x00000400
 8000d7c:	20000120 	.word	0x20000120
 8000d80:	200001d0 	.word	0x200001d0

08000d84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "software_timer.h"
#include "led7seg.h"
#include "global.h"

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da0:	d103      	bne.n	8000daa <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000da2:	f7ff fac9 	bl	8000338 <button_reading>
		displayMode();
 8000da6:	f7ff fc6d 	bl	8000684 <displayMode>
	}
	timerRun();
 8000daa:	f7ff fe15 	bl	80009d8 <timerRun>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <updateTempTime>:
#include "input_reading.h"
#include "input_processing.h"
#include "global.h"
#include "led7seg.h"

void updateTempTime() {
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
	switch(status) {
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <updateTempTime+0xa8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d847      	bhi.n	8000e56 <updateTempTime+0x9e>
 8000dc6:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <updateTempTime+0x14>)
 8000dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dcc:	08000e55 	.word	0x08000e55
 8000dd0:	08000e57 	.word	0x08000e57
 8000dd4:	08000e57 	.word	0x08000e57
 8000dd8:	08000e57 	.word	0x08000e57
 8000ddc:	08000de9 	.word	0x08000de9
 8000de0:	08000e0d 	.word	0x08000e0d
 8000de4:	08000e31 	.word	0x08000e31
		case NORMAL_MODE:
			break;
		case MAN_RED_MODE:
			light_time = man_red_time;
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <updateTempTime+0xac>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1e      	ldr	r2, [pc, #120]	; (8000e68 <updateTempTime+0xb0>)
 8000dee:	6013      	str	r3, [r2, #0]
			if (man_red_time >= 99) man_red_time = 0;
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <updateTempTime+0xac>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b62      	cmp	r3, #98	; 0x62
 8000df6:	dd03      	ble.n	8000e00 <updateTempTime+0x48>
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <updateTempTime+0xac>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
			else man_red_time++;
			break;
 8000dfe:	e02a      	b.n	8000e56 <updateTempTime+0x9e>
			else man_red_time++;
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <updateTempTime+0xac>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <updateTempTime+0xac>)
 8000e08:	6013      	str	r3, [r2, #0]
			break;
 8000e0a:	e024      	b.n	8000e56 <updateTempTime+0x9e>
		case MAN_AMBER_MODE:
			light_time = man_amber_time;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <updateTempTime+0xb4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a15      	ldr	r2, [pc, #84]	; (8000e68 <updateTempTime+0xb0>)
 8000e12:	6013      	str	r3, [r2, #0]
			if (man_amber_time >= 99) man_amber_time = 0;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <updateTempTime+0xb4>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b62      	cmp	r3, #98	; 0x62
 8000e1a:	dd03      	ble.n	8000e24 <updateTempTime+0x6c>
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <updateTempTime+0xb4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
			else man_amber_time++;
			break;
 8000e22:	e018      	b.n	8000e56 <updateTempTime+0x9e>
			else man_amber_time++;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <updateTempTime+0xb4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <updateTempTime+0xb4>)
 8000e2c:	6013      	str	r3, [r2, #0]
			break;
 8000e2e:	e012      	b.n	8000e56 <updateTempTime+0x9e>
		case MAN_GREEN_MODE:
			light_time = man_green_time;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <updateTempTime+0xb8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0c      	ldr	r2, [pc, #48]	; (8000e68 <updateTempTime+0xb0>)
 8000e36:	6013      	str	r3, [r2, #0]
			if (man_green_time >= 99) man_green_time = 0;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <updateTempTime+0xb8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b62      	cmp	r3, #98	; 0x62
 8000e3e:	dd03      	ble.n	8000e48 <updateTempTime+0x90>
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <updateTempTime+0xb8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
			else man_green_time++;
			break;
 8000e46:	e006      	b.n	8000e56 <updateTempTime+0x9e>
			else man_green_time++;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <updateTempTime+0xb8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <updateTempTime+0xb8>)
 8000e50:	6013      	str	r3, [r2, #0]
			break;
 8000e52:	e000      	b.n	8000e56 <updateTempTime+0x9e>
			break;
 8000e54:	bf00      	nop
	}
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000010 	.word	0x20000010
 8000e64:	20000000 	.word	0x20000000
 8000e68:	2000000c 	.word	0x2000000c
 8000e6c:	20000004 	.word	0x20000004
 8000e70:	20000008 	.word	0x20000008

08000e74 <confirmAdjustedTime>:

void confirmAdjustedTime() {
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	switch(status) {
 8000e78:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <confirmAdjustedTime+0x70>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d82a      	bhi.n	8000ed8 <confirmAdjustedTime+0x64>
 8000e82:	a201      	add	r2, pc, #4	; (adr r2, 8000e88 <confirmAdjustedTime+0x14>)
 8000e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e88:	08000e99 	.word	0x08000e99
 8000e8c:	08000ea3 	.word	0x08000ea3
 8000e90:	08000eb5 	.word	0x08000eb5
 8000e94:	08000ec7 	.word	0x08000ec7
		case NORMAL_MODE:
			temp_value = light_time;
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <confirmAdjustedTime+0x74>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a13      	ldr	r2, [pc, #76]	; (8000eec <confirmAdjustedTime+0x78>)
 8000e9e:	6013      	str	r3, [r2, #0]
			break;
 8000ea0:	e01b      	b.n	8000eda <confirmAdjustedTime+0x66>
		case RED_MODE:
			man_red_time = temp_value;
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <confirmAdjustedTime+0x78>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <confirmAdjustedTime+0x7c>)
 8000ea8:	6013      	str	r3, [r2, #0]
			light_time = man_red_time;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <confirmAdjustedTime+0x7c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <confirmAdjustedTime+0x74>)
 8000eb0:	6013      	str	r3, [r2, #0]
			break;
 8000eb2:	e012      	b.n	8000eda <confirmAdjustedTime+0x66>
		case AMBER_MODE:
			man_amber_time = temp_value;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <confirmAdjustedTime+0x78>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <confirmAdjustedTime+0x80>)
 8000eba:	6013      	str	r3, [r2, #0]
			light_time = man_amber_time;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <confirmAdjustedTime+0x80>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <confirmAdjustedTime+0x74>)
 8000ec2:	6013      	str	r3, [r2, #0]
			break;
 8000ec4:	e009      	b.n	8000eda <confirmAdjustedTime+0x66>
		case GREEN_MODE:
			man_green_time = temp_value;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <confirmAdjustedTime+0x78>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <confirmAdjustedTime+0x84>)
 8000ecc:	6013      	str	r3, [r2, #0]
			light_time = man_green_time;
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <confirmAdjustedTime+0x84>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <confirmAdjustedTime+0x74>)
 8000ed4:	6013      	str	r3, [r2, #0]
			break;
 8000ed6:	e000      	b.n	8000eda <confirmAdjustedTime+0x66>
		default:
			break;
 8000ed8:	bf00      	nop
	}
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000010 	.word	0x20000010
 8000ee8:	2000000c 	.word	0x2000000c
 8000eec:	200000c4 	.word	0x200000c4
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000004 	.word	0x20000004
 8000ef8:	20000008 	.word	0x20000008

08000efc <traffic_light_processing>:
//	   }
//
//	   LED_status++;
//	   display7SEG(countdown_LED1--);
//}
void traffic_light_processing() {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	switch(status) {
 8000f00:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <traffic_light_processing+0x88>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d839      	bhi.n	8000f7e <traffic_light_processing+0x82>
 8000f0a:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <traffic_light_processing+0x14>)
 8000f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f10:	08000f2d 	.word	0x08000f2d
 8000f14:	08000f37 	.word	0x08000f37
 8000f18:	08000f4f 	.word	0x08000f4f
 8000f1c:	08000f67 	.word	0x08000f67
 8000f20:	08000f37 	.word	0x08000f37
 8000f24:	08000f4f 	.word	0x08000f4f
 8000f28:	08000f67 	.word	0x08000f67
		case NORMAL_MODE:
			temp_value = light_time;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <traffic_light_processing+0x8c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a16      	ldr	r2, [pc, #88]	; (8000f8c <traffic_light_processing+0x90>)
 8000f32:	6013      	str	r3, [r2, #0]
			break;
 8000f34:	e023      	b.n	8000f7e <traffic_light_processing+0x82>
		case RED_MODE: case MAN_RED_MODE:
			// Turn off GREEN AND AMBER LED
			HAL_GPIO_WritePin(GPIOB, D3_Pin | D6_Pin | D2_Pin | D5_Pin, 1);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 5158 	mov.w	r1, #13824	; 0x3600
 8000f3c:	4814      	ldr	r0, [pc, #80]	; (8000f90 <traffic_light_processing+0x94>)
 8000f3e:	f000 fb50 	bl	80015e2 <HAL_GPIO_WritePin>
			// Toggle RED
			HAL_GPIO_TogglePin(GPIOB, D4_Pin | D1_Pin);
 8000f42:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000f46:	4812      	ldr	r0, [pc, #72]	; (8000f90 <traffic_light_processing+0x94>)
 8000f48:	f000 fb63 	bl	8001612 <HAL_GPIO_TogglePin>
			break;
 8000f4c:	e017      	b.n	8000f7e <traffic_light_processing+0x82>
		case AMBER_MODE: case MAN_AMBER_MODE:
			// Turn off RED AND GREEN LED
			HAL_GPIO_WritePin(GPIOB, D1_Pin | D4_Pin | D3_Pin | D6_Pin, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 5134 	mov.w	r1, #11520	; 0x2d00
 8000f54:	480e      	ldr	r0, [pc, #56]	; (8000f90 <traffic_light_processing+0x94>)
 8000f56:	f000 fb44 	bl	80015e2 <HAL_GPIO_WritePin>
			// Toggle AMBER
			HAL_GPIO_TogglePin(GPIOB, D2_Pin | D5_Pin);
 8000f5a:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <traffic_light_processing+0x94>)
 8000f60:	f000 fb57 	bl	8001612 <HAL_GPIO_TogglePin>
			break;
 8000f64:	e00b      	b.n	8000f7e <traffic_light_processing+0x82>
		case GREEN_MODE: case MAN_GREEN_MODE:
			// turn off RED AND AMBER LED
			HAL_GPIO_WritePin(GPIOB, D1_Pin | D2_Pin | D4_Pin | D5_Pin, 1);
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
 8000f6c:	4808      	ldr	r0, [pc, #32]	; (8000f90 <traffic_light_processing+0x94>)
 8000f6e:	f000 fb38 	bl	80015e2 <HAL_GPIO_WritePin>
			// Toggle GREEN
			HAL_GPIO_TogglePin(GPIOB, D3_Pin | D6_Pin);
 8000f72:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000f76:	4806      	ldr	r0, [pc, #24]	; (8000f90 <traffic_light_processing+0x94>)
 8000f78:	f000 fb4b 	bl	8001612 <HAL_GPIO_TogglePin>
			break;
 8000f7c:	bf00      	nop
	}
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000010 	.word	0x20000010
 8000f88:	2000000c 	.word	0x2000000c
 8000f8c:	200000c4 	.word	0x200000c4
 8000f90:	40010c00 	.word	0x40010c00

08000f94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f96:	490d      	ldr	r1, [pc, #52]	; (8000fcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fac:	4c0a      	ldr	r4, [pc, #40]	; (8000fd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fba:	f7ff fee3 	bl	8000d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f001 fcfd 	bl	80029bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fc2:	f7ff fb77 	bl	80006b4 <main>
  bx lr
 8000fc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000fd0:	080039d8 	.word	0x080039d8
  ldr r2, =_sbss
 8000fd4:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000fd8:	200001cc 	.word	0x200001cc

08000fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_2_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_Init+0x28>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_Init+0x28>)
 8000fea:	f043 0310 	orr.w	r3, r3, #16
 8000fee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f923 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f000 f808 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffc:	f7ff fd6a 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40022000 	.word	0x40022000

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x54>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x58>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f93b 	bl	80012a6 <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 f903 	bl	8001252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <HAL_InitTick+0x5c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000038 	.word	0x20000038
 8001064:	20000040 	.word	0x20000040
 8001068:	2000003c 	.word	0x2000003c

0800106c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <HAL_IncTick+0x1c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_IncTick+0x20>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a03      	ldr	r2, [pc, #12]	; (800108c <HAL_IncTick+0x20>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	20000040 	.word	0x20000040
 800108c:	200001b8 	.word	0x200001b8

08001090 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b02      	ldr	r3, [pc, #8]	; (80010a0 <HAL_GetTick+0x10>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	200001b8 	.word	0x200001b8

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4906      	ldr	r1, [pc, #24]	; (800113c <__NVIC_EnableIRQ+0x34>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	; (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	; (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff90 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff2d 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff42 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff90 	bl	8001194 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5f 	bl	8001140 <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff35 	bl	8001108 <__NVIC_EnableIRQ>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffa2 	bl	80011f8 <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b08b      	sub	sp, #44	; 0x2c
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d2:	e148      	b.n	8001566 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012d4:	2201      	movs	r2, #1
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f040 8137 	bne.w	8001560 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4aa3      	ldr	r2, [pc, #652]	; (8001584 <HAL_GPIO_Init+0x2c4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d05e      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 80012fc:	4aa1      	ldr	r2, [pc, #644]	; (8001584 <HAL_GPIO_Init+0x2c4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d875      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 8001302:	4aa1      	ldr	r2, [pc, #644]	; (8001588 <HAL_GPIO_Init+0x2c8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d058      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 8001308:	4a9f      	ldr	r2, [pc, #636]	; (8001588 <HAL_GPIO_Init+0x2c8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d86f      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 800130e:	4a9f      	ldr	r2, [pc, #636]	; (800158c <HAL_GPIO_Init+0x2cc>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d052      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 8001314:	4a9d      	ldr	r2, [pc, #628]	; (800158c <HAL_GPIO_Init+0x2cc>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d869      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 800131a:	4a9d      	ldr	r2, [pc, #628]	; (8001590 <HAL_GPIO_Init+0x2d0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d04c      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 8001320:	4a9b      	ldr	r2, [pc, #620]	; (8001590 <HAL_GPIO_Init+0x2d0>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d863      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 8001326:	4a9b      	ldr	r2, [pc, #620]	; (8001594 <HAL_GPIO_Init+0x2d4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d046      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 800132c:	4a99      	ldr	r2, [pc, #612]	; (8001594 <HAL_GPIO_Init+0x2d4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d85d      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 8001332:	2b12      	cmp	r3, #18
 8001334:	d82a      	bhi.n	800138c <HAL_GPIO_Init+0xcc>
 8001336:	2b12      	cmp	r3, #18
 8001338:	d859      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 800133a:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <HAL_GPIO_Init+0x80>)
 800133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001340:	080013bb 	.word	0x080013bb
 8001344:	08001395 	.word	0x08001395
 8001348:	080013a7 	.word	0x080013a7
 800134c:	080013e9 	.word	0x080013e9
 8001350:	080013ef 	.word	0x080013ef
 8001354:	080013ef 	.word	0x080013ef
 8001358:	080013ef 	.word	0x080013ef
 800135c:	080013ef 	.word	0x080013ef
 8001360:	080013ef 	.word	0x080013ef
 8001364:	080013ef 	.word	0x080013ef
 8001368:	080013ef 	.word	0x080013ef
 800136c:	080013ef 	.word	0x080013ef
 8001370:	080013ef 	.word	0x080013ef
 8001374:	080013ef 	.word	0x080013ef
 8001378:	080013ef 	.word	0x080013ef
 800137c:	080013ef 	.word	0x080013ef
 8001380:	080013ef 	.word	0x080013ef
 8001384:	0800139d 	.word	0x0800139d
 8001388:	080013b1 	.word	0x080013b1
 800138c:	4a82      	ldr	r2, [pc, #520]	; (8001598 <HAL_GPIO_Init+0x2d8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001392:	e02c      	b.n	80013ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	623b      	str	r3, [r7, #32]
          break;
 800139a:	e029      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	3304      	adds	r3, #4
 80013a2:	623b      	str	r3, [r7, #32]
          break;
 80013a4:	e024      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	3308      	adds	r3, #8
 80013ac:	623b      	str	r3, [r7, #32]
          break;
 80013ae:	e01f      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	330c      	adds	r3, #12
 80013b6:	623b      	str	r3, [r7, #32]
          break;
 80013b8:	e01a      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013c2:	2304      	movs	r3, #4
 80013c4:	623b      	str	r3, [r7, #32]
          break;
 80013c6:	e013      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d105      	bne.n	80013dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d0:	2308      	movs	r3, #8
 80013d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	611a      	str	r2, [r3, #16]
          break;
 80013da:	e009      	b.n	80013f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013dc:	2308      	movs	r3, #8
 80013de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	615a      	str	r2, [r3, #20]
          break;
 80013e6:	e003      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
          break;
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          break;
 80013ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2bff      	cmp	r3, #255	; 0xff
 80013f4:	d801      	bhi.n	80013fa <HAL_GPIO_Init+0x13a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	e001      	b.n	80013fe <HAL_GPIO_Init+0x13e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3304      	adds	r3, #4
 80013fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2bff      	cmp	r3, #255	; 0xff
 8001404:	d802      	bhi.n	800140c <HAL_GPIO_Init+0x14c>
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	e002      	b.n	8001412 <HAL_GPIO_Init+0x152>
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	3b08      	subs	r3, #8
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	210f      	movs	r1, #15
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	401a      	ands	r2, r3
 8001424:	6a39      	ldr	r1, [r7, #32]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	fa01 f303 	lsl.w	r3, r1, r3
 800142c:	431a      	orrs	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8090 	beq.w	8001560 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001440:	4b56      	ldr	r3, [pc, #344]	; (800159c <HAL_GPIO_Init+0x2dc>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a55      	ldr	r2, [pc, #340]	; (800159c <HAL_GPIO_Init+0x2dc>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b53      	ldr	r3, [pc, #332]	; (800159c <HAL_GPIO_Init+0x2dc>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001458:	4a51      	ldr	r2, [pc, #324]	; (80015a0 <HAL_GPIO_Init+0x2e0>)
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001464:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4013      	ands	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a49      	ldr	r2, [pc, #292]	; (80015a4 <HAL_GPIO_Init+0x2e4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d00d      	beq.n	80014a0 <HAL_GPIO_Init+0x1e0>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a48      	ldr	r2, [pc, #288]	; (80015a8 <HAL_GPIO_Init+0x2e8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d007      	beq.n	800149c <HAL_GPIO_Init+0x1dc>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a47      	ldr	r2, [pc, #284]	; (80015ac <HAL_GPIO_Init+0x2ec>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d101      	bne.n	8001498 <HAL_GPIO_Init+0x1d8>
 8001494:	2302      	movs	r3, #2
 8001496:	e004      	b.n	80014a2 <HAL_GPIO_Init+0x1e2>
 8001498:	2303      	movs	r3, #3
 800149a:	e002      	b.n	80014a2 <HAL_GPIO_Init+0x1e2>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <HAL_GPIO_Init+0x1e2>
 80014a0:	2300      	movs	r3, #0
 80014a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a4:	f002 0203 	and.w	r2, r2, #3
 80014a8:	0092      	lsls	r2, r2, #2
 80014aa:	4093      	lsls	r3, r2
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014b2:	493b      	ldr	r1, [pc, #236]	; (80015a0 <HAL_GPIO_Init+0x2e0>)
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	3302      	adds	r3, #2
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014cc:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4937      	ldr	r1, [pc, #220]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014da:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	4933      	ldr	r1, [pc, #204]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d006      	beq.n	8001502 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014f4:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	492d      	ldr	r1, [pc, #180]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001502:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	43db      	mvns	r3, r3
 800150a:	4929      	ldr	r1, [pc, #164]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 800150c:	4013      	ands	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d006      	beq.n	800152a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	4923      	ldr	r1, [pc, #140]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	608b      	str	r3, [r1, #8]
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	43db      	mvns	r3, r3
 8001532:	491f      	ldr	r1, [pc, #124]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 8001534:	4013      	ands	r3, r2
 8001536:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d006      	beq.n	8001552 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	4919      	ldr	r1, [pc, #100]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	60cb      	str	r3, [r1, #12]
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	43db      	mvns	r3, r3
 800155a:	4915      	ldr	r1, [pc, #84]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 800155c:	4013      	ands	r3, r2
 800155e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	3301      	adds	r3, #1
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	f47f aeaf 	bne.w	80012d4 <HAL_GPIO_Init+0x14>
  }
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	372c      	adds	r7, #44	; 0x2c
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	10320000 	.word	0x10320000
 8001588:	10310000 	.word	0x10310000
 800158c:	10220000 	.word	0x10220000
 8001590:	10210000 	.word	0x10210000
 8001594:	10120000 	.word	0x10120000
 8001598:	10110000 	.word	0x10110000
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010000 	.word	0x40010000
 80015a4:	40010800 	.word	0x40010800
 80015a8:	40010c00 	.word	0x40010c00
 80015ac:	40011000 	.word	0x40011000
 80015b0:	40010400 	.word	0x40010400

080015b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	887b      	ldrh	r3, [r7, #2]
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e001      	b.n	80015d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	460b      	mov	r3, r1
 80015ec:	807b      	strh	r3, [r7, #2]
 80015ee:	4613      	mov	r3, r2
 80015f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f2:	787b      	ldrb	r3, [r7, #1]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f8:	887a      	ldrh	r2, [r7, #2]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015fe:	e003      	b.n	8001608 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001600:	887b      	ldrh	r3, [r7, #2]
 8001602:	041a      	lsls	r2, r3, #16
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	611a      	str	r2, [r3, #16]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001624:	887a      	ldrh	r2, [r7, #2]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4013      	ands	r3, r2
 800162a:	041a      	lsls	r2, r3, #16
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43d9      	mvns	r1, r3
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	400b      	ands	r3, r1
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	611a      	str	r2, [r3, #16]
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e26c      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8087 	beq.w	8001772 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001664:	4b92      	ldr	r3, [pc, #584]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b04      	cmp	r3, #4
 800166e:	d00c      	beq.n	800168a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001670:	4b8f      	ldr	r3, [pc, #572]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b08      	cmp	r3, #8
 800167a:	d112      	bne.n	80016a2 <HAL_RCC_OscConfig+0x5e>
 800167c:	4b8c      	ldr	r3, [pc, #560]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001688:	d10b      	bne.n	80016a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168a:	4b89      	ldr	r3, [pc, #548]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d06c      	beq.n	8001770 <HAL_RCC_OscConfig+0x12c>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d168      	bne.n	8001770 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e246      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016aa:	d106      	bne.n	80016ba <HAL_RCC_OscConfig+0x76>
 80016ac:	4b80      	ldr	r3, [pc, #512]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a7f      	ldr	r2, [pc, #508]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	e02e      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x98>
 80016c2:	4b7b      	ldr	r3, [pc, #492]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a7a      	ldr	r2, [pc, #488]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b78      	ldr	r3, [pc, #480]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a77      	ldr	r2, [pc, #476]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e01d      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0xbc>
 80016e6:	4b72      	ldr	r3, [pc, #456]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a71      	ldr	r2, [pc, #452]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b6f      	ldr	r3, [pc, #444]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a6e      	ldr	r2, [pc, #440]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 8001700:	4b6b      	ldr	r3, [pc, #428]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a6a      	ldr	r2, [pc, #424]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a67      	ldr	r2, [pc, #412]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001716:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fcb6 	bl	8001090 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fcb2 	bl	8001090 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e1fa      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b5d      	ldr	r3, [pc, #372]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0xe4>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fca2 	bl	8001090 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fc9e 	bl	8001090 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e1e6      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001762:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x10c>
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d063      	beq.n	8001846 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800177e:	4b4c      	ldr	r3, [pc, #304]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00b      	beq.n	80017a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800178a:	4b49      	ldr	r3, [pc, #292]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b08      	cmp	r3, #8
 8001794:	d11c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x18c>
 8001796:	4b46      	ldr	r3, [pc, #280]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d116      	bne.n	80017d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	4b43      	ldr	r3, [pc, #268]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x176>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e1ba      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ba:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4939      	ldr	r1, [pc, #228]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	e03a      	b.n	8001846 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d020      	beq.n	800181a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d8:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff fc57 	bl	8001090 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e6:	f7ff fc53 	bl	8001090 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e19b      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f8:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001804:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4927      	ldr	r1, [pc, #156]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_RCC_OscConfig+0x270>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fc36 	bl	8001090 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001828:	f7ff fc32 	bl	8001090 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e17a      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d03a      	beq.n	80018c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d019      	beq.n	800188e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_RCC_OscConfig+0x274>)
 800185c:	2201      	movs	r2, #1
 800185e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001860:	f7ff fc16 	bl	8001090 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001868:	f7ff fc12 	bl	8001090 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e15a      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001886:	2001      	movs	r0, #1
 8001888:	f000 fad8 	bl	8001e3c <RCC_Delay>
 800188c:	e01c      	b.n	80018c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001894:	f7ff fbfc 	bl	8001090 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189a:	e00f      	b.n	80018bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189c:	f7ff fbf8 	bl	8001090 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d908      	bls.n	80018bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e140      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	42420000 	.word	0x42420000
 80018b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018bc:	4b9e      	ldr	r3, [pc, #632]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1e9      	bne.n	800189c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80a6 	beq.w	8001a22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018da:	4b97      	ldr	r3, [pc, #604]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10d      	bne.n	8001902 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b94      	ldr	r3, [pc, #592]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a93      	ldr	r2, [pc, #588]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b91      	ldr	r3, [pc, #580]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fe:	2301      	movs	r3, #1
 8001900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001902:	4b8e      	ldr	r3, [pc, #568]	; (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190e:	4b8b      	ldr	r3, [pc, #556]	; (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a8a      	ldr	r2, [pc, #552]	; (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191a:	f7ff fbb9 	bl	8001090 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001922:	f7ff fbb5 	bl	8001090 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b64      	cmp	r3, #100	; 0x64
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e0fd      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4b81      	ldr	r3, [pc, #516]	; (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x312>
 8001948:	4b7b      	ldr	r3, [pc, #492]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4a7a      	ldr	r2, [pc, #488]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6213      	str	r3, [r2, #32]
 8001954:	e02d      	b.n	80019b2 <HAL_RCC_OscConfig+0x36e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x334>
 800195e:	4b76      	ldr	r3, [pc, #472]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4a75      	ldr	r2, [pc, #468]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6213      	str	r3, [r2, #32]
 800196a:	4b73      	ldr	r3, [pc, #460]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4a72      	ldr	r2, [pc, #456]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6213      	str	r3, [r2, #32]
 8001976:	e01c      	b.n	80019b2 <HAL_RCC_OscConfig+0x36e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d10c      	bne.n	800199a <HAL_RCC_OscConfig+0x356>
 8001980:	4b6d      	ldr	r3, [pc, #436]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4a6c      	ldr	r2, [pc, #432]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6213      	str	r3, [r2, #32]
 800198c:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4a69      	ldr	r2, [pc, #420]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6213      	str	r3, [r2, #32]
 8001998:	e00b      	b.n	80019b2 <HAL_RCC_OscConfig+0x36e>
 800199a:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a66      	ldr	r2, [pc, #408]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	4b64      	ldr	r3, [pc, #400]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a63      	ldr	r2, [pc, #396]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	f023 0304 	bic.w	r3, r3, #4
 80019b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d015      	beq.n	80019e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fb69 	bl	8001090 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff fb65 	bl	8001090 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e0ab      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d8:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ee      	beq.n	80019c2 <HAL_RCC_OscConfig+0x37e>
 80019e4:	e014      	b.n	8001a10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e6:	f7ff fb53 	bl	8001090 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff fb4f 	bl	8001090 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e095      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ee      	bne.n	80019ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d105      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a16:	4b48      	ldr	r3, [pc, #288]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a47      	ldr	r2, [pc, #284]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8081 	beq.w	8001b2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a2c:	4b42      	ldr	r3, [pc, #264]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d061      	beq.n	8001afc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d146      	bne.n	8001ace <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a40:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <HAL_RCC_OscConfig+0x4fc>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a46:	f7ff fb23 	bl	8001090 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff fb1f 	bl	8001090 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e067      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a60:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f0      	bne.n	8001a4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a74:	d108      	bne.n	8001a88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a76:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	492d      	ldr	r1, [pc, #180]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a19      	ldr	r1, [r3, #32]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	4927      	ldr	r1, [pc, #156]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b27      	ldr	r3, [pc, #156]	; (8001b40 <HAL_RCC_OscConfig+0x4fc>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff faf3 	bl	8001090 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aae:	f7ff faef 	bl	8001090 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e037      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x46a>
 8001acc:	e02f      	b.n	8001b2e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <HAL_RCC_OscConfig+0x4fc>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fadc 	bl	8001090 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff fad8 	bl	8001090 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e020      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x498>
 8001afa:	e018      	b.n	8001b2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e013      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d001      	beq.n	8001b2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	42420060 	.word	0x42420060

08001b44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0d0      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b58:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d910      	bls.n	8001b88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b67      	ldr	r3, [pc, #412]	; (8001d04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 0207 	bic.w	r2, r3, #7
 8001b6e:	4965      	ldr	r1, [pc, #404]	; (8001d04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b63      	ldr	r3, [pc, #396]	; (8001d04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0b8      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d020      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba0:	4b59      	ldr	r3, [pc, #356]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a58      	ldr	r2, [pc, #352]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001baa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb8:	4b53      	ldr	r3, [pc, #332]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4a52      	ldr	r2, [pc, #328]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b50      	ldr	r3, [pc, #320]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	494d      	ldr	r1, [pc, #308]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d040      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d115      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e07f      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e073      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c12:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e06b      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c22:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f023 0203 	bic.w	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4936      	ldr	r1, [pc, #216]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c34:	f7ff fa2c 	bl	8001090 <HAL_GetTick>
 8001c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3c:	f7ff fa28 	bl	8001090 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e053      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 020c 	and.w	r2, r3, #12
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d1eb      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_RCC_ClockConfig+0x1c0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d210      	bcs.n	8001c94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 0207 	bic.w	r2, r3, #7
 8001c7a:	4922      	ldr	r1, [pc, #136]	; (8001d04 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e032      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4916      	ldr	r1, [pc, #88]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d009      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	490e      	ldr	r1, [pc, #56]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cd2:	f000 f821 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	490a      	ldr	r1, [pc, #40]	; (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ce4:	5ccb      	ldrb	r3, [r1, r3]
 8001ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cea:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <HAL_RCC_ClockConfig+0x1cc>)
 8001cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_ClockConfig+0x1d0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff f98a 	bl	800100c <HAL_InitTick>

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40022000 	.word	0x40022000
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	08003920 	.word	0x08003920
 8001d10:	20000038 	.word	0x20000038
 8001d14:	2000003c 	.word	0x2000003c

08001d18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d18:	b490      	push	{r4, r7}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d20:	1d3c      	adds	r4, r7, #4
 8001d22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d28:	f240 2301 	movw	r3, #513	; 0x201
 8001d2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d002      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x40>
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d003      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0x46>
 8001d56:	e02d      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d5a:	623b      	str	r3, [r7, #32]
      break;
 8001d5c:	e02d      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	0c9b      	lsrs	r3, r3, #18
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d013      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	0c5b      	lsrs	r3, r3, #17
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d96:	fb02 f203 	mul.w	r2, r2, r3
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
 8001da2:	e004      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001da8:	fb02 f303 	mul.w	r3, r2, r3
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	623b      	str	r3, [r7, #32]
      break;
 8001db2:	e002      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db6:	623b      	str	r3, [r7, #32]
      break;
 8001db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dba:	6a3b      	ldr	r3, [r7, #32]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3728      	adds	r7, #40	; 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc90      	pop	{r4, r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	08003910 	.word	0x08003910
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	007a1200 	.word	0x007a1200
 8001dd4:	003d0900 	.word	0x003d0900

08001dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ddc:	4b02      	ldr	r3, [pc, #8]	; (8001de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	20000038 	.word	0x20000038

08001dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df0:	f7ff fff2 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	0a1b      	lsrs	r3, r3, #8
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4903      	ldr	r1, [pc, #12]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08003930 	.word	0x08003930

08001e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	0adb      	lsrs	r3, r3, #11
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	4903      	ldr	r1, [pc, #12]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	08003930 	.word	0x08003930

08001e3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <RCC_Delay+0x34>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <RCC_Delay+0x38>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	0a5b      	lsrs	r3, r3, #9
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e58:	bf00      	nop
  }
  while (Delay --);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1e5a      	subs	r2, r3, #1
 8001e5e:	60fa      	str	r2, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f9      	bne.n	8001e58 <RCC_Delay+0x1c>
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	20000038 	.word	0x20000038
 8001e74:	10624dd3 	.word	0x10624dd3

08001e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e041      	b.n	8001f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fe4a 	bl	8000b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	f000 fa6a 	bl	8002390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d001      	beq.n	8001f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e035      	b.n	8001f9c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a16      	ldr	r2, [pc, #88]	; (8001fa8 <HAL_TIM_Base_Start_IT+0x90>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d009      	beq.n	8001f66 <HAL_TIM_Base_Start_IT+0x4e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5a:	d004      	beq.n	8001f66 <HAL_TIM_Base_Start_IT+0x4e>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a12      	ldr	r2, [pc, #72]	; (8001fac <HAL_TIM_Base_Start_IT+0x94>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d111      	bne.n	8001f8a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b06      	cmp	r3, #6
 8001f76:	d010      	beq.n	8001f9a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f88:	e007      	b.n	8001f9a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	40000400 	.word	0x40000400

08001fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d122      	bne.n	800200c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d11b      	bne.n	800200c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0202 	mvn.w	r2, #2
 8001fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f9b1 	bl	800235a <HAL_TIM_IC_CaptureCallback>
 8001ff8:	e005      	b.n	8002006 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f9a4 	bl	8002348 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f9b3 	bl	800236c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b04      	cmp	r3, #4
 8002018:	d122      	bne.n	8002060 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b04      	cmp	r3, #4
 8002026:	d11b      	bne.n	8002060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0204 	mvn.w	r2, #4
 8002030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2202      	movs	r2, #2
 8002036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f987 	bl	800235a <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f97a 	bl	8002348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f989 	bl	800236c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b08      	cmp	r3, #8
 800206c:	d122      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b08      	cmp	r3, #8
 800207a:	d11b      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0208 	mvn.w	r2, #8
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2204      	movs	r2, #4
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f95d 	bl	800235a <HAL_TIM_IC_CaptureCallback>
 80020a0:	e005      	b.n	80020ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f950 	bl	8002348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f95f 	bl	800236c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d122      	bne.n	8002108 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d11b      	bne.n	8002108 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0210 	mvn.w	r2, #16
 80020d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2208      	movs	r2, #8
 80020de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f933 	bl	800235a <HAL_TIM_IC_CaptureCallback>
 80020f4:	e005      	b.n	8002102 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f926 	bl	8002348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f935 	bl	800236c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d107      	bne.n	8002134 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0201 	mvn.w	r2, #1
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe fe2e 	bl	8000d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	2b80      	cmp	r3, #128	; 0x80
 8002140:	d10e      	bne.n	8002160 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	d107      	bne.n	8002160 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fa67 	bl	800262e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216a:	2b40      	cmp	r3, #64	; 0x40
 800216c:	d10e      	bne.n	800218c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d107      	bne.n	800218c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f8f9 	bl	800237e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b20      	cmp	r3, #32
 8002198:	d10e      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d107      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0220 	mvn.w	r2, #32
 80021b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fa32 	bl	800261c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_TIM_ConfigClockSource+0x18>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e0b3      	b.n	8002340 <HAL_TIM_ConfigClockSource+0x180>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002210:	d03e      	beq.n	8002290 <HAL_TIM_ConfigClockSource+0xd0>
 8002212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002216:	f200 8087 	bhi.w	8002328 <HAL_TIM_ConfigClockSource+0x168>
 800221a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800221e:	f000 8085 	beq.w	800232c <HAL_TIM_ConfigClockSource+0x16c>
 8002222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002226:	d87f      	bhi.n	8002328 <HAL_TIM_ConfigClockSource+0x168>
 8002228:	2b70      	cmp	r3, #112	; 0x70
 800222a:	d01a      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0xa2>
 800222c:	2b70      	cmp	r3, #112	; 0x70
 800222e:	d87b      	bhi.n	8002328 <HAL_TIM_ConfigClockSource+0x168>
 8002230:	2b60      	cmp	r3, #96	; 0x60
 8002232:	d050      	beq.n	80022d6 <HAL_TIM_ConfigClockSource+0x116>
 8002234:	2b60      	cmp	r3, #96	; 0x60
 8002236:	d877      	bhi.n	8002328 <HAL_TIM_ConfigClockSource+0x168>
 8002238:	2b50      	cmp	r3, #80	; 0x50
 800223a:	d03c      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0xf6>
 800223c:	2b50      	cmp	r3, #80	; 0x50
 800223e:	d873      	bhi.n	8002328 <HAL_TIM_ConfigClockSource+0x168>
 8002240:	2b40      	cmp	r3, #64	; 0x40
 8002242:	d058      	beq.n	80022f6 <HAL_TIM_ConfigClockSource+0x136>
 8002244:	2b40      	cmp	r3, #64	; 0x40
 8002246:	d86f      	bhi.n	8002328 <HAL_TIM_ConfigClockSource+0x168>
 8002248:	2b30      	cmp	r3, #48	; 0x30
 800224a:	d064      	beq.n	8002316 <HAL_TIM_ConfigClockSource+0x156>
 800224c:	2b30      	cmp	r3, #48	; 0x30
 800224e:	d86b      	bhi.n	8002328 <HAL_TIM_ConfigClockSource+0x168>
 8002250:	2b20      	cmp	r3, #32
 8002252:	d060      	beq.n	8002316 <HAL_TIM_ConfigClockSource+0x156>
 8002254:	2b20      	cmp	r3, #32
 8002256:	d867      	bhi.n	8002328 <HAL_TIM_ConfigClockSource+0x168>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d05c      	beq.n	8002316 <HAL_TIM_ConfigClockSource+0x156>
 800225c:	2b10      	cmp	r3, #16
 800225e:	d05a      	beq.n	8002316 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002260:	e062      	b.n	8002328 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6899      	ldr	r1, [r3, #8]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f000 f95c 	bl	800252e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002284:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	609a      	str	r2, [r3, #8]
      break;
 800228e:	e04e      	b.n	800232e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6899      	ldr	r1, [r3, #8]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f000 f945 	bl	800252e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022b2:	609a      	str	r2, [r3, #8]
      break;
 80022b4:	e03b      	b.n	800232e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6859      	ldr	r1, [r3, #4]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	461a      	mov	r2, r3
 80022c4:	f000 f8bc 	bl	8002440 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2150      	movs	r1, #80	; 0x50
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f913 	bl	80024fa <TIM_ITRx_SetConfig>
      break;
 80022d4:	e02b      	b.n	800232e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6859      	ldr	r1, [r3, #4]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f000 f8da 	bl	800249c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2160      	movs	r1, #96	; 0x60
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f903 	bl	80024fa <TIM_ITRx_SetConfig>
      break;
 80022f4:	e01b      	b.n	800232e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6859      	ldr	r1, [r3, #4]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	461a      	mov	r2, r3
 8002304:	f000 f89c 	bl	8002440 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2140      	movs	r1, #64	; 0x40
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f8f3 	bl	80024fa <TIM_ITRx_SetConfig>
      break;
 8002314:	e00b      	b.n	800232e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4619      	mov	r1, r3
 8002320:	4610      	mov	r0, r2
 8002322:	f000 f8ea 	bl	80024fa <TIM_ITRx_SetConfig>
        break;
 8002326:	e002      	b.n	800232e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002328:	bf00      	nop
 800232a:	e000      	b.n	800232e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800232c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr

0800235a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a25      	ldr	r2, [pc, #148]	; (8002438 <TIM_Base_SetConfig+0xa8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d007      	beq.n	80023b8 <TIM_Base_SetConfig+0x28>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ae:	d003      	beq.n	80023b8 <TIM_Base_SetConfig+0x28>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a22      	ldr	r2, [pc, #136]	; (800243c <TIM_Base_SetConfig+0xac>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d108      	bne.n	80023ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a1a      	ldr	r2, [pc, #104]	; (8002438 <TIM_Base_SetConfig+0xa8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d007      	beq.n	80023e2 <TIM_Base_SetConfig+0x52>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d8:	d003      	beq.n	80023e2 <TIM_Base_SetConfig+0x52>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a17      	ldr	r2, [pc, #92]	; (800243c <TIM_Base_SetConfig+0xac>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d108      	bne.n	80023f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a07      	ldr	r2, [pc, #28]	; (8002438 <TIM_Base_SetConfig+0xa8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d103      	bne.n	8002428 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	615a      	str	r2, [r3, #20]
}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40000400 	.word	0x40000400

08002440 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	f023 0201 	bic.w	r2, r3, #1
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800246a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f023 030a 	bic.w	r3, r3, #10
 800247c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4313      	orrs	r3, r2
 8002484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	621a      	str	r2, [r3, #32]
}
 8002492:	bf00      	nop
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f023 0210 	bic.w	r2, r3, #16
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	031b      	lsls	r3, r3, #12
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	621a      	str	r2, [r3, #32]
}
 80024f0:	bf00      	nop
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b085      	sub	sp, #20
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	f043 0307 	orr.w	r3, r3, #7
 800251c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	609a      	str	r2, [r3, #8]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800252e:	b480      	push	{r7}
 8002530:	b087      	sub	sp, #28
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002548:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	021a      	lsls	r2, r3, #8
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	431a      	orrs	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	4313      	orrs	r3, r2
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4313      	orrs	r3, r2
 800255a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	609a      	str	r2, [r3, #8]
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002580:	2302      	movs	r3, #2
 8002582:	e041      	b.n	8002608 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a14      	ldr	r2, [pc, #80]	; (8002614 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d009      	beq.n	80025dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d0:	d004      	beq.n	80025dc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d10c      	bne.n	80025f6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40000400 	.word	0x40000400

0800261c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e03f      	b.n	80026d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe fa8a 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	; 0x24
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f905 	bl	8002894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b08a      	sub	sp, #40	; 0x28
 80026de:	af02      	add	r7, sp, #8
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d17c      	bne.n	80027f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_UART_Transmit+0x2c>
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e075      	b.n	80027f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_UART_Transmit+0x3e>
 8002714:	2302      	movs	r3, #2
 8002716:	e06e      	b.n	80027f6 <HAL_UART_Transmit+0x11c>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2221      	movs	r2, #33	; 0x21
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800272e:	f7fe fcaf 	bl	8001090 <HAL_GetTick>
 8002732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	88fa      	ldrh	r2, [r7, #6]
 8002738:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	88fa      	ldrh	r2, [r7, #6]
 800273e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002748:	d108      	bne.n	800275c <HAL_UART_Transmit+0x82>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d104      	bne.n	800275c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	e003      	b.n	8002764 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002760:	2300      	movs	r3, #0
 8002762:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800276c:	e02a      	b.n	80027c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2200      	movs	r2, #0
 8002776:	2180      	movs	r1, #128	; 0x80
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f840 	bl	80027fe <UART_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e036      	b.n	80027f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10b      	bne.n	80027a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800279c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	3302      	adds	r3, #2
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	e007      	b.n	80027b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	3301      	adds	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1cf      	bne.n	800276e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2200      	movs	r2, #0
 80027d6:	2140      	movs	r1, #64	; 0x40
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f810 	bl	80027fe <UART_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e006      	b.n	80027f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e000      	b.n	80027f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027f4:	2302      	movs	r3, #2
  }
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	4613      	mov	r3, r2
 800280c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800280e:	e02c      	b.n	800286a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002816:	d028      	beq.n	800286a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <UART_WaitOnFlagUntilTimeout+0x30>
 800281e:	f7fe fc37 	bl	8001090 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	429a      	cmp	r2, r3
 800282c:	d21d      	bcs.n	800286a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800283c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0201 	bic.w	r2, r2, #1
 800284c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e00f      	b.n	800288a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4013      	ands	r3, r2
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	bf0c      	ite	eq
 800287a:	2301      	moveq	r3, #1
 800287c:	2300      	movne	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	429a      	cmp	r2, r3
 8002886:	d0c3      	beq.n	8002810 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028ce:	f023 030c 	bic.w	r3, r3, #12
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	430b      	orrs	r3, r1
 80028da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a2c      	ldr	r2, [pc, #176]	; (80029a8 <UART_SetConfig+0x114>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d103      	bne.n	8002904 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028fc:	f7ff fa8a 	bl	8001e14 <HAL_RCC_GetPCLK2Freq>
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	e002      	b.n	800290a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002904:	f7ff fa72 	bl	8001dec <HAL_RCC_GetPCLK1Freq>
 8002908:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	009a      	lsls	r2, r3, #2
 8002914:	441a      	add	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002920:	4a22      	ldr	r2, [pc, #136]	; (80029ac <UART_SetConfig+0x118>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	0119      	lsls	r1, r3, #4
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	009a      	lsls	r2, r3, #2
 8002934:	441a      	add	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <UART_SetConfig+0x118>)
 8002942:	fba3 0302 	umull	r0, r3, r3, r2
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2064      	movs	r0, #100	; 0x64
 800294a:	fb00 f303 	mul.w	r3, r0, r3
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	3332      	adds	r3, #50	; 0x32
 8002954:	4a15      	ldr	r2, [pc, #84]	; (80029ac <UART_SetConfig+0x118>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002960:	4419      	add	r1, r3
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	009a      	lsls	r2, r3, #2
 800296c:	441a      	add	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	fbb2 f2f3 	udiv	r2, r2, r3
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <UART_SetConfig+0x118>)
 800297a:	fba3 0302 	umull	r0, r3, r3, r2
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	2064      	movs	r0, #100	; 0x64
 8002982:	fb00 f303 	mul.w	r3, r0, r3
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	3332      	adds	r3, #50	; 0x32
 800298c:	4a07      	ldr	r2, [pc, #28]	; (80029ac <UART_SetConfig+0x118>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	f003 020f 	and.w	r2, r3, #15
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	440a      	add	r2, r1
 800299e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40013800 	.word	0x40013800
 80029ac:	51eb851f 	.word	0x51eb851f

080029b0 <__errno>:
 80029b0:	4b01      	ldr	r3, [pc, #4]	; (80029b8 <__errno+0x8>)
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000044 	.word	0x20000044

080029bc <__libc_init_array>:
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	2600      	movs	r6, #0
 80029c0:	4d0c      	ldr	r5, [pc, #48]	; (80029f4 <__libc_init_array+0x38>)
 80029c2:	4c0d      	ldr	r4, [pc, #52]	; (80029f8 <__libc_init_array+0x3c>)
 80029c4:	1b64      	subs	r4, r4, r5
 80029c6:	10a4      	asrs	r4, r4, #2
 80029c8:	42a6      	cmp	r6, r4
 80029ca:	d109      	bne.n	80029e0 <__libc_init_array+0x24>
 80029cc:	f000 ff82 	bl	80038d4 <_init>
 80029d0:	2600      	movs	r6, #0
 80029d2:	4d0a      	ldr	r5, [pc, #40]	; (80029fc <__libc_init_array+0x40>)
 80029d4:	4c0a      	ldr	r4, [pc, #40]	; (8002a00 <__libc_init_array+0x44>)
 80029d6:	1b64      	subs	r4, r4, r5
 80029d8:	10a4      	asrs	r4, r4, #2
 80029da:	42a6      	cmp	r6, r4
 80029dc:	d105      	bne.n	80029ea <__libc_init_array+0x2e>
 80029de:	bd70      	pop	{r4, r5, r6, pc}
 80029e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e4:	4798      	blx	r3
 80029e6:	3601      	adds	r6, #1
 80029e8:	e7ee      	b.n	80029c8 <__libc_init_array+0xc>
 80029ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ee:	4798      	blx	r3
 80029f0:	3601      	adds	r6, #1
 80029f2:	e7f2      	b.n	80029da <__libc_init_array+0x1e>
 80029f4:	080039d0 	.word	0x080039d0
 80029f8:	080039d0 	.word	0x080039d0
 80029fc:	080039d0 	.word	0x080039d0
 8002a00:	080039d4 	.word	0x080039d4

08002a04 <memset>:
 8002a04:	4603      	mov	r3, r0
 8002a06:	4402      	add	r2, r0
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d100      	bne.n	8002a0e <memset+0xa>
 8002a0c:	4770      	bx	lr
 8002a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a12:	e7f9      	b.n	8002a08 <memset+0x4>

08002a14 <iprintf>:
 8002a14:	b40f      	push	{r0, r1, r2, r3}
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <iprintf+0x2c>)
 8002a18:	b513      	push	{r0, r1, r4, lr}
 8002a1a:	681c      	ldr	r4, [r3, #0]
 8002a1c:	b124      	cbz	r4, 8002a28 <iprintf+0x14>
 8002a1e:	69a3      	ldr	r3, [r4, #24]
 8002a20:	b913      	cbnz	r3, 8002a28 <iprintf+0x14>
 8002a22:	4620      	mov	r0, r4
 8002a24:	f000 f866 	bl	8002af4 <__sinit>
 8002a28:	ab05      	add	r3, sp, #20
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	9a04      	ldr	r2, [sp, #16]
 8002a2e:	68a1      	ldr	r1, [r4, #8]
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	f000 f981 	bl	8002d38 <_vfiprintf_r>
 8002a36:	b002      	add	sp, #8
 8002a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a3c:	b004      	add	sp, #16
 8002a3e:	4770      	bx	lr
 8002a40:	20000044 	.word	0x20000044

08002a44 <std>:
 8002a44:	2300      	movs	r3, #0
 8002a46:	b510      	push	{r4, lr}
 8002a48:	4604      	mov	r4, r0
 8002a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8002a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a52:	6083      	str	r3, [r0, #8]
 8002a54:	8181      	strh	r1, [r0, #12]
 8002a56:	6643      	str	r3, [r0, #100]	; 0x64
 8002a58:	81c2      	strh	r2, [r0, #14]
 8002a5a:	6183      	str	r3, [r0, #24]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	2208      	movs	r2, #8
 8002a60:	305c      	adds	r0, #92	; 0x5c
 8002a62:	f7ff ffcf 	bl	8002a04 <memset>
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <std+0x38>)
 8002a68:	6224      	str	r4, [r4, #32]
 8002a6a:	6263      	str	r3, [r4, #36]	; 0x24
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <std+0x3c>)
 8002a6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <std+0x40>)
 8002a72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <std+0x44>)
 8002a76:	6323      	str	r3, [r4, #48]	; 0x30
 8002a78:	bd10      	pop	{r4, pc}
 8002a7a:	bf00      	nop
 8002a7c:	080032e5 	.word	0x080032e5
 8002a80:	08003307 	.word	0x08003307
 8002a84:	0800333f 	.word	0x0800333f
 8002a88:	08003363 	.word	0x08003363

08002a8c <_cleanup_r>:
 8002a8c:	4901      	ldr	r1, [pc, #4]	; (8002a94 <_cleanup_r+0x8>)
 8002a8e:	f000 b8af 	b.w	8002bf0 <_fwalk_reent>
 8002a92:	bf00      	nop
 8002a94:	0800363d 	.word	0x0800363d

08002a98 <__sfmoreglue>:
 8002a98:	b570      	push	{r4, r5, r6, lr}
 8002a9a:	2568      	movs	r5, #104	; 0x68
 8002a9c:	1e4a      	subs	r2, r1, #1
 8002a9e:	4355      	muls	r5, r2
 8002aa0:	460e      	mov	r6, r1
 8002aa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002aa6:	f000 f8c5 	bl	8002c34 <_malloc_r>
 8002aaa:	4604      	mov	r4, r0
 8002aac:	b140      	cbz	r0, 8002ac0 <__sfmoreglue+0x28>
 8002aae:	2100      	movs	r1, #0
 8002ab0:	e9c0 1600 	strd	r1, r6, [r0]
 8002ab4:	300c      	adds	r0, #12
 8002ab6:	60a0      	str	r0, [r4, #8]
 8002ab8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002abc:	f7ff ffa2 	bl	8002a04 <memset>
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	bd70      	pop	{r4, r5, r6, pc}

08002ac4 <__sfp_lock_acquire>:
 8002ac4:	4801      	ldr	r0, [pc, #4]	; (8002acc <__sfp_lock_acquire+0x8>)
 8002ac6:	f000 b8b3 	b.w	8002c30 <__retarget_lock_acquire_recursive>
 8002aca:	bf00      	nop
 8002acc:	200001c4 	.word	0x200001c4

08002ad0 <__sfp_lock_release>:
 8002ad0:	4801      	ldr	r0, [pc, #4]	; (8002ad8 <__sfp_lock_release+0x8>)
 8002ad2:	f000 b8ae 	b.w	8002c32 <__retarget_lock_release_recursive>
 8002ad6:	bf00      	nop
 8002ad8:	200001c4 	.word	0x200001c4

08002adc <__sinit_lock_acquire>:
 8002adc:	4801      	ldr	r0, [pc, #4]	; (8002ae4 <__sinit_lock_acquire+0x8>)
 8002ade:	f000 b8a7 	b.w	8002c30 <__retarget_lock_acquire_recursive>
 8002ae2:	bf00      	nop
 8002ae4:	200001bf 	.word	0x200001bf

08002ae8 <__sinit_lock_release>:
 8002ae8:	4801      	ldr	r0, [pc, #4]	; (8002af0 <__sinit_lock_release+0x8>)
 8002aea:	f000 b8a2 	b.w	8002c32 <__retarget_lock_release_recursive>
 8002aee:	bf00      	nop
 8002af0:	200001bf 	.word	0x200001bf

08002af4 <__sinit>:
 8002af4:	b510      	push	{r4, lr}
 8002af6:	4604      	mov	r4, r0
 8002af8:	f7ff fff0 	bl	8002adc <__sinit_lock_acquire>
 8002afc:	69a3      	ldr	r3, [r4, #24]
 8002afe:	b11b      	cbz	r3, 8002b08 <__sinit+0x14>
 8002b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b04:	f7ff bff0 	b.w	8002ae8 <__sinit_lock_release>
 8002b08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b0c:	6523      	str	r3, [r4, #80]	; 0x50
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <__sinit+0x68>)
 8002b10:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <__sinit+0x6c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b16:	42a3      	cmp	r3, r4
 8002b18:	bf08      	it	eq
 8002b1a:	2301      	moveq	r3, #1
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	bf08      	it	eq
 8002b20:	61a3      	streq	r3, [r4, #24]
 8002b22:	f000 f81f 	bl	8002b64 <__sfp>
 8002b26:	6060      	str	r0, [r4, #4]
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f000 f81b 	bl	8002b64 <__sfp>
 8002b2e:	60a0      	str	r0, [r4, #8]
 8002b30:	4620      	mov	r0, r4
 8002b32:	f000 f817 	bl	8002b64 <__sfp>
 8002b36:	2200      	movs	r2, #0
 8002b38:	2104      	movs	r1, #4
 8002b3a:	60e0      	str	r0, [r4, #12]
 8002b3c:	6860      	ldr	r0, [r4, #4]
 8002b3e:	f7ff ff81 	bl	8002a44 <std>
 8002b42:	2201      	movs	r2, #1
 8002b44:	2109      	movs	r1, #9
 8002b46:	68a0      	ldr	r0, [r4, #8]
 8002b48:	f7ff ff7c 	bl	8002a44 <std>
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	2112      	movs	r1, #18
 8002b50:	68e0      	ldr	r0, [r4, #12]
 8002b52:	f7ff ff77 	bl	8002a44 <std>
 8002b56:	2301      	movs	r3, #1
 8002b58:	61a3      	str	r3, [r4, #24]
 8002b5a:	e7d1      	b.n	8002b00 <__sinit+0xc>
 8002b5c:	08003938 	.word	0x08003938
 8002b60:	08002a8d 	.word	0x08002a8d

08002b64 <__sfp>:
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b66:	4607      	mov	r7, r0
 8002b68:	f7ff ffac 	bl	8002ac4 <__sfp_lock_acquire>
 8002b6c:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <__sfp+0x84>)
 8002b6e:	681e      	ldr	r6, [r3, #0]
 8002b70:	69b3      	ldr	r3, [r6, #24]
 8002b72:	b913      	cbnz	r3, 8002b7a <__sfp+0x16>
 8002b74:	4630      	mov	r0, r6
 8002b76:	f7ff ffbd 	bl	8002af4 <__sinit>
 8002b7a:	3648      	adds	r6, #72	; 0x48
 8002b7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	d503      	bpl.n	8002b8c <__sfp+0x28>
 8002b84:	6833      	ldr	r3, [r6, #0]
 8002b86:	b30b      	cbz	r3, 8002bcc <__sfp+0x68>
 8002b88:	6836      	ldr	r6, [r6, #0]
 8002b8a:	e7f7      	b.n	8002b7c <__sfp+0x18>
 8002b8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b90:	b9d5      	cbnz	r5, 8002bc8 <__sfp+0x64>
 8002b92:	4b16      	ldr	r3, [pc, #88]	; (8002bec <__sfp+0x88>)
 8002b94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b98:	60e3      	str	r3, [r4, #12]
 8002b9a:	6665      	str	r5, [r4, #100]	; 0x64
 8002b9c:	f000 f847 	bl	8002c2e <__retarget_lock_init_recursive>
 8002ba0:	f7ff ff96 	bl	8002ad0 <__sfp_lock_release>
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002bac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002bb0:	6025      	str	r5, [r4, #0]
 8002bb2:	61a5      	str	r5, [r4, #24]
 8002bb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002bb8:	f7ff ff24 	bl	8002a04 <memset>
 8002bbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002bc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bc8:	3468      	adds	r4, #104	; 0x68
 8002bca:	e7d9      	b.n	8002b80 <__sfp+0x1c>
 8002bcc:	2104      	movs	r1, #4
 8002bce:	4638      	mov	r0, r7
 8002bd0:	f7ff ff62 	bl	8002a98 <__sfmoreglue>
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	6030      	str	r0, [r6, #0]
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	d1d5      	bne.n	8002b88 <__sfp+0x24>
 8002bdc:	f7ff ff78 	bl	8002ad0 <__sfp_lock_release>
 8002be0:	230c      	movs	r3, #12
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	e7ee      	b.n	8002bc4 <__sfp+0x60>
 8002be6:	bf00      	nop
 8002be8:	08003938 	.word	0x08003938
 8002bec:	ffff0001 	.word	0xffff0001

08002bf0 <_fwalk_reent>:
 8002bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bf4:	4606      	mov	r6, r0
 8002bf6:	4688      	mov	r8, r1
 8002bf8:	2700      	movs	r7, #0
 8002bfa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002bfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c02:	f1b9 0901 	subs.w	r9, r9, #1
 8002c06:	d505      	bpl.n	8002c14 <_fwalk_reent+0x24>
 8002c08:	6824      	ldr	r4, [r4, #0]
 8002c0a:	2c00      	cmp	r4, #0
 8002c0c:	d1f7      	bne.n	8002bfe <_fwalk_reent+0xe>
 8002c0e:	4638      	mov	r0, r7
 8002c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c14:	89ab      	ldrh	r3, [r5, #12]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d907      	bls.n	8002c2a <_fwalk_reent+0x3a>
 8002c1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	d003      	beq.n	8002c2a <_fwalk_reent+0x3a>
 8002c22:	4629      	mov	r1, r5
 8002c24:	4630      	mov	r0, r6
 8002c26:	47c0      	blx	r8
 8002c28:	4307      	orrs	r7, r0
 8002c2a:	3568      	adds	r5, #104	; 0x68
 8002c2c:	e7e9      	b.n	8002c02 <_fwalk_reent+0x12>

08002c2e <__retarget_lock_init_recursive>:
 8002c2e:	4770      	bx	lr

08002c30 <__retarget_lock_acquire_recursive>:
 8002c30:	4770      	bx	lr

08002c32 <__retarget_lock_release_recursive>:
 8002c32:	4770      	bx	lr

08002c34 <_malloc_r>:
 8002c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c36:	1ccd      	adds	r5, r1, #3
 8002c38:	f025 0503 	bic.w	r5, r5, #3
 8002c3c:	3508      	adds	r5, #8
 8002c3e:	2d0c      	cmp	r5, #12
 8002c40:	bf38      	it	cc
 8002c42:	250c      	movcc	r5, #12
 8002c44:	2d00      	cmp	r5, #0
 8002c46:	4606      	mov	r6, r0
 8002c48:	db01      	blt.n	8002c4e <_malloc_r+0x1a>
 8002c4a:	42a9      	cmp	r1, r5
 8002c4c:	d903      	bls.n	8002c56 <_malloc_r+0x22>
 8002c4e:	230c      	movs	r3, #12
 8002c50:	6033      	str	r3, [r6, #0]
 8002c52:	2000      	movs	r0, #0
 8002c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c56:	f000 fdb1 	bl	80037bc <__malloc_lock>
 8002c5a:	4921      	ldr	r1, [pc, #132]	; (8002ce0 <_malloc_r+0xac>)
 8002c5c:	680a      	ldr	r2, [r1, #0]
 8002c5e:	4614      	mov	r4, r2
 8002c60:	b99c      	cbnz	r4, 8002c8a <_malloc_r+0x56>
 8002c62:	4f20      	ldr	r7, [pc, #128]	; (8002ce4 <_malloc_r+0xb0>)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b923      	cbnz	r3, 8002c72 <_malloc_r+0x3e>
 8002c68:	4621      	mov	r1, r4
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	f000 fb2a 	bl	80032c4 <_sbrk_r>
 8002c70:	6038      	str	r0, [r7, #0]
 8002c72:	4629      	mov	r1, r5
 8002c74:	4630      	mov	r0, r6
 8002c76:	f000 fb25 	bl	80032c4 <_sbrk_r>
 8002c7a:	1c43      	adds	r3, r0, #1
 8002c7c:	d123      	bne.n	8002cc6 <_malloc_r+0x92>
 8002c7e:	230c      	movs	r3, #12
 8002c80:	4630      	mov	r0, r6
 8002c82:	6033      	str	r3, [r6, #0]
 8002c84:	f000 fda0 	bl	80037c8 <__malloc_unlock>
 8002c88:	e7e3      	b.n	8002c52 <_malloc_r+0x1e>
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	1b5b      	subs	r3, r3, r5
 8002c8e:	d417      	bmi.n	8002cc0 <_malloc_r+0x8c>
 8002c90:	2b0b      	cmp	r3, #11
 8002c92:	d903      	bls.n	8002c9c <_malloc_r+0x68>
 8002c94:	6023      	str	r3, [r4, #0]
 8002c96:	441c      	add	r4, r3
 8002c98:	6025      	str	r5, [r4, #0]
 8002c9a:	e004      	b.n	8002ca6 <_malloc_r+0x72>
 8002c9c:	6863      	ldr	r3, [r4, #4]
 8002c9e:	42a2      	cmp	r2, r4
 8002ca0:	bf0c      	ite	eq
 8002ca2:	600b      	streq	r3, [r1, #0]
 8002ca4:	6053      	strne	r3, [r2, #4]
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	f000 fd8e 	bl	80037c8 <__malloc_unlock>
 8002cac:	f104 000b 	add.w	r0, r4, #11
 8002cb0:	1d23      	adds	r3, r4, #4
 8002cb2:	f020 0007 	bic.w	r0, r0, #7
 8002cb6:	1ac2      	subs	r2, r0, r3
 8002cb8:	d0cc      	beq.n	8002c54 <_malloc_r+0x20>
 8002cba:	1a1b      	subs	r3, r3, r0
 8002cbc:	50a3      	str	r3, [r4, r2]
 8002cbe:	e7c9      	b.n	8002c54 <_malloc_r+0x20>
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	6864      	ldr	r4, [r4, #4]
 8002cc4:	e7cc      	b.n	8002c60 <_malloc_r+0x2c>
 8002cc6:	1cc4      	adds	r4, r0, #3
 8002cc8:	f024 0403 	bic.w	r4, r4, #3
 8002ccc:	42a0      	cmp	r0, r4
 8002cce:	d0e3      	beq.n	8002c98 <_malloc_r+0x64>
 8002cd0:	1a21      	subs	r1, r4, r0
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	f000 faf6 	bl	80032c4 <_sbrk_r>
 8002cd8:	3001      	adds	r0, #1
 8002cda:	d1dd      	bne.n	8002c98 <_malloc_r+0x64>
 8002cdc:	e7cf      	b.n	8002c7e <_malloc_r+0x4a>
 8002cde:	bf00      	nop
 8002ce0:	20000124 	.word	0x20000124
 8002ce4:	20000128 	.word	0x20000128

08002ce8 <__sfputc_r>:
 8002ce8:	6893      	ldr	r3, [r2, #8]
 8002cea:	b410      	push	{r4}
 8002cec:	3b01      	subs	r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	6093      	str	r3, [r2, #8]
 8002cf2:	da07      	bge.n	8002d04 <__sfputc_r+0x1c>
 8002cf4:	6994      	ldr	r4, [r2, #24]
 8002cf6:	42a3      	cmp	r3, r4
 8002cf8:	db01      	blt.n	8002cfe <__sfputc_r+0x16>
 8002cfa:	290a      	cmp	r1, #10
 8002cfc:	d102      	bne.n	8002d04 <__sfputc_r+0x1c>
 8002cfe:	bc10      	pop	{r4}
 8002d00:	f000 bb34 	b.w	800336c <__swbuf_r>
 8002d04:	6813      	ldr	r3, [r2, #0]
 8002d06:	1c58      	adds	r0, r3, #1
 8002d08:	6010      	str	r0, [r2, #0]
 8002d0a:	7019      	strb	r1, [r3, #0]
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	bc10      	pop	{r4}
 8002d10:	4770      	bx	lr

08002d12 <__sfputs_r>:
 8002d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d14:	4606      	mov	r6, r0
 8002d16:	460f      	mov	r7, r1
 8002d18:	4614      	mov	r4, r2
 8002d1a:	18d5      	adds	r5, r2, r3
 8002d1c:	42ac      	cmp	r4, r5
 8002d1e:	d101      	bne.n	8002d24 <__sfputs_r+0x12>
 8002d20:	2000      	movs	r0, #0
 8002d22:	e007      	b.n	8002d34 <__sfputs_r+0x22>
 8002d24:	463a      	mov	r2, r7
 8002d26:	4630      	mov	r0, r6
 8002d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d2c:	f7ff ffdc 	bl	8002ce8 <__sfputc_r>
 8002d30:	1c43      	adds	r3, r0, #1
 8002d32:	d1f3      	bne.n	8002d1c <__sfputs_r+0xa>
 8002d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d38 <_vfiprintf_r>:
 8002d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d3c:	460d      	mov	r5, r1
 8002d3e:	4614      	mov	r4, r2
 8002d40:	4698      	mov	r8, r3
 8002d42:	4606      	mov	r6, r0
 8002d44:	b09d      	sub	sp, #116	; 0x74
 8002d46:	b118      	cbz	r0, 8002d50 <_vfiprintf_r+0x18>
 8002d48:	6983      	ldr	r3, [r0, #24]
 8002d4a:	b90b      	cbnz	r3, 8002d50 <_vfiprintf_r+0x18>
 8002d4c:	f7ff fed2 	bl	8002af4 <__sinit>
 8002d50:	4b89      	ldr	r3, [pc, #548]	; (8002f78 <_vfiprintf_r+0x240>)
 8002d52:	429d      	cmp	r5, r3
 8002d54:	d11b      	bne.n	8002d8e <_vfiprintf_r+0x56>
 8002d56:	6875      	ldr	r5, [r6, #4]
 8002d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d5a:	07d9      	lsls	r1, r3, #31
 8002d5c:	d405      	bmi.n	8002d6a <_vfiprintf_r+0x32>
 8002d5e:	89ab      	ldrh	r3, [r5, #12]
 8002d60:	059a      	lsls	r2, r3, #22
 8002d62:	d402      	bmi.n	8002d6a <_vfiprintf_r+0x32>
 8002d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d66:	f7ff ff63 	bl	8002c30 <__retarget_lock_acquire_recursive>
 8002d6a:	89ab      	ldrh	r3, [r5, #12]
 8002d6c:	071b      	lsls	r3, r3, #28
 8002d6e:	d501      	bpl.n	8002d74 <_vfiprintf_r+0x3c>
 8002d70:	692b      	ldr	r3, [r5, #16]
 8002d72:	b9eb      	cbnz	r3, 8002db0 <_vfiprintf_r+0x78>
 8002d74:	4629      	mov	r1, r5
 8002d76:	4630      	mov	r0, r6
 8002d78:	f000 fb5c 	bl	8003434 <__swsetup_r>
 8002d7c:	b1c0      	cbz	r0, 8002db0 <_vfiprintf_r+0x78>
 8002d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d80:	07dc      	lsls	r4, r3, #31
 8002d82:	d50e      	bpl.n	8002da2 <_vfiprintf_r+0x6a>
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	b01d      	add	sp, #116	; 0x74
 8002d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d8e:	4b7b      	ldr	r3, [pc, #492]	; (8002f7c <_vfiprintf_r+0x244>)
 8002d90:	429d      	cmp	r5, r3
 8002d92:	d101      	bne.n	8002d98 <_vfiprintf_r+0x60>
 8002d94:	68b5      	ldr	r5, [r6, #8]
 8002d96:	e7df      	b.n	8002d58 <_vfiprintf_r+0x20>
 8002d98:	4b79      	ldr	r3, [pc, #484]	; (8002f80 <_vfiprintf_r+0x248>)
 8002d9a:	429d      	cmp	r5, r3
 8002d9c:	bf08      	it	eq
 8002d9e:	68f5      	ldreq	r5, [r6, #12]
 8002da0:	e7da      	b.n	8002d58 <_vfiprintf_r+0x20>
 8002da2:	89ab      	ldrh	r3, [r5, #12]
 8002da4:	0598      	lsls	r0, r3, #22
 8002da6:	d4ed      	bmi.n	8002d84 <_vfiprintf_r+0x4c>
 8002da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002daa:	f7ff ff42 	bl	8002c32 <__retarget_lock_release_recursive>
 8002dae:	e7e9      	b.n	8002d84 <_vfiprintf_r+0x4c>
 8002db0:	2300      	movs	r3, #0
 8002db2:	9309      	str	r3, [sp, #36]	; 0x24
 8002db4:	2320      	movs	r3, #32
 8002db6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002dba:	2330      	movs	r3, #48	; 0x30
 8002dbc:	f04f 0901 	mov.w	r9, #1
 8002dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dc4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002f84 <_vfiprintf_r+0x24c>
 8002dc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dcc:	4623      	mov	r3, r4
 8002dce:	469a      	mov	sl, r3
 8002dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dd4:	b10a      	cbz	r2, 8002dda <_vfiprintf_r+0xa2>
 8002dd6:	2a25      	cmp	r2, #37	; 0x25
 8002dd8:	d1f9      	bne.n	8002dce <_vfiprintf_r+0x96>
 8002dda:	ebba 0b04 	subs.w	fp, sl, r4
 8002dde:	d00b      	beq.n	8002df8 <_vfiprintf_r+0xc0>
 8002de0:	465b      	mov	r3, fp
 8002de2:	4622      	mov	r2, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	4630      	mov	r0, r6
 8002de8:	f7ff ff93 	bl	8002d12 <__sfputs_r>
 8002dec:	3001      	adds	r0, #1
 8002dee:	f000 80aa 	beq.w	8002f46 <_vfiprintf_r+0x20e>
 8002df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002df4:	445a      	add	r2, fp
 8002df6:	9209      	str	r2, [sp, #36]	; 0x24
 8002df8:	f89a 3000 	ldrb.w	r3, [sl]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80a2 	beq.w	8002f46 <_vfiprintf_r+0x20e>
 8002e02:	2300      	movs	r3, #0
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295
 8002e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e0c:	f10a 0a01 	add.w	sl, sl, #1
 8002e10:	9304      	str	r3, [sp, #16]
 8002e12:	9307      	str	r3, [sp, #28]
 8002e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e18:	931a      	str	r3, [sp, #104]	; 0x68
 8002e1a:	4654      	mov	r4, sl
 8002e1c:	2205      	movs	r2, #5
 8002e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e22:	4858      	ldr	r0, [pc, #352]	; (8002f84 <_vfiprintf_r+0x24c>)
 8002e24:	f000 fcbc 	bl	80037a0 <memchr>
 8002e28:	9a04      	ldr	r2, [sp, #16]
 8002e2a:	b9d8      	cbnz	r0, 8002e64 <_vfiprintf_r+0x12c>
 8002e2c:	06d1      	lsls	r1, r2, #27
 8002e2e:	bf44      	itt	mi
 8002e30:	2320      	movmi	r3, #32
 8002e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e36:	0713      	lsls	r3, r2, #28
 8002e38:	bf44      	itt	mi
 8002e3a:	232b      	movmi	r3, #43	; 0x2b
 8002e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e40:	f89a 3000 	ldrb.w	r3, [sl]
 8002e44:	2b2a      	cmp	r3, #42	; 0x2a
 8002e46:	d015      	beq.n	8002e74 <_vfiprintf_r+0x13c>
 8002e48:	4654      	mov	r4, sl
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f04f 0c0a 	mov.w	ip, #10
 8002e50:	9a07      	ldr	r2, [sp, #28]
 8002e52:	4621      	mov	r1, r4
 8002e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e58:	3b30      	subs	r3, #48	; 0x30
 8002e5a:	2b09      	cmp	r3, #9
 8002e5c:	d94e      	bls.n	8002efc <_vfiprintf_r+0x1c4>
 8002e5e:	b1b0      	cbz	r0, 8002e8e <_vfiprintf_r+0x156>
 8002e60:	9207      	str	r2, [sp, #28]
 8002e62:	e014      	b.n	8002e8e <_vfiprintf_r+0x156>
 8002e64:	eba0 0308 	sub.w	r3, r0, r8
 8002e68:	fa09 f303 	lsl.w	r3, r9, r3
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	46a2      	mov	sl, r4
 8002e70:	9304      	str	r3, [sp, #16]
 8002e72:	e7d2      	b.n	8002e1a <_vfiprintf_r+0xe2>
 8002e74:	9b03      	ldr	r3, [sp, #12]
 8002e76:	1d19      	adds	r1, r3, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	9103      	str	r1, [sp, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bfbb      	ittet	lt
 8002e80:	425b      	neglt	r3, r3
 8002e82:	f042 0202 	orrlt.w	r2, r2, #2
 8002e86:	9307      	strge	r3, [sp, #28]
 8002e88:	9307      	strlt	r3, [sp, #28]
 8002e8a:	bfb8      	it	lt
 8002e8c:	9204      	strlt	r2, [sp, #16]
 8002e8e:	7823      	ldrb	r3, [r4, #0]
 8002e90:	2b2e      	cmp	r3, #46	; 0x2e
 8002e92:	d10c      	bne.n	8002eae <_vfiprintf_r+0x176>
 8002e94:	7863      	ldrb	r3, [r4, #1]
 8002e96:	2b2a      	cmp	r3, #42	; 0x2a
 8002e98:	d135      	bne.n	8002f06 <_vfiprintf_r+0x1ce>
 8002e9a:	9b03      	ldr	r3, [sp, #12]
 8002e9c:	3402      	adds	r4, #2
 8002e9e:	1d1a      	adds	r2, r3, #4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	9203      	str	r2, [sp, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bfb8      	it	lt
 8002ea8:	f04f 33ff 	movlt.w	r3, #4294967295
 8002eac:	9305      	str	r3, [sp, #20]
 8002eae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002f94 <_vfiprintf_r+0x25c>
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	4650      	mov	r0, sl
 8002eb6:	7821      	ldrb	r1, [r4, #0]
 8002eb8:	f000 fc72 	bl	80037a0 <memchr>
 8002ebc:	b140      	cbz	r0, 8002ed0 <_vfiprintf_r+0x198>
 8002ebe:	2340      	movs	r3, #64	; 0x40
 8002ec0:	eba0 000a 	sub.w	r0, r0, sl
 8002ec4:	fa03 f000 	lsl.w	r0, r3, r0
 8002ec8:	9b04      	ldr	r3, [sp, #16]
 8002eca:	3401      	adds	r4, #1
 8002ecc:	4303      	orrs	r3, r0
 8002ece:	9304      	str	r3, [sp, #16]
 8002ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ed4:	2206      	movs	r2, #6
 8002ed6:	482c      	ldr	r0, [pc, #176]	; (8002f88 <_vfiprintf_r+0x250>)
 8002ed8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002edc:	f000 fc60 	bl	80037a0 <memchr>
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	d03f      	beq.n	8002f64 <_vfiprintf_r+0x22c>
 8002ee4:	4b29      	ldr	r3, [pc, #164]	; (8002f8c <_vfiprintf_r+0x254>)
 8002ee6:	bb1b      	cbnz	r3, 8002f30 <_vfiprintf_r+0x1f8>
 8002ee8:	9b03      	ldr	r3, [sp, #12]
 8002eea:	3307      	adds	r3, #7
 8002eec:	f023 0307 	bic.w	r3, r3, #7
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	9303      	str	r3, [sp, #12]
 8002ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ef6:	443b      	add	r3, r7
 8002ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8002efa:	e767      	b.n	8002dcc <_vfiprintf_r+0x94>
 8002efc:	460c      	mov	r4, r1
 8002efe:	2001      	movs	r0, #1
 8002f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f04:	e7a5      	b.n	8002e52 <_vfiprintf_r+0x11a>
 8002f06:	2300      	movs	r3, #0
 8002f08:	f04f 0c0a 	mov.w	ip, #10
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	3401      	adds	r4, #1
 8002f10:	9305      	str	r3, [sp, #20]
 8002f12:	4620      	mov	r0, r4
 8002f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f18:	3a30      	subs	r2, #48	; 0x30
 8002f1a:	2a09      	cmp	r2, #9
 8002f1c:	d903      	bls.n	8002f26 <_vfiprintf_r+0x1ee>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0c5      	beq.n	8002eae <_vfiprintf_r+0x176>
 8002f22:	9105      	str	r1, [sp, #20]
 8002f24:	e7c3      	b.n	8002eae <_vfiprintf_r+0x176>
 8002f26:	4604      	mov	r4, r0
 8002f28:	2301      	movs	r3, #1
 8002f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f2e:	e7f0      	b.n	8002f12 <_vfiprintf_r+0x1da>
 8002f30:	ab03      	add	r3, sp, #12
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	462a      	mov	r2, r5
 8002f36:	4630      	mov	r0, r6
 8002f38:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <_vfiprintf_r+0x258>)
 8002f3a:	a904      	add	r1, sp, #16
 8002f3c:	f3af 8000 	nop.w
 8002f40:	4607      	mov	r7, r0
 8002f42:	1c78      	adds	r0, r7, #1
 8002f44:	d1d6      	bne.n	8002ef4 <_vfiprintf_r+0x1bc>
 8002f46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f48:	07d9      	lsls	r1, r3, #31
 8002f4a:	d405      	bmi.n	8002f58 <_vfiprintf_r+0x220>
 8002f4c:	89ab      	ldrh	r3, [r5, #12]
 8002f4e:	059a      	lsls	r2, r3, #22
 8002f50:	d402      	bmi.n	8002f58 <_vfiprintf_r+0x220>
 8002f52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f54:	f7ff fe6d 	bl	8002c32 <__retarget_lock_release_recursive>
 8002f58:	89ab      	ldrh	r3, [r5, #12]
 8002f5a:	065b      	lsls	r3, r3, #25
 8002f5c:	f53f af12 	bmi.w	8002d84 <_vfiprintf_r+0x4c>
 8002f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f62:	e711      	b.n	8002d88 <_vfiprintf_r+0x50>
 8002f64:	ab03      	add	r3, sp, #12
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	462a      	mov	r2, r5
 8002f6a:	4630      	mov	r0, r6
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <_vfiprintf_r+0x258>)
 8002f6e:	a904      	add	r1, sp, #16
 8002f70:	f000 f882 	bl	8003078 <_printf_i>
 8002f74:	e7e4      	b.n	8002f40 <_vfiprintf_r+0x208>
 8002f76:	bf00      	nop
 8002f78:	0800395c 	.word	0x0800395c
 8002f7c:	0800397c 	.word	0x0800397c
 8002f80:	0800393c 	.word	0x0800393c
 8002f84:	0800399c 	.word	0x0800399c
 8002f88:	080039a6 	.word	0x080039a6
 8002f8c:	00000000 	.word	0x00000000
 8002f90:	08002d13 	.word	0x08002d13
 8002f94:	080039a2 	.word	0x080039a2

08002f98 <_printf_common>:
 8002f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f9c:	4616      	mov	r6, r2
 8002f9e:	4699      	mov	r9, r3
 8002fa0:	688a      	ldr	r2, [r1, #8]
 8002fa2:	690b      	ldr	r3, [r1, #16]
 8002fa4:	4607      	mov	r7, r0
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	bfb8      	it	lt
 8002faa:	4613      	movlt	r3, r2
 8002fac:	6033      	str	r3, [r6, #0]
 8002fae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fb2:	460c      	mov	r4, r1
 8002fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fb8:	b10a      	cbz	r2, 8002fbe <_printf_common+0x26>
 8002fba:	3301      	adds	r3, #1
 8002fbc:	6033      	str	r3, [r6, #0]
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	0699      	lsls	r1, r3, #26
 8002fc2:	bf42      	ittt	mi
 8002fc4:	6833      	ldrmi	r3, [r6, #0]
 8002fc6:	3302      	addmi	r3, #2
 8002fc8:	6033      	strmi	r3, [r6, #0]
 8002fca:	6825      	ldr	r5, [r4, #0]
 8002fcc:	f015 0506 	ands.w	r5, r5, #6
 8002fd0:	d106      	bne.n	8002fe0 <_printf_common+0x48>
 8002fd2:	f104 0a19 	add.w	sl, r4, #25
 8002fd6:	68e3      	ldr	r3, [r4, #12]
 8002fd8:	6832      	ldr	r2, [r6, #0]
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	42ab      	cmp	r3, r5
 8002fde:	dc28      	bgt.n	8003032 <_printf_common+0x9a>
 8002fe0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fe4:	1e13      	subs	r3, r2, #0
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	bf18      	it	ne
 8002fea:	2301      	movne	r3, #1
 8002fec:	0692      	lsls	r2, r2, #26
 8002fee:	d42d      	bmi.n	800304c <_printf_common+0xb4>
 8002ff0:	4649      	mov	r1, r9
 8002ff2:	4638      	mov	r0, r7
 8002ff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ff8:	47c0      	blx	r8
 8002ffa:	3001      	adds	r0, #1
 8002ffc:	d020      	beq.n	8003040 <_printf_common+0xa8>
 8002ffe:	6823      	ldr	r3, [r4, #0]
 8003000:	68e5      	ldr	r5, [r4, #12]
 8003002:	f003 0306 	and.w	r3, r3, #6
 8003006:	2b04      	cmp	r3, #4
 8003008:	bf18      	it	ne
 800300a:	2500      	movne	r5, #0
 800300c:	6832      	ldr	r2, [r6, #0]
 800300e:	f04f 0600 	mov.w	r6, #0
 8003012:	68a3      	ldr	r3, [r4, #8]
 8003014:	bf08      	it	eq
 8003016:	1aad      	subeq	r5, r5, r2
 8003018:	6922      	ldr	r2, [r4, #16]
 800301a:	bf08      	it	eq
 800301c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003020:	4293      	cmp	r3, r2
 8003022:	bfc4      	itt	gt
 8003024:	1a9b      	subgt	r3, r3, r2
 8003026:	18ed      	addgt	r5, r5, r3
 8003028:	341a      	adds	r4, #26
 800302a:	42b5      	cmp	r5, r6
 800302c:	d11a      	bne.n	8003064 <_printf_common+0xcc>
 800302e:	2000      	movs	r0, #0
 8003030:	e008      	b.n	8003044 <_printf_common+0xac>
 8003032:	2301      	movs	r3, #1
 8003034:	4652      	mov	r2, sl
 8003036:	4649      	mov	r1, r9
 8003038:	4638      	mov	r0, r7
 800303a:	47c0      	blx	r8
 800303c:	3001      	adds	r0, #1
 800303e:	d103      	bne.n	8003048 <_printf_common+0xb0>
 8003040:	f04f 30ff 	mov.w	r0, #4294967295
 8003044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003048:	3501      	adds	r5, #1
 800304a:	e7c4      	b.n	8002fd6 <_printf_common+0x3e>
 800304c:	2030      	movs	r0, #48	; 0x30
 800304e:	18e1      	adds	r1, r4, r3
 8003050:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800305a:	4422      	add	r2, r4
 800305c:	3302      	adds	r3, #2
 800305e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003062:	e7c5      	b.n	8002ff0 <_printf_common+0x58>
 8003064:	2301      	movs	r3, #1
 8003066:	4622      	mov	r2, r4
 8003068:	4649      	mov	r1, r9
 800306a:	4638      	mov	r0, r7
 800306c:	47c0      	blx	r8
 800306e:	3001      	adds	r0, #1
 8003070:	d0e6      	beq.n	8003040 <_printf_common+0xa8>
 8003072:	3601      	adds	r6, #1
 8003074:	e7d9      	b.n	800302a <_printf_common+0x92>
	...

08003078 <_printf_i>:
 8003078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800307c:	460c      	mov	r4, r1
 800307e:	7e27      	ldrb	r7, [r4, #24]
 8003080:	4691      	mov	r9, r2
 8003082:	2f78      	cmp	r7, #120	; 0x78
 8003084:	4680      	mov	r8, r0
 8003086:	469a      	mov	sl, r3
 8003088:	990c      	ldr	r1, [sp, #48]	; 0x30
 800308a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800308e:	d807      	bhi.n	80030a0 <_printf_i+0x28>
 8003090:	2f62      	cmp	r7, #98	; 0x62
 8003092:	d80a      	bhi.n	80030aa <_printf_i+0x32>
 8003094:	2f00      	cmp	r7, #0
 8003096:	f000 80d9 	beq.w	800324c <_printf_i+0x1d4>
 800309a:	2f58      	cmp	r7, #88	; 0x58
 800309c:	f000 80a4 	beq.w	80031e8 <_printf_i+0x170>
 80030a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80030a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030a8:	e03a      	b.n	8003120 <_printf_i+0xa8>
 80030aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030ae:	2b15      	cmp	r3, #21
 80030b0:	d8f6      	bhi.n	80030a0 <_printf_i+0x28>
 80030b2:	a001      	add	r0, pc, #4	; (adr r0, 80030b8 <_printf_i+0x40>)
 80030b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80030b8:	08003111 	.word	0x08003111
 80030bc:	08003125 	.word	0x08003125
 80030c0:	080030a1 	.word	0x080030a1
 80030c4:	080030a1 	.word	0x080030a1
 80030c8:	080030a1 	.word	0x080030a1
 80030cc:	080030a1 	.word	0x080030a1
 80030d0:	08003125 	.word	0x08003125
 80030d4:	080030a1 	.word	0x080030a1
 80030d8:	080030a1 	.word	0x080030a1
 80030dc:	080030a1 	.word	0x080030a1
 80030e0:	080030a1 	.word	0x080030a1
 80030e4:	08003233 	.word	0x08003233
 80030e8:	08003155 	.word	0x08003155
 80030ec:	08003215 	.word	0x08003215
 80030f0:	080030a1 	.word	0x080030a1
 80030f4:	080030a1 	.word	0x080030a1
 80030f8:	08003255 	.word	0x08003255
 80030fc:	080030a1 	.word	0x080030a1
 8003100:	08003155 	.word	0x08003155
 8003104:	080030a1 	.word	0x080030a1
 8003108:	080030a1 	.word	0x080030a1
 800310c:	0800321d 	.word	0x0800321d
 8003110:	680b      	ldr	r3, [r1, #0]
 8003112:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003116:	1d1a      	adds	r2, r3, #4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	600a      	str	r2, [r1, #0]
 800311c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003120:	2301      	movs	r3, #1
 8003122:	e0a4      	b.n	800326e <_printf_i+0x1f6>
 8003124:	6825      	ldr	r5, [r4, #0]
 8003126:	6808      	ldr	r0, [r1, #0]
 8003128:	062e      	lsls	r6, r5, #24
 800312a:	f100 0304 	add.w	r3, r0, #4
 800312e:	d50a      	bpl.n	8003146 <_printf_i+0xce>
 8003130:	6805      	ldr	r5, [r0, #0]
 8003132:	600b      	str	r3, [r1, #0]
 8003134:	2d00      	cmp	r5, #0
 8003136:	da03      	bge.n	8003140 <_printf_i+0xc8>
 8003138:	232d      	movs	r3, #45	; 0x2d
 800313a:	426d      	negs	r5, r5
 800313c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003140:	230a      	movs	r3, #10
 8003142:	485e      	ldr	r0, [pc, #376]	; (80032bc <_printf_i+0x244>)
 8003144:	e019      	b.n	800317a <_printf_i+0x102>
 8003146:	f015 0f40 	tst.w	r5, #64	; 0x40
 800314a:	6805      	ldr	r5, [r0, #0]
 800314c:	600b      	str	r3, [r1, #0]
 800314e:	bf18      	it	ne
 8003150:	b22d      	sxthne	r5, r5
 8003152:	e7ef      	b.n	8003134 <_printf_i+0xbc>
 8003154:	680b      	ldr	r3, [r1, #0]
 8003156:	6825      	ldr	r5, [r4, #0]
 8003158:	1d18      	adds	r0, r3, #4
 800315a:	6008      	str	r0, [r1, #0]
 800315c:	0628      	lsls	r0, r5, #24
 800315e:	d501      	bpl.n	8003164 <_printf_i+0xec>
 8003160:	681d      	ldr	r5, [r3, #0]
 8003162:	e002      	b.n	800316a <_printf_i+0xf2>
 8003164:	0669      	lsls	r1, r5, #25
 8003166:	d5fb      	bpl.n	8003160 <_printf_i+0xe8>
 8003168:	881d      	ldrh	r5, [r3, #0]
 800316a:	2f6f      	cmp	r7, #111	; 0x6f
 800316c:	bf0c      	ite	eq
 800316e:	2308      	moveq	r3, #8
 8003170:	230a      	movne	r3, #10
 8003172:	4852      	ldr	r0, [pc, #328]	; (80032bc <_printf_i+0x244>)
 8003174:	2100      	movs	r1, #0
 8003176:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800317a:	6866      	ldr	r6, [r4, #4]
 800317c:	2e00      	cmp	r6, #0
 800317e:	bfa8      	it	ge
 8003180:	6821      	ldrge	r1, [r4, #0]
 8003182:	60a6      	str	r6, [r4, #8]
 8003184:	bfa4      	itt	ge
 8003186:	f021 0104 	bicge.w	r1, r1, #4
 800318a:	6021      	strge	r1, [r4, #0]
 800318c:	b90d      	cbnz	r5, 8003192 <_printf_i+0x11a>
 800318e:	2e00      	cmp	r6, #0
 8003190:	d04d      	beq.n	800322e <_printf_i+0x1b6>
 8003192:	4616      	mov	r6, r2
 8003194:	fbb5 f1f3 	udiv	r1, r5, r3
 8003198:	fb03 5711 	mls	r7, r3, r1, r5
 800319c:	5dc7      	ldrb	r7, [r0, r7]
 800319e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031a2:	462f      	mov	r7, r5
 80031a4:	42bb      	cmp	r3, r7
 80031a6:	460d      	mov	r5, r1
 80031a8:	d9f4      	bls.n	8003194 <_printf_i+0x11c>
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d10b      	bne.n	80031c6 <_printf_i+0x14e>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	07df      	lsls	r7, r3, #31
 80031b2:	d508      	bpl.n	80031c6 <_printf_i+0x14e>
 80031b4:	6923      	ldr	r3, [r4, #16]
 80031b6:	6861      	ldr	r1, [r4, #4]
 80031b8:	4299      	cmp	r1, r3
 80031ba:	bfde      	ittt	le
 80031bc:	2330      	movle	r3, #48	; 0x30
 80031be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031c6:	1b92      	subs	r2, r2, r6
 80031c8:	6122      	str	r2, [r4, #16]
 80031ca:	464b      	mov	r3, r9
 80031cc:	4621      	mov	r1, r4
 80031ce:	4640      	mov	r0, r8
 80031d0:	f8cd a000 	str.w	sl, [sp]
 80031d4:	aa03      	add	r2, sp, #12
 80031d6:	f7ff fedf 	bl	8002f98 <_printf_common>
 80031da:	3001      	adds	r0, #1
 80031dc:	d14c      	bne.n	8003278 <_printf_i+0x200>
 80031de:	f04f 30ff 	mov.w	r0, #4294967295
 80031e2:	b004      	add	sp, #16
 80031e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031e8:	4834      	ldr	r0, [pc, #208]	; (80032bc <_printf_i+0x244>)
 80031ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031ee:	680e      	ldr	r6, [r1, #0]
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80031f6:	061f      	lsls	r7, r3, #24
 80031f8:	600e      	str	r6, [r1, #0]
 80031fa:	d514      	bpl.n	8003226 <_printf_i+0x1ae>
 80031fc:	07d9      	lsls	r1, r3, #31
 80031fe:	bf44      	itt	mi
 8003200:	f043 0320 	orrmi.w	r3, r3, #32
 8003204:	6023      	strmi	r3, [r4, #0]
 8003206:	b91d      	cbnz	r5, 8003210 <_printf_i+0x198>
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	f023 0320 	bic.w	r3, r3, #32
 800320e:	6023      	str	r3, [r4, #0]
 8003210:	2310      	movs	r3, #16
 8003212:	e7af      	b.n	8003174 <_printf_i+0xfc>
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	f043 0320 	orr.w	r3, r3, #32
 800321a:	6023      	str	r3, [r4, #0]
 800321c:	2378      	movs	r3, #120	; 0x78
 800321e:	4828      	ldr	r0, [pc, #160]	; (80032c0 <_printf_i+0x248>)
 8003220:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003224:	e7e3      	b.n	80031ee <_printf_i+0x176>
 8003226:	065e      	lsls	r6, r3, #25
 8003228:	bf48      	it	mi
 800322a:	b2ad      	uxthmi	r5, r5
 800322c:	e7e6      	b.n	80031fc <_printf_i+0x184>
 800322e:	4616      	mov	r6, r2
 8003230:	e7bb      	b.n	80031aa <_printf_i+0x132>
 8003232:	680b      	ldr	r3, [r1, #0]
 8003234:	6826      	ldr	r6, [r4, #0]
 8003236:	1d1d      	adds	r5, r3, #4
 8003238:	6960      	ldr	r0, [r4, #20]
 800323a:	600d      	str	r5, [r1, #0]
 800323c:	0635      	lsls	r5, r6, #24
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	d501      	bpl.n	8003246 <_printf_i+0x1ce>
 8003242:	6018      	str	r0, [r3, #0]
 8003244:	e002      	b.n	800324c <_printf_i+0x1d4>
 8003246:	0671      	lsls	r1, r6, #25
 8003248:	d5fb      	bpl.n	8003242 <_printf_i+0x1ca>
 800324a:	8018      	strh	r0, [r3, #0]
 800324c:	2300      	movs	r3, #0
 800324e:	4616      	mov	r6, r2
 8003250:	6123      	str	r3, [r4, #16]
 8003252:	e7ba      	b.n	80031ca <_printf_i+0x152>
 8003254:	680b      	ldr	r3, [r1, #0]
 8003256:	1d1a      	adds	r2, r3, #4
 8003258:	600a      	str	r2, [r1, #0]
 800325a:	681e      	ldr	r6, [r3, #0]
 800325c:	2100      	movs	r1, #0
 800325e:	4630      	mov	r0, r6
 8003260:	6862      	ldr	r2, [r4, #4]
 8003262:	f000 fa9d 	bl	80037a0 <memchr>
 8003266:	b108      	cbz	r0, 800326c <_printf_i+0x1f4>
 8003268:	1b80      	subs	r0, r0, r6
 800326a:	6060      	str	r0, [r4, #4]
 800326c:	6863      	ldr	r3, [r4, #4]
 800326e:	6123      	str	r3, [r4, #16]
 8003270:	2300      	movs	r3, #0
 8003272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003276:	e7a8      	b.n	80031ca <_printf_i+0x152>
 8003278:	4632      	mov	r2, r6
 800327a:	4649      	mov	r1, r9
 800327c:	4640      	mov	r0, r8
 800327e:	6923      	ldr	r3, [r4, #16]
 8003280:	47d0      	blx	sl
 8003282:	3001      	adds	r0, #1
 8003284:	d0ab      	beq.n	80031de <_printf_i+0x166>
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	079b      	lsls	r3, r3, #30
 800328a:	d413      	bmi.n	80032b4 <_printf_i+0x23c>
 800328c:	68e0      	ldr	r0, [r4, #12]
 800328e:	9b03      	ldr	r3, [sp, #12]
 8003290:	4298      	cmp	r0, r3
 8003292:	bfb8      	it	lt
 8003294:	4618      	movlt	r0, r3
 8003296:	e7a4      	b.n	80031e2 <_printf_i+0x16a>
 8003298:	2301      	movs	r3, #1
 800329a:	4632      	mov	r2, r6
 800329c:	4649      	mov	r1, r9
 800329e:	4640      	mov	r0, r8
 80032a0:	47d0      	blx	sl
 80032a2:	3001      	adds	r0, #1
 80032a4:	d09b      	beq.n	80031de <_printf_i+0x166>
 80032a6:	3501      	adds	r5, #1
 80032a8:	68e3      	ldr	r3, [r4, #12]
 80032aa:	9903      	ldr	r1, [sp, #12]
 80032ac:	1a5b      	subs	r3, r3, r1
 80032ae:	42ab      	cmp	r3, r5
 80032b0:	dcf2      	bgt.n	8003298 <_printf_i+0x220>
 80032b2:	e7eb      	b.n	800328c <_printf_i+0x214>
 80032b4:	2500      	movs	r5, #0
 80032b6:	f104 0619 	add.w	r6, r4, #25
 80032ba:	e7f5      	b.n	80032a8 <_printf_i+0x230>
 80032bc:	080039ad 	.word	0x080039ad
 80032c0:	080039be 	.word	0x080039be

080032c4 <_sbrk_r>:
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	2300      	movs	r3, #0
 80032c8:	4d05      	ldr	r5, [pc, #20]	; (80032e0 <_sbrk_r+0x1c>)
 80032ca:	4604      	mov	r4, r0
 80032cc:	4608      	mov	r0, r1
 80032ce:	602b      	str	r3, [r5, #0]
 80032d0:	f7fd fd22 	bl	8000d18 <_sbrk>
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	d102      	bne.n	80032de <_sbrk_r+0x1a>
 80032d8:	682b      	ldr	r3, [r5, #0]
 80032da:	b103      	cbz	r3, 80032de <_sbrk_r+0x1a>
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	bd38      	pop	{r3, r4, r5, pc}
 80032e0:	200001c8 	.word	0x200001c8

080032e4 <__sread>:
 80032e4:	b510      	push	{r4, lr}
 80032e6:	460c      	mov	r4, r1
 80032e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ec:	f000 fabe 	bl	800386c <_read_r>
 80032f0:	2800      	cmp	r0, #0
 80032f2:	bfab      	itete	ge
 80032f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032f6:	89a3      	ldrhlt	r3, [r4, #12]
 80032f8:	181b      	addge	r3, r3, r0
 80032fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032fe:	bfac      	ite	ge
 8003300:	6563      	strge	r3, [r4, #84]	; 0x54
 8003302:	81a3      	strhlt	r3, [r4, #12]
 8003304:	bd10      	pop	{r4, pc}

08003306 <__swrite>:
 8003306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800330a:	461f      	mov	r7, r3
 800330c:	898b      	ldrh	r3, [r1, #12]
 800330e:	4605      	mov	r5, r0
 8003310:	05db      	lsls	r3, r3, #23
 8003312:	460c      	mov	r4, r1
 8003314:	4616      	mov	r6, r2
 8003316:	d505      	bpl.n	8003324 <__swrite+0x1e>
 8003318:	2302      	movs	r3, #2
 800331a:	2200      	movs	r2, #0
 800331c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003320:	f000 f9c8 	bl	80036b4 <_lseek_r>
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	4632      	mov	r2, r6
 8003328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800332c:	81a3      	strh	r3, [r4, #12]
 800332e:	4628      	mov	r0, r5
 8003330:	463b      	mov	r3, r7
 8003332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800333a:	f000 b869 	b.w	8003410 <_write_r>

0800333e <__sseek>:
 800333e:	b510      	push	{r4, lr}
 8003340:	460c      	mov	r4, r1
 8003342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003346:	f000 f9b5 	bl	80036b4 <_lseek_r>
 800334a:	1c43      	adds	r3, r0, #1
 800334c:	89a3      	ldrh	r3, [r4, #12]
 800334e:	bf15      	itete	ne
 8003350:	6560      	strne	r0, [r4, #84]	; 0x54
 8003352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800335a:	81a3      	strheq	r3, [r4, #12]
 800335c:	bf18      	it	ne
 800335e:	81a3      	strhne	r3, [r4, #12]
 8003360:	bd10      	pop	{r4, pc}

08003362 <__sclose>:
 8003362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003366:	f000 b8d3 	b.w	8003510 <_close_r>
	...

0800336c <__swbuf_r>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	460e      	mov	r6, r1
 8003370:	4614      	mov	r4, r2
 8003372:	4605      	mov	r5, r0
 8003374:	b118      	cbz	r0, 800337e <__swbuf_r+0x12>
 8003376:	6983      	ldr	r3, [r0, #24]
 8003378:	b90b      	cbnz	r3, 800337e <__swbuf_r+0x12>
 800337a:	f7ff fbbb 	bl	8002af4 <__sinit>
 800337e:	4b21      	ldr	r3, [pc, #132]	; (8003404 <__swbuf_r+0x98>)
 8003380:	429c      	cmp	r4, r3
 8003382:	d12b      	bne.n	80033dc <__swbuf_r+0x70>
 8003384:	686c      	ldr	r4, [r5, #4]
 8003386:	69a3      	ldr	r3, [r4, #24]
 8003388:	60a3      	str	r3, [r4, #8]
 800338a:	89a3      	ldrh	r3, [r4, #12]
 800338c:	071a      	lsls	r2, r3, #28
 800338e:	d52f      	bpl.n	80033f0 <__swbuf_r+0x84>
 8003390:	6923      	ldr	r3, [r4, #16]
 8003392:	b36b      	cbz	r3, 80033f0 <__swbuf_r+0x84>
 8003394:	6923      	ldr	r3, [r4, #16]
 8003396:	6820      	ldr	r0, [r4, #0]
 8003398:	b2f6      	uxtb	r6, r6
 800339a:	1ac0      	subs	r0, r0, r3
 800339c:	6963      	ldr	r3, [r4, #20]
 800339e:	4637      	mov	r7, r6
 80033a0:	4283      	cmp	r3, r0
 80033a2:	dc04      	bgt.n	80033ae <__swbuf_r+0x42>
 80033a4:	4621      	mov	r1, r4
 80033a6:	4628      	mov	r0, r5
 80033a8:	f000 f948 	bl	800363c <_fflush_r>
 80033ac:	bb30      	cbnz	r0, 80033fc <__swbuf_r+0x90>
 80033ae:	68a3      	ldr	r3, [r4, #8]
 80033b0:	3001      	adds	r0, #1
 80033b2:	3b01      	subs	r3, #1
 80033b4:	60a3      	str	r3, [r4, #8]
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	6022      	str	r2, [r4, #0]
 80033bc:	701e      	strb	r6, [r3, #0]
 80033be:	6963      	ldr	r3, [r4, #20]
 80033c0:	4283      	cmp	r3, r0
 80033c2:	d004      	beq.n	80033ce <__swbuf_r+0x62>
 80033c4:	89a3      	ldrh	r3, [r4, #12]
 80033c6:	07db      	lsls	r3, r3, #31
 80033c8:	d506      	bpl.n	80033d8 <__swbuf_r+0x6c>
 80033ca:	2e0a      	cmp	r6, #10
 80033cc:	d104      	bne.n	80033d8 <__swbuf_r+0x6c>
 80033ce:	4621      	mov	r1, r4
 80033d0:	4628      	mov	r0, r5
 80033d2:	f000 f933 	bl	800363c <_fflush_r>
 80033d6:	b988      	cbnz	r0, 80033fc <__swbuf_r+0x90>
 80033d8:	4638      	mov	r0, r7
 80033da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <__swbuf_r+0x9c>)
 80033de:	429c      	cmp	r4, r3
 80033e0:	d101      	bne.n	80033e6 <__swbuf_r+0x7a>
 80033e2:	68ac      	ldr	r4, [r5, #8]
 80033e4:	e7cf      	b.n	8003386 <__swbuf_r+0x1a>
 80033e6:	4b09      	ldr	r3, [pc, #36]	; (800340c <__swbuf_r+0xa0>)
 80033e8:	429c      	cmp	r4, r3
 80033ea:	bf08      	it	eq
 80033ec:	68ec      	ldreq	r4, [r5, #12]
 80033ee:	e7ca      	b.n	8003386 <__swbuf_r+0x1a>
 80033f0:	4621      	mov	r1, r4
 80033f2:	4628      	mov	r0, r5
 80033f4:	f000 f81e 	bl	8003434 <__swsetup_r>
 80033f8:	2800      	cmp	r0, #0
 80033fa:	d0cb      	beq.n	8003394 <__swbuf_r+0x28>
 80033fc:	f04f 37ff 	mov.w	r7, #4294967295
 8003400:	e7ea      	b.n	80033d8 <__swbuf_r+0x6c>
 8003402:	bf00      	nop
 8003404:	0800395c 	.word	0x0800395c
 8003408:	0800397c 	.word	0x0800397c
 800340c:	0800393c 	.word	0x0800393c

08003410 <_write_r>:
 8003410:	b538      	push	{r3, r4, r5, lr}
 8003412:	4604      	mov	r4, r0
 8003414:	4608      	mov	r0, r1
 8003416:	4611      	mov	r1, r2
 8003418:	2200      	movs	r2, #0
 800341a:	4d05      	ldr	r5, [pc, #20]	; (8003430 <_write_r+0x20>)
 800341c:	602a      	str	r2, [r5, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	f7fd fab0 	bl	8000984 <_write>
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	d102      	bne.n	800342e <_write_r+0x1e>
 8003428:	682b      	ldr	r3, [r5, #0]
 800342a:	b103      	cbz	r3, 800342e <_write_r+0x1e>
 800342c:	6023      	str	r3, [r4, #0]
 800342e:	bd38      	pop	{r3, r4, r5, pc}
 8003430:	200001c8 	.word	0x200001c8

08003434 <__swsetup_r>:
 8003434:	4b32      	ldr	r3, [pc, #200]	; (8003500 <__swsetup_r+0xcc>)
 8003436:	b570      	push	{r4, r5, r6, lr}
 8003438:	681d      	ldr	r5, [r3, #0]
 800343a:	4606      	mov	r6, r0
 800343c:	460c      	mov	r4, r1
 800343e:	b125      	cbz	r5, 800344a <__swsetup_r+0x16>
 8003440:	69ab      	ldr	r3, [r5, #24]
 8003442:	b913      	cbnz	r3, 800344a <__swsetup_r+0x16>
 8003444:	4628      	mov	r0, r5
 8003446:	f7ff fb55 	bl	8002af4 <__sinit>
 800344a:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <__swsetup_r+0xd0>)
 800344c:	429c      	cmp	r4, r3
 800344e:	d10f      	bne.n	8003470 <__swsetup_r+0x3c>
 8003450:	686c      	ldr	r4, [r5, #4]
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003458:	0719      	lsls	r1, r3, #28
 800345a:	d42c      	bmi.n	80034b6 <__swsetup_r+0x82>
 800345c:	06dd      	lsls	r5, r3, #27
 800345e:	d411      	bmi.n	8003484 <__swsetup_r+0x50>
 8003460:	2309      	movs	r3, #9
 8003462:	6033      	str	r3, [r6, #0]
 8003464:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	81a3      	strh	r3, [r4, #12]
 800346e:	e03e      	b.n	80034ee <__swsetup_r+0xba>
 8003470:	4b25      	ldr	r3, [pc, #148]	; (8003508 <__swsetup_r+0xd4>)
 8003472:	429c      	cmp	r4, r3
 8003474:	d101      	bne.n	800347a <__swsetup_r+0x46>
 8003476:	68ac      	ldr	r4, [r5, #8]
 8003478:	e7eb      	b.n	8003452 <__swsetup_r+0x1e>
 800347a:	4b24      	ldr	r3, [pc, #144]	; (800350c <__swsetup_r+0xd8>)
 800347c:	429c      	cmp	r4, r3
 800347e:	bf08      	it	eq
 8003480:	68ec      	ldreq	r4, [r5, #12]
 8003482:	e7e6      	b.n	8003452 <__swsetup_r+0x1e>
 8003484:	0758      	lsls	r0, r3, #29
 8003486:	d512      	bpl.n	80034ae <__swsetup_r+0x7a>
 8003488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800348a:	b141      	cbz	r1, 800349e <__swsetup_r+0x6a>
 800348c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003490:	4299      	cmp	r1, r3
 8003492:	d002      	beq.n	800349a <__swsetup_r+0x66>
 8003494:	4630      	mov	r0, r6
 8003496:	f000 f99d 	bl	80037d4 <_free_r>
 800349a:	2300      	movs	r3, #0
 800349c:	6363      	str	r3, [r4, #52]	; 0x34
 800349e:	89a3      	ldrh	r3, [r4, #12]
 80034a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034a4:	81a3      	strh	r3, [r4, #12]
 80034a6:	2300      	movs	r3, #0
 80034a8:	6063      	str	r3, [r4, #4]
 80034aa:	6923      	ldr	r3, [r4, #16]
 80034ac:	6023      	str	r3, [r4, #0]
 80034ae:	89a3      	ldrh	r3, [r4, #12]
 80034b0:	f043 0308 	orr.w	r3, r3, #8
 80034b4:	81a3      	strh	r3, [r4, #12]
 80034b6:	6923      	ldr	r3, [r4, #16]
 80034b8:	b94b      	cbnz	r3, 80034ce <__swsetup_r+0x9a>
 80034ba:	89a3      	ldrh	r3, [r4, #12]
 80034bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80034c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c4:	d003      	beq.n	80034ce <__swsetup_r+0x9a>
 80034c6:	4621      	mov	r1, r4
 80034c8:	4630      	mov	r0, r6
 80034ca:	f000 f929 	bl	8003720 <__smakebuf_r>
 80034ce:	89a0      	ldrh	r0, [r4, #12]
 80034d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034d4:	f010 0301 	ands.w	r3, r0, #1
 80034d8:	d00a      	beq.n	80034f0 <__swsetup_r+0xbc>
 80034da:	2300      	movs	r3, #0
 80034dc:	60a3      	str	r3, [r4, #8]
 80034de:	6963      	ldr	r3, [r4, #20]
 80034e0:	425b      	negs	r3, r3
 80034e2:	61a3      	str	r3, [r4, #24]
 80034e4:	6923      	ldr	r3, [r4, #16]
 80034e6:	b943      	cbnz	r3, 80034fa <__swsetup_r+0xc6>
 80034e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034ec:	d1ba      	bne.n	8003464 <__swsetup_r+0x30>
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	0781      	lsls	r1, r0, #30
 80034f2:	bf58      	it	pl
 80034f4:	6963      	ldrpl	r3, [r4, #20]
 80034f6:	60a3      	str	r3, [r4, #8]
 80034f8:	e7f4      	b.n	80034e4 <__swsetup_r+0xb0>
 80034fa:	2000      	movs	r0, #0
 80034fc:	e7f7      	b.n	80034ee <__swsetup_r+0xba>
 80034fe:	bf00      	nop
 8003500:	20000044 	.word	0x20000044
 8003504:	0800395c 	.word	0x0800395c
 8003508:	0800397c 	.word	0x0800397c
 800350c:	0800393c 	.word	0x0800393c

08003510 <_close_r>:
 8003510:	b538      	push	{r3, r4, r5, lr}
 8003512:	2300      	movs	r3, #0
 8003514:	4d05      	ldr	r5, [pc, #20]	; (800352c <_close_r+0x1c>)
 8003516:	4604      	mov	r4, r0
 8003518:	4608      	mov	r0, r1
 800351a:	602b      	str	r3, [r5, #0]
 800351c:	f7fd fbcb 	bl	8000cb6 <_close>
 8003520:	1c43      	adds	r3, r0, #1
 8003522:	d102      	bne.n	800352a <_close_r+0x1a>
 8003524:	682b      	ldr	r3, [r5, #0]
 8003526:	b103      	cbz	r3, 800352a <_close_r+0x1a>
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	bd38      	pop	{r3, r4, r5, pc}
 800352c:	200001c8 	.word	0x200001c8

08003530 <__sflush_r>:
 8003530:	898a      	ldrh	r2, [r1, #12]
 8003532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003536:	4605      	mov	r5, r0
 8003538:	0710      	lsls	r0, r2, #28
 800353a:	460c      	mov	r4, r1
 800353c:	d458      	bmi.n	80035f0 <__sflush_r+0xc0>
 800353e:	684b      	ldr	r3, [r1, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	dc05      	bgt.n	8003550 <__sflush_r+0x20>
 8003544:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	dc02      	bgt.n	8003550 <__sflush_r+0x20>
 800354a:	2000      	movs	r0, #0
 800354c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003550:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003552:	2e00      	cmp	r6, #0
 8003554:	d0f9      	beq.n	800354a <__sflush_r+0x1a>
 8003556:	2300      	movs	r3, #0
 8003558:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800355c:	682f      	ldr	r7, [r5, #0]
 800355e:	602b      	str	r3, [r5, #0]
 8003560:	d032      	beq.n	80035c8 <__sflush_r+0x98>
 8003562:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003564:	89a3      	ldrh	r3, [r4, #12]
 8003566:	075a      	lsls	r2, r3, #29
 8003568:	d505      	bpl.n	8003576 <__sflush_r+0x46>
 800356a:	6863      	ldr	r3, [r4, #4]
 800356c:	1ac0      	subs	r0, r0, r3
 800356e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003570:	b10b      	cbz	r3, 8003576 <__sflush_r+0x46>
 8003572:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003574:	1ac0      	subs	r0, r0, r3
 8003576:	2300      	movs	r3, #0
 8003578:	4602      	mov	r2, r0
 800357a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800357c:	4628      	mov	r0, r5
 800357e:	6a21      	ldr	r1, [r4, #32]
 8003580:	47b0      	blx	r6
 8003582:	1c43      	adds	r3, r0, #1
 8003584:	89a3      	ldrh	r3, [r4, #12]
 8003586:	d106      	bne.n	8003596 <__sflush_r+0x66>
 8003588:	6829      	ldr	r1, [r5, #0]
 800358a:	291d      	cmp	r1, #29
 800358c:	d82c      	bhi.n	80035e8 <__sflush_r+0xb8>
 800358e:	4a2a      	ldr	r2, [pc, #168]	; (8003638 <__sflush_r+0x108>)
 8003590:	40ca      	lsrs	r2, r1
 8003592:	07d6      	lsls	r6, r2, #31
 8003594:	d528      	bpl.n	80035e8 <__sflush_r+0xb8>
 8003596:	2200      	movs	r2, #0
 8003598:	6062      	str	r2, [r4, #4]
 800359a:	6922      	ldr	r2, [r4, #16]
 800359c:	04d9      	lsls	r1, r3, #19
 800359e:	6022      	str	r2, [r4, #0]
 80035a0:	d504      	bpl.n	80035ac <__sflush_r+0x7c>
 80035a2:	1c42      	adds	r2, r0, #1
 80035a4:	d101      	bne.n	80035aa <__sflush_r+0x7a>
 80035a6:	682b      	ldr	r3, [r5, #0]
 80035a8:	b903      	cbnz	r3, 80035ac <__sflush_r+0x7c>
 80035aa:	6560      	str	r0, [r4, #84]	; 0x54
 80035ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035ae:	602f      	str	r7, [r5, #0]
 80035b0:	2900      	cmp	r1, #0
 80035b2:	d0ca      	beq.n	800354a <__sflush_r+0x1a>
 80035b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035b8:	4299      	cmp	r1, r3
 80035ba:	d002      	beq.n	80035c2 <__sflush_r+0x92>
 80035bc:	4628      	mov	r0, r5
 80035be:	f000 f909 	bl	80037d4 <_free_r>
 80035c2:	2000      	movs	r0, #0
 80035c4:	6360      	str	r0, [r4, #52]	; 0x34
 80035c6:	e7c1      	b.n	800354c <__sflush_r+0x1c>
 80035c8:	6a21      	ldr	r1, [r4, #32]
 80035ca:	2301      	movs	r3, #1
 80035cc:	4628      	mov	r0, r5
 80035ce:	47b0      	blx	r6
 80035d0:	1c41      	adds	r1, r0, #1
 80035d2:	d1c7      	bne.n	8003564 <__sflush_r+0x34>
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0c4      	beq.n	8003564 <__sflush_r+0x34>
 80035da:	2b1d      	cmp	r3, #29
 80035dc:	d001      	beq.n	80035e2 <__sflush_r+0xb2>
 80035de:	2b16      	cmp	r3, #22
 80035e0:	d101      	bne.n	80035e6 <__sflush_r+0xb6>
 80035e2:	602f      	str	r7, [r5, #0]
 80035e4:	e7b1      	b.n	800354a <__sflush_r+0x1a>
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ec:	81a3      	strh	r3, [r4, #12]
 80035ee:	e7ad      	b.n	800354c <__sflush_r+0x1c>
 80035f0:	690f      	ldr	r7, [r1, #16]
 80035f2:	2f00      	cmp	r7, #0
 80035f4:	d0a9      	beq.n	800354a <__sflush_r+0x1a>
 80035f6:	0793      	lsls	r3, r2, #30
 80035f8:	bf18      	it	ne
 80035fa:	2300      	movne	r3, #0
 80035fc:	680e      	ldr	r6, [r1, #0]
 80035fe:	bf08      	it	eq
 8003600:	694b      	ldreq	r3, [r1, #20]
 8003602:	eba6 0807 	sub.w	r8, r6, r7
 8003606:	600f      	str	r7, [r1, #0]
 8003608:	608b      	str	r3, [r1, #8]
 800360a:	f1b8 0f00 	cmp.w	r8, #0
 800360e:	dd9c      	ble.n	800354a <__sflush_r+0x1a>
 8003610:	4643      	mov	r3, r8
 8003612:	463a      	mov	r2, r7
 8003614:	4628      	mov	r0, r5
 8003616:	6a21      	ldr	r1, [r4, #32]
 8003618:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800361a:	47b0      	blx	r6
 800361c:	2800      	cmp	r0, #0
 800361e:	dc06      	bgt.n	800362e <__sflush_r+0xfe>
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	f04f 30ff 	mov.w	r0, #4294967295
 8003626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800362a:	81a3      	strh	r3, [r4, #12]
 800362c:	e78e      	b.n	800354c <__sflush_r+0x1c>
 800362e:	4407      	add	r7, r0
 8003630:	eba8 0800 	sub.w	r8, r8, r0
 8003634:	e7e9      	b.n	800360a <__sflush_r+0xda>
 8003636:	bf00      	nop
 8003638:	20400001 	.word	0x20400001

0800363c <_fflush_r>:
 800363c:	b538      	push	{r3, r4, r5, lr}
 800363e:	690b      	ldr	r3, [r1, #16]
 8003640:	4605      	mov	r5, r0
 8003642:	460c      	mov	r4, r1
 8003644:	b913      	cbnz	r3, 800364c <_fflush_r+0x10>
 8003646:	2500      	movs	r5, #0
 8003648:	4628      	mov	r0, r5
 800364a:	bd38      	pop	{r3, r4, r5, pc}
 800364c:	b118      	cbz	r0, 8003656 <_fflush_r+0x1a>
 800364e:	6983      	ldr	r3, [r0, #24]
 8003650:	b90b      	cbnz	r3, 8003656 <_fflush_r+0x1a>
 8003652:	f7ff fa4f 	bl	8002af4 <__sinit>
 8003656:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <_fflush_r+0x6c>)
 8003658:	429c      	cmp	r4, r3
 800365a:	d11b      	bne.n	8003694 <_fflush_r+0x58>
 800365c:	686c      	ldr	r4, [r5, #4]
 800365e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0ef      	beq.n	8003646 <_fflush_r+0xa>
 8003666:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003668:	07d0      	lsls	r0, r2, #31
 800366a:	d404      	bmi.n	8003676 <_fflush_r+0x3a>
 800366c:	0599      	lsls	r1, r3, #22
 800366e:	d402      	bmi.n	8003676 <_fflush_r+0x3a>
 8003670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003672:	f7ff fadd 	bl	8002c30 <__retarget_lock_acquire_recursive>
 8003676:	4628      	mov	r0, r5
 8003678:	4621      	mov	r1, r4
 800367a:	f7ff ff59 	bl	8003530 <__sflush_r>
 800367e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003680:	4605      	mov	r5, r0
 8003682:	07da      	lsls	r2, r3, #31
 8003684:	d4e0      	bmi.n	8003648 <_fflush_r+0xc>
 8003686:	89a3      	ldrh	r3, [r4, #12]
 8003688:	059b      	lsls	r3, r3, #22
 800368a:	d4dd      	bmi.n	8003648 <_fflush_r+0xc>
 800368c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800368e:	f7ff fad0 	bl	8002c32 <__retarget_lock_release_recursive>
 8003692:	e7d9      	b.n	8003648 <_fflush_r+0xc>
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <_fflush_r+0x70>)
 8003696:	429c      	cmp	r4, r3
 8003698:	d101      	bne.n	800369e <_fflush_r+0x62>
 800369a:	68ac      	ldr	r4, [r5, #8]
 800369c:	e7df      	b.n	800365e <_fflush_r+0x22>
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <_fflush_r+0x74>)
 80036a0:	429c      	cmp	r4, r3
 80036a2:	bf08      	it	eq
 80036a4:	68ec      	ldreq	r4, [r5, #12]
 80036a6:	e7da      	b.n	800365e <_fflush_r+0x22>
 80036a8:	0800395c 	.word	0x0800395c
 80036ac:	0800397c 	.word	0x0800397c
 80036b0:	0800393c 	.word	0x0800393c

080036b4 <_lseek_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4604      	mov	r4, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	2200      	movs	r2, #0
 80036be:	4d05      	ldr	r5, [pc, #20]	; (80036d4 <_lseek_r+0x20>)
 80036c0:	602a      	str	r2, [r5, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f7fd fb1b 	bl	8000cfe <_lseek>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d102      	bne.n	80036d2 <_lseek_r+0x1e>
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	b103      	cbz	r3, 80036d2 <_lseek_r+0x1e>
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
 80036d4:	200001c8 	.word	0x200001c8

080036d8 <__swhatbuf_r>:
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	460e      	mov	r6, r1
 80036dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e0:	4614      	mov	r4, r2
 80036e2:	2900      	cmp	r1, #0
 80036e4:	461d      	mov	r5, r3
 80036e6:	b096      	sub	sp, #88	; 0x58
 80036e8:	da07      	bge.n	80036fa <__swhatbuf_r+0x22>
 80036ea:	2300      	movs	r3, #0
 80036ec:	602b      	str	r3, [r5, #0]
 80036ee:	89b3      	ldrh	r3, [r6, #12]
 80036f0:	061a      	lsls	r2, r3, #24
 80036f2:	d410      	bmi.n	8003716 <__swhatbuf_r+0x3e>
 80036f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036f8:	e00e      	b.n	8003718 <__swhatbuf_r+0x40>
 80036fa:	466a      	mov	r2, sp
 80036fc:	f000 f8c8 	bl	8003890 <_fstat_r>
 8003700:	2800      	cmp	r0, #0
 8003702:	dbf2      	blt.n	80036ea <__swhatbuf_r+0x12>
 8003704:	9a01      	ldr	r2, [sp, #4]
 8003706:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800370a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800370e:	425a      	negs	r2, r3
 8003710:	415a      	adcs	r2, r3
 8003712:	602a      	str	r2, [r5, #0]
 8003714:	e7ee      	b.n	80036f4 <__swhatbuf_r+0x1c>
 8003716:	2340      	movs	r3, #64	; 0x40
 8003718:	2000      	movs	r0, #0
 800371a:	6023      	str	r3, [r4, #0]
 800371c:	b016      	add	sp, #88	; 0x58
 800371e:	bd70      	pop	{r4, r5, r6, pc}

08003720 <__smakebuf_r>:
 8003720:	898b      	ldrh	r3, [r1, #12]
 8003722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003724:	079d      	lsls	r5, r3, #30
 8003726:	4606      	mov	r6, r0
 8003728:	460c      	mov	r4, r1
 800372a:	d507      	bpl.n	800373c <__smakebuf_r+0x1c>
 800372c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003730:	6023      	str	r3, [r4, #0]
 8003732:	6123      	str	r3, [r4, #16]
 8003734:	2301      	movs	r3, #1
 8003736:	6163      	str	r3, [r4, #20]
 8003738:	b002      	add	sp, #8
 800373a:	bd70      	pop	{r4, r5, r6, pc}
 800373c:	466a      	mov	r2, sp
 800373e:	ab01      	add	r3, sp, #4
 8003740:	f7ff ffca 	bl	80036d8 <__swhatbuf_r>
 8003744:	9900      	ldr	r1, [sp, #0]
 8003746:	4605      	mov	r5, r0
 8003748:	4630      	mov	r0, r6
 800374a:	f7ff fa73 	bl	8002c34 <_malloc_r>
 800374e:	b948      	cbnz	r0, 8003764 <__smakebuf_r+0x44>
 8003750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003754:	059a      	lsls	r2, r3, #22
 8003756:	d4ef      	bmi.n	8003738 <__smakebuf_r+0x18>
 8003758:	f023 0303 	bic.w	r3, r3, #3
 800375c:	f043 0302 	orr.w	r3, r3, #2
 8003760:	81a3      	strh	r3, [r4, #12]
 8003762:	e7e3      	b.n	800372c <__smakebuf_r+0xc>
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <__smakebuf_r+0x7c>)
 8003766:	62b3      	str	r3, [r6, #40]	; 0x28
 8003768:	89a3      	ldrh	r3, [r4, #12]
 800376a:	6020      	str	r0, [r4, #0]
 800376c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003770:	81a3      	strh	r3, [r4, #12]
 8003772:	9b00      	ldr	r3, [sp, #0]
 8003774:	6120      	str	r0, [r4, #16]
 8003776:	6163      	str	r3, [r4, #20]
 8003778:	9b01      	ldr	r3, [sp, #4]
 800377a:	b15b      	cbz	r3, 8003794 <__smakebuf_r+0x74>
 800377c:	4630      	mov	r0, r6
 800377e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003782:	f000 f897 	bl	80038b4 <_isatty_r>
 8003786:	b128      	cbz	r0, 8003794 <__smakebuf_r+0x74>
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	f023 0303 	bic.w	r3, r3, #3
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	81a3      	strh	r3, [r4, #12]
 8003794:	89a0      	ldrh	r0, [r4, #12]
 8003796:	4305      	orrs	r5, r0
 8003798:	81a5      	strh	r5, [r4, #12]
 800379a:	e7cd      	b.n	8003738 <__smakebuf_r+0x18>
 800379c:	08002a8d 	.word	0x08002a8d

080037a0 <memchr>:
 80037a0:	4603      	mov	r3, r0
 80037a2:	b510      	push	{r4, lr}
 80037a4:	b2c9      	uxtb	r1, r1
 80037a6:	4402      	add	r2, r0
 80037a8:	4293      	cmp	r3, r2
 80037aa:	4618      	mov	r0, r3
 80037ac:	d101      	bne.n	80037b2 <memchr+0x12>
 80037ae:	2000      	movs	r0, #0
 80037b0:	e003      	b.n	80037ba <memchr+0x1a>
 80037b2:	7804      	ldrb	r4, [r0, #0]
 80037b4:	3301      	adds	r3, #1
 80037b6:	428c      	cmp	r4, r1
 80037b8:	d1f6      	bne.n	80037a8 <memchr+0x8>
 80037ba:	bd10      	pop	{r4, pc}

080037bc <__malloc_lock>:
 80037bc:	4801      	ldr	r0, [pc, #4]	; (80037c4 <__malloc_lock+0x8>)
 80037be:	f7ff ba37 	b.w	8002c30 <__retarget_lock_acquire_recursive>
 80037c2:	bf00      	nop
 80037c4:	200001c0 	.word	0x200001c0

080037c8 <__malloc_unlock>:
 80037c8:	4801      	ldr	r0, [pc, #4]	; (80037d0 <__malloc_unlock+0x8>)
 80037ca:	f7ff ba32 	b.w	8002c32 <__retarget_lock_release_recursive>
 80037ce:	bf00      	nop
 80037d0:	200001c0 	.word	0x200001c0

080037d4 <_free_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	4605      	mov	r5, r0
 80037d8:	2900      	cmp	r1, #0
 80037da:	d043      	beq.n	8003864 <_free_r+0x90>
 80037dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037e0:	1f0c      	subs	r4, r1, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bfb8      	it	lt
 80037e6:	18e4      	addlt	r4, r4, r3
 80037e8:	f7ff ffe8 	bl	80037bc <__malloc_lock>
 80037ec:	4a1e      	ldr	r2, [pc, #120]	; (8003868 <_free_r+0x94>)
 80037ee:	6813      	ldr	r3, [r2, #0]
 80037f0:	4610      	mov	r0, r2
 80037f2:	b933      	cbnz	r3, 8003802 <_free_r+0x2e>
 80037f4:	6063      	str	r3, [r4, #4]
 80037f6:	6014      	str	r4, [r2, #0]
 80037f8:	4628      	mov	r0, r5
 80037fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037fe:	f7ff bfe3 	b.w	80037c8 <__malloc_unlock>
 8003802:	42a3      	cmp	r3, r4
 8003804:	d90a      	bls.n	800381c <_free_r+0x48>
 8003806:	6821      	ldr	r1, [r4, #0]
 8003808:	1862      	adds	r2, r4, r1
 800380a:	4293      	cmp	r3, r2
 800380c:	bf01      	itttt	eq
 800380e:	681a      	ldreq	r2, [r3, #0]
 8003810:	685b      	ldreq	r3, [r3, #4]
 8003812:	1852      	addeq	r2, r2, r1
 8003814:	6022      	streq	r2, [r4, #0]
 8003816:	6063      	str	r3, [r4, #4]
 8003818:	6004      	str	r4, [r0, #0]
 800381a:	e7ed      	b.n	80037f8 <_free_r+0x24>
 800381c:	461a      	mov	r2, r3
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	b10b      	cbz	r3, 8003826 <_free_r+0x52>
 8003822:	42a3      	cmp	r3, r4
 8003824:	d9fa      	bls.n	800381c <_free_r+0x48>
 8003826:	6811      	ldr	r1, [r2, #0]
 8003828:	1850      	adds	r0, r2, r1
 800382a:	42a0      	cmp	r0, r4
 800382c:	d10b      	bne.n	8003846 <_free_r+0x72>
 800382e:	6820      	ldr	r0, [r4, #0]
 8003830:	4401      	add	r1, r0
 8003832:	1850      	adds	r0, r2, r1
 8003834:	4283      	cmp	r3, r0
 8003836:	6011      	str	r1, [r2, #0]
 8003838:	d1de      	bne.n	80037f8 <_free_r+0x24>
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4401      	add	r1, r0
 8003840:	6011      	str	r1, [r2, #0]
 8003842:	6053      	str	r3, [r2, #4]
 8003844:	e7d8      	b.n	80037f8 <_free_r+0x24>
 8003846:	d902      	bls.n	800384e <_free_r+0x7a>
 8003848:	230c      	movs	r3, #12
 800384a:	602b      	str	r3, [r5, #0]
 800384c:	e7d4      	b.n	80037f8 <_free_r+0x24>
 800384e:	6820      	ldr	r0, [r4, #0]
 8003850:	1821      	adds	r1, r4, r0
 8003852:	428b      	cmp	r3, r1
 8003854:	bf01      	itttt	eq
 8003856:	6819      	ldreq	r1, [r3, #0]
 8003858:	685b      	ldreq	r3, [r3, #4]
 800385a:	1809      	addeq	r1, r1, r0
 800385c:	6021      	streq	r1, [r4, #0]
 800385e:	6063      	str	r3, [r4, #4]
 8003860:	6054      	str	r4, [r2, #4]
 8003862:	e7c9      	b.n	80037f8 <_free_r+0x24>
 8003864:	bd38      	pop	{r3, r4, r5, pc}
 8003866:	bf00      	nop
 8003868:	20000124 	.word	0x20000124

0800386c <_read_r>:
 800386c:	b538      	push	{r3, r4, r5, lr}
 800386e:	4604      	mov	r4, r0
 8003870:	4608      	mov	r0, r1
 8003872:	4611      	mov	r1, r2
 8003874:	2200      	movs	r2, #0
 8003876:	4d05      	ldr	r5, [pc, #20]	; (800388c <_read_r+0x20>)
 8003878:	602a      	str	r2, [r5, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	f7fd f9fe 	bl	8000c7c <_read>
 8003880:	1c43      	adds	r3, r0, #1
 8003882:	d102      	bne.n	800388a <_read_r+0x1e>
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	b103      	cbz	r3, 800388a <_read_r+0x1e>
 8003888:	6023      	str	r3, [r4, #0]
 800388a:	bd38      	pop	{r3, r4, r5, pc}
 800388c:	200001c8 	.word	0x200001c8

08003890 <_fstat_r>:
 8003890:	b538      	push	{r3, r4, r5, lr}
 8003892:	2300      	movs	r3, #0
 8003894:	4d06      	ldr	r5, [pc, #24]	; (80038b0 <_fstat_r+0x20>)
 8003896:	4604      	mov	r4, r0
 8003898:	4608      	mov	r0, r1
 800389a:	4611      	mov	r1, r2
 800389c:	602b      	str	r3, [r5, #0]
 800389e:	f7fd fa15 	bl	8000ccc <_fstat>
 80038a2:	1c43      	adds	r3, r0, #1
 80038a4:	d102      	bne.n	80038ac <_fstat_r+0x1c>
 80038a6:	682b      	ldr	r3, [r5, #0]
 80038a8:	b103      	cbz	r3, 80038ac <_fstat_r+0x1c>
 80038aa:	6023      	str	r3, [r4, #0]
 80038ac:	bd38      	pop	{r3, r4, r5, pc}
 80038ae:	bf00      	nop
 80038b0:	200001c8 	.word	0x200001c8

080038b4 <_isatty_r>:
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	2300      	movs	r3, #0
 80038b8:	4d05      	ldr	r5, [pc, #20]	; (80038d0 <_isatty_r+0x1c>)
 80038ba:	4604      	mov	r4, r0
 80038bc:	4608      	mov	r0, r1
 80038be:	602b      	str	r3, [r5, #0]
 80038c0:	f7fd fa13 	bl	8000cea <_isatty>
 80038c4:	1c43      	adds	r3, r0, #1
 80038c6:	d102      	bne.n	80038ce <_isatty_r+0x1a>
 80038c8:	682b      	ldr	r3, [r5, #0]
 80038ca:	b103      	cbz	r3, 80038ce <_isatty_r+0x1a>
 80038cc:	6023      	str	r3, [r4, #0]
 80038ce:	bd38      	pop	{r3, r4, r5, pc}
 80038d0:	200001c8 	.word	0x200001c8

080038d4 <_init>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	bf00      	nop
 80038d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038da:	bc08      	pop	{r3}
 80038dc:	469e      	mov	lr, r3
 80038de:	4770      	bx	lr

080038e0 <_fini>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr
