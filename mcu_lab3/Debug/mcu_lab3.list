
mcu_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003930  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c4c  08003c4c  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08003c4c  08003c4c  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c4c  08003c4c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c50  08003c50  00013c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08003c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200000b4  08003d08  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08003d08  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4c1  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027bb  00000000  00000000  0002f59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00031d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000194e2  00000000  00000000  00032b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f71b  00000000  00000000  0004bffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a224  00000000  00000000  0005b715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000e5939  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c88  00000000  00000000  000e5990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cdc  00000000  00000000  000e6618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a24 	.word	0x08003a24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08003a24 	.word	0x08003a24

0800014c <WhichButtonIsPressed>:
	BUTTON_PRESS_MORE_THAN_1S
};

enum ButtonState buttonState = BUTTON_RELEASED;

int WhichButtonIsPressed() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (is_button_pressed(3)) return button_reset_is_pressed;
 8000150:	2003      	movs	r0, #3
 8000152:	f000 fb1d 	bl	8000790 <is_button_pressed>
 8000156:	4603      	mov	r3, r0
 8000158:	2b00      	cmp	r3, #0
 800015a:	d001      	beq.n	8000160 <WhichButtonIsPressed+0x14>
 800015c:	230d      	movs	r3, #13
 800015e:	e018      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(0)) return button_mode_is_pressed;
 8000160:	2000      	movs	r0, #0
 8000162:	f000 fb15 	bl	8000790 <is_button_pressed>
 8000166:	4603      	mov	r3, r0
 8000168:	2b00      	cmp	r3, #0
 800016a:	d001      	beq.n	8000170 <WhichButtonIsPressed+0x24>
 800016c:	230a      	movs	r3, #10
 800016e:	e010      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(1)) return button_add_is_pressed;
 8000170:	2001      	movs	r0, #1
 8000172:	f000 fb0d 	bl	8000790 <is_button_pressed>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d001      	beq.n	8000180 <WhichButtonIsPressed+0x34>
 800017c:	230b      	movs	r3, #11
 800017e:	e008      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(2)) return button_confirm_is_pressed;
 8000180:	2002      	movs	r0, #2
 8000182:	f000 fb05 	bl	8000790 <is_button_pressed>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <WhichButtonIsPressed+0x44>
 800018c:	230c      	movs	r3, #12
 800018e:	e000      	b.n	8000192 <WhichButtonIsPressed+0x46>

	return 0; // None of these buttons are pressed
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}

08000196 <WhichButtonIsPressed1s>:

int WhichButtonIsPressed1s() {
 8000196:	b580      	push	{r7, lr}
 8000198:	af00      	add	r7, sp, #0
	if (is_button_pressed_1s(3)) return button_reset_is_pressed_1s;
 800019a:	2003      	movs	r0, #3
 800019c:	f000 fb12 	bl	80007c4 <is_button_pressed_1s>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <WhichButtonIsPressed1s+0x14>
 80001a6:	2311      	movs	r3, #17
 80001a8:	e018      	b.n	80001dc <WhichButtonIsPressed1s+0x46>
	if (is_button_pressed_1s(0)) return button_mode_is_pressed_1s;
 80001aa:	2000      	movs	r0, #0
 80001ac:	f000 fb0a 	bl	80007c4 <is_button_pressed_1s>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <WhichButtonIsPressed1s+0x24>
 80001b6:	230e      	movs	r3, #14
 80001b8:	e010      	b.n	80001dc <WhichButtonIsPressed1s+0x46>
	if (is_button_pressed_1s(1)) return button_add_is_pressed_1s;
 80001ba:	2001      	movs	r0, #1
 80001bc:	f000 fb02 	bl	80007c4 <is_button_pressed_1s>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <WhichButtonIsPressed1s+0x34>
 80001c6:	230f      	movs	r3, #15
 80001c8:	e008      	b.n	80001dc <WhichButtonIsPressed1s+0x46>
	if (is_button_pressed_1s(2)) return button_confirm_is_pressed_1s;
 80001ca:	2002      	movs	r0, #2
 80001cc:	f000 fafa 	bl	80007c4 <is_button_pressed_1s>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <WhichButtonIsPressed1s+0x44>
 80001d6:	2310      	movs	r3, #16
 80001d8:	e000      	b.n	80001dc <WhichButtonIsPressed1s+0x46>

	return 0; // None of these buttons are pressed
 80001da:	2300      	movs	r3, #0
}
 80001dc:	4618      	mov	r0, r3
 80001de:	bd80      	pop	{r7, pc}

080001e0 <fsm_mode_running>:
void fsm_mode_running() {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	switch(WhichButtonIsPressed()) {
 80001e4:	f7ff ffb2 	bl	800014c <WhichButtonIsPressed>
 80001e8:	4603      	mov	r3, r0
 80001ea:	3b0a      	subs	r3, #10
 80001ec:	2b03      	cmp	r3, #3
 80001ee:	f200 80a9 	bhi.w	8000344 <fsm_mode_running+0x164>
 80001f2:	a201      	add	r2, pc, #4	; (adr r2, 80001f8 <fsm_mode_running+0x18>)
 80001f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f8:	08000209 	.word	0x08000209
 80001fc:	08000303 	.word	0x08000303
 8000200:	08000339 	.word	0x08000339
 8000204:	0800033f 	.word	0x0800033f
		// NORMAL MODE
		case button_mode_is_pressed:
			switch(status) {
 8000208:	4b50      	ldr	r3, [pc, #320]	; (800034c <fsm_mode_running+0x16c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	3b01      	subs	r3, #1
 800020e:	2b06      	cmp	r3, #6
 8000210:	d872      	bhi.n	80002f8 <fsm_mode_running+0x118>
 8000212:	a201      	add	r2, pc, #4	; (adr r2, 8000218 <fsm_mode_running+0x38>)
 8000214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000218:	08000235 	.word	0x08000235
 800021c:	0800025f 	.word	0x0800025f
 8000220:	08000281 	.word	0x08000281
 8000224:	080002a7 	.word	0x080002a7
 8000228:	0800025f 	.word	0x0800025f
 800022c:	08000281 	.word	0x08000281
 8000230:	080002a7 	.word	0x080002a7
				// NORMAL MODE - Automatic Running
				case NORMAL_MODE:
					led_init();
 8000234:	f000 fb58 	bl	80008e8 <led_init>
					status = RED_MODE;
 8000238:	4b44      	ldr	r3, [pc, #272]	; (800034c <fsm_mode_running+0x16c>)
 800023a:	2202      	movs	r2, #2
 800023c:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '2 - RED_MODE' \r\n");
 800023e:	4844      	ldr	r0, [pc, #272]	; (8000350 <fsm_mode_running+0x170>)
 8000240:	f002 ff9c 	bl	800317c <puts>
					light_time = man_red_time;
 8000244:	4b43      	ldr	r3, [pc, #268]	; (8000354 <fsm_mode_running+0x174>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a43      	ldr	r2, [pc, #268]	; (8000358 <fsm_mode_running+0x178>)
 800024a:	6013      	str	r3, [r2, #0]
					temp_value = light_time;
 800024c:	4b42      	ldr	r3, [pc, #264]	; (8000358 <fsm_mode_running+0x178>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a42      	ldr	r2, [pc, #264]	; (800035c <fsm_mode_running+0x17c>)
 8000252:	6013      	str	r3, [r2, #0]
					// Adjust frequency scanning process of single RED LED
					setTimer1(DURATION_HALF_OF_SECOND);
 8000254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000258:	f000 fd70 	bl	8000d3c <setTimer1>
					break;
 800025c:	e04d      	b.n	80002fa <fsm_mode_running+0x11a>
				// RED && MAN_RED MODE
				case RED_MODE: case MAN_RED_MODE:
					led_init();
 800025e:	f000 fb43 	bl	80008e8 <led_init>
					// restore light_time if is not pressed button confirm
					light_time = man_amber_time;
 8000262:	4b3f      	ldr	r3, [pc, #252]	; (8000360 <fsm_mode_running+0x180>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a3c      	ldr	r2, [pc, #240]	; (8000358 <fsm_mode_running+0x178>)
 8000268:	6013      	str	r3, [r2, #0]
					temp_value = light_time; // store value to temp variable if button add is pressed
 800026a:	4b3b      	ldr	r3, [pc, #236]	; (8000358 <fsm_mode_running+0x178>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a3b      	ldr	r2, [pc, #236]	; (800035c <fsm_mode_running+0x17c>)
 8000270:	6013      	str	r3, [r2, #0]
					status = AMBER_MODE;
 8000272:	4b36      	ldr	r3, [pc, #216]	; (800034c <fsm_mode_running+0x16c>)
 8000274:	2203      	movs	r2, #3
 8000276:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '3 - AMBER_MODE' \r\n");
 8000278:	483a      	ldr	r0, [pc, #232]	; (8000364 <fsm_mode_running+0x184>)
 800027a:	f002 ff7f 	bl	800317c <puts>
					break;
 800027e:	e03c      	b.n	80002fa <fsm_mode_running+0x11a>
				// AMBER && MAN_AMBER MODE
				case AMBER_MODE: case MAN_AMBER_MODE:
					GPIOB->BSRR = 0x3F00;
 8000280:	4b39      	ldr	r3, [pc, #228]	; (8000368 <fsm_mode_running+0x188>)
 8000282:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8000286:	611a      	str	r2, [r3, #16]
					// restore light_time if is not pressed button confirm
					light_time = man_green_time;
 8000288:	4b38      	ldr	r3, [pc, #224]	; (800036c <fsm_mode_running+0x18c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a32      	ldr	r2, [pc, #200]	; (8000358 <fsm_mode_running+0x178>)
 800028e:	6013      	str	r3, [r2, #0]
					temp_value = light_time; // store value to temp variable if button add is pressed
 8000290:	4b31      	ldr	r3, [pc, #196]	; (8000358 <fsm_mode_running+0x178>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a31      	ldr	r2, [pc, #196]	; (800035c <fsm_mode_running+0x17c>)
 8000296:	6013      	str	r3, [r2, #0]
					status = GREEN_MODE;
 8000298:	4b2c      	ldr	r3, [pc, #176]	; (800034c <fsm_mode_running+0x16c>)
 800029a:	2204      	movs	r2, #4
 800029c:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '4 - GREEN_MODE' \r\n");
 800029e:	4834      	ldr	r0, [pc, #208]	; (8000370 <fsm_mode_running+0x190>)
 80002a0:	f002 ff6c 	bl	800317c <puts>
					break;
 80002a4:	e029      	b.n	80002fa <fsm_mode_running+0x11a>
				// GREEN && MAN_GREEN MODE
				case GREEN_MODE: case MAN_GREEN_MODE:
					led_init();
 80002a6:	f000 fb1f 	bl	80008e8 <led_init>
					// restore light_time if is not pressed button confirm
					light_time = man_red_time;
 80002aa:	4b2a      	ldr	r3, [pc, #168]	; (8000354 <fsm_mode_running+0x174>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a2a      	ldr	r2, [pc, #168]	; (8000358 <fsm_mode_running+0x178>)
 80002b0:	6013      	str	r3, [r2, #0]
					// assign temp value = light_time and then
					// if button add is pressed it will increase temp_value;
					temp_value = light_time;
 80002b2:	4b29      	ldr	r3, [pc, #164]	; (8000358 <fsm_mode_running+0x178>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a29      	ldr	r2, [pc, #164]	; (800035c <fsm_mode_running+0x17c>)
 80002b8:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 80002ba:	4b24      	ldr	r3, [pc, #144]	; (800034c <fsm_mode_running+0x16c>)
 80002bc:	2201      	movs	r2, #1
 80002be:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '1 - NORMAL' \r\n");
 80002c0:	482c      	ldr	r0, [pc, #176]	; (8000374 <fsm_mode_running+0x194>)
 80002c2:	f002 ff5b 	bl	800317c <puts>
					// re-initialize traffic light
					traffic_init();
 80002c6:	f000 ff63 	bl	8001190 <traffic_init>
					// update the new buffer to display it at LED 7 SEG
					update_buffer();
 80002ca:	f000 faaf 	bl	800082c <update_buffer>
					if (man_red_time != man_green_time + man_amber_time) {
 80002ce:	4b27      	ldr	r3, [pc, #156]	; (800036c <fsm_mode_running+0x18c>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b23      	ldr	r3, [pc, #140]	; (8000360 <fsm_mode_running+0x180>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	441a      	add	r2, r3
 80002d8:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <fsm_mode_running+0x174>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	429a      	cmp	r2, r3
 80002de:	d007      	beq.n	80002f0 <fsm_mode_running+0x110>
						printf("The setting is incorrect.\r\n");
 80002e0:	4825      	ldr	r0, [pc, #148]	; (8000378 <fsm_mode_running+0x198>)
 80002e2:	f002 ff4b 	bl	800317c <puts>
						printf("You should choose red = green + amber (time).\r\n");
 80002e6:	4825      	ldr	r0, [pc, #148]	; (800037c <fsm_mode_running+0x19c>)
 80002e8:	f002 ff48 	bl	800317c <puts>
						resetToTheDefaultSetting();
 80002ec:	f001 f80a 	bl	8001304 <resetToTheDefaultSetting>
					}
					setTimer3(DURATION_1S);
 80002f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f4:	f000 fd56 	bl	8000da4 <setTimer3>
				default:
					break;
 80002f8:	bf00      	nop
			}
			buttonState = BUTTON_PRESSED;
 80002fa:	4b21      	ldr	r3, [pc, #132]	; (8000380 <fsm_mode_running+0x1a0>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	701a      	strb	r2, [r3, #0]
			break;
 8000300:	e021      	b.n	8000346 <fsm_mode_running+0x166>
		// ADD BUTTON
		case button_add_is_pressed:
			// Increasing time depending on current state
			switch(status) {
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <fsm_mode_running+0x16c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2b04      	cmp	r3, #4
 8000308:	d00e      	beq.n	8000328 <fsm_mode_running+0x148>
 800030a:	2b04      	cmp	r3, #4
 800030c:	dc10      	bgt.n	8000330 <fsm_mode_running+0x150>
 800030e:	2b02      	cmp	r3, #2
 8000310:	d002      	beq.n	8000318 <fsm_mode_running+0x138>
 8000312:	2b03      	cmp	r3, #3
 8000314:	d004      	beq.n	8000320 <fsm_mode_running+0x140>
				break;
			case GREEN_MODE:
				status = MAN_GREEN_MODE;
				break;
			default:
				break;
 8000316:	e00b      	b.n	8000330 <fsm_mode_running+0x150>
				status = MAN_RED_MODE;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <fsm_mode_running+0x16c>)
 800031a:	2205      	movs	r2, #5
 800031c:	601a      	str	r2, [r3, #0]
				break;
 800031e:	e008      	b.n	8000332 <fsm_mode_running+0x152>
				status = MAN_AMBER_MODE;
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <fsm_mode_running+0x16c>)
 8000322:	2206      	movs	r2, #6
 8000324:	601a      	str	r2, [r3, #0]
				break;
 8000326:	e004      	b.n	8000332 <fsm_mode_running+0x152>
				status = MAN_GREEN_MODE;
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <fsm_mode_running+0x16c>)
 800032a:	2207      	movs	r2, #7
 800032c:	601a      	str	r2, [r3, #0]
				break;
 800032e:	e000      	b.n	8000332 <fsm_mode_running+0x152>
				break;
 8000330:	bf00      	nop
			}
			// If the button add is pressed then temp_value++. Finally update light_time = temp_value,
			updateTempTime();
 8000332:	f000 ff4f 	bl	80011d4 <updateTempTime>
			break;
 8000336:	e006      	b.n	8000346 <fsm_mode_running+0x166>
		// CONFIRM BUTTON
		case button_confirm_is_pressed:
			// If the button confirm is pressed, then man_red/yellow/green_time = temp_value was stored before
			confirmAdjustedTime();
 8000338:	f000 ff9c 	bl	8001274 <confirmAdjustedTime>
			break;
 800033c:	e003      	b.n	8000346 <fsm_mode_running+0x166>
		case button_reset_is_pressed:
			resetToTheDefaultSetting();
 800033e:	f000 ffe1 	bl	8001304 <resetToTheDefaultSetting>
			break;
 8000342:	e000      	b.n	8000346 <fsm_mode_running+0x166>
		default:
			break;
 8000344:	bf00      	nop
	}
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000014 	.word	0x20000014
 8000350:	08003a3c 	.word	0x08003a3c
 8000354:	20000000 	.word	0x20000000
 8000358:	2000000c 	.word	0x2000000c
 800035c:	200000d0 	.word	0x200000d0
 8000360:	20000004 	.word	0x20000004
 8000364:	08003a64 	.word	0x08003a64
 8000368:	40010c00 	.word	0x40010c00
 800036c:	20000008 	.word	0x20000008
 8000370:	08003a90 	.word	0x08003a90
 8000374:	08003abc 	.word	0x08003abc
 8000378:	08003ae4 	.word	0x08003ae4
 800037c:	08003b00 	.word	0x08003b00
 8000380:	200000ec 	.word	0x200000ec

08000384 <fsm_mode_running_for_pressed_1s>:

void fsm_mode_running_for_pressed_1s() {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	if (status == RED_MODE || status == GREEN_MODE || status == AMBER_MODE)
 8000388:	4b61      	ldr	r3, [pc, #388]	; (8000510 <fsm_mode_running_for_pressed_1s+0x18c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b02      	cmp	r3, #2
 800038e:	d007      	beq.n	80003a0 <fsm_mode_running_for_pressed_1s+0x1c>
 8000390:	4b5f      	ldr	r3, [pc, #380]	; (8000510 <fsm_mode_running_for_pressed_1s+0x18c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b04      	cmp	r3, #4
 8000396:	d003      	beq.n	80003a0 <fsm_mode_running_for_pressed_1s+0x1c>
 8000398:	4b5d      	ldr	r3, [pc, #372]	; (8000510 <fsm_mode_running_for_pressed_1s+0x18c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b03      	cmp	r3, #3
 800039e:	d103      	bne.n	80003a8 <fsm_mode_running_for_pressed_1s+0x24>
		light_time1 = status;
 80003a0:	4b5b      	ldr	r3, [pc, #364]	; (8000510 <fsm_mode_running_for_pressed_1s+0x18c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a5b      	ldr	r2, [pc, #364]	; (8000514 <fsm_mode_running_for_pressed_1s+0x190>)
 80003a6:	6013      	str	r3, [r2, #0]
	switch(WhichButtonIsPressed1s()) {
 80003a8:	f7ff fef5 	bl	8000196 <WhichButtonIsPressed1s>
 80003ac:	4603      	mov	r3, r0
 80003ae:	3b0c      	subs	r3, #12
 80003b0:	2b03      	cmp	r3, #3
 80003b2:	f200 80a9 	bhi.w	8000508 <fsm_mode_running_for_pressed_1s+0x184>
 80003b6:	a201      	add	r2, pc, #4	; (adr r2, 80003bc <fsm_mode_running_for_pressed_1s+0x38>)
 80003b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003bc:	080004fd 	.word	0x080004fd
 80003c0:	08000503 	.word	0x08000503
 80003c4:	080003cd 	.word	0x080003cd
 80003c8:	080004c7 	.word	0x080004c7
		// NORMAL MODE
		case button_mode_is_pressed_1s:
			switch(status) {
 80003cc:	4b50      	ldr	r3, [pc, #320]	; (8000510 <fsm_mode_running_for_pressed_1s+0x18c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3b01      	subs	r3, #1
 80003d2:	2b06      	cmp	r3, #6
 80003d4:	d872      	bhi.n	80004bc <fsm_mode_running_for_pressed_1s+0x138>
 80003d6:	a201      	add	r2, pc, #4	; (adr r2, 80003dc <fsm_mode_running_for_pressed_1s+0x58>)
 80003d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003dc:	080003f9 	.word	0x080003f9
 80003e0:	08000423 	.word	0x08000423
 80003e4:	08000445 	.word	0x08000445
 80003e8:	0800046b 	.word	0x0800046b
 80003ec:	08000423 	.word	0x08000423
 80003f0:	08000445 	.word	0x08000445
 80003f4:	0800046b 	.word	0x0800046b
				// NORMAL MODE - Automatic Running
				case NORMAL_MODE:
					led_init();
 80003f8:	f000 fa76 	bl	80008e8 <led_init>
					status = RED_MODE;
 80003fc:	4b44      	ldr	r3, [pc, #272]	; (8000510 <fsm_mode_running_for_pressed_1s+0x18c>)
 80003fe:	2202      	movs	r2, #2
 8000400:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '2 - RED_MODE' \r\n");
 8000402:	4845      	ldr	r0, [pc, #276]	; (8000518 <fsm_mode_running_for_pressed_1s+0x194>)
 8000404:	f002 feba 	bl	800317c <puts>
					light_time = man_red_time;
 8000408:	4b44      	ldr	r3, [pc, #272]	; (800051c <fsm_mode_running_for_pressed_1s+0x198>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a44      	ldr	r2, [pc, #272]	; (8000520 <fsm_mode_running_for_pressed_1s+0x19c>)
 800040e:	6013      	str	r3, [r2, #0]
					temp_value = light_time;
 8000410:	4b43      	ldr	r3, [pc, #268]	; (8000520 <fsm_mode_running_for_pressed_1s+0x19c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a43      	ldr	r2, [pc, #268]	; (8000524 <fsm_mode_running_for_pressed_1s+0x1a0>)
 8000416:	6013      	str	r3, [r2, #0]
					// Adjust frequency scanning process of single RED LED
					setTimer1(DURATION_HALF_OF_SECOND);
 8000418:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800041c:	f000 fc8e 	bl	8000d3c <setTimer1>
					break;
 8000420:	e04d      	b.n	80004be <fsm_mode_running_for_pressed_1s+0x13a>
				// RED && MAN_RED MODE
				case RED_MODE: case MAN_RED_MODE:
					led_init();
 8000422:	f000 fa61 	bl	80008e8 <led_init>
					// restore light_time if is not pressed button confirm
					light_time = man_amber_time;
 8000426:	4b40      	ldr	r3, [pc, #256]	; (8000528 <fsm_mode_running_for_pressed_1s+0x1a4>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a3d      	ldr	r2, [pc, #244]	; (8000520 <fsm_mode_running_for_pressed_1s+0x19c>)
 800042c:	6013      	str	r3, [r2, #0]
					temp_value = light_time; // store value to temp variable if button add is pressed
 800042e:	4b3c      	ldr	r3, [pc, #240]	; (8000520 <fsm_mode_running_for_pressed_1s+0x19c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3c      	ldr	r2, [pc, #240]	; (8000524 <fsm_mode_running_for_pressed_1s+0x1a0>)
 8000434:	6013      	str	r3, [r2, #0]
					status = AMBER_MODE;
 8000436:	4b36      	ldr	r3, [pc, #216]	; (8000510 <fsm_mode_running_for_pressed_1s+0x18c>)
 8000438:	2203      	movs	r2, #3
 800043a:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '3 - AMBER_MODE' \r\n");
 800043c:	483b      	ldr	r0, [pc, #236]	; (800052c <fsm_mode_running_for_pressed_1s+0x1a8>)
 800043e:	f002 fe9d 	bl	800317c <puts>
					break;
 8000442:	e03c      	b.n	80004be <fsm_mode_running_for_pressed_1s+0x13a>
				// AMBER && MAN_AMBER MODE
				case AMBER_MODE: case MAN_AMBER_MODE:
					GPIOB->BSRR = 0x3F00;
 8000444:	4b3a      	ldr	r3, [pc, #232]	; (8000530 <fsm_mode_running_for_pressed_1s+0x1ac>)
 8000446:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 800044a:	611a      	str	r2, [r3, #16]
					// restore light_time if is not pressed button confirm
					light_time = man_green_time;
 800044c:	4b39      	ldr	r3, [pc, #228]	; (8000534 <fsm_mode_running_for_pressed_1s+0x1b0>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a33      	ldr	r2, [pc, #204]	; (8000520 <fsm_mode_running_for_pressed_1s+0x19c>)
 8000452:	6013      	str	r3, [r2, #0]
					temp_value = light_time; // store value to temp variable if button add is pressed
 8000454:	4b32      	ldr	r3, [pc, #200]	; (8000520 <fsm_mode_running_for_pressed_1s+0x19c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a32      	ldr	r2, [pc, #200]	; (8000524 <fsm_mode_running_for_pressed_1s+0x1a0>)
 800045a:	6013      	str	r3, [r2, #0]
					status = GREEN_MODE;
 800045c:	4b2c      	ldr	r3, [pc, #176]	; (8000510 <fsm_mode_running_for_pressed_1s+0x18c>)
 800045e:	2204      	movs	r2, #4
 8000460:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '4 - GREEN_MODE' \r\n");
 8000462:	4835      	ldr	r0, [pc, #212]	; (8000538 <fsm_mode_running_for_pressed_1s+0x1b4>)
 8000464:	f002 fe8a 	bl	800317c <puts>
					break;
 8000468:	e029      	b.n	80004be <fsm_mode_running_for_pressed_1s+0x13a>
				// GREEN && MAN_GREEN MODE
				case GREEN_MODE: case MAN_GREEN_MODE:
					led_init();
 800046a:	f000 fa3d 	bl	80008e8 <led_init>
					// restore light_time if is not pressed button confirm
					light_time = man_red_time;
 800046e:	4b2b      	ldr	r3, [pc, #172]	; (800051c <fsm_mode_running_for_pressed_1s+0x198>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a2b      	ldr	r2, [pc, #172]	; (8000520 <fsm_mode_running_for_pressed_1s+0x19c>)
 8000474:	6013      	str	r3, [r2, #0]
					// assign temp value = light_time and then
					// if button add is pressed it will increase temp_value;
					temp_value = light_time;
 8000476:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <fsm_mode_running_for_pressed_1s+0x19c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a2a      	ldr	r2, [pc, #168]	; (8000524 <fsm_mode_running_for_pressed_1s+0x1a0>)
 800047c:	6013      	str	r3, [r2, #0]
					status = NORMAL_MODE;
 800047e:	4b24      	ldr	r3, [pc, #144]	; (8000510 <fsm_mode_running_for_pressed_1s+0x18c>)
 8000480:	2201      	movs	r2, #1
 8000482:	601a      	str	r2, [r3, #0]
					printf("The system is in MODE '1 - NORMAL' \r\n");
 8000484:	482d      	ldr	r0, [pc, #180]	; (800053c <fsm_mode_running_for_pressed_1s+0x1b8>)
 8000486:	f002 fe79 	bl	800317c <puts>
					// re-initialize traffic light
					traffic_init();
 800048a:	f000 fe81 	bl	8001190 <traffic_init>
					// update the new buffer to display it at LED 7 SEG
					update_buffer();
 800048e:	f000 f9cd 	bl	800082c <update_buffer>
					if (man_red_time != man_green_time + man_amber_time) {
 8000492:	4b28      	ldr	r3, [pc, #160]	; (8000534 <fsm_mode_running_for_pressed_1s+0x1b0>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	4b24      	ldr	r3, [pc, #144]	; (8000528 <fsm_mode_running_for_pressed_1s+0x1a4>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	441a      	add	r2, r3
 800049c:	4b1f      	ldr	r3, [pc, #124]	; (800051c <fsm_mode_running_for_pressed_1s+0x198>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d007      	beq.n	80004b4 <fsm_mode_running_for_pressed_1s+0x130>
						printf("The setting is incorrect.\r\n");
 80004a4:	4826      	ldr	r0, [pc, #152]	; (8000540 <fsm_mode_running_for_pressed_1s+0x1bc>)
 80004a6:	f002 fe69 	bl	800317c <puts>
						printf("You should choose red = green + amber (time).\r\n");
 80004aa:	4826      	ldr	r0, [pc, #152]	; (8000544 <fsm_mode_running_for_pressed_1s+0x1c0>)
 80004ac:	f002 fe66 	bl	800317c <puts>
						resetToTheDefaultSetting();
 80004b0:	f000 ff28 	bl	8001304 <resetToTheDefaultSetting>
					}
					setTimer3(DURATION_1S);
 80004b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b8:	f000 fc74 	bl	8000da4 <setTimer3>
				default:
					break;
 80004bc:	bf00      	nop
			}
			buttonState = BUTTON_PRESSED;
 80004be:	4b22      	ldr	r3, [pc, #136]	; (8000548 <fsm_mode_running_for_pressed_1s+0x1c4>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	701a      	strb	r2, [r3, #0]
			break;
 80004c4:	e021      	b.n	800050a <fsm_mode_running_for_pressed_1s+0x186>
		// ADD BUTTON
		case button_add_is_pressed_1s:
			// Increasing time depending on current state
			switch(status) {
 80004c6:	4b12      	ldr	r3, [pc, #72]	; (8000510 <fsm_mode_running_for_pressed_1s+0x18c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b04      	cmp	r3, #4
 80004cc:	d00e      	beq.n	80004ec <fsm_mode_running_for_pressed_1s+0x168>
 80004ce:	2b04      	cmp	r3, #4
 80004d0:	dc10      	bgt.n	80004f4 <fsm_mode_running_for_pressed_1s+0x170>
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d002      	beq.n	80004dc <fsm_mode_running_for_pressed_1s+0x158>
 80004d6:	2b03      	cmp	r3, #3
 80004d8:	d004      	beq.n	80004e4 <fsm_mode_running_for_pressed_1s+0x160>
				break;
			case GREEN_MODE:
				status = MAN_GREEN_MODE;
				break;
			default:
				break;
 80004da:	e00b      	b.n	80004f4 <fsm_mode_running_for_pressed_1s+0x170>
				status = MAN_RED_MODE;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <fsm_mode_running_for_pressed_1s+0x18c>)
 80004de:	2205      	movs	r2, #5
 80004e0:	601a      	str	r2, [r3, #0]
				break;
 80004e2:	e008      	b.n	80004f6 <fsm_mode_running_for_pressed_1s+0x172>
				status = MAN_AMBER_MODE;
 80004e4:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <fsm_mode_running_for_pressed_1s+0x18c>)
 80004e6:	2206      	movs	r2, #6
 80004e8:	601a      	str	r2, [r3, #0]
				break;
 80004ea:	e004      	b.n	80004f6 <fsm_mode_running_for_pressed_1s+0x172>
				status = MAN_GREEN_MODE;
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <fsm_mode_running_for_pressed_1s+0x18c>)
 80004ee:	2207      	movs	r2, #7
 80004f0:	601a      	str	r2, [r3, #0]
				break;
 80004f2:	e000      	b.n	80004f6 <fsm_mode_running_for_pressed_1s+0x172>
				break;
 80004f4:	bf00      	nop
			}
			// If the button add is pressed then temp_value++. Finally update light_time = temp_value,
			updateTempTime();
 80004f6:	f000 fe6d 	bl	80011d4 <updateTempTime>
			break;
 80004fa:	e006      	b.n	800050a <fsm_mode_running_for_pressed_1s+0x186>
		// CONFIRM BUTTON
		case button_confirm_is_pressed:
			// If the button confirm is pressed, then man_red/yellow/green_time = temp_value was stored before
			confirmAdjustedTime();
 80004fc:	f000 feba 	bl	8001274 <confirmAdjustedTime>
			break;
 8000500:	e003      	b.n	800050a <fsm_mode_running_for_pressed_1s+0x186>
		case button_reset_is_pressed:
			resetToTheDefaultSetting();
 8000502:	f000 feff 	bl	8001304 <resetToTheDefaultSetting>
			break;
 8000506:	e000      	b.n	800050a <fsm_mode_running_for_pressed_1s+0x186>
		default:
			break;
 8000508:	bf00      	nop
	}
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000014 	.word	0x20000014
 8000514:	20000010 	.word	0x20000010
 8000518:	08003a3c 	.word	0x08003a3c
 800051c:	20000000 	.word	0x20000000
 8000520:	2000000c 	.word	0x2000000c
 8000524:	200000d0 	.word	0x200000d0
 8000528:	20000004 	.word	0x20000004
 800052c:	08003a64 	.word	0x08003a64
 8000530:	40010c00 	.word	0x40010c00
 8000534:	20000008 	.word	0x20000008
 8000538:	08003a90 	.word	0x08003a90
 800053c:	08003abc 	.word	0x08003abc
 8000540:	08003ae4 	.word	0x08003ae4
 8000544:	08003b00 	.word	0x08003b00
 8000548:	200000ec 	.word	0x200000ec

0800054c <fsm_for_input_processing>:

void fsm_for_input_processing() {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
	// Only display 3 MODE to modify value.
	if (status == RED_MODE || status == GREEN_MODE || status == AMBER_MODE)
 8000552:	4b37      	ldr	r3, [pc, #220]	; (8000630 <fsm_for_input_processing+0xe4>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b02      	cmp	r3, #2
 8000558:	d007      	beq.n	800056a <fsm_for_input_processing+0x1e>
 800055a:	4b35      	ldr	r3, [pc, #212]	; (8000630 <fsm_for_input_processing+0xe4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b04      	cmp	r3, #4
 8000560:	d003      	beq.n	800056a <fsm_for_input_processing+0x1e>
 8000562:	4b33      	ldr	r3, [pc, #204]	; (8000630 <fsm_for_input_processing+0xe4>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b03      	cmp	r3, #3
 8000568:	d103      	bne.n	8000572 <fsm_for_input_processing+0x26>
		light_time1 = status;
 800056a:	4b31      	ldr	r3, [pc, #196]	; (8000630 <fsm_for_input_processing+0xe4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a31      	ldr	r2, [pc, #196]	; (8000634 <fsm_for_input_processing+0xe8>)
 8000570:	6013      	str	r3, [r2, #0]
	switch(buttonState) {
 8000572:	4b31      	ldr	r3, [pc, #196]	; (8000638 <fsm_for_input_processing+0xec>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d031      	beq.n	80005de <fsm_for_input_processing+0x92>
 800057a:	2b02      	cmp	r3, #2
 800057c:	dc53      	bgt.n	8000626 <fsm_for_input_processing+0xda>
 800057e:	2b00      	cmp	r3, #0
 8000580:	d002      	beq.n	8000588 <fsm_for_input_processing+0x3c>
 8000582:	2b01      	cmp	r3, #1
 8000584:	d00d      	beq.n	80005a2 <fsm_for_input_processing+0x56>
					flagForButtonPressOneQuarterSecond[i] = 0;
				}
			}
			break;
		default:
			break;
 8000586:	e04e      	b.n	8000626 <fsm_for_input_processing+0xda>
			AllowToExecuteAfterASecondPressed = 0;
 8000588:	4b2c      	ldr	r3, [pc, #176]	; (800063c <fsm_for_input_processing+0xf0>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
			if (WhichButtonIsPressed()) {
 800058e:	f7ff fddd 	bl	800014c <WhichButtonIsPressed>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d004      	beq.n	80005a2 <fsm_for_input_processing+0x56>
				buttonState = BUTTON_PRESSED;
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <fsm_for_input_processing+0xec>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
				fsm_mode_running();
 800059e:	f7ff fe1f 	bl	80001e0 <fsm_mode_running>
			if (!WhichButtonIsPressed()) {
 80005a2:	f7ff fdd3 	bl	800014c <WhichButtonIsPressed>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d103      	bne.n	80005b4 <fsm_for_input_processing+0x68>
				buttonState = BUTTON_RELEASED;
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <fsm_for_input_processing+0xec>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
			break;
 80005b2:	e039      	b.n	8000628 <fsm_for_input_processing+0xdc>
				for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	e00d      	b.n	80005d6 <fsm_for_input_processing+0x8a>
					if (is_button_pressed_1s(i))
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f900 	bl	80007c4 <is_button_pressed_1s>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d002      	beq.n	80005d0 <fsm_for_input_processing+0x84>
						buttonState = BUTTON_PRESS_MORE_THAN_1S;
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <fsm_for_input_processing+0xec>)
 80005cc:	2202      	movs	r2, #2
 80005ce:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3301      	adds	r3, #1
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b03      	cmp	r3, #3
 80005da:	ddee      	ble.n	80005ba <fsm_for_input_processing+0x6e>
			break;
 80005dc:	e024      	b.n	8000628 <fsm_for_input_processing+0xdc>
			if (!WhichButtonIsPressed()) {
 80005de:	f7ff fdb5 	bl	800014c <WhichButtonIsPressed>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d102      	bne.n	80005ee <fsm_for_input_processing+0xa2>
				buttonState = BUTTON_RELEASED;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <fsm_for_input_processing+0xec>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
			AllowToExecuteAfterASecondPressed = 1; // Allow the system to count for pressed button each half a second
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <fsm_for_input_processing+0xf0>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80005f4:	2300      	movs	r3, #0
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	e011      	b.n	800061e <fsm_for_input_processing+0xd2>
				if (is_button_pressed_one_quarter_second(i)) {
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f8fa 	bl	80007f8 <is_button_pressed_one_quarter_second>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d006      	beq.n	8000618 <fsm_for_input_processing+0xcc>
					fsm_mode_running_for_pressed_1s();
 800060a:	f7ff febb 	bl	8000384 <fsm_mode_running_for_pressed_1s>
					flagForButtonPressOneQuarterSecond[i] = 0;
 800060e:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <fsm_for_input_processing+0xf4>)
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2100      	movs	r1, #0
 8000614:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	3301      	adds	r3, #1
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2b03      	cmp	r3, #3
 8000622:	ddea      	ble.n	80005fa <fsm_for_input_processing+0xae>
			break;
 8000624:	e000      	b.n	8000628 <fsm_for_input_processing+0xdc>
			break;
 8000626:	bf00      	nop
	}
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000014 	.word	0x20000014
 8000634:	20000010 	.word	0x20000010
 8000638:	200000ec 	.word	0x200000ec
 800063c:	200000d8 	.word	0x200000d8
 8000640:	200000dc 	.word	0x200000dc

08000644 <button_reading>:
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPressOneQuarterSecond[N0_OF_BUTTONS];

void button_reading(void) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	e081      	b.n	8000754 <button_reading+0x110>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000650:	4a45      	ldr	r2, [pc, #276]	; (8000768 <button_reading+0x124>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	7819      	ldrb	r1, [r3, #0]
 8000658:	4a44      	ldr	r2, [pc, #272]	; (800076c <button_reading+0x128>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	460a      	mov	r2, r1
 8000660:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000662:	4a43      	ldr	r2, [pc, #268]	; (8000770 <button_reading+0x12c>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800066a:	4942      	ldr	r1, [pc, #264]	; (8000774 <button_reading+0x130>)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000672:	4619      	mov	r1, r3
 8000674:	4610      	mov	r0, r2
 8000676:	f001 fae3 	bl	8001c40 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	4619      	mov	r1, r3
 800067e:	4a3a      	ldr	r2, [pc, #232]	; (8000768 <button_reading+0x124>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	460a      	mov	r2, r1
 8000686:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8000688:	4a37      	ldr	r2, [pc, #220]	; (8000768 <button_reading+0x124>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	781a      	ldrb	r2, [r3, #0]
 8000690:	4936      	ldr	r1, [pc, #216]	; (800076c <button_reading+0x128>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	440b      	add	r3, r1
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	d158      	bne.n	800074e <button_reading+0x10a>
			//valid input, can read now
			buttonBuffer[i] = debounceButtonBuffer1[i];
 800069c:	4a32      	ldr	r2, [pc, #200]	; (8000768 <button_reading+0x124>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	7819      	ldrb	r1, [r3, #0]
 80006a4:	4a34      	ldr	r2, [pc, #208]	; (8000778 <button_reading+0x134>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	460a      	mov	r2, r1
 80006ac:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80006ae:	4a32      	ldr	r2, [pc, #200]	; (8000778 <button_reading+0x134>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d135      	bne.n	8000726 <button_reading+0xe2>
				if ((counterForButtonPressOneQuarterSecond[i] < DURATION_FOR_AUTO_RUNNING_MODE)
 80006ba:	4a30      	ldr	r2, [pc, #192]	; (800077c <button_reading+0x138>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c2:	2b18      	cmp	r3, #24
 80006c4:	d80e      	bhi.n	80006e4 <button_reading+0xa0>
						&& AllowToExecuteAfterASecondPressed)
 80006c6:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <button_reading+0x13c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00a      	beq.n	80006e4 <button_reading+0xa0>
				{
					counterForButtonPressOneQuarterSecond[i]++;
 80006ce:	4a2b      	ldr	r2, [pc, #172]	; (800077c <button_reading+0x138>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006d6:	3301      	adds	r3, #1
 80006d8:	b299      	uxth	r1, r3
 80006da:	4a28      	ldr	r2, [pc, #160]	; (800077c <button_reading+0x138>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006e2:	e009      	b.n	80006f8 <button_reading+0xb4>
				} else {
					counterForButtonPressOneQuarterSecond[i] = 0;
 80006e4:	4a25      	ldr	r2, [pc, #148]	; (800077c <button_reading+0x138>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2100      	movs	r1, #0
 80006ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPressOneQuarterSecond[i] = 1;
 80006ee:	4a25      	ldr	r2, [pc, #148]	; (8000784 <button_reading+0x140>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2101      	movs	r1, #1
 80006f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80006f8:	4a23      	ldr	r2, [pc, #140]	; (8000788 <button_reading+0x144>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000700:	2b63      	cmp	r3, #99	; 0x63
 8000702:	d80a      	bhi.n	800071a <button_reading+0xd6>
					counterForButtonPress1s[i]++;
 8000704:	4a20      	ldr	r2, [pc, #128]	; (8000788 <button_reading+0x144>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800070c:	3301      	adds	r3, #1
 800070e:	b299      	uxth	r1, r3
 8000710:	4a1d      	ldr	r2, [pc, #116]	; (8000788 <button_reading+0x144>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000718:	e019      	b.n	800074e <button_reading+0x10a>
				} else {
					// the flag is turned on when 1 second has passed
					// since the button is pressed .
					flagForButtonPress1s[i] = 1;
 800071a:	4a1c      	ldr	r2, [pc, #112]	; (800078c <button_reading+0x148>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
 8000724:	e013      	b.n	800074e <button_reading+0x10a>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 8000726:	4a18      	ldr	r2, [pc, #96]	; (8000788 <button_reading+0x144>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2100      	movs	r1, #0
 800072c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				counterForButtonPressOneQuarterSecond[i] = 0;
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <button_reading+0x138>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2100      	movs	r1, #0
 8000736:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <button_reading+0x148>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4413      	add	r3, r2
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
				flagForButtonPressOneQuarterSecond[i] = 0;
 8000744:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <button_reading+0x140>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2100      	movs	r1, #0
 800074a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3301      	adds	r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b03      	cmp	r3, #3
 8000758:	f77f af7a 	ble.w	8000650 <button_reading+0xc>
			}
		}
	}
}
 800075c:	bf00      	nop
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000f4 	.word	0x200000f4
 800076c:	200000f8 	.word	0x200000f8
 8000770:	2000001c 	.word	0x2000001c
 8000774:	2000002c 	.word	0x2000002c
 8000778:	200000f0 	.word	0x200000f0
 800077c:	20000108 	.word	0x20000108
 8000780:	200000d8 	.word	0x200000d8
 8000784:	200000dc 	.word	0x200000dc
 8000788:	20000100 	.word	0x20000100
 800078c:	200000fc 	.word	0x200000fc

08000790 <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b03      	cmp	r3, #3
 800079e:	d901      	bls.n	80007a4 <is_button_pressed+0x14>
 80007a0:	2300      	movs	r3, #0
 80007a2:	e007      	b.n	80007b4 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <is_button_pressed+0x30>)
 80007a8:	5cd3      	ldrb	r3, [r2, r3]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf0c      	ite	eq
 80007ae:	2301      	moveq	r3, #1
 80007b0:	2300      	movne	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	200000f0 	.word	0x200000f0

080007c4 <is_button_pressed_1s>:

// Check for button is pressed more than a second or not
unsigned char is_button_pressed_1s (unsigned char index ) {
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS ) return 0xff ;
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	d901      	bls.n	80007d8 <is_button_pressed_1s+0x14>
 80007d4:	23ff      	movs	r3, #255	; 0xff
 80007d6:	e007      	b.n	80007e8 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <is_button_pressed_1s+0x30>)
 80007dc:	5cd3      	ldrb	r3, [r2, r3]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	bf0c      	ite	eq
 80007e2:	2301      	moveq	r3, #1
 80007e4:	2300      	movne	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	200000fc 	.word	0x200000fc

080007f8 <is_button_pressed_one_quarter_second>:

unsigned char is_button_pressed_one_quarter_second(unsigned char index) {
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0xff ;
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d901      	bls.n	800080c <is_button_pressed_one_quarter_second+0x14>
 8000808:	23ff      	movs	r3, #255	; 0xff
 800080a:	e008      	b.n	800081e <is_button_pressed_one_quarter_second+0x26>
	return (flagForButtonPressOneQuarterSecond[index] == 1) ;
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4a06      	ldr	r2, [pc, #24]	; (8000828 <is_button_pressed_one_quarter_second+0x30>)
 8000810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000814:	2b01      	cmp	r3, #1
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	200000dc 	.word	0x200000dc

0800082c <update_buffer>:
#include "led7seg.h"
#include "global.h"
static uint8_t led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
static uint8_t led_buffer[4] = {0};
//static uint8_t man_led_buffer[3] = {0};
void update_buffer() {
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	if (light_time1 >= 10) {
 8000830:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <update_buffer+0xac>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b09      	cmp	r3, #9
 8000836:	dd1b      	ble.n	8000870 <update_buffer+0x44>
		led_buffer[0] = light_time1 / 10;
 8000838:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <update_buffer+0xac>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a27      	ldr	r2, [pc, #156]	; (80008dc <update_buffer+0xb0>)
 800083e:	fb82 1203 	smull	r1, r2, r2, r3
 8000842:	1092      	asrs	r2, r2, #2
 8000844:	17db      	asrs	r3, r3, #31
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <update_buffer+0xb4>)
 800084c:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = light_time1 % 10;
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <update_buffer+0xac>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <update_buffer+0xb0>)
 8000854:	fb83 1302 	smull	r1, r3, r3, r2
 8000858:	1099      	asrs	r1, r3, #2
 800085a:	17d3      	asrs	r3, r2, #31
 800085c:	1ac9      	subs	r1, r1, r3
 800085e:	460b      	mov	r3, r1
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad1      	subs	r1, r2, r3
 8000868:	b2ca      	uxtb	r2, r1
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <update_buffer+0xb4>)
 800086c:	705a      	strb	r2, [r3, #1]
 800086e:	e007      	b.n	8000880 <update_buffer+0x54>
	} else {
		led_buffer[0] = 0;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <update_buffer+0xb4>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = light_time1;
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <update_buffer+0xac>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <update_buffer+0xb4>)
 800087e:	705a      	strb	r2, [r3, #1]
	}

	if (light_time >= 10) {
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <update_buffer+0xb8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b09      	cmp	r3, #9
 8000886:	dd1b      	ble.n	80008c0 <update_buffer+0x94>
		led_buffer[2] = light_time / 10;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <update_buffer+0xb8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a13      	ldr	r2, [pc, #76]	; (80008dc <update_buffer+0xb0>)
 800088e:	fb82 1203 	smull	r1, r2, r2, r3
 8000892:	1092      	asrs	r2, r2, #2
 8000894:	17db      	asrs	r3, r3, #31
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <update_buffer+0xb4>)
 800089c:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time % 10;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <update_buffer+0xb8>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <update_buffer+0xb0>)
 80008a4:	fb83 1302 	smull	r1, r3, r3, r2
 80008a8:	1099      	asrs	r1, r3, #2
 80008aa:	17d3      	asrs	r3, r2, #31
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	460b      	mov	r3, r1
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	440b      	add	r3, r1
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	1ad1      	subs	r1, r2, r3
 80008b8:	b2ca      	uxtb	r2, r1
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <update_buffer+0xb4>)
 80008bc:	70da      	strb	r2, [r3, #3]
	} else {
		led_buffer[2] = 0;
		led_buffer[3] = light_time;
	}
}
 80008be:	e007      	b.n	80008d0 <update_buffer+0xa4>
		led_buffer[2] = 0;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <update_buffer+0xb4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time;
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <update_buffer+0xb8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <update_buffer+0xb4>)
 80008ce:	70da      	strb	r2, [r3, #3]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	20000010 	.word	0x20000010
 80008dc:	66666667 	.word	0x66666667
 80008e0:	20000110 	.word	0x20000110
 80008e4:	2000000c 	.word	0x2000000c

080008e8 <led_init>:

void led_init() {
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
	GPIOB->BSRR = 0x3F00;
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <led_init+0x14>)
 80008ee:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 80008f2:	611a      	str	r2, [r3, #16]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	40010c00 	.word	0x40010c00

08000900 <update7SEG>:

void led_clear() {
	HAL_GPIO_WritePin(GPIOA, D1_Pin | D2_Pin | D3_Pin | D4_Pin | D5_Pin | D6_Pin, 1);
}

void update7SEG(int index){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b03      	cmp	r3, #3
 800090c:	d872      	bhi.n	80009f4 <update7SEG+0xf4>
 800090e:	a201      	add	r2, pc, #4	; (adr r2, 8000914 <update7SEG+0x14>)
 8000910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000914:	08000925 	.word	0x08000925
 8000918:	08000959 	.word	0x08000959
 800091c:	0800098d 	.word	0x0800098d
 8000920:	080009c1 	.word	0x080009c1
	switch(index) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, ON_7SEG); // turn on the first SEG
 8000924:	2201      	movs	r2, #1
 8000926:	2110      	movs	r1, #16
 8000928:	4835      	ldr	r0, [pc, #212]	; (8000a00 <update7SEG+0x100>)
 800092a:	f001 f9a0 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	4833      	ldr	r0, [pc, #204]	; (8000a00 <update7SEG+0x100>)
 8000934:	f001 f99b 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 8000938:	2200      	movs	r2, #0
 800093a:	2140      	movs	r1, #64	; 0x40
 800093c:	4830      	ldr	r0, [pc, #192]	; (8000a00 <update7SEG+0x100>)
 800093e:	f001 f996 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 8000942:	2200      	movs	r2, #0
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	482e      	ldr	r0, [pc, #184]	; (8000a00 <update7SEG+0x100>)
 8000948:	f001 f991 	bl	8001c6e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 800094c:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <update7SEG+0x104>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f859 	bl	8000a08 <display7SEG>
			break;
 8000956:	e04e      	b.n	80009f6 <update7SEG+0xf6>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 8000958:	2200      	movs	r2, #0
 800095a:	2110      	movs	r1, #16
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <update7SEG+0x100>)
 800095e:	f001 f986 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, ON_7SEG); // turn on the second SEG
 8000962:	2201      	movs	r2, #1
 8000964:	2120      	movs	r1, #32
 8000966:	4826      	ldr	r0, [pc, #152]	; (8000a00 <update7SEG+0x100>)
 8000968:	f001 f981 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 800096c:	2200      	movs	r2, #0
 800096e:	2140      	movs	r1, #64	; 0x40
 8000970:	4823      	ldr	r0, [pc, #140]	; (8000a00 <update7SEG+0x100>)
 8000972:	f001 f97c 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 8000976:	2200      	movs	r2, #0
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	4821      	ldr	r0, [pc, #132]	; (8000a00 <update7SEG+0x100>)
 800097c:	f001 f977 	bl	8001c6e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000980:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <update7SEG+0x104>)
 8000982:	785b      	ldrb	r3, [r3, #1]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 f83f 	bl	8000a08 <display7SEG>
			break;
 800098a:	e034      	b.n	80009f6 <update7SEG+0xf6>
		case 2:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 800098c:	2200      	movs	r2, #0
 800098e:	2110      	movs	r1, #16
 8000990:	481b      	ldr	r0, [pc, #108]	; (8000a00 <update7SEG+0x100>)
 8000992:	f001 f96c 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 8000996:	2200      	movs	r2, #0
 8000998:	2120      	movs	r1, #32
 800099a:	4819      	ldr	r0, [pc, #100]	; (8000a00 <update7SEG+0x100>)
 800099c:	f001 f967 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, ON_7SEG); // turn on the third SEG
 80009a0:	2201      	movs	r2, #1
 80009a2:	2140      	movs	r1, #64	; 0x40
 80009a4:	4816      	ldr	r0, [pc, #88]	; (8000a00 <update7SEG+0x100>)
 80009a6:	f001 f962 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 80009aa:	2200      	movs	r2, #0
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	4814      	ldr	r0, [pc, #80]	; (8000a00 <update7SEG+0x100>)
 80009b0:	f001 f95d 	bl	8001c6e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <update7SEG+0x104>)
 80009b6:	789b      	ldrb	r3, [r3, #2]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 f825 	bl	8000a08 <display7SEG>
			break;
 80009be:	e01a      	b.n	80009f6 <update7SEG+0xf6>
		case 3:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 80009c0:	2200      	movs	r2, #0
 80009c2:	2110      	movs	r1, #16
 80009c4:	480e      	ldr	r0, [pc, #56]	; (8000a00 <update7SEG+0x100>)
 80009c6:	f001 f952 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 80009ca:	2200      	movs	r2, #0
 80009cc:	2120      	movs	r1, #32
 80009ce:	480c      	ldr	r0, [pc, #48]	; (8000a00 <update7SEG+0x100>)
 80009d0:	f001 f94d 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 80009d4:	2200      	movs	r2, #0
 80009d6:	2140      	movs	r1, #64	; 0x40
 80009d8:	4809      	ldr	r0, [pc, #36]	; (8000a00 <update7SEG+0x100>)
 80009da:	f001 f948 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, ON_7SEG); // turn on the fourth SEG
 80009de:	2201      	movs	r2, #1
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	4807      	ldr	r0, [pc, #28]	; (8000a00 <update7SEG+0x100>)
 80009e4:	f001 f943 	bl	8001c6e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <update7SEG+0x104>)
 80009ea:	78db      	ldrb	r3, [r3, #3]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f80b 	bl	8000a08 <display7SEG>
			break;
 80009f2:	e000      	b.n	80009f6 <update7SEG+0xf6>
		default:
			break;
 80009f4:	bf00      	nop
	}
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40010800 	.word	0x40010800
 8000a04:	20000110 	.word	0x20000110

08000a08 <display7SEG>:
void display7SEG(int num) {
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	GPIOB->BRR= 0xFF;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <display7SEG+0x24>)
 8000a12:	22ff      	movs	r2, #255	; 0xff
 8000a14:	615a      	str	r2, [r3, #20]
	GPIOB->BSRR = led7seg[num];
 8000a16:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <display7SEG+0x28>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	781a      	ldrb	r2, [r3, #0]
 8000a1e:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <display7SEG+0x24>)
 8000a20:	611a      	str	r2, [r3, #16]
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	40010c00 	.word	0x40010c00
 8000a30:	20000034 	.word	0x20000034

08000a34 <displayMode>:

void displayMode() {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	update_buffer();
 8000a38:	f7ff fef8 	bl	800082c <update_buffer>
	if (index_led >= 4) index_led = 0;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <displayMode+0x2c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	dd02      	ble.n	8000a4a <displayMode+0x16>
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <displayMode+0x2c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
	update7SEG(index_led++);
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <displayMode+0x2c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	4903      	ldr	r1, [pc, #12]	; (8000a60 <displayMode+0x2c>)
 8000a52:	600a      	str	r2, [r1, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff53 	bl	8000900 <update7SEG>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000d4 	.word	0x200000d4

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a68:	f000 fe00 	bl	800166c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6c:	f000 f82a 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a70:	f000 f8da 	bl	8000c28 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a74:	f000 f862 	bl	8000b3c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a78:	f000 f8ac 	bl	8000bd4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 8000a7c:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <main+0x54>)
 8000a7e:	f001 fd91 	bl	80025a4 <HAL_TIM_Base_Start_IT>
  //led7SEG_init();
  GPIOA->BRR=0xFF;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <main+0x58>)
 8000a84:	22ff      	movs	r2, #255	; 0xff
 8000a86:	615a      	str	r2, [r3, #20]
  led_init();
 8000a88:	f7ff ff2e 	bl	80008e8 <led_init>
  traffic_init();
 8000a8c:	f000 fb80 	bl	8001190 <traffic_init>
  setTimer1(2);
 8000a90:	2002      	movs	r0, #2
 8000a92:	f000 f953 	bl	8000d3c <setTimer1>
  setTimer2(DURATION_1S);
 8000a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9a:	f000 f969 	bl	8000d70 <setTimer2>
  setTimer3(DURATION_1S);
 8000a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa2:	f000 f97f 	bl	8000da4 <setTimer3>
  printf("The system is in MODE '1 - NORMAL_MODE' \r\n");
 8000aa6:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <main+0x5c>)
 8000aa8:	f002 fb68 	bl	800317c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  traffic_light_processing();
 8000aac:	f000 fd66 	bl	800157c <traffic_light_processing>
	  fsm_for_input_processing();
 8000ab0:	f7ff fd4c 	bl	800054c <fsm_for_input_processing>
	  traffic_light_processing();
 8000ab4:	e7fa      	b.n	8000aac <main+0x48>
 8000ab6:	bf00      	nop
 8000ab8:	2000018c 	.word	0x2000018c
 8000abc:	40010800 	.word	0x40010800
 8000ac0:	08003b30 	.word	0x08003b30

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b090      	sub	sp, #64	; 0x40
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	2228      	movs	r2, #40	; 0x28
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 fadc 	bl	8003090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aea:	2301      	movs	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aee:	2310      	movs	r3, #16
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0318 	add.w	r3, r7, #24
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 f8e8 	bl	8001cd0 <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b06:	f000 f8fd 	bl	8000d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 fb54 	bl	80021d0 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b2e:	f000 f8e9 	bl	8000d04 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3740      	adds	r7, #64	; 0x40
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b62:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b70:	2209      	movs	r2, #9
 8000b72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b80:	4813      	ldr	r0, [pc, #76]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b82:	f001 fcbf 	bl	8002504 <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b8c:	f000 f8ba 	bl	8000d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b9e:	f001 fe55 	bl	800284c <HAL_TIM_ConfigClockSource>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ba8:	f000 f8ac 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000bba:	f002 f81d 	bl	8002bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bc4:	f000 f89e 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000018c 	.word	0x2000018c

08000bd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <MX_USART1_UART_Init+0x50>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000c0c:	f002 f85e 	bl	8002ccc <HAL_UART_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c16:	f000 f875 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000148 	.word	0x20000148
 8000c24:	40013800 	.word	0x40013800

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a2d      	ldr	r2, [pc, #180]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c54:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c5a:	f043 0308 	orr.w	r3, r3, #8
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <MX_GPIO_Init+0xd0>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0308 	and.w	r3, r3, #8
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	21f0      	movs	r1, #240	; 0xf0
 8000c70:	4822      	ldr	r0, [pc, #136]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c72:	f000 fffc 	bl	8001c6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_Pin|D4_Pin|D5_Pin|D6_Pin
 8000c76:	2200      	movs	r2, #0
 8000c78:	f643 71f8 	movw	r1, #16376	; 0x3ff8
 8000c7c:	4820      	ldr	r0, [pc, #128]	; (8000d00 <MX_GPIO_Init+0xd8>)
 8000c7e:	f000 fff6 	bl	8001c6e <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |GPIO_PIN_7|D1_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000c82:	23f0      	movs	r3, #240	; 0xf0
 8000c84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	4619      	mov	r1, r3
 8000c98:	4818      	ldr	r0, [pc, #96]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000c9a:	f000 fe57 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin;
 8000c9e:	2307      	movs	r3, #7
 8000ca0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 0308 	add.w	r3, r7, #8
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4813      	ldr	r0, [pc, #76]	; (8000d00 <MX_GPIO_Init+0xd8>)
 8000cb2:	f000 fe4b 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D4_Pin D5_Pin D6_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           PB7 D1_Pin D2_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D4_Pin|D5_Pin|D6_Pin
 8000cb6:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 8000cba:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |GPIO_PIN_7|D1_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <MX_GPIO_Init+0xd8>)
 8000cd0:	f000 fe3c 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin CONFIRM_Pin RESET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|CONFIRM_Pin|RESET_Pin;
 8000cd4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_GPIO_Init+0xd4>)
 8000cea:	f000 fe2f 	bl	800194c <HAL_GPIO_Init>

}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010800 	.word	0x40010800
 8000d00:	40010c00 	.word	0x40010c00

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <_write>:
#include "output_display.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *ptr, int len)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	4804      	ldr	r0, [pc, #16]	; (8000d38 <_write+0x28>)
 8000d28:	f002 f81d 	bl	8002d66 <HAL_UART_Transmit>
	return len;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000148 	.word	0x20000148

08000d3c <setTimer1>:
int timer3_counter = 0;
int timer4_counter = 0;
int timer5_counter = 0;

int TIMER_CYCLE = 10; // 10ms
void setTimer1(int duration) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <setTimer1+0x28>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d4e:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <setTimer1+0x2c>)
 8000d50:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <setTimer1+0x30>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000040 	.word	0x20000040
 8000d68:	20000128 	.word	0x20000128
 8000d6c:	20000114 	.word	0x20000114

08000d70 <setTimer2>:
void setTimer2(int duration) {
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <setTimer2+0x28>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d82:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <setTimer2+0x2c>)
 8000d84:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <setTimer2+0x30>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000040 	.word	0x20000040
 8000d9c:	2000012c 	.word	0x2000012c
 8000da0:	20000118 	.word	0x20000118

08000da4 <setTimer3>:
void setTimer3(int duration) {
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <setTimer3+0x28>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000db6:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <setTimer3+0x2c>)
 8000db8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <setTimer3+0x30>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000040 	.word	0x20000040
 8000dd0:	20000130 	.word	0x20000130
 8000dd4:	2000011c 	.word	0x2000011c

08000dd8 <timerRun>:
void setTimer5(int duration) {
	timer5_counter = duration / TIMER_CYCLE;
	timer5_flag = 0;
}

void timerRun() {
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000ddc:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <timerRun+0xac>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	dd0b      	ble.n	8000dfc <timerRun+0x24>
		timer1_counter--;
 8000de4:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <timerRun+0xac>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	4a26      	ldr	r2, [pc, #152]	; (8000e84 <timerRun+0xac>)
 8000dec:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <timerRun+0xac>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	dc02      	bgt.n	8000dfc <timerRun+0x24>
			timer1_flag = 1;
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <timerRun+0xb0>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <timerRun+0xb4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	dd0b      	ble.n	8000e1c <timerRun+0x44>
		timer2_counter--;
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <timerRun+0xb4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	4a20      	ldr	r2, [pc, #128]	; (8000e8c <timerRun+0xb4>)
 8000e0c:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <timerRun+0xb4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	dc02      	bgt.n	8000e1c <timerRun+0x44>
			timer2_flag = 1;
 8000e16:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <timerRun+0xb8>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <timerRun+0xbc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dd0b      	ble.n	8000e3c <timerRun+0x64>
		timer3_counter--;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <timerRun+0xbc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <timerRun+0xbc>)
 8000e2c:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <timerRun+0xbc>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	dc02      	bgt.n	8000e3c <timerRun+0x64>
			timer3_flag = 1;
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <timerRun+0xc0>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <timerRun+0xc4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	dd0b      	ble.n	8000e5c <timerRun+0x84>
		timer4_counter--;
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <timerRun+0xc4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <timerRun+0xc4>)
 8000e4c:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <timerRun+0xc4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dc02      	bgt.n	8000e5c <timerRun+0x84>
			timer4_flag = 1;
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <timerRun+0xc8>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <timerRun+0xcc>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	dd0b      	ble.n	8000e7c <timerRun+0xa4>
		timer5_counter--;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <timerRun+0xcc>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <timerRun+0xcc>)
 8000e6c:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <timerRun+0xcc>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	dc02      	bgt.n	8000e7c <timerRun+0xa4>
			timer5_flag = 1;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <timerRun+0xd0>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	20000128 	.word	0x20000128
 8000e88:	20000114 	.word	0x20000114
 8000e8c:	2000012c 	.word	0x2000012c
 8000e90:	20000118 	.word	0x20000118
 8000e94:	20000130 	.word	0x20000130
 8000e98:	2000011c 	.word	0x2000011c
 8000e9c:	20000134 	.word	0x20000134
 8000ea0:	20000120 	.word	0x20000120
 8000ea4:	20000138 	.word	0x20000138
 8000ea8:	20000124 	.word	0x20000124

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_MspInit+0x5c>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_MspInit+0x5c>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6193      	str	r3, [r2, #24]
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	61d3      	str	r3, [r2, #28]
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_MspInit+0x5c>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_MspInit+0x60>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_MspInit+0x60>)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000

08000f10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f20:	d113      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_TIM_Base_MspInit+0x44>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <HAL_TIM_Base_MspInit+0x44>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_TIM_Base_MspInit+0x44>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	201c      	movs	r0, #28
 8000f40:	f000 fccd 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f44:	201c      	movs	r0, #28
 8000f46:	f000 fce6 	bl	8001916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <HAL_UART_MspInit+0x8c>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d131      	bne.n	8000fdc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_UART_MspInit+0x90>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a1a      	ldr	r2, [pc, #104]	; (8000fe8 <HAL_UART_MspInit+0x90>)
 8000f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_UART_MspInit+0x90>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_UART_MspInit+0x90>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <HAL_UART_MspInit+0x90>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_UART_MspInit+0x90>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0310 	add.w	r3, r7, #16
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480b      	ldr	r0, [pc, #44]	; (8000fec <HAL_UART_MspInit+0x94>)
 8000fbe:	f000 fcc5 	bl	800194c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <HAL_UART_MspInit+0x94>)
 8000fd8:	f000 fcb8 	bl	800194c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fdc:	bf00      	nop
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40013800 	.word	0x40013800
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010800 	.word	0x40010800

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001036:	f000 fb5f 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <TIM2_IRQHandler+0x10>)
 8001046:	f001 faf9 	bl	800263c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000018c 	.word	0x2000018c

08001054 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e00a      	b.n	800107c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001066:	f3af 8000 	nop.w
 800106a:	4601      	mov	r1, r0
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	60ba      	str	r2, [r7, #8]
 8001072:	b2ca      	uxtb	r2, r1
 8001074:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbf0      	blt.n	8001066 <_read+0x12>
	}

return len;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_close>:
	}
	return len;
}

int _close(int file)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b4:	605a      	str	r2, [r3, #4]
	return 0;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr

080010c2 <_isatty>:

int _isatty(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	return 1;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
	return 0;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
	...

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f001 ff8c 	bl	800303c <__errno>
 8001124:	4603      	mov	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20002800 	.word	0x20002800
 8001150:	00000400 	.word	0x00000400
 8001154:	2000013c 	.word	0x2000013c
 8001158:	200001e8 	.word	0x200001e8

0800115c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "software_timer.h"
#include "led7seg.h"
#include "global.h"

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001178:	d103      	bne.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 800117a:	f7ff fa63 	bl	8000644 <button_reading>
		displayMode();
 800117e:	f7ff fc59 	bl	8000a34 <displayMode>
	}
	timerRun();
 8001182:	f7ff fe29 	bl	8000dd8 <timerRun>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <traffic_init>:
#include "input_processing.h"
#include "global.h"
#include "led7seg.h"
#include "software_timer.h"

void traffic_init() {
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	light_time = man_green_time;
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <traffic_init+0x30>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <traffic_init+0x34>)
 800119a:	6013      	str	r3, [r2, #0]
	light_time1 = man_red_time;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <traffic_init+0x38>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <traffic_init+0x3c>)
 80011a2:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011aa:	4809      	ldr	r0, [pc, #36]	; (80011d0 <traffic_init+0x40>)
 80011ac:	f000 fd5f 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <traffic_init+0x40>)
 80011b8:	f000 fd59 	bl	8001c6e <HAL_GPIO_WritePin>
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000008 	.word	0x20000008
 80011c4:	2000000c 	.word	0x2000000c
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000010 	.word	0x20000010
 80011d0:	40010c00 	.word	0x40010c00

080011d4 <updateTempTime>:

void updateTempTime() {
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	switch(status) {
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <updateTempTime+0x94>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3b01      	subs	r3, #1
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d83a      	bhi.n	8001258 <updateTempTime+0x84>
 80011e2:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <updateTempTime+0x14>)
 80011e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e8:	08001259 	.word	0x08001259
 80011ec:	08001259 	.word	0x08001259
 80011f0:	08001259 	.word	0x08001259
 80011f4:	08001259 	.word	0x08001259
 80011f8:	08001205 	.word	0x08001205
 80011fc:	08001221 	.word	0x08001221
 8001200:	0800123d 	.word	0x0800123d
		case NORMAL_MODE:
			break;
		case MAN_RED_MODE:
			//light_time = man_red_time;
			if (temp_value >= 99) temp_value = 0;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <updateTempTime+0x98>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b62      	cmp	r3, #98	; 0x62
 800120a:	dd03      	ble.n	8001214 <updateTempTime+0x40>
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <updateTempTime+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 8001212:	e021      	b.n	8001258 <updateTempTime+0x84>
			else temp_value++;
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <updateTempTime+0x98>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	4a14      	ldr	r2, [pc, #80]	; (800126c <updateTempTime+0x98>)
 800121c:	6013      	str	r3, [r2, #0]
			break;
 800121e:	e01b      	b.n	8001258 <updateTempTime+0x84>
		case MAN_AMBER_MODE:
			//temp_value = temp_value;
			if (temp_value >= 99) temp_value = 0;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <updateTempTime+0x98>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b62      	cmp	r3, #98	; 0x62
 8001226:	dd03      	ble.n	8001230 <updateTempTime+0x5c>
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <updateTempTime+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 800122e:	e013      	b.n	8001258 <updateTempTime+0x84>
			else temp_value++;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <updateTempTime+0x98>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	4a0d      	ldr	r2, [pc, #52]	; (800126c <updateTempTime+0x98>)
 8001238:	6013      	str	r3, [r2, #0]
			break;
 800123a:	e00d      	b.n	8001258 <updateTempTime+0x84>
		case MAN_GREEN_MODE:
			//light_time = man_green_time;
			if (temp_value >= 99) temp_value = 0;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <updateTempTime+0x98>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b62      	cmp	r3, #98	; 0x62
 8001242:	dd03      	ble.n	800124c <updateTempTime+0x78>
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <updateTempTime+0x98>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 800124a:	e004      	b.n	8001256 <updateTempTime+0x82>
			else temp_value++;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <updateTempTime+0x98>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	4a06      	ldr	r2, [pc, #24]	; (800126c <updateTempTime+0x98>)
 8001254:	6013      	str	r3, [r2, #0]
			break;
 8001256:	bf00      	nop
	}
	light_time = temp_value;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <updateTempTime+0x98>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <updateTempTime+0x9c>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000014 	.word	0x20000014
 800126c:	200000d0 	.word	0x200000d0
 8001270:	2000000c 	.word	0x2000000c

08001274 <confirmAdjustedTime>:

void confirmAdjustedTime() {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	printf("Confirmed adjust time!\r\n");
 8001278:	481b      	ldr	r0, [pc, #108]	; (80012e8 <confirmAdjustedTime+0x74>)
 800127a:	f001 ff7f 	bl	800317c <puts>
	switch(status) {
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <confirmAdjustedTime+0x78>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3b01      	subs	r3, #1
 8001284:	2b06      	cmp	r3, #6
 8001286:	d82c      	bhi.n	80012e2 <confirmAdjustedTime+0x6e>
 8001288:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <confirmAdjustedTime+0x1c>)
 800128a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128e:	bf00      	nop
 8001290:	080012e3 	.word	0x080012e3
 8001294:	080012e3 	.word	0x080012e3
 8001298:	080012e3 	.word	0x080012e3
 800129c:	080012e3 	.word	0x080012e3
 80012a0:	080012ad 	.word	0x080012ad
 80012a4:	080012bf 	.word	0x080012bf
 80012a8:	080012d1 	.word	0x080012d1
		case NORMAL_MODE:
			//temp_value = light_time;
			break;
		case MAN_RED_MODE:
			man_red_time = temp_value;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <confirmAdjustedTime+0x7c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <confirmAdjustedTime+0x80>)
 80012b2:	6013      	str	r3, [r2, #0]
			light_time = man_red_time;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <confirmAdjustedTime+0x80>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <confirmAdjustedTime+0x84>)
 80012ba:	6013      	str	r3, [r2, #0]
			break;
 80012bc:	e012      	b.n	80012e4 <confirmAdjustedTime+0x70>
		case MAN_AMBER_MODE:
			man_amber_time = temp_value;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <confirmAdjustedTime+0x7c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <confirmAdjustedTime+0x88>)
 80012c4:	6013      	str	r3, [r2, #0]
			light_time = man_amber_time;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <confirmAdjustedTime+0x88>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <confirmAdjustedTime+0x84>)
 80012cc:	6013      	str	r3, [r2, #0]
			break;
 80012ce:	e009      	b.n	80012e4 <confirmAdjustedTime+0x70>
		case MAN_GREEN_MODE:
			man_green_time = temp_value;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <confirmAdjustedTime+0x7c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <confirmAdjustedTime+0x8c>)
 80012d6:	6013      	str	r3, [r2, #0]
			light_time = man_green_time;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <confirmAdjustedTime+0x8c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <confirmAdjustedTime+0x84>)
 80012de:	6013      	str	r3, [r2, #0]
			break;
 80012e0:	e000      	b.n	80012e4 <confirmAdjustedTime+0x70>
		default:
			break;
 80012e2:	bf00      	nop
	}
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	08003b5c 	.word	0x08003b5c
 80012ec:	20000014 	.word	0x20000014
 80012f0:	200000d0 	.word	0x200000d0
 80012f4:	20000000 	.word	0x20000000
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	20000004 	.word	0x20000004
 8001300:	20000008 	.word	0x20000008

08001304 <resetToTheDefaultSetting>:

void resetToTheDefaultSetting() {
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	// default settings
	printf("All settings have been reset!\r\n");
 8001308:	480f      	ldr	r0, [pc, #60]	; (8001348 <resetToTheDefaultSetting+0x44>)
 800130a:	f001 ff37 	bl	800317c <puts>
	printf("The system is in MODE '1 - NORMAL_MODE' \r\n");
 800130e:	480f      	ldr	r0, [pc, #60]	; (800134c <resetToTheDefaultSetting+0x48>)
 8001310:	f001 ff34 	bl	800317c <puts>
	man_red_time = RED_TIME / 100;
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <resetToTheDefaultSetting+0x4c>)
 8001316:	2205      	movs	r2, #5
 8001318:	601a      	str	r2, [r3, #0]
	man_amber_time = YELLOW_TIME / 100;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <resetToTheDefaultSetting+0x50>)
 800131c:	2202      	movs	r2, #2
 800131e:	601a      	str	r2, [r3, #0]
	man_green_time = GREEN_TIME / 100;
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <resetToTheDefaultSetting+0x54>)
 8001322:	2203      	movs	r2, #3
 8001324:	601a      	str	r2, [r3, #0]
	status = NORMAL_MODE;
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <resetToTheDefaultSetting+0x58>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]
	led_status = RED_GREEN;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <resetToTheDefaultSetting+0x5c>)
 800132e:	2214      	movs	r2, #20
 8001330:	601a      	str	r2, [r3, #0]
	index_led = 0;
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <resetToTheDefaultSetting+0x60>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
	temp_value = 0;
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <resetToTheDefaultSetting+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
	// re-initialize traffic light with default settings
	traffic_init();
 800133e:	f7ff ff27 	bl	8001190 <traffic_init>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	08003b74 	.word	0x08003b74
 800134c:	08003b94 	.word	0x08003b94
 8001350:	20000000 	.word	0x20000000
 8001354:	20000004 	.word	0x20000004
 8001358:	20000008 	.word	0x20000008
 800135c:	20000014 	.word	0x20000014
 8001360:	20000018 	.word	0x20000018
 8001364:	200000d4 	.word	0x200000d4
 8001368:	200000d0 	.word	0x200000d0

0800136c <normal_running_traffic_light>:

void normal_running_traffic_light() {
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	switch(led_status) {
 8001370:	4b7a      	ldr	r3, [pc, #488]	; (800155c <normal_running_traffic_light+0x1f0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3b14      	subs	r3, #20
 8001376:	2b03      	cmp	r3, #3
 8001378:	f200 80e4 	bhi.w	8001544 <normal_running_traffic_light+0x1d8>
 800137c:	a201      	add	r2, pc, #4	; (adr r2, 8001384 <normal_running_traffic_light+0x18>)
 800137e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001382:	bf00      	nop
 8001384:	08001395 	.word	0x08001395
 8001388:	08001413 	.word	0x08001413
 800138c:	0800147d 	.word	0x0800147d
 8001390:	080014dd 	.word	0x080014dd
		case RED_GREEN:
			if (timer3_flag == 1) {
 8001394:	4b72      	ldr	r3, [pc, #456]	; (8001560 <normal_running_traffic_light+0x1f4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	f040 80d5 	bne.w	8001548 <normal_running_traffic_light+0x1dc>
				led_init();
 800139e:	f7ff faa3 	bl	80008e8 <led_init>
				HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a8:	486e      	ldr	r0, [pc, #440]	; (8001564 <normal_running_traffic_light+0x1f8>)
 80013aa:	f000 fc60 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b4:	486b      	ldr	r0, [pc, #428]	; (8001564 <normal_running_traffic_light+0x1f8>)
 80013b6:	f000 fc5a 	bl	8001c6e <HAL_GPIO_WritePin>

				light_time--;
 80013ba:	4b6b      	ldr	r3, [pc, #428]	; (8001568 <normal_running_traffic_light+0x1fc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3b01      	subs	r3, #1
 80013c0:	4a69      	ldr	r2, [pc, #420]	; (8001568 <normal_running_traffic_light+0x1fc>)
 80013c2:	6013      	str	r3, [r2, #0]
				light_time1--;
 80013c4:	4b69      	ldr	r3, [pc, #420]	; (800156c <normal_running_traffic_light+0x200>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	4a68      	ldr	r2, [pc, #416]	; (800156c <normal_running_traffic_light+0x200>)
 80013cc:	6013      	str	r3, [r2, #0]
				if (light_time == 0 || light_time1 == 0) {
 80013ce:	4b66      	ldr	r3, [pc, #408]	; (8001568 <normal_running_traffic_light+0x1fc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <normal_running_traffic_light+0x72>
 80013d6:	4b65      	ldr	r3, [pc, #404]	; (800156c <normal_running_traffic_light+0x200>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d114      	bne.n	8001408 <normal_running_traffic_light+0x9c>
					led_status = RED_AMBER;
 80013de:	4b5f      	ldr	r3, [pc, #380]	; (800155c <normal_running_traffic_light+0x1f0>)
 80013e0:	2215      	movs	r2, #21
 80013e2:	601a      	str	r2, [r3, #0]
					light_time = man_amber_time; // Road 2
 80013e4:	4b62      	ldr	r3, [pc, #392]	; (8001570 <normal_running_traffic_light+0x204>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a5f      	ldr	r2, [pc, #380]	; (8001568 <normal_running_traffic_light+0x1fc>)
 80013ea:	6013      	str	r3, [r2, #0]
					led_init();
 80013ec:	f7ff fa7c 	bl	80008e8 <led_init>
					//light_time1 = man_red_time; // Road 1
					HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f6:	485b      	ldr	r0, [pc, #364]	; (8001564 <normal_running_traffic_light+0x1f8>)
 80013f8:	f000 fc39 	bl	8001c6e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D5_Pin, 0); // On ROAD 2, turn on the AMBER light. 
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001402:	4858      	ldr	r0, [pc, #352]	; (8001564 <normal_running_traffic_light+0x1f8>)
 8001404:	f000 fc33 	bl	8001c6e <HAL_GPIO_WritePin>
				}
				setTimer3(DURATION_1S);
 8001408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800140c:	f7ff fcca 	bl	8000da4 <setTimer3>
			}
			break;
 8001410:	e09a      	b.n	8001548 <normal_running_traffic_light+0x1dc>
		case RED_AMBER:
				if (timer3_flag == 1) {
 8001412:	4b53      	ldr	r3, [pc, #332]	; (8001560 <normal_running_traffic_light+0x1f4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	f040 8098 	bne.w	800154c <normal_running_traffic_light+0x1e0>
					light_time--;
 800141c:	4b52      	ldr	r3, [pc, #328]	; (8001568 <normal_running_traffic_light+0x1fc>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3b01      	subs	r3, #1
 8001422:	4a51      	ldr	r2, [pc, #324]	; (8001568 <normal_running_traffic_light+0x1fc>)
 8001424:	6013      	str	r3, [r2, #0]
					light_time1--;
 8001426:	4b51      	ldr	r3, [pc, #324]	; (800156c <normal_running_traffic_light+0x200>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3b01      	subs	r3, #1
 800142c:	4a4f      	ldr	r2, [pc, #316]	; (800156c <normal_running_traffic_light+0x200>)
 800142e:	6013      	str	r3, [r2, #0]
					if (!light_time || !light_time1) {
 8001430:	4b4d      	ldr	r3, [pc, #308]	; (8001568 <normal_running_traffic_light+0x1fc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <normal_running_traffic_light+0xd4>
 8001438:	4b4c      	ldr	r3, [pc, #304]	; (800156c <normal_running_traffic_light+0x200>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d118      	bne.n	8001472 <normal_running_traffic_light+0x106>
						led_status = GREEN_RED;
 8001440:	4b46      	ldr	r3, [pc, #280]	; (800155c <normal_running_traffic_light+0x1f0>)
 8001442:	2216      	movs	r2, #22
 8001444:	601a      	str	r2, [r3, #0]
						light_time = man_red_time; // Road 2
 8001446:	4b4b      	ldr	r3, [pc, #300]	; (8001574 <normal_running_traffic_light+0x208>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a47      	ldr	r2, [pc, #284]	; (8001568 <normal_running_traffic_light+0x1fc>)
 800144c:	6013      	str	r3, [r2, #0]
						light_time1 = man_green_time; // Road 1
 800144e:	4b4a      	ldr	r3, [pc, #296]	; (8001578 <normal_running_traffic_light+0x20c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a46      	ldr	r2, [pc, #280]	; (800156c <normal_running_traffic_light+0x200>)
 8001454:	6013      	str	r3, [r2, #0]

						led_init();
 8001456:	f7ff fa47 	bl	80008e8 <led_init>
						HAL_GPIO_WritePin(GPIOB, D4_Pin, 0); // On ROAD 1, turn on the RED light. 
 800145a:	2200      	movs	r2, #0
 800145c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001460:	4840      	ldr	r0, [pc, #256]	; (8001564 <normal_running_traffic_light+0x1f8>)
 8001462:	f000 fc04 	bl	8001c6e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, D3_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800146c:	483d      	ldr	r0, [pc, #244]	; (8001564 <normal_running_traffic_light+0x1f8>)
 800146e:	f000 fbfe 	bl	8001c6e <HAL_GPIO_WritePin>
					}
					setTimer3(DURATION_1S);
 8001472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001476:	f7ff fc95 	bl	8000da4 <setTimer3>
				}

			break;
 800147a:	e067      	b.n	800154c <normal_running_traffic_light+0x1e0>
		case GREEN_RED:
			if (timer3_flag == 1) {
 800147c:	4b38      	ldr	r3, [pc, #224]	; (8001560 <normal_running_traffic_light+0x1f4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d165      	bne.n	8001550 <normal_running_traffic_light+0x1e4>

				light_time--;
 8001484:	4b38      	ldr	r3, [pc, #224]	; (8001568 <normal_running_traffic_light+0x1fc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	4a37      	ldr	r2, [pc, #220]	; (8001568 <normal_running_traffic_light+0x1fc>)
 800148c:	6013      	str	r3, [r2, #0]
				light_time1--;
 800148e:	4b37      	ldr	r3, [pc, #220]	; (800156c <normal_running_traffic_light+0x200>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3b01      	subs	r3, #1
 8001494:	4a35      	ldr	r2, [pc, #212]	; (800156c <normal_running_traffic_light+0x200>)
 8001496:	6013      	str	r3, [r2, #0]
				if (!light_time || !light_time1) {
 8001498:	4b33      	ldr	r3, [pc, #204]	; (8001568 <normal_running_traffic_light+0x1fc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <normal_running_traffic_light+0x13c>
 80014a0:	4b32      	ldr	r3, [pc, #200]	; (800156c <normal_running_traffic_light+0x200>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d114      	bne.n	80014d2 <normal_running_traffic_light+0x166>
					led_status = AMBER_RED;
 80014a8:	4b2c      	ldr	r3, [pc, #176]	; (800155c <normal_running_traffic_light+0x1f0>)
 80014aa:	2217      	movs	r2, #23
 80014ac:	601a      	str	r2, [r3, #0]
					light_time1 = man_amber_time; // Road 1
 80014ae:	4b30      	ldr	r3, [pc, #192]	; (8001570 <normal_running_traffic_light+0x204>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a2e      	ldr	r2, [pc, #184]	; (800156c <normal_running_traffic_light+0x200>)
 80014b4:	6013      	str	r3, [r2, #0]
					led_init();
 80014b6:	f7ff fa17 	bl	80008e8 <led_init>
					HAL_GPIO_WritePin(GPIOB, D2_Pin, 0); // On ROAD 1, turn on the RED light. 
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c0:	4828      	ldr	r0, [pc, #160]	; (8001564 <normal_running_traffic_light+0x1f8>)
 80014c2:	f000 fbd4 	bl	8001c6e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D4_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014cc:	4825      	ldr	r0, [pc, #148]	; (8001564 <normal_running_traffic_light+0x1f8>)
 80014ce:	f000 fbce 	bl	8001c6e <HAL_GPIO_WritePin>
				}
				setTimer3(DURATION_1S);
 80014d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d6:	f7ff fc65 	bl	8000da4 <setTimer3>
			}

			break;
 80014da:	e039      	b.n	8001550 <normal_running_traffic_light+0x1e4>
		case AMBER_RED:
			if (timer3_flag == 1) {
 80014dc:	4b20      	ldr	r3, [pc, #128]	; (8001560 <normal_running_traffic_light+0x1f4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d137      	bne.n	8001554 <normal_running_traffic_light+0x1e8>
				light_time--;
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <normal_running_traffic_light+0x1fc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	4a1f      	ldr	r2, [pc, #124]	; (8001568 <normal_running_traffic_light+0x1fc>)
 80014ec:	6013      	str	r3, [r2, #0]
					light_time1--;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <normal_running_traffic_light+0x200>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	4a1d      	ldr	r2, [pc, #116]	; (800156c <normal_running_traffic_light+0x200>)
 80014f6:	6013      	str	r3, [r2, #0]
				if (!light_time || !light_time1) {
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <normal_running_traffic_light+0x1fc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <normal_running_traffic_light+0x19c>
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <normal_running_traffic_light+0x200>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d118      	bne.n	800153a <normal_running_traffic_light+0x1ce>
					led_status = RED_GREEN;
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <normal_running_traffic_light+0x1f0>)
 800150a:	2214      	movs	r2, #20
 800150c:	601a      	str	r2, [r3, #0]
					light_time = man_green_time; // Road 2
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <normal_running_traffic_light+0x20c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <normal_running_traffic_light+0x1fc>)
 8001514:	6013      	str	r3, [r2, #0]
					light_time1 = man_red_time; // Road 1
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <normal_running_traffic_light+0x208>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a14      	ldr	r2, [pc, #80]	; (800156c <normal_running_traffic_light+0x200>)
 800151c:	6013      	str	r3, [r2, #0]
					led_init();
 800151e:	f7ff f9e3 	bl	80008e8 <led_init>
					HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001528:	480e      	ldr	r0, [pc, #56]	; (8001564 <normal_running_traffic_light+0x1f8>)
 800152a:	f000 fba0 	bl	8001c6e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001534:	480b      	ldr	r0, [pc, #44]	; (8001564 <normal_running_traffic_light+0x1f8>)
 8001536:	f000 fb9a 	bl	8001c6e <HAL_GPIO_WritePin>
				}
				setTimer3(DURATION_1S);
 800153a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800153e:	f7ff fc31 	bl	8000da4 <setTimer3>
			}
			break;
 8001542:	e007      	b.n	8001554 <normal_running_traffic_light+0x1e8>
		default:
			break;
 8001544:	bf00      	nop
 8001546:	e006      	b.n	8001556 <normal_running_traffic_light+0x1ea>
			break;
 8001548:	bf00      	nop
 800154a:	e004      	b.n	8001556 <normal_running_traffic_light+0x1ea>
			break;
 800154c:	bf00      	nop
 800154e:	e002      	b.n	8001556 <normal_running_traffic_light+0x1ea>
			break;
 8001550:	bf00      	nop
 8001552:	e000      	b.n	8001556 <normal_running_traffic_light+0x1ea>
			break;
 8001554:	bf00      	nop
	}
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000018 	.word	0x20000018
 8001560:	2000011c 	.word	0x2000011c
 8001564:	40010c00 	.word	0x40010c00
 8001568:	2000000c 	.word	0x2000000c
 800156c:	20000010 	.word	0x20000010
 8001570:	20000004 	.word	0x20000004
 8001574:	20000000 	.word	0x20000000
 8001578:	20000008 	.word	0x20000008

0800157c <traffic_light_processing>:

void traffic_light_processing() {
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	switch(status) {
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <traffic_light_processing+0x98>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3b01      	subs	r3, #1
 8001586:	2b06      	cmp	r3, #6
 8001588:	d842      	bhi.n	8001610 <traffic_light_processing+0x94>
 800158a:	a201      	add	r2, pc, #4	; (adr r2, 8001590 <traffic_light_processing+0x14>)
 800158c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001590:	080015ad 	.word	0x080015ad
 8001594:	080015b3 	.word	0x080015b3
 8001598:	080015cf 	.word	0x080015cf
 800159c:	080015eb 	.word	0x080015eb
 80015a0:	080015b3 	.word	0x080015b3
 80015a4:	080015cf 	.word	0x080015cf
 80015a8:	080015eb 	.word	0x080015eb
		case NORMAL_MODE:
			normal_running_traffic_light();
 80015ac:	f7ff fede 	bl	800136c <normal_running_traffic_light>
			break;
 80015b0:	e02e      	b.n	8001610 <traffic_light_processing+0x94>
		case RED_MODE: case MAN_RED_MODE:
			if (timer1_flag == 1) {
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <traffic_light_processing+0x9c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d125      	bne.n	8001606 <traffic_light_processing+0x8a>
				// Toggle RED
				HAL_GPIO_TogglePin(GPIOB, D4_Pin | D1_Pin);
 80015ba:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80015be:	4817      	ldr	r0, [pc, #92]	; (800161c <traffic_light_processing+0xa0>)
 80015c0:	f000 fb6d 	bl	8001c9e <HAL_GPIO_TogglePin>
				setTimer1(DURATION_HALF_OF_SECOND);
 80015c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c8:	f7ff fbb8 	bl	8000d3c <setTimer1>
			}
			break;
 80015cc:	e01b      	b.n	8001606 <traffic_light_processing+0x8a>
		case AMBER_MODE: case MAN_AMBER_MODE:
			if (timer1_flag == 1) {
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <traffic_light_processing+0x9c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d119      	bne.n	800160a <traffic_light_processing+0x8e>
				// Toggle AMBER
				HAL_GPIO_TogglePin(GPIOB, D2_Pin | D5_Pin);
 80015d6:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80015da:	4810      	ldr	r0, [pc, #64]	; (800161c <traffic_light_processing+0xa0>)
 80015dc:	f000 fb5f 	bl	8001c9e <HAL_GPIO_TogglePin>
				setTimer1(DURATION_HALF_OF_SECOND);
 80015e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e4:	f7ff fbaa 	bl	8000d3c <setTimer1>
			}
			break;
 80015e8:	e00f      	b.n	800160a <traffic_light_processing+0x8e>
		case GREEN_MODE: case MAN_GREEN_MODE:
			if (timer1_flag == 1) {
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <traffic_light_processing+0x9c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d10d      	bne.n	800160e <traffic_light_processing+0x92>
				// Toggle GREEN
				HAL_GPIO_TogglePin(GPIOB, D3_Pin | D6_Pin);
 80015f2:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80015f6:	4809      	ldr	r0, [pc, #36]	; (800161c <traffic_light_processing+0xa0>)
 80015f8:	f000 fb51 	bl	8001c9e <HAL_GPIO_TogglePin>
				setTimer1(DURATION_HALF_OF_SECOND);
 80015fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001600:	f7ff fb9c 	bl	8000d3c <setTimer1>
			}
			break;
 8001604:	e003      	b.n	800160e <traffic_light_processing+0x92>
			break;
 8001606:	bf00      	nop
 8001608:	e002      	b.n	8001610 <traffic_light_processing+0x94>
			break;
 800160a:	bf00      	nop
 800160c:	e000      	b.n	8001610 <traffic_light_processing+0x94>
			break;
 800160e:	bf00      	nop
	}
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000014 	.word	0x20000014
 8001618:	20000114 	.word	0x20000114
 800161c:	40010c00 	.word	0x40010c00

08001620 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001622:	490d      	ldr	r1, [pc, #52]	; (8001658 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001638:	4c0a      	ldr	r4, [pc, #40]	; (8001664 <LoopFillZerobss+0x22>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001646:	f7ff fd89 	bl	800115c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164a:	f001 fcfd 	bl	8003048 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800164e:	f7ff fa09 	bl	8000a64 <main>
  bx lr
 8001652:	4770      	bx	lr
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 800165c:	08003c54 	.word	0x08003c54
  ldr r2, =_sbss
 8001660:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001664:	200001e8 	.word	0x200001e8

08001668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC1_2_IRQHandler>
	...

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_Init+0x28>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_Init+0x28>)
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 f923 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001682:	200f      	movs	r0, #15
 8001684:	f000 f808 	bl	8001698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001688:	f7ff fc10 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40022000 	.word	0x40022000

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_InitTick+0x54>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_InitTick+0x58>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f93b 	bl	8001932 <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d80a      	bhi.n	80016e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f000 f903 	bl	80018de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d8:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <HAL_InitTick+0x5c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000044 	.word	0x20000044
 80016f0:	2000004c 	.word	0x2000004c
 80016f4:	20000048 	.word	0x20000048

080016f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_IncTick+0x1c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_IncTick+0x20>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a03      	ldr	r2, [pc, #12]	; (8001718 <HAL_IncTick+0x20>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	2000004c 	.word	0x2000004c
 8001718:	200001d4 	.word	0x200001d4

0800171c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;
 8001720:	4b02      	ldr	r3, [pc, #8]	; (800172c <HAL_GetTick+0x10>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	200001d4 	.word	0x200001d4

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4906      	ldr	r1, [pc, #24]	; (80017c8 <__NVIC_EnableIRQ+0x34>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100

080017cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db0a      	blt.n	80017f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	490c      	ldr	r1, [pc, #48]	; (8001818 <__NVIC_SetPriority+0x4c>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	440b      	add	r3, r1
 80017f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f4:	e00a      	b.n	800180c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4908      	ldr	r1, [pc, #32]	; (800181c <__NVIC_SetPriority+0x50>)
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	3b04      	subs	r3, #4
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	440b      	add	r3, r1
 800180a:	761a      	strb	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e100 	.word	0xe000e100
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f1c3 0307 	rsb	r3, r3, #7
 800183a:	2b04      	cmp	r3, #4
 800183c:	bf28      	it	cs
 800183e:	2304      	movcs	r3, #4
 8001840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3304      	adds	r3, #4
 8001846:	2b06      	cmp	r3, #6
 8001848:	d902      	bls.n	8001850 <NVIC_EncodePriority+0x30>
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3b03      	subs	r3, #3
 800184e:	e000      	b.n	8001852 <NVIC_EncodePriority+0x32>
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43da      	mvns	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	401a      	ands	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43d9      	mvns	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	4313      	orrs	r3, r2
         );
}
 800187a:	4618      	mov	r0, r3
 800187c:	3724      	adds	r7, #36	; 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001894:	d301      	bcc.n	800189a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <SysTick_Config+0x40>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a2:	210f      	movs	r1, #15
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f7ff ff90 	bl	80017cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <SysTick_Config+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <SysTick_Config+0x40>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff2d 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f0:	f7ff ff42 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff ff90 	bl	8001820 <NVIC_EncodePriority>
 8001900:	4602      	mov	r2, r0
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff5f 	bl	80017cc <__NVIC_SetPriority>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff35 	bl	8001794 <__NVIC_EnableIRQ>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffa2 	bl	8001884 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b08b      	sub	sp, #44	; 0x2c
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195e:	e148      	b.n	8001bf2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001960:	2201      	movs	r2, #1
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	429a      	cmp	r2, r3
 800197a:	f040 8137 	bne.w	8001bec <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4aa3      	ldr	r2, [pc, #652]	; (8001c10 <HAL_GPIO_Init+0x2c4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d05e      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 8001988:	4aa1      	ldr	r2, [pc, #644]	; (8001c10 <HAL_GPIO_Init+0x2c4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d875      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 800198e:	4aa1      	ldr	r2, [pc, #644]	; (8001c14 <HAL_GPIO_Init+0x2c8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d058      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 8001994:	4a9f      	ldr	r2, [pc, #636]	; (8001c14 <HAL_GPIO_Init+0x2c8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d86f      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 800199a:	4a9f      	ldr	r2, [pc, #636]	; (8001c18 <HAL_GPIO_Init+0x2cc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d052      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 80019a0:	4a9d      	ldr	r2, [pc, #628]	; (8001c18 <HAL_GPIO_Init+0x2cc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d869      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 80019a6:	4a9d      	ldr	r2, [pc, #628]	; (8001c1c <HAL_GPIO_Init+0x2d0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d04c      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 80019ac:	4a9b      	ldr	r2, [pc, #620]	; (8001c1c <HAL_GPIO_Init+0x2d0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d863      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 80019b2:	4a9b      	ldr	r2, [pc, #620]	; (8001c20 <HAL_GPIO_Init+0x2d4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d046      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 80019b8:	4a99      	ldr	r2, [pc, #612]	; (8001c20 <HAL_GPIO_Init+0x2d4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d85d      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 80019be:	2b12      	cmp	r3, #18
 80019c0:	d82a      	bhi.n	8001a18 <HAL_GPIO_Init+0xcc>
 80019c2:	2b12      	cmp	r3, #18
 80019c4:	d859      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 80019c6:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <HAL_GPIO_Init+0x80>)
 80019c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019cc:	08001a47 	.word	0x08001a47
 80019d0:	08001a21 	.word	0x08001a21
 80019d4:	08001a33 	.word	0x08001a33
 80019d8:	08001a75 	.word	0x08001a75
 80019dc:	08001a7b 	.word	0x08001a7b
 80019e0:	08001a7b 	.word	0x08001a7b
 80019e4:	08001a7b 	.word	0x08001a7b
 80019e8:	08001a7b 	.word	0x08001a7b
 80019ec:	08001a7b 	.word	0x08001a7b
 80019f0:	08001a7b 	.word	0x08001a7b
 80019f4:	08001a7b 	.word	0x08001a7b
 80019f8:	08001a7b 	.word	0x08001a7b
 80019fc:	08001a7b 	.word	0x08001a7b
 8001a00:	08001a7b 	.word	0x08001a7b
 8001a04:	08001a7b 	.word	0x08001a7b
 8001a08:	08001a7b 	.word	0x08001a7b
 8001a0c:	08001a7b 	.word	0x08001a7b
 8001a10:	08001a29 	.word	0x08001a29
 8001a14:	08001a3d 	.word	0x08001a3d
 8001a18:	4a82      	ldr	r2, [pc, #520]	; (8001c24 <HAL_GPIO_Init+0x2d8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a1e:	e02c      	b.n	8001a7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	623b      	str	r3, [r7, #32]
          break;
 8001a26:	e029      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	623b      	str	r3, [r7, #32]
          break;
 8001a30:	e024      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	3308      	adds	r3, #8
 8001a38:	623b      	str	r3, [r7, #32]
          break;
 8001a3a:	e01f      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	330c      	adds	r3, #12
 8001a42:	623b      	str	r3, [r7, #32]
          break;
 8001a44:	e01a      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	623b      	str	r3, [r7, #32]
          break;
 8001a52:	e013      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d105      	bne.n	8001a68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	611a      	str	r2, [r3, #16]
          break;
 8001a66:	e009      	b.n	8001a7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a68:	2308      	movs	r3, #8
 8001a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	615a      	str	r2, [r3, #20]
          break;
 8001a72:	e003      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          break;
 8001a7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2bff      	cmp	r3, #255	; 0xff
 8001a80:	d801      	bhi.n	8001a86 <HAL_GPIO_Init+0x13a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	e001      	b.n	8001a8a <HAL_GPIO_Init+0x13e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2bff      	cmp	r3, #255	; 0xff
 8001a90:	d802      	bhi.n	8001a98 <HAL_GPIO_Init+0x14c>
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	e002      	b.n	8001a9e <HAL_GPIO_Init+0x152>
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	3b08      	subs	r3, #8
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	210f      	movs	r1, #15
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	401a      	ands	r2, r3
 8001ab0:	6a39      	ldr	r1, [r7, #32]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8090 	beq.w	8001bec <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001acc:	4b56      	ldr	r3, [pc, #344]	; (8001c28 <HAL_GPIO_Init+0x2dc>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a55      	ldr	r2, [pc, #340]	; (8001c28 <HAL_GPIO_Init+0x2dc>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_GPIO_Init+0x2dc>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ae4:	4a51      	ldr	r2, [pc, #324]	; (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a49      	ldr	r2, [pc, #292]	; (8001c30 <HAL_GPIO_Init+0x2e4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00d      	beq.n	8001b2c <HAL_GPIO_Init+0x1e0>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a48      	ldr	r2, [pc, #288]	; (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d007      	beq.n	8001b28 <HAL_GPIO_Init+0x1dc>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a47      	ldr	r2, [pc, #284]	; (8001c38 <HAL_GPIO_Init+0x2ec>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_GPIO_Init+0x1d8>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e004      	b.n	8001b2e <HAL_GPIO_Init+0x1e2>
 8001b24:	2303      	movs	r3, #3
 8001b26:	e002      	b.n	8001b2e <HAL_GPIO_Init+0x1e2>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_GPIO_Init+0x1e2>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b30:	f002 0203 	and.w	r2, r2, #3
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	4093      	lsls	r3, r2
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b3e:	493b      	ldr	r1, [pc, #236]	; (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b58:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4937      	ldr	r1, [pc, #220]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4933      	ldr	r1, [pc, #204]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b80:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	492d      	ldr	r1, [pc, #180]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4929      	ldr	r1, [pc, #164]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	4923      	ldr	r1, [pc, #140]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	491f      	ldr	r1, [pc, #124]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	4919      	ldr	r1, [pc, #100]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4915      	ldr	r1, [pc, #84]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	3301      	adds	r3, #1
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f47f aeaf 	bne.w	8001960 <HAL_GPIO_Init+0x14>
  }
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	372c      	adds	r7, #44	; 0x2c
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	10320000 	.word	0x10320000
 8001c14:	10310000 	.word	0x10310000
 8001c18:	10220000 	.word	0x10220000
 8001c1c:	10210000 	.word	0x10210000
 8001c20:	10120000 	.word	0x10120000
 8001c24:	10110000 	.word	0x10110000
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	40010800 	.word	0x40010800
 8001c34:	40010c00 	.word	0x40010c00
 8001c38:	40011000 	.word	0x40011000
 8001c3c:	40010400 	.word	0x40010400

08001c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	887b      	ldrh	r3, [r7, #2]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e001      	b.n	8001c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	807b      	strh	r3, [r7, #2]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c7e:	787b      	ldrb	r3, [r7, #1]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c84:	887a      	ldrh	r2, [r7, #2]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c8a:	e003      	b.n	8001c94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	041a      	lsls	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	611a      	str	r2, [r3, #16]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cb0:	887a      	ldrh	r2, [r7, #2]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	041a      	lsls	r2, r3, #16
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	611a      	str	r2, [r3, #16]
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e26c      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 8087 	beq.w	8001dfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cf0:	4b92      	ldr	r3, [pc, #584]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d00c      	beq.n	8001d16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cfc:	4b8f      	ldr	r3, [pc, #572]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d112      	bne.n	8001d2e <HAL_RCC_OscConfig+0x5e>
 8001d08:	4b8c      	ldr	r3, [pc, #560]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d14:	d10b      	bne.n	8001d2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d16:	4b89      	ldr	r3, [pc, #548]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d06c      	beq.n	8001dfc <HAL_RCC_OscConfig+0x12c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d168      	bne.n	8001dfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e246      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x76>
 8001d38:	4b80      	ldr	r3, [pc, #512]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a7f      	ldr	r2, [pc, #508]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	e02e      	b.n	8001da4 <HAL_RCC_OscConfig+0xd4>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x98>
 8001d4e:	4b7b      	ldr	r3, [pc, #492]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a7a      	ldr	r2, [pc, #488]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	4b78      	ldr	r3, [pc, #480]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a77      	ldr	r2, [pc, #476]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e01d      	b.n	8001da4 <HAL_RCC_OscConfig+0xd4>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0xbc>
 8001d72:	4b72      	ldr	r3, [pc, #456]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a71      	ldr	r2, [pc, #452]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a6e      	ldr	r2, [pc, #440]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0xd4>
 8001d8c:	4b6b      	ldr	r3, [pc, #428]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a6a      	ldr	r2, [pc, #424]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b68      	ldr	r3, [pc, #416]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a67      	ldr	r2, [pc, #412]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff fcb6 	bl	800171c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db4:	f7ff fcb2 	bl	800171c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e1fa      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b5d      	ldr	r3, [pc, #372]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0xe4>
 8001dd2:	e014      	b.n	8001dfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fca2 	bl	800171c <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fc9e 	bl	800171c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1e6      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x10c>
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d063      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e0a:	4b4c      	ldr	r3, [pc, #304]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e16:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d11c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x18c>
 8001e22:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d116      	bne.n	8001e5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2e:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_RCC_OscConfig+0x176>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e1ba      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4939      	ldr	r1, [pc, #228]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	e03a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_RCC_OscConfig+0x270>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fc57 	bl	800171c <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e72:	f7ff fc53 	bl	800171c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e19b      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4927      	ldr	r1, [pc, #156]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_RCC_OscConfig+0x270>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fc36 	bl	800171c <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7ff fc32 	bl	800171c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e17a      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d03a      	beq.n	8001f54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d019      	beq.n	8001f1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eec:	f7ff fc16 	bl	800171c <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7ff fc12 	bl	800171c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e15a      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f000 fad8 	bl	80024c8 <RCC_Delay>
 8001f18:	e01c      	b.n	8001f54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f20:	f7ff fbfc 	bl	800171c <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f26:	e00f      	b.n	8001f48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f28:	f7ff fbf8 	bl	800171c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d908      	bls.n	8001f48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e140      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	42420000 	.word	0x42420000
 8001f44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f48:	4b9e      	ldr	r3, [pc, #632]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e9      	bne.n	8001f28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80a6 	beq.w	80020ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f66:	4b97      	ldr	r3, [pc, #604]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10d      	bne.n	8001f8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4b94      	ldr	r3, [pc, #592]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4a93      	ldr	r2, [pc, #588]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	61d3      	str	r3, [r2, #28]
 8001f7e:	4b91      	ldr	r3, [pc, #580]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8e:	4b8e      	ldr	r3, [pc, #568]	; (80021c8 <HAL_RCC_OscConfig+0x4f8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9a:	4b8b      	ldr	r3, [pc, #556]	; (80021c8 <HAL_RCC_OscConfig+0x4f8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a8a      	ldr	r2, [pc, #552]	; (80021c8 <HAL_RCC_OscConfig+0x4f8>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff fbb9 	bl	800171c <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7ff fbb5 	bl	800171c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b64      	cmp	r3, #100	; 0x64
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e0fd      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	4b81      	ldr	r3, [pc, #516]	; (80021c8 <HAL_RCC_OscConfig+0x4f8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x312>
 8001fd4:	4b7b      	ldr	r3, [pc, #492]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4a7a      	ldr	r2, [pc, #488]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6213      	str	r3, [r2, #32]
 8001fe0:	e02d      	b.n	800203e <HAL_RCC_OscConfig+0x36e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x334>
 8001fea:	4b76      	ldr	r3, [pc, #472]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a75      	ldr	r2, [pc, #468]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	6213      	str	r3, [r2, #32]
 8001ff6:	4b73      	ldr	r3, [pc, #460]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a72      	ldr	r2, [pc, #456]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	f023 0304 	bic.w	r3, r3, #4
 8002000:	6213      	str	r3, [r2, #32]
 8002002:	e01c      	b.n	800203e <HAL_RCC_OscConfig+0x36e>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b05      	cmp	r3, #5
 800200a:	d10c      	bne.n	8002026 <HAL_RCC_OscConfig+0x356>
 800200c:	4b6d      	ldr	r3, [pc, #436]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4a6c      	ldr	r2, [pc, #432]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6213      	str	r3, [r2, #32]
 8002018:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4a69      	ldr	r2, [pc, #420]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6213      	str	r3, [r2, #32]
 8002024:	e00b      	b.n	800203e <HAL_RCC_OscConfig+0x36e>
 8002026:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a66      	ldr	r2, [pc, #408]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	6213      	str	r3, [r2, #32]
 8002032:	4b64      	ldr	r3, [pc, #400]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a63      	ldr	r2, [pc, #396]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8002038:	f023 0304 	bic.w	r3, r3, #4
 800203c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d015      	beq.n	8002072 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002046:	f7ff fb69 	bl	800171c <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7ff fb65 	bl	800171c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f241 3288 	movw	r2, #5000	; 0x1388
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e0ab      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002064:	4b57      	ldr	r3, [pc, #348]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ee      	beq.n	800204e <HAL_RCC_OscConfig+0x37e>
 8002070:	e014      	b.n	800209c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002072:	f7ff fb53 	bl	800171c <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7ff fb4f 	bl	800171c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e095      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002090:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1ee      	bne.n	800207a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d105      	bne.n	80020ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a2:	4b48      	ldr	r3, [pc, #288]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a47      	ldr	r2, [pc, #284]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8081 	beq.w	80021ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b8:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d061      	beq.n	8002188 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d146      	bne.n	800215a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020cc:	4b3f      	ldr	r3, [pc, #252]	; (80021cc <HAL_RCC_OscConfig+0x4fc>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7ff fb23 	bl	800171c <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020da:	f7ff fb1f 	bl	800171c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e067      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ec:	4b35      	ldr	r3, [pc, #212]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f0      	bne.n	80020da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002100:	d108      	bne.n	8002114 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002102:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	492d      	ldr	r1, [pc, #180]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002114:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a19      	ldr	r1, [r3, #32]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	430b      	orrs	r3, r1
 8002126:	4927      	ldr	r1, [pc, #156]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212c:	4b27      	ldr	r3, [pc, #156]	; (80021cc <HAL_RCC_OscConfig+0x4fc>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7ff faf3 	bl	800171c <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213a:	f7ff faef 	bl	800171c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e037      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800214c:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x46a>
 8002158:	e02f      	b.n	80021ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <HAL_RCC_OscConfig+0x4fc>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fadc 	bl	800171c <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002168:	f7ff fad8 	bl	800171c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e020      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x498>
 8002186:	e018      	b.n	80021ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e013      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40007000 	.word	0x40007000
 80021cc:	42420060 	.word	0x42420060

080021d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0d0      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e4:	4b6a      	ldr	r3, [pc, #424]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d910      	bls.n	8002214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b67      	ldr	r3, [pc, #412]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 0207 	bic.w	r2, r3, #7
 80021fa:	4965      	ldr	r1, [pc, #404]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b63      	ldr	r3, [pc, #396]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0b8      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800222c:	4b59      	ldr	r3, [pc, #356]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a58      	ldr	r2, [pc, #352]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002236:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002244:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a52      	ldr	r2, [pc, #328]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800224e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002250:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	494d      	ldr	r1, [pc, #308]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d040      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d115      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e07f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228e:	4b41      	ldr	r3, [pc, #260]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e073      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229e:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06b      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ae:	4b39      	ldr	r3, [pc, #228]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f023 0203 	bic.w	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4936      	ldr	r1, [pc, #216]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c0:	f7ff fa2c 	bl	800171c <HAL_GetTick>
 80022c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	e00a      	b.n	80022de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c8:	f7ff fa28 	bl	800171c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e053      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 020c 	and.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d1eb      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d210      	bcs.n	8002320 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 0207 	bic.w	r2, r3, #7
 8002306:	4922      	ldr	r1, [pc, #136]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e032      	b.n	8002386 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4916      	ldr	r1, [pc, #88]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	490e      	ldr	r1, [pc, #56]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800235e:	f000 f821 	bl	80023a4 <HAL_RCC_GetSysClockFreq>
 8002362:	4602      	mov	r2, r0
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	490a      	ldr	r1, [pc, #40]	; (8002398 <HAL_RCC_ClockConfig+0x1c8>)
 8002370:	5ccb      	ldrb	r3, [r1, r3]
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <HAL_RCC_ClockConfig+0x1cc>)
 8002378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x1d0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff f98a 	bl	8001698 <HAL_InitTick>

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40022000 	.word	0x40022000
 8002394:	40021000 	.word	0x40021000
 8002398:	08003bd0 	.word	0x08003bd0
 800239c:	20000044 	.word	0x20000044
 80023a0:	20000048 	.word	0x20000048

080023a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a4:	b490      	push	{r4, r7}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023aa:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023ac:	1d3c      	adds	r4, r7, #4
 80023ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023b4:	f240 2301 	movw	r3, #513	; 0x201
 80023b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	2300      	movs	r3, #0
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ce:	4b22      	ldr	r3, [pc, #136]	; (8002458 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d002      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x40>
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0x46>
 80023e2:	e02d      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e4:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e6:	623b      	str	r3, [r7, #32]
      break;
 80023e8:	e02d      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	0c9b      	lsrs	r3, r3, #18
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023f6:	4413      	add	r3, r2
 80023f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d013      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002408:	4b13      	ldr	r3, [pc, #76]	; (8002458 <HAL_RCC_GetSysClockFreq+0xb4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	0c5b      	lsrs	r3, r3, #17
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002416:	4413      	add	r3, r2
 8002418:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800241c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	4a0e      	ldr	r2, [pc, #56]	; (800245c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002422:	fb02 f203 	mul.w	r2, r2, r3
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
 800242e:	e004      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002434:	fb02 f303 	mul.w	r3, r2, r3
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	623b      	str	r3, [r7, #32]
      break;
 800243e:	e002      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002442:	623b      	str	r3, [r7, #32]
      break;
 8002444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002446:	6a3b      	ldr	r3, [r7, #32]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3728      	adds	r7, #40	; 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bc90      	pop	{r4, r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	08003bc0 	.word	0x08003bc0
 8002458:	40021000 	.word	0x40021000
 800245c:	007a1200 	.word	0x007a1200
 8002460:	003d0900 	.word	0x003d0900

08002464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002468:	4b02      	ldr	r3, [pc, #8]	; (8002474 <HAL_RCC_GetHCLKFreq+0x10>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	20000044 	.word	0x20000044

08002478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800247c:	f7ff fff2 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4903      	ldr	r1, [pc, #12]	; (800249c <HAL_RCC_GetPCLK1Freq+0x24>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	08003be0 	.word	0x08003be0

080024a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024a4:	f7ff ffde 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	0adb      	lsrs	r3, r3, #11
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4903      	ldr	r1, [pc, #12]	; (80024c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08003be0 	.word	0x08003be0

080024c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <RCC_Delay+0x34>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <RCC_Delay+0x38>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	0a5b      	lsrs	r3, r3, #9
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024e4:	bf00      	nop
  }
  while (Delay --);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	60fa      	str	r2, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f9      	bne.n	80024e4 <RCC_Delay+0x1c>
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	20000044 	.word	0x20000044
 8002500:	10624dd3 	.word	0x10624dd3

08002504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e041      	b.n	800259a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fcf0 	bl	8000f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3304      	adds	r3, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4610      	mov	r0, r2
 8002544:	f000 fa6a 	bl	8002a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d001      	beq.n	80025bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e035      	b.n	8002628 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a16      	ldr	r2, [pc, #88]	; (8002634 <HAL_TIM_Base_Start_IT+0x90>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_TIM_Base_Start_IT+0x4e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e6:	d004      	beq.n	80025f2 <HAL_TIM_Base_Start_IT+0x4e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a12      	ldr	r2, [pc, #72]	; (8002638 <HAL_TIM_Base_Start_IT+0x94>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d111      	bne.n	8002616 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b06      	cmp	r3, #6
 8002602:	d010      	beq.n	8002626 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002614:	e007      	b.n	8002626 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40012c00 	.word	0x40012c00
 8002638:	40000400 	.word	0x40000400

0800263c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b02      	cmp	r3, #2
 8002650:	d122      	bne.n	8002698 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b02      	cmp	r3, #2
 800265e:	d11b      	bne.n	8002698 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f06f 0202 	mvn.w	r2, #2
 8002668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f9b1 	bl	80029e6 <HAL_TIM_IC_CaptureCallback>
 8002684:	e005      	b.n	8002692 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f9a4 	bl	80029d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f9b3 	bl	80029f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d122      	bne.n	80026ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d11b      	bne.n	80026ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0204 	mvn.w	r2, #4
 80026bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2202      	movs	r2, #2
 80026c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f987 	bl	80029e6 <HAL_TIM_IC_CaptureCallback>
 80026d8:	e005      	b.n	80026e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f97a 	bl	80029d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f989 	bl	80029f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d122      	bne.n	8002740 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b08      	cmp	r3, #8
 8002706:	d11b      	bne.n	8002740 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0208 	mvn.w	r2, #8
 8002710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2204      	movs	r2, #4
 8002716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f95d 	bl	80029e6 <HAL_TIM_IC_CaptureCallback>
 800272c:	e005      	b.n	800273a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f950 	bl	80029d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f95f 	bl	80029f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b10      	cmp	r3, #16
 800274c:	d122      	bne.n	8002794 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	2b10      	cmp	r3, #16
 800275a:	d11b      	bne.n	8002794 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0210 	mvn.w	r2, #16
 8002764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2208      	movs	r2, #8
 800276a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f933 	bl	80029e6 <HAL_TIM_IC_CaptureCallback>
 8002780:	e005      	b.n	800278e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f926 	bl	80029d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f935 	bl	80029f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d10e      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d107      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0201 	mvn.w	r2, #1
 80027b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7fe fcd4 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ca:	2b80      	cmp	r3, #128	; 0x80
 80027cc:	d10e      	bne.n	80027ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d8:	2b80      	cmp	r3, #128	; 0x80
 80027da:	d107      	bne.n	80027ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fa67 	bl	8002cba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f6:	2b40      	cmp	r3, #64	; 0x40
 80027f8:	d10e      	bne.n	8002818 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d107      	bne.n	8002818 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f8f9 	bl	8002a0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b20      	cmp	r3, #32
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0320 	and.w	r3, r3, #32
 8002830:	2b20      	cmp	r3, #32
 8002832:	d107      	bne.n	8002844 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0220 	mvn.w	r2, #32
 800283c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fa32 	bl	8002ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_TIM_ConfigClockSource+0x18>
 8002860:	2302      	movs	r3, #2
 8002862:	e0b3      	b.n	80029cc <HAL_TIM_ConfigClockSource+0x180>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002882:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800288a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289c:	d03e      	beq.n	800291c <HAL_TIM_ConfigClockSource+0xd0>
 800289e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a2:	f200 8087 	bhi.w	80029b4 <HAL_TIM_ConfigClockSource+0x168>
 80028a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028aa:	f000 8085 	beq.w	80029b8 <HAL_TIM_ConfigClockSource+0x16c>
 80028ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b2:	d87f      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x168>
 80028b4:	2b70      	cmp	r3, #112	; 0x70
 80028b6:	d01a      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0xa2>
 80028b8:	2b70      	cmp	r3, #112	; 0x70
 80028ba:	d87b      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x168>
 80028bc:	2b60      	cmp	r3, #96	; 0x60
 80028be:	d050      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x116>
 80028c0:	2b60      	cmp	r3, #96	; 0x60
 80028c2:	d877      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x168>
 80028c4:	2b50      	cmp	r3, #80	; 0x50
 80028c6:	d03c      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0xf6>
 80028c8:	2b50      	cmp	r3, #80	; 0x50
 80028ca:	d873      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x168>
 80028cc:	2b40      	cmp	r3, #64	; 0x40
 80028ce:	d058      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x136>
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d86f      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x168>
 80028d4:	2b30      	cmp	r3, #48	; 0x30
 80028d6:	d064      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x156>
 80028d8:	2b30      	cmp	r3, #48	; 0x30
 80028da:	d86b      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x168>
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d060      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x156>
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d867      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x168>
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05c      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x156>
 80028e8:	2b10      	cmp	r3, #16
 80028ea:	d05a      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028ec:	e062      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6899      	ldr	r1, [r3, #8]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f000 f95c 	bl	8002bba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002910:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	609a      	str	r2, [r3, #8]
      break;
 800291a:	e04e      	b.n	80029ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6899      	ldr	r1, [r3, #8]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f000 f945 	bl	8002bba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800293e:	609a      	str	r2, [r3, #8]
      break;
 8002940:	e03b      	b.n	80029ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	461a      	mov	r2, r3
 8002950:	f000 f8bc 	bl	8002acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2150      	movs	r1, #80	; 0x50
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f913 	bl	8002b86 <TIM_ITRx_SetConfig>
      break;
 8002960:	e02b      	b.n	80029ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	461a      	mov	r2, r3
 8002970:	f000 f8da 	bl	8002b28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2160      	movs	r1, #96	; 0x60
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f903 	bl	8002b86 <TIM_ITRx_SetConfig>
      break;
 8002980:	e01b      	b.n	80029ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	461a      	mov	r2, r3
 8002990:	f000 f89c 	bl	8002acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2140      	movs	r1, #64	; 0x40
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f8f3 	bl	8002b86 <TIM_ITRx_SetConfig>
      break;
 80029a0:	e00b      	b.n	80029ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4619      	mov	r1, r3
 80029ac:	4610      	mov	r0, r2
 80029ae:	f000 f8ea 	bl	8002b86 <TIM_ITRx_SetConfig>
        break;
 80029b2:	e002      	b.n	80029ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029b4:	bf00      	nop
 80029b6:	e000      	b.n	80029ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a25      	ldr	r2, [pc, #148]	; (8002ac4 <TIM_Base_SetConfig+0xa8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d007      	beq.n	8002a44 <TIM_Base_SetConfig+0x28>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3a:	d003      	beq.n	8002a44 <TIM_Base_SetConfig+0x28>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a22      	ldr	r2, [pc, #136]	; (8002ac8 <TIM_Base_SetConfig+0xac>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d108      	bne.n	8002a56 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a1a      	ldr	r2, [pc, #104]	; (8002ac4 <TIM_Base_SetConfig+0xa8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <TIM_Base_SetConfig+0x52>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a64:	d003      	beq.n	8002a6e <TIM_Base_SetConfig+0x52>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <TIM_Base_SetConfig+0xac>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <TIM_Base_SetConfig+0xa8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d103      	bne.n	8002ab4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	615a      	str	r2, [r3, #20]
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40000400 	.word	0x40000400

08002acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 0201 	bic.w	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f023 030a 	bic.w	r3, r3, #10
 8002b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	621a      	str	r2, [r3, #32]
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f023 0210 	bic.w	r2, r3, #16
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	031b      	lsls	r3, r3, #12
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	621a      	str	r2, [r3, #32]
}
 8002b7c:	bf00      	nop
 8002b7e:	371c      	adds	r7, #28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f043 0307 	orr.w	r3, r3, #7
 8002ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	609a      	str	r2, [r3, #8]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b087      	sub	sp, #28
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	021a      	lsls	r2, r3, #8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	609a      	str	r2, [r3, #8]
}
 8002bee:	bf00      	nop
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e041      	b.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d009      	beq.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5c:	d004      	beq.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d10c      	bne.n	8002c82 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40000400 	.word	0x40000400

08002ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e03f      	b.n	8002d5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe f930 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2224      	movs	r2, #36	; 0x24
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f905 	bl	8002f20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b08a      	sub	sp, #40	; 0x28
 8002d6a:	af02      	add	r7, sp, #8
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d17c      	bne.n	8002e80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_UART_Transmit+0x2c>
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e075      	b.n	8002e82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_UART_Transmit+0x3e>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e06e      	b.n	8002e82 <HAL_UART_Transmit+0x11c>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2221      	movs	r2, #33	; 0x21
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dba:	f7fe fcaf 	bl	800171c <HAL_GetTick>
 8002dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	88fa      	ldrh	r2, [r7, #6]
 8002dca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd4:	d108      	bne.n	8002de8 <HAL_UART_Transmit+0x82>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d104      	bne.n	8002de8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	e003      	b.n	8002df0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002df8:	e02a      	b.n	8002e50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2200      	movs	r2, #0
 8002e02:	2180      	movs	r1, #128	; 0x80
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f840 	bl	8002e8a <UART_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e036      	b.n	8002e82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10b      	bne.n	8002e32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	e007      	b.n	8002e42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	781a      	ldrb	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1cf      	bne.n	8002dfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2200      	movs	r2, #0
 8002e62:	2140      	movs	r1, #64	; 0x40
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f810 	bl	8002e8a <UART_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e006      	b.n	8002e82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e000      	b.n	8002e82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
  }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	4613      	mov	r3, r2
 8002e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9a:	e02c      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d028      	beq.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <UART_WaitOnFlagUntilTimeout+0x30>
 8002eaa:	f7fe fc37 	bl	800171c <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d21d      	bcs.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ec8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e00f      	b.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4013      	ands	r3, r2
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	bf0c      	ite	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	2300      	movne	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d0c3      	beq.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f5a:	f023 030c 	bic.w	r3, r3, #12
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a2c      	ldr	r2, [pc, #176]	; (8003034 <UART_SetConfig+0x114>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d103      	bne.n	8002f90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f88:	f7ff fa8a 	bl	80024a0 <HAL_RCC_GetPCLK2Freq>
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	e002      	b.n	8002f96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f90:	f7ff fa72 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8002f94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009a      	lsls	r2, r3, #2
 8002fa0:	441a      	add	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fac:	4a22      	ldr	r2, [pc, #136]	; (8003038 <UART_SetConfig+0x118>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	0119      	lsls	r1, r3, #4
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009a      	lsls	r2, r3, #2
 8002fc0:	441a      	add	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <UART_SetConfig+0x118>)
 8002fce:	fba3 0302 	umull	r0, r3, r3, r2
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2064      	movs	r0, #100	; 0x64
 8002fd6:	fb00 f303 	mul.w	r3, r0, r3
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	3332      	adds	r3, #50	; 0x32
 8002fe0:	4a15      	ldr	r2, [pc, #84]	; (8003038 <UART_SetConfig+0x118>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fec:	4419      	add	r1, r3
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009a      	lsls	r2, r3, #2
 8002ff8:	441a      	add	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	fbb2 f2f3 	udiv	r2, r2, r3
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <UART_SetConfig+0x118>)
 8003006:	fba3 0302 	umull	r0, r3, r3, r2
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2064      	movs	r0, #100	; 0x64
 800300e:	fb00 f303 	mul.w	r3, r0, r3
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	3332      	adds	r3, #50	; 0x32
 8003018:	4a07      	ldr	r2, [pc, #28]	; (8003038 <UART_SetConfig+0x118>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	f003 020f 	and.w	r2, r3, #15
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	440a      	add	r2, r1
 800302a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40013800 	.word	0x40013800
 8003038:	51eb851f 	.word	0x51eb851f

0800303c <__errno>:
 800303c:	4b01      	ldr	r3, [pc, #4]	; (8003044 <__errno+0x8>)
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000050 	.word	0x20000050

08003048 <__libc_init_array>:
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	2600      	movs	r6, #0
 800304c:	4d0c      	ldr	r5, [pc, #48]	; (8003080 <__libc_init_array+0x38>)
 800304e:	4c0d      	ldr	r4, [pc, #52]	; (8003084 <__libc_init_array+0x3c>)
 8003050:	1b64      	subs	r4, r4, r5
 8003052:	10a4      	asrs	r4, r4, #2
 8003054:	42a6      	cmp	r6, r4
 8003056:	d109      	bne.n	800306c <__libc_init_array+0x24>
 8003058:	f000 fce4 	bl	8003a24 <_init>
 800305c:	2600      	movs	r6, #0
 800305e:	4d0a      	ldr	r5, [pc, #40]	; (8003088 <__libc_init_array+0x40>)
 8003060:	4c0a      	ldr	r4, [pc, #40]	; (800308c <__libc_init_array+0x44>)
 8003062:	1b64      	subs	r4, r4, r5
 8003064:	10a4      	asrs	r4, r4, #2
 8003066:	42a6      	cmp	r6, r4
 8003068:	d105      	bne.n	8003076 <__libc_init_array+0x2e>
 800306a:	bd70      	pop	{r4, r5, r6, pc}
 800306c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003070:	4798      	blx	r3
 8003072:	3601      	adds	r6, #1
 8003074:	e7ee      	b.n	8003054 <__libc_init_array+0xc>
 8003076:	f855 3b04 	ldr.w	r3, [r5], #4
 800307a:	4798      	blx	r3
 800307c:	3601      	adds	r6, #1
 800307e:	e7f2      	b.n	8003066 <__libc_init_array+0x1e>
 8003080:	08003c4c 	.word	0x08003c4c
 8003084:	08003c4c 	.word	0x08003c4c
 8003088:	08003c4c 	.word	0x08003c4c
 800308c:	08003c50 	.word	0x08003c50

08003090 <memset>:
 8003090:	4603      	mov	r3, r0
 8003092:	4402      	add	r2, r0
 8003094:	4293      	cmp	r3, r2
 8003096:	d100      	bne.n	800309a <memset+0xa>
 8003098:	4770      	bx	lr
 800309a:	f803 1b01 	strb.w	r1, [r3], #1
 800309e:	e7f9      	b.n	8003094 <memset+0x4>

080030a0 <_puts_r>:
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	460e      	mov	r6, r1
 80030a4:	4605      	mov	r5, r0
 80030a6:	b118      	cbz	r0, 80030b0 <_puts_r+0x10>
 80030a8:	6983      	ldr	r3, [r0, #24]
 80030aa:	b90b      	cbnz	r3, 80030b0 <_puts_r+0x10>
 80030ac:	f000 fa48 	bl	8003540 <__sinit>
 80030b0:	69ab      	ldr	r3, [r5, #24]
 80030b2:	68ac      	ldr	r4, [r5, #8]
 80030b4:	b913      	cbnz	r3, 80030bc <_puts_r+0x1c>
 80030b6:	4628      	mov	r0, r5
 80030b8:	f000 fa42 	bl	8003540 <__sinit>
 80030bc:	4b2c      	ldr	r3, [pc, #176]	; (8003170 <_puts_r+0xd0>)
 80030be:	429c      	cmp	r4, r3
 80030c0:	d120      	bne.n	8003104 <_puts_r+0x64>
 80030c2:	686c      	ldr	r4, [r5, #4]
 80030c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030c6:	07db      	lsls	r3, r3, #31
 80030c8:	d405      	bmi.n	80030d6 <_puts_r+0x36>
 80030ca:	89a3      	ldrh	r3, [r4, #12]
 80030cc:	0598      	lsls	r0, r3, #22
 80030ce:	d402      	bmi.n	80030d6 <_puts_r+0x36>
 80030d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030d2:	f000 fad3 	bl	800367c <__retarget_lock_acquire_recursive>
 80030d6:	89a3      	ldrh	r3, [r4, #12]
 80030d8:	0719      	lsls	r1, r3, #28
 80030da:	d51d      	bpl.n	8003118 <_puts_r+0x78>
 80030dc:	6923      	ldr	r3, [r4, #16]
 80030de:	b1db      	cbz	r3, 8003118 <_puts_r+0x78>
 80030e0:	3e01      	subs	r6, #1
 80030e2:	68a3      	ldr	r3, [r4, #8]
 80030e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030e8:	3b01      	subs	r3, #1
 80030ea:	60a3      	str	r3, [r4, #8]
 80030ec:	bb39      	cbnz	r1, 800313e <_puts_r+0x9e>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	da38      	bge.n	8003164 <_puts_r+0xc4>
 80030f2:	4622      	mov	r2, r4
 80030f4:	210a      	movs	r1, #10
 80030f6:	4628      	mov	r0, r5
 80030f8:	f000 f848 	bl	800318c <__swbuf_r>
 80030fc:	3001      	adds	r0, #1
 80030fe:	d011      	beq.n	8003124 <_puts_r+0x84>
 8003100:	250a      	movs	r5, #10
 8003102:	e011      	b.n	8003128 <_puts_r+0x88>
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <_puts_r+0xd4>)
 8003106:	429c      	cmp	r4, r3
 8003108:	d101      	bne.n	800310e <_puts_r+0x6e>
 800310a:	68ac      	ldr	r4, [r5, #8]
 800310c:	e7da      	b.n	80030c4 <_puts_r+0x24>
 800310e:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <_puts_r+0xd8>)
 8003110:	429c      	cmp	r4, r3
 8003112:	bf08      	it	eq
 8003114:	68ec      	ldreq	r4, [r5, #12]
 8003116:	e7d5      	b.n	80030c4 <_puts_r+0x24>
 8003118:	4621      	mov	r1, r4
 800311a:	4628      	mov	r0, r5
 800311c:	f000 f888 	bl	8003230 <__swsetup_r>
 8003120:	2800      	cmp	r0, #0
 8003122:	d0dd      	beq.n	80030e0 <_puts_r+0x40>
 8003124:	f04f 35ff 	mov.w	r5, #4294967295
 8003128:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800312a:	07da      	lsls	r2, r3, #31
 800312c:	d405      	bmi.n	800313a <_puts_r+0x9a>
 800312e:	89a3      	ldrh	r3, [r4, #12]
 8003130:	059b      	lsls	r3, r3, #22
 8003132:	d402      	bmi.n	800313a <_puts_r+0x9a>
 8003134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003136:	f000 faa2 	bl	800367e <__retarget_lock_release_recursive>
 800313a:	4628      	mov	r0, r5
 800313c:	bd70      	pop	{r4, r5, r6, pc}
 800313e:	2b00      	cmp	r3, #0
 8003140:	da04      	bge.n	800314c <_puts_r+0xac>
 8003142:	69a2      	ldr	r2, [r4, #24]
 8003144:	429a      	cmp	r2, r3
 8003146:	dc06      	bgt.n	8003156 <_puts_r+0xb6>
 8003148:	290a      	cmp	r1, #10
 800314a:	d004      	beq.n	8003156 <_puts_r+0xb6>
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	6022      	str	r2, [r4, #0]
 8003152:	7019      	strb	r1, [r3, #0]
 8003154:	e7c5      	b.n	80030e2 <_puts_r+0x42>
 8003156:	4622      	mov	r2, r4
 8003158:	4628      	mov	r0, r5
 800315a:	f000 f817 	bl	800318c <__swbuf_r>
 800315e:	3001      	adds	r0, #1
 8003160:	d1bf      	bne.n	80030e2 <_puts_r+0x42>
 8003162:	e7df      	b.n	8003124 <_puts_r+0x84>
 8003164:	250a      	movs	r5, #10
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	6022      	str	r2, [r4, #0]
 800316c:	701d      	strb	r5, [r3, #0]
 800316e:	e7db      	b.n	8003128 <_puts_r+0x88>
 8003170:	08003c0c 	.word	0x08003c0c
 8003174:	08003c2c 	.word	0x08003c2c
 8003178:	08003bec 	.word	0x08003bec

0800317c <puts>:
 800317c:	4b02      	ldr	r3, [pc, #8]	; (8003188 <puts+0xc>)
 800317e:	4601      	mov	r1, r0
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	f7ff bf8d 	b.w	80030a0 <_puts_r>
 8003186:	bf00      	nop
 8003188:	20000050 	.word	0x20000050

0800318c <__swbuf_r>:
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	460e      	mov	r6, r1
 8003190:	4614      	mov	r4, r2
 8003192:	4605      	mov	r5, r0
 8003194:	b118      	cbz	r0, 800319e <__swbuf_r+0x12>
 8003196:	6983      	ldr	r3, [r0, #24]
 8003198:	b90b      	cbnz	r3, 800319e <__swbuf_r+0x12>
 800319a:	f000 f9d1 	bl	8003540 <__sinit>
 800319e:	4b21      	ldr	r3, [pc, #132]	; (8003224 <__swbuf_r+0x98>)
 80031a0:	429c      	cmp	r4, r3
 80031a2:	d12b      	bne.n	80031fc <__swbuf_r+0x70>
 80031a4:	686c      	ldr	r4, [r5, #4]
 80031a6:	69a3      	ldr	r3, [r4, #24]
 80031a8:	60a3      	str	r3, [r4, #8]
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	071a      	lsls	r2, r3, #28
 80031ae:	d52f      	bpl.n	8003210 <__swbuf_r+0x84>
 80031b0:	6923      	ldr	r3, [r4, #16]
 80031b2:	b36b      	cbz	r3, 8003210 <__swbuf_r+0x84>
 80031b4:	6923      	ldr	r3, [r4, #16]
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	b2f6      	uxtb	r6, r6
 80031ba:	1ac0      	subs	r0, r0, r3
 80031bc:	6963      	ldr	r3, [r4, #20]
 80031be:	4637      	mov	r7, r6
 80031c0:	4283      	cmp	r3, r0
 80031c2:	dc04      	bgt.n	80031ce <__swbuf_r+0x42>
 80031c4:	4621      	mov	r1, r4
 80031c6:	4628      	mov	r0, r5
 80031c8:	f000 f926 	bl	8003418 <_fflush_r>
 80031cc:	bb30      	cbnz	r0, 800321c <__swbuf_r+0x90>
 80031ce:	68a3      	ldr	r3, [r4, #8]
 80031d0:	3001      	adds	r0, #1
 80031d2:	3b01      	subs	r3, #1
 80031d4:	60a3      	str	r3, [r4, #8]
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	6022      	str	r2, [r4, #0]
 80031dc:	701e      	strb	r6, [r3, #0]
 80031de:	6963      	ldr	r3, [r4, #20]
 80031e0:	4283      	cmp	r3, r0
 80031e2:	d004      	beq.n	80031ee <__swbuf_r+0x62>
 80031e4:	89a3      	ldrh	r3, [r4, #12]
 80031e6:	07db      	lsls	r3, r3, #31
 80031e8:	d506      	bpl.n	80031f8 <__swbuf_r+0x6c>
 80031ea:	2e0a      	cmp	r6, #10
 80031ec:	d104      	bne.n	80031f8 <__swbuf_r+0x6c>
 80031ee:	4621      	mov	r1, r4
 80031f0:	4628      	mov	r0, r5
 80031f2:	f000 f911 	bl	8003418 <_fflush_r>
 80031f6:	b988      	cbnz	r0, 800321c <__swbuf_r+0x90>
 80031f8:	4638      	mov	r0, r7
 80031fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <__swbuf_r+0x9c>)
 80031fe:	429c      	cmp	r4, r3
 8003200:	d101      	bne.n	8003206 <__swbuf_r+0x7a>
 8003202:	68ac      	ldr	r4, [r5, #8]
 8003204:	e7cf      	b.n	80031a6 <__swbuf_r+0x1a>
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <__swbuf_r+0xa0>)
 8003208:	429c      	cmp	r4, r3
 800320a:	bf08      	it	eq
 800320c:	68ec      	ldreq	r4, [r5, #12]
 800320e:	e7ca      	b.n	80031a6 <__swbuf_r+0x1a>
 8003210:	4621      	mov	r1, r4
 8003212:	4628      	mov	r0, r5
 8003214:	f000 f80c 	bl	8003230 <__swsetup_r>
 8003218:	2800      	cmp	r0, #0
 800321a:	d0cb      	beq.n	80031b4 <__swbuf_r+0x28>
 800321c:	f04f 37ff 	mov.w	r7, #4294967295
 8003220:	e7ea      	b.n	80031f8 <__swbuf_r+0x6c>
 8003222:	bf00      	nop
 8003224:	08003c0c 	.word	0x08003c0c
 8003228:	08003c2c 	.word	0x08003c2c
 800322c:	08003bec 	.word	0x08003bec

08003230 <__swsetup_r>:
 8003230:	4b32      	ldr	r3, [pc, #200]	; (80032fc <__swsetup_r+0xcc>)
 8003232:	b570      	push	{r4, r5, r6, lr}
 8003234:	681d      	ldr	r5, [r3, #0]
 8003236:	4606      	mov	r6, r0
 8003238:	460c      	mov	r4, r1
 800323a:	b125      	cbz	r5, 8003246 <__swsetup_r+0x16>
 800323c:	69ab      	ldr	r3, [r5, #24]
 800323e:	b913      	cbnz	r3, 8003246 <__swsetup_r+0x16>
 8003240:	4628      	mov	r0, r5
 8003242:	f000 f97d 	bl	8003540 <__sinit>
 8003246:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <__swsetup_r+0xd0>)
 8003248:	429c      	cmp	r4, r3
 800324a:	d10f      	bne.n	800326c <__swsetup_r+0x3c>
 800324c:	686c      	ldr	r4, [r5, #4]
 800324e:	89a3      	ldrh	r3, [r4, #12]
 8003250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003254:	0719      	lsls	r1, r3, #28
 8003256:	d42c      	bmi.n	80032b2 <__swsetup_r+0x82>
 8003258:	06dd      	lsls	r5, r3, #27
 800325a:	d411      	bmi.n	8003280 <__swsetup_r+0x50>
 800325c:	2309      	movs	r3, #9
 800325e:	6033      	str	r3, [r6, #0]
 8003260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003264:	f04f 30ff 	mov.w	r0, #4294967295
 8003268:	81a3      	strh	r3, [r4, #12]
 800326a:	e03e      	b.n	80032ea <__swsetup_r+0xba>
 800326c:	4b25      	ldr	r3, [pc, #148]	; (8003304 <__swsetup_r+0xd4>)
 800326e:	429c      	cmp	r4, r3
 8003270:	d101      	bne.n	8003276 <__swsetup_r+0x46>
 8003272:	68ac      	ldr	r4, [r5, #8]
 8003274:	e7eb      	b.n	800324e <__swsetup_r+0x1e>
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <__swsetup_r+0xd8>)
 8003278:	429c      	cmp	r4, r3
 800327a:	bf08      	it	eq
 800327c:	68ec      	ldreq	r4, [r5, #12]
 800327e:	e7e6      	b.n	800324e <__swsetup_r+0x1e>
 8003280:	0758      	lsls	r0, r3, #29
 8003282:	d512      	bpl.n	80032aa <__swsetup_r+0x7a>
 8003284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003286:	b141      	cbz	r1, 800329a <__swsetup_r+0x6a>
 8003288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800328c:	4299      	cmp	r1, r3
 800328e:	d002      	beq.n	8003296 <__swsetup_r+0x66>
 8003290:	4630      	mov	r0, r6
 8003292:	f000 fa59 	bl	8003748 <_free_r>
 8003296:	2300      	movs	r3, #0
 8003298:	6363      	str	r3, [r4, #52]	; 0x34
 800329a:	89a3      	ldrh	r3, [r4, #12]
 800329c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032a0:	81a3      	strh	r3, [r4, #12]
 80032a2:	2300      	movs	r3, #0
 80032a4:	6063      	str	r3, [r4, #4]
 80032a6:	6923      	ldr	r3, [r4, #16]
 80032a8:	6023      	str	r3, [r4, #0]
 80032aa:	89a3      	ldrh	r3, [r4, #12]
 80032ac:	f043 0308 	orr.w	r3, r3, #8
 80032b0:	81a3      	strh	r3, [r4, #12]
 80032b2:	6923      	ldr	r3, [r4, #16]
 80032b4:	b94b      	cbnz	r3, 80032ca <__swsetup_r+0x9a>
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c0:	d003      	beq.n	80032ca <__swsetup_r+0x9a>
 80032c2:	4621      	mov	r1, r4
 80032c4:	4630      	mov	r0, r6
 80032c6:	f000 f9ff 	bl	80036c8 <__smakebuf_r>
 80032ca:	89a0      	ldrh	r0, [r4, #12]
 80032cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032d0:	f010 0301 	ands.w	r3, r0, #1
 80032d4:	d00a      	beq.n	80032ec <__swsetup_r+0xbc>
 80032d6:	2300      	movs	r3, #0
 80032d8:	60a3      	str	r3, [r4, #8]
 80032da:	6963      	ldr	r3, [r4, #20]
 80032dc:	425b      	negs	r3, r3
 80032de:	61a3      	str	r3, [r4, #24]
 80032e0:	6923      	ldr	r3, [r4, #16]
 80032e2:	b943      	cbnz	r3, 80032f6 <__swsetup_r+0xc6>
 80032e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032e8:	d1ba      	bne.n	8003260 <__swsetup_r+0x30>
 80032ea:	bd70      	pop	{r4, r5, r6, pc}
 80032ec:	0781      	lsls	r1, r0, #30
 80032ee:	bf58      	it	pl
 80032f0:	6963      	ldrpl	r3, [r4, #20]
 80032f2:	60a3      	str	r3, [r4, #8]
 80032f4:	e7f4      	b.n	80032e0 <__swsetup_r+0xb0>
 80032f6:	2000      	movs	r0, #0
 80032f8:	e7f7      	b.n	80032ea <__swsetup_r+0xba>
 80032fa:	bf00      	nop
 80032fc:	20000050 	.word	0x20000050
 8003300:	08003c0c 	.word	0x08003c0c
 8003304:	08003c2c 	.word	0x08003c2c
 8003308:	08003bec 	.word	0x08003bec

0800330c <__sflush_r>:
 800330c:	898a      	ldrh	r2, [r1, #12]
 800330e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003312:	4605      	mov	r5, r0
 8003314:	0710      	lsls	r0, r2, #28
 8003316:	460c      	mov	r4, r1
 8003318:	d458      	bmi.n	80033cc <__sflush_r+0xc0>
 800331a:	684b      	ldr	r3, [r1, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	dc05      	bgt.n	800332c <__sflush_r+0x20>
 8003320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	dc02      	bgt.n	800332c <__sflush_r+0x20>
 8003326:	2000      	movs	r0, #0
 8003328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800332c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800332e:	2e00      	cmp	r6, #0
 8003330:	d0f9      	beq.n	8003326 <__sflush_r+0x1a>
 8003332:	2300      	movs	r3, #0
 8003334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003338:	682f      	ldr	r7, [r5, #0]
 800333a:	602b      	str	r3, [r5, #0]
 800333c:	d032      	beq.n	80033a4 <__sflush_r+0x98>
 800333e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	075a      	lsls	r2, r3, #29
 8003344:	d505      	bpl.n	8003352 <__sflush_r+0x46>
 8003346:	6863      	ldr	r3, [r4, #4]
 8003348:	1ac0      	subs	r0, r0, r3
 800334a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800334c:	b10b      	cbz	r3, 8003352 <__sflush_r+0x46>
 800334e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003350:	1ac0      	subs	r0, r0, r3
 8003352:	2300      	movs	r3, #0
 8003354:	4602      	mov	r2, r0
 8003356:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003358:	4628      	mov	r0, r5
 800335a:	6a21      	ldr	r1, [r4, #32]
 800335c:	47b0      	blx	r6
 800335e:	1c43      	adds	r3, r0, #1
 8003360:	89a3      	ldrh	r3, [r4, #12]
 8003362:	d106      	bne.n	8003372 <__sflush_r+0x66>
 8003364:	6829      	ldr	r1, [r5, #0]
 8003366:	291d      	cmp	r1, #29
 8003368:	d82c      	bhi.n	80033c4 <__sflush_r+0xb8>
 800336a:	4a2a      	ldr	r2, [pc, #168]	; (8003414 <__sflush_r+0x108>)
 800336c:	40ca      	lsrs	r2, r1
 800336e:	07d6      	lsls	r6, r2, #31
 8003370:	d528      	bpl.n	80033c4 <__sflush_r+0xb8>
 8003372:	2200      	movs	r2, #0
 8003374:	6062      	str	r2, [r4, #4]
 8003376:	6922      	ldr	r2, [r4, #16]
 8003378:	04d9      	lsls	r1, r3, #19
 800337a:	6022      	str	r2, [r4, #0]
 800337c:	d504      	bpl.n	8003388 <__sflush_r+0x7c>
 800337e:	1c42      	adds	r2, r0, #1
 8003380:	d101      	bne.n	8003386 <__sflush_r+0x7a>
 8003382:	682b      	ldr	r3, [r5, #0]
 8003384:	b903      	cbnz	r3, 8003388 <__sflush_r+0x7c>
 8003386:	6560      	str	r0, [r4, #84]	; 0x54
 8003388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800338a:	602f      	str	r7, [r5, #0]
 800338c:	2900      	cmp	r1, #0
 800338e:	d0ca      	beq.n	8003326 <__sflush_r+0x1a>
 8003390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003394:	4299      	cmp	r1, r3
 8003396:	d002      	beq.n	800339e <__sflush_r+0x92>
 8003398:	4628      	mov	r0, r5
 800339a:	f000 f9d5 	bl	8003748 <_free_r>
 800339e:	2000      	movs	r0, #0
 80033a0:	6360      	str	r0, [r4, #52]	; 0x34
 80033a2:	e7c1      	b.n	8003328 <__sflush_r+0x1c>
 80033a4:	6a21      	ldr	r1, [r4, #32]
 80033a6:	2301      	movs	r3, #1
 80033a8:	4628      	mov	r0, r5
 80033aa:	47b0      	blx	r6
 80033ac:	1c41      	adds	r1, r0, #1
 80033ae:	d1c7      	bne.n	8003340 <__sflush_r+0x34>
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0c4      	beq.n	8003340 <__sflush_r+0x34>
 80033b6:	2b1d      	cmp	r3, #29
 80033b8:	d001      	beq.n	80033be <__sflush_r+0xb2>
 80033ba:	2b16      	cmp	r3, #22
 80033bc:	d101      	bne.n	80033c2 <__sflush_r+0xb6>
 80033be:	602f      	str	r7, [r5, #0]
 80033c0:	e7b1      	b.n	8003326 <__sflush_r+0x1a>
 80033c2:	89a3      	ldrh	r3, [r4, #12]
 80033c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c8:	81a3      	strh	r3, [r4, #12]
 80033ca:	e7ad      	b.n	8003328 <__sflush_r+0x1c>
 80033cc:	690f      	ldr	r7, [r1, #16]
 80033ce:	2f00      	cmp	r7, #0
 80033d0:	d0a9      	beq.n	8003326 <__sflush_r+0x1a>
 80033d2:	0793      	lsls	r3, r2, #30
 80033d4:	bf18      	it	ne
 80033d6:	2300      	movne	r3, #0
 80033d8:	680e      	ldr	r6, [r1, #0]
 80033da:	bf08      	it	eq
 80033dc:	694b      	ldreq	r3, [r1, #20]
 80033de:	eba6 0807 	sub.w	r8, r6, r7
 80033e2:	600f      	str	r7, [r1, #0]
 80033e4:	608b      	str	r3, [r1, #8]
 80033e6:	f1b8 0f00 	cmp.w	r8, #0
 80033ea:	dd9c      	ble.n	8003326 <__sflush_r+0x1a>
 80033ec:	4643      	mov	r3, r8
 80033ee:	463a      	mov	r2, r7
 80033f0:	4628      	mov	r0, r5
 80033f2:	6a21      	ldr	r1, [r4, #32]
 80033f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033f6:	47b0      	blx	r6
 80033f8:	2800      	cmp	r0, #0
 80033fa:	dc06      	bgt.n	800340a <__sflush_r+0xfe>
 80033fc:	89a3      	ldrh	r3, [r4, #12]
 80033fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003406:	81a3      	strh	r3, [r4, #12]
 8003408:	e78e      	b.n	8003328 <__sflush_r+0x1c>
 800340a:	4407      	add	r7, r0
 800340c:	eba8 0800 	sub.w	r8, r8, r0
 8003410:	e7e9      	b.n	80033e6 <__sflush_r+0xda>
 8003412:	bf00      	nop
 8003414:	20400001 	.word	0x20400001

08003418 <_fflush_r>:
 8003418:	b538      	push	{r3, r4, r5, lr}
 800341a:	690b      	ldr	r3, [r1, #16]
 800341c:	4605      	mov	r5, r0
 800341e:	460c      	mov	r4, r1
 8003420:	b913      	cbnz	r3, 8003428 <_fflush_r+0x10>
 8003422:	2500      	movs	r5, #0
 8003424:	4628      	mov	r0, r5
 8003426:	bd38      	pop	{r3, r4, r5, pc}
 8003428:	b118      	cbz	r0, 8003432 <_fflush_r+0x1a>
 800342a:	6983      	ldr	r3, [r0, #24]
 800342c:	b90b      	cbnz	r3, 8003432 <_fflush_r+0x1a>
 800342e:	f000 f887 	bl	8003540 <__sinit>
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <_fflush_r+0x6c>)
 8003434:	429c      	cmp	r4, r3
 8003436:	d11b      	bne.n	8003470 <_fflush_r+0x58>
 8003438:	686c      	ldr	r4, [r5, #4]
 800343a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0ef      	beq.n	8003422 <_fflush_r+0xa>
 8003442:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003444:	07d0      	lsls	r0, r2, #31
 8003446:	d404      	bmi.n	8003452 <_fflush_r+0x3a>
 8003448:	0599      	lsls	r1, r3, #22
 800344a:	d402      	bmi.n	8003452 <_fflush_r+0x3a>
 800344c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800344e:	f000 f915 	bl	800367c <__retarget_lock_acquire_recursive>
 8003452:	4628      	mov	r0, r5
 8003454:	4621      	mov	r1, r4
 8003456:	f7ff ff59 	bl	800330c <__sflush_r>
 800345a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800345c:	4605      	mov	r5, r0
 800345e:	07da      	lsls	r2, r3, #31
 8003460:	d4e0      	bmi.n	8003424 <_fflush_r+0xc>
 8003462:	89a3      	ldrh	r3, [r4, #12]
 8003464:	059b      	lsls	r3, r3, #22
 8003466:	d4dd      	bmi.n	8003424 <_fflush_r+0xc>
 8003468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800346a:	f000 f908 	bl	800367e <__retarget_lock_release_recursive>
 800346e:	e7d9      	b.n	8003424 <_fflush_r+0xc>
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <_fflush_r+0x70>)
 8003472:	429c      	cmp	r4, r3
 8003474:	d101      	bne.n	800347a <_fflush_r+0x62>
 8003476:	68ac      	ldr	r4, [r5, #8]
 8003478:	e7df      	b.n	800343a <_fflush_r+0x22>
 800347a:	4b04      	ldr	r3, [pc, #16]	; (800348c <_fflush_r+0x74>)
 800347c:	429c      	cmp	r4, r3
 800347e:	bf08      	it	eq
 8003480:	68ec      	ldreq	r4, [r5, #12]
 8003482:	e7da      	b.n	800343a <_fflush_r+0x22>
 8003484:	08003c0c 	.word	0x08003c0c
 8003488:	08003c2c 	.word	0x08003c2c
 800348c:	08003bec 	.word	0x08003bec

08003490 <std>:
 8003490:	2300      	movs	r3, #0
 8003492:	b510      	push	{r4, lr}
 8003494:	4604      	mov	r4, r0
 8003496:	e9c0 3300 	strd	r3, r3, [r0]
 800349a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800349e:	6083      	str	r3, [r0, #8]
 80034a0:	8181      	strh	r1, [r0, #12]
 80034a2:	6643      	str	r3, [r0, #100]	; 0x64
 80034a4:	81c2      	strh	r2, [r0, #14]
 80034a6:	6183      	str	r3, [r0, #24]
 80034a8:	4619      	mov	r1, r3
 80034aa:	2208      	movs	r2, #8
 80034ac:	305c      	adds	r0, #92	; 0x5c
 80034ae:	f7ff fdef 	bl	8003090 <memset>
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <std+0x38>)
 80034b4:	6224      	str	r4, [r4, #32]
 80034b6:	6263      	str	r3, [r4, #36]	; 0x24
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <std+0x3c>)
 80034ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80034bc:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <std+0x40>)
 80034be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <std+0x44>)
 80034c2:	6323      	str	r3, [r4, #48]	; 0x30
 80034c4:	bd10      	pop	{r4, pc}
 80034c6:	bf00      	nop
 80034c8:	080038b5 	.word	0x080038b5
 80034cc:	080038d7 	.word	0x080038d7
 80034d0:	0800390f 	.word	0x0800390f
 80034d4:	08003933 	.word	0x08003933

080034d8 <_cleanup_r>:
 80034d8:	4901      	ldr	r1, [pc, #4]	; (80034e0 <_cleanup_r+0x8>)
 80034da:	f000 b8af 	b.w	800363c <_fwalk_reent>
 80034de:	bf00      	nop
 80034e0:	08003419 	.word	0x08003419

080034e4 <__sfmoreglue>:
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	2568      	movs	r5, #104	; 0x68
 80034e8:	1e4a      	subs	r2, r1, #1
 80034ea:	4355      	muls	r5, r2
 80034ec:	460e      	mov	r6, r1
 80034ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034f2:	f000 f975 	bl	80037e0 <_malloc_r>
 80034f6:	4604      	mov	r4, r0
 80034f8:	b140      	cbz	r0, 800350c <__sfmoreglue+0x28>
 80034fa:	2100      	movs	r1, #0
 80034fc:	e9c0 1600 	strd	r1, r6, [r0]
 8003500:	300c      	adds	r0, #12
 8003502:	60a0      	str	r0, [r4, #8]
 8003504:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003508:	f7ff fdc2 	bl	8003090 <memset>
 800350c:	4620      	mov	r0, r4
 800350e:	bd70      	pop	{r4, r5, r6, pc}

08003510 <__sfp_lock_acquire>:
 8003510:	4801      	ldr	r0, [pc, #4]	; (8003518 <__sfp_lock_acquire+0x8>)
 8003512:	f000 b8b3 	b.w	800367c <__retarget_lock_acquire_recursive>
 8003516:	bf00      	nop
 8003518:	200001e0 	.word	0x200001e0

0800351c <__sfp_lock_release>:
 800351c:	4801      	ldr	r0, [pc, #4]	; (8003524 <__sfp_lock_release+0x8>)
 800351e:	f000 b8ae 	b.w	800367e <__retarget_lock_release_recursive>
 8003522:	bf00      	nop
 8003524:	200001e0 	.word	0x200001e0

08003528 <__sinit_lock_acquire>:
 8003528:	4801      	ldr	r0, [pc, #4]	; (8003530 <__sinit_lock_acquire+0x8>)
 800352a:	f000 b8a7 	b.w	800367c <__retarget_lock_acquire_recursive>
 800352e:	bf00      	nop
 8003530:	200001db 	.word	0x200001db

08003534 <__sinit_lock_release>:
 8003534:	4801      	ldr	r0, [pc, #4]	; (800353c <__sinit_lock_release+0x8>)
 8003536:	f000 b8a2 	b.w	800367e <__retarget_lock_release_recursive>
 800353a:	bf00      	nop
 800353c:	200001db 	.word	0x200001db

08003540 <__sinit>:
 8003540:	b510      	push	{r4, lr}
 8003542:	4604      	mov	r4, r0
 8003544:	f7ff fff0 	bl	8003528 <__sinit_lock_acquire>
 8003548:	69a3      	ldr	r3, [r4, #24]
 800354a:	b11b      	cbz	r3, 8003554 <__sinit+0x14>
 800354c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003550:	f7ff bff0 	b.w	8003534 <__sinit_lock_release>
 8003554:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003558:	6523      	str	r3, [r4, #80]	; 0x50
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <__sinit+0x68>)
 800355c:	4a13      	ldr	r2, [pc, #76]	; (80035ac <__sinit+0x6c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	62a2      	str	r2, [r4, #40]	; 0x28
 8003562:	42a3      	cmp	r3, r4
 8003564:	bf08      	it	eq
 8003566:	2301      	moveq	r3, #1
 8003568:	4620      	mov	r0, r4
 800356a:	bf08      	it	eq
 800356c:	61a3      	streq	r3, [r4, #24]
 800356e:	f000 f81f 	bl	80035b0 <__sfp>
 8003572:	6060      	str	r0, [r4, #4]
 8003574:	4620      	mov	r0, r4
 8003576:	f000 f81b 	bl	80035b0 <__sfp>
 800357a:	60a0      	str	r0, [r4, #8]
 800357c:	4620      	mov	r0, r4
 800357e:	f000 f817 	bl	80035b0 <__sfp>
 8003582:	2200      	movs	r2, #0
 8003584:	2104      	movs	r1, #4
 8003586:	60e0      	str	r0, [r4, #12]
 8003588:	6860      	ldr	r0, [r4, #4]
 800358a:	f7ff ff81 	bl	8003490 <std>
 800358e:	2201      	movs	r2, #1
 8003590:	2109      	movs	r1, #9
 8003592:	68a0      	ldr	r0, [r4, #8]
 8003594:	f7ff ff7c 	bl	8003490 <std>
 8003598:	2202      	movs	r2, #2
 800359a:	2112      	movs	r1, #18
 800359c:	68e0      	ldr	r0, [r4, #12]
 800359e:	f7ff ff77 	bl	8003490 <std>
 80035a2:	2301      	movs	r3, #1
 80035a4:	61a3      	str	r3, [r4, #24]
 80035a6:	e7d1      	b.n	800354c <__sinit+0xc>
 80035a8:	08003be8 	.word	0x08003be8
 80035ac:	080034d9 	.word	0x080034d9

080035b0 <__sfp>:
 80035b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b2:	4607      	mov	r7, r0
 80035b4:	f7ff ffac 	bl	8003510 <__sfp_lock_acquire>
 80035b8:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <__sfp+0x84>)
 80035ba:	681e      	ldr	r6, [r3, #0]
 80035bc:	69b3      	ldr	r3, [r6, #24]
 80035be:	b913      	cbnz	r3, 80035c6 <__sfp+0x16>
 80035c0:	4630      	mov	r0, r6
 80035c2:	f7ff ffbd 	bl	8003540 <__sinit>
 80035c6:	3648      	adds	r6, #72	; 0x48
 80035c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	d503      	bpl.n	80035d8 <__sfp+0x28>
 80035d0:	6833      	ldr	r3, [r6, #0]
 80035d2:	b30b      	cbz	r3, 8003618 <__sfp+0x68>
 80035d4:	6836      	ldr	r6, [r6, #0]
 80035d6:	e7f7      	b.n	80035c8 <__sfp+0x18>
 80035d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035dc:	b9d5      	cbnz	r5, 8003614 <__sfp+0x64>
 80035de:	4b16      	ldr	r3, [pc, #88]	; (8003638 <__sfp+0x88>)
 80035e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035e4:	60e3      	str	r3, [r4, #12]
 80035e6:	6665      	str	r5, [r4, #100]	; 0x64
 80035e8:	f000 f847 	bl	800367a <__retarget_lock_init_recursive>
 80035ec:	f7ff ff96 	bl	800351c <__sfp_lock_release>
 80035f0:	2208      	movs	r2, #8
 80035f2:	4629      	mov	r1, r5
 80035f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035fc:	6025      	str	r5, [r4, #0]
 80035fe:	61a5      	str	r5, [r4, #24]
 8003600:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003604:	f7ff fd44 	bl	8003090 <memset>
 8003608:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800360c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003610:	4620      	mov	r0, r4
 8003612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003614:	3468      	adds	r4, #104	; 0x68
 8003616:	e7d9      	b.n	80035cc <__sfp+0x1c>
 8003618:	2104      	movs	r1, #4
 800361a:	4638      	mov	r0, r7
 800361c:	f7ff ff62 	bl	80034e4 <__sfmoreglue>
 8003620:	4604      	mov	r4, r0
 8003622:	6030      	str	r0, [r6, #0]
 8003624:	2800      	cmp	r0, #0
 8003626:	d1d5      	bne.n	80035d4 <__sfp+0x24>
 8003628:	f7ff ff78 	bl	800351c <__sfp_lock_release>
 800362c:	230c      	movs	r3, #12
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	e7ee      	b.n	8003610 <__sfp+0x60>
 8003632:	bf00      	nop
 8003634:	08003be8 	.word	0x08003be8
 8003638:	ffff0001 	.word	0xffff0001

0800363c <_fwalk_reent>:
 800363c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003640:	4606      	mov	r6, r0
 8003642:	4688      	mov	r8, r1
 8003644:	2700      	movs	r7, #0
 8003646:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800364a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800364e:	f1b9 0901 	subs.w	r9, r9, #1
 8003652:	d505      	bpl.n	8003660 <_fwalk_reent+0x24>
 8003654:	6824      	ldr	r4, [r4, #0]
 8003656:	2c00      	cmp	r4, #0
 8003658:	d1f7      	bne.n	800364a <_fwalk_reent+0xe>
 800365a:	4638      	mov	r0, r7
 800365c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003660:	89ab      	ldrh	r3, [r5, #12]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d907      	bls.n	8003676 <_fwalk_reent+0x3a>
 8003666:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800366a:	3301      	adds	r3, #1
 800366c:	d003      	beq.n	8003676 <_fwalk_reent+0x3a>
 800366e:	4629      	mov	r1, r5
 8003670:	4630      	mov	r0, r6
 8003672:	47c0      	blx	r8
 8003674:	4307      	orrs	r7, r0
 8003676:	3568      	adds	r5, #104	; 0x68
 8003678:	e7e9      	b.n	800364e <_fwalk_reent+0x12>

0800367a <__retarget_lock_init_recursive>:
 800367a:	4770      	bx	lr

0800367c <__retarget_lock_acquire_recursive>:
 800367c:	4770      	bx	lr

0800367e <__retarget_lock_release_recursive>:
 800367e:	4770      	bx	lr

08003680 <__swhatbuf_r>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	460e      	mov	r6, r1
 8003684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003688:	4614      	mov	r4, r2
 800368a:	2900      	cmp	r1, #0
 800368c:	461d      	mov	r5, r3
 800368e:	b096      	sub	sp, #88	; 0x58
 8003690:	da07      	bge.n	80036a2 <__swhatbuf_r+0x22>
 8003692:	2300      	movs	r3, #0
 8003694:	602b      	str	r3, [r5, #0]
 8003696:	89b3      	ldrh	r3, [r6, #12]
 8003698:	061a      	lsls	r2, r3, #24
 800369a:	d410      	bmi.n	80036be <__swhatbuf_r+0x3e>
 800369c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a0:	e00e      	b.n	80036c0 <__swhatbuf_r+0x40>
 80036a2:	466a      	mov	r2, sp
 80036a4:	f000 f96c 	bl	8003980 <_fstat_r>
 80036a8:	2800      	cmp	r0, #0
 80036aa:	dbf2      	blt.n	8003692 <__swhatbuf_r+0x12>
 80036ac:	9a01      	ldr	r2, [sp, #4]
 80036ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036b6:	425a      	negs	r2, r3
 80036b8:	415a      	adcs	r2, r3
 80036ba:	602a      	str	r2, [r5, #0]
 80036bc:	e7ee      	b.n	800369c <__swhatbuf_r+0x1c>
 80036be:	2340      	movs	r3, #64	; 0x40
 80036c0:	2000      	movs	r0, #0
 80036c2:	6023      	str	r3, [r4, #0]
 80036c4:	b016      	add	sp, #88	; 0x58
 80036c6:	bd70      	pop	{r4, r5, r6, pc}

080036c8 <__smakebuf_r>:
 80036c8:	898b      	ldrh	r3, [r1, #12]
 80036ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036cc:	079d      	lsls	r5, r3, #30
 80036ce:	4606      	mov	r6, r0
 80036d0:	460c      	mov	r4, r1
 80036d2:	d507      	bpl.n	80036e4 <__smakebuf_r+0x1c>
 80036d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036d8:	6023      	str	r3, [r4, #0]
 80036da:	6123      	str	r3, [r4, #16]
 80036dc:	2301      	movs	r3, #1
 80036de:	6163      	str	r3, [r4, #20]
 80036e0:	b002      	add	sp, #8
 80036e2:	bd70      	pop	{r4, r5, r6, pc}
 80036e4:	466a      	mov	r2, sp
 80036e6:	ab01      	add	r3, sp, #4
 80036e8:	f7ff ffca 	bl	8003680 <__swhatbuf_r>
 80036ec:	9900      	ldr	r1, [sp, #0]
 80036ee:	4605      	mov	r5, r0
 80036f0:	4630      	mov	r0, r6
 80036f2:	f000 f875 	bl	80037e0 <_malloc_r>
 80036f6:	b948      	cbnz	r0, 800370c <__smakebuf_r+0x44>
 80036f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036fc:	059a      	lsls	r2, r3, #22
 80036fe:	d4ef      	bmi.n	80036e0 <__smakebuf_r+0x18>
 8003700:	f023 0303 	bic.w	r3, r3, #3
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	81a3      	strh	r3, [r4, #12]
 800370a:	e7e3      	b.n	80036d4 <__smakebuf_r+0xc>
 800370c:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <__smakebuf_r+0x7c>)
 800370e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003710:	89a3      	ldrh	r3, [r4, #12]
 8003712:	6020      	str	r0, [r4, #0]
 8003714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003718:	81a3      	strh	r3, [r4, #12]
 800371a:	9b00      	ldr	r3, [sp, #0]
 800371c:	6120      	str	r0, [r4, #16]
 800371e:	6163      	str	r3, [r4, #20]
 8003720:	9b01      	ldr	r3, [sp, #4]
 8003722:	b15b      	cbz	r3, 800373c <__smakebuf_r+0x74>
 8003724:	4630      	mov	r0, r6
 8003726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800372a:	f000 f93b 	bl	80039a4 <_isatty_r>
 800372e:	b128      	cbz	r0, 800373c <__smakebuf_r+0x74>
 8003730:	89a3      	ldrh	r3, [r4, #12]
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	81a3      	strh	r3, [r4, #12]
 800373c:	89a0      	ldrh	r0, [r4, #12]
 800373e:	4305      	orrs	r5, r0
 8003740:	81a5      	strh	r5, [r4, #12]
 8003742:	e7cd      	b.n	80036e0 <__smakebuf_r+0x18>
 8003744:	080034d9 	.word	0x080034d9

08003748 <_free_r>:
 8003748:	b538      	push	{r3, r4, r5, lr}
 800374a:	4605      	mov	r5, r0
 800374c:	2900      	cmp	r1, #0
 800374e:	d043      	beq.n	80037d8 <_free_r+0x90>
 8003750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003754:	1f0c      	subs	r4, r1, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	bfb8      	it	lt
 800375a:	18e4      	addlt	r4, r4, r3
 800375c:	f000 f944 	bl	80039e8 <__malloc_lock>
 8003760:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <_free_r+0x94>)
 8003762:	6813      	ldr	r3, [r2, #0]
 8003764:	4610      	mov	r0, r2
 8003766:	b933      	cbnz	r3, 8003776 <_free_r+0x2e>
 8003768:	6063      	str	r3, [r4, #4]
 800376a:	6014      	str	r4, [r2, #0]
 800376c:	4628      	mov	r0, r5
 800376e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003772:	f000 b93f 	b.w	80039f4 <__malloc_unlock>
 8003776:	42a3      	cmp	r3, r4
 8003778:	d90a      	bls.n	8003790 <_free_r+0x48>
 800377a:	6821      	ldr	r1, [r4, #0]
 800377c:	1862      	adds	r2, r4, r1
 800377e:	4293      	cmp	r3, r2
 8003780:	bf01      	itttt	eq
 8003782:	681a      	ldreq	r2, [r3, #0]
 8003784:	685b      	ldreq	r3, [r3, #4]
 8003786:	1852      	addeq	r2, r2, r1
 8003788:	6022      	streq	r2, [r4, #0]
 800378a:	6063      	str	r3, [r4, #4]
 800378c:	6004      	str	r4, [r0, #0]
 800378e:	e7ed      	b.n	800376c <_free_r+0x24>
 8003790:	461a      	mov	r2, r3
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	b10b      	cbz	r3, 800379a <_free_r+0x52>
 8003796:	42a3      	cmp	r3, r4
 8003798:	d9fa      	bls.n	8003790 <_free_r+0x48>
 800379a:	6811      	ldr	r1, [r2, #0]
 800379c:	1850      	adds	r0, r2, r1
 800379e:	42a0      	cmp	r0, r4
 80037a0:	d10b      	bne.n	80037ba <_free_r+0x72>
 80037a2:	6820      	ldr	r0, [r4, #0]
 80037a4:	4401      	add	r1, r0
 80037a6:	1850      	adds	r0, r2, r1
 80037a8:	4283      	cmp	r3, r0
 80037aa:	6011      	str	r1, [r2, #0]
 80037ac:	d1de      	bne.n	800376c <_free_r+0x24>
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4401      	add	r1, r0
 80037b4:	6011      	str	r1, [r2, #0]
 80037b6:	6053      	str	r3, [r2, #4]
 80037b8:	e7d8      	b.n	800376c <_free_r+0x24>
 80037ba:	d902      	bls.n	80037c2 <_free_r+0x7a>
 80037bc:	230c      	movs	r3, #12
 80037be:	602b      	str	r3, [r5, #0]
 80037c0:	e7d4      	b.n	800376c <_free_r+0x24>
 80037c2:	6820      	ldr	r0, [r4, #0]
 80037c4:	1821      	adds	r1, r4, r0
 80037c6:	428b      	cmp	r3, r1
 80037c8:	bf01      	itttt	eq
 80037ca:	6819      	ldreq	r1, [r3, #0]
 80037cc:	685b      	ldreq	r3, [r3, #4]
 80037ce:	1809      	addeq	r1, r1, r0
 80037d0:	6021      	streq	r1, [r4, #0]
 80037d2:	6063      	str	r3, [r4, #4]
 80037d4:	6054      	str	r4, [r2, #4]
 80037d6:	e7c9      	b.n	800376c <_free_r+0x24>
 80037d8:	bd38      	pop	{r3, r4, r5, pc}
 80037da:	bf00      	nop
 80037dc:	20000140 	.word	0x20000140

080037e0 <_malloc_r>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	1ccd      	adds	r5, r1, #3
 80037e4:	f025 0503 	bic.w	r5, r5, #3
 80037e8:	3508      	adds	r5, #8
 80037ea:	2d0c      	cmp	r5, #12
 80037ec:	bf38      	it	cc
 80037ee:	250c      	movcc	r5, #12
 80037f0:	2d00      	cmp	r5, #0
 80037f2:	4606      	mov	r6, r0
 80037f4:	db01      	blt.n	80037fa <_malloc_r+0x1a>
 80037f6:	42a9      	cmp	r1, r5
 80037f8:	d903      	bls.n	8003802 <_malloc_r+0x22>
 80037fa:	230c      	movs	r3, #12
 80037fc:	6033      	str	r3, [r6, #0]
 80037fe:	2000      	movs	r0, #0
 8003800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003802:	f000 f8f1 	bl	80039e8 <__malloc_lock>
 8003806:	4921      	ldr	r1, [pc, #132]	; (800388c <_malloc_r+0xac>)
 8003808:	680a      	ldr	r2, [r1, #0]
 800380a:	4614      	mov	r4, r2
 800380c:	b99c      	cbnz	r4, 8003836 <_malloc_r+0x56>
 800380e:	4f20      	ldr	r7, [pc, #128]	; (8003890 <_malloc_r+0xb0>)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b923      	cbnz	r3, 800381e <_malloc_r+0x3e>
 8003814:	4621      	mov	r1, r4
 8003816:	4630      	mov	r0, r6
 8003818:	f000 f83c 	bl	8003894 <_sbrk_r>
 800381c:	6038      	str	r0, [r7, #0]
 800381e:	4629      	mov	r1, r5
 8003820:	4630      	mov	r0, r6
 8003822:	f000 f837 	bl	8003894 <_sbrk_r>
 8003826:	1c43      	adds	r3, r0, #1
 8003828:	d123      	bne.n	8003872 <_malloc_r+0x92>
 800382a:	230c      	movs	r3, #12
 800382c:	4630      	mov	r0, r6
 800382e:	6033      	str	r3, [r6, #0]
 8003830:	f000 f8e0 	bl	80039f4 <__malloc_unlock>
 8003834:	e7e3      	b.n	80037fe <_malloc_r+0x1e>
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	1b5b      	subs	r3, r3, r5
 800383a:	d417      	bmi.n	800386c <_malloc_r+0x8c>
 800383c:	2b0b      	cmp	r3, #11
 800383e:	d903      	bls.n	8003848 <_malloc_r+0x68>
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	441c      	add	r4, r3
 8003844:	6025      	str	r5, [r4, #0]
 8003846:	e004      	b.n	8003852 <_malloc_r+0x72>
 8003848:	6863      	ldr	r3, [r4, #4]
 800384a:	42a2      	cmp	r2, r4
 800384c:	bf0c      	ite	eq
 800384e:	600b      	streq	r3, [r1, #0]
 8003850:	6053      	strne	r3, [r2, #4]
 8003852:	4630      	mov	r0, r6
 8003854:	f000 f8ce 	bl	80039f4 <__malloc_unlock>
 8003858:	f104 000b 	add.w	r0, r4, #11
 800385c:	1d23      	adds	r3, r4, #4
 800385e:	f020 0007 	bic.w	r0, r0, #7
 8003862:	1ac2      	subs	r2, r0, r3
 8003864:	d0cc      	beq.n	8003800 <_malloc_r+0x20>
 8003866:	1a1b      	subs	r3, r3, r0
 8003868:	50a3      	str	r3, [r4, r2]
 800386a:	e7c9      	b.n	8003800 <_malloc_r+0x20>
 800386c:	4622      	mov	r2, r4
 800386e:	6864      	ldr	r4, [r4, #4]
 8003870:	e7cc      	b.n	800380c <_malloc_r+0x2c>
 8003872:	1cc4      	adds	r4, r0, #3
 8003874:	f024 0403 	bic.w	r4, r4, #3
 8003878:	42a0      	cmp	r0, r4
 800387a:	d0e3      	beq.n	8003844 <_malloc_r+0x64>
 800387c:	1a21      	subs	r1, r4, r0
 800387e:	4630      	mov	r0, r6
 8003880:	f000 f808 	bl	8003894 <_sbrk_r>
 8003884:	3001      	adds	r0, #1
 8003886:	d1dd      	bne.n	8003844 <_malloc_r+0x64>
 8003888:	e7cf      	b.n	800382a <_malloc_r+0x4a>
 800388a:	bf00      	nop
 800388c:	20000140 	.word	0x20000140
 8003890:	20000144 	.word	0x20000144

08003894 <_sbrk_r>:
 8003894:	b538      	push	{r3, r4, r5, lr}
 8003896:	2300      	movs	r3, #0
 8003898:	4d05      	ldr	r5, [pc, #20]	; (80038b0 <_sbrk_r+0x1c>)
 800389a:	4604      	mov	r4, r0
 800389c:	4608      	mov	r0, r1
 800389e:	602b      	str	r3, [r5, #0]
 80038a0:	f7fd fc26 	bl	80010f0 <_sbrk>
 80038a4:	1c43      	adds	r3, r0, #1
 80038a6:	d102      	bne.n	80038ae <_sbrk_r+0x1a>
 80038a8:	682b      	ldr	r3, [r5, #0]
 80038aa:	b103      	cbz	r3, 80038ae <_sbrk_r+0x1a>
 80038ac:	6023      	str	r3, [r4, #0]
 80038ae:	bd38      	pop	{r3, r4, r5, pc}
 80038b0:	200001e4 	.word	0x200001e4

080038b4 <__sread>:
 80038b4:	b510      	push	{r4, lr}
 80038b6:	460c      	mov	r4, r1
 80038b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038bc:	f000 f8a0 	bl	8003a00 <_read_r>
 80038c0:	2800      	cmp	r0, #0
 80038c2:	bfab      	itete	ge
 80038c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038c6:	89a3      	ldrhlt	r3, [r4, #12]
 80038c8:	181b      	addge	r3, r3, r0
 80038ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038ce:	bfac      	ite	ge
 80038d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80038d2:	81a3      	strhlt	r3, [r4, #12]
 80038d4:	bd10      	pop	{r4, pc}

080038d6 <__swrite>:
 80038d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038da:	461f      	mov	r7, r3
 80038dc:	898b      	ldrh	r3, [r1, #12]
 80038de:	4605      	mov	r5, r0
 80038e0:	05db      	lsls	r3, r3, #23
 80038e2:	460c      	mov	r4, r1
 80038e4:	4616      	mov	r6, r2
 80038e6:	d505      	bpl.n	80038f4 <__swrite+0x1e>
 80038e8:	2302      	movs	r3, #2
 80038ea:	2200      	movs	r2, #0
 80038ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038f0:	f000 f868 	bl	80039c4 <_lseek_r>
 80038f4:	89a3      	ldrh	r3, [r4, #12]
 80038f6:	4632      	mov	r2, r6
 80038f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038fc:	81a3      	strh	r3, [r4, #12]
 80038fe:	4628      	mov	r0, r5
 8003900:	463b      	mov	r3, r7
 8003902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800390a:	f000 b817 	b.w	800393c <_write_r>

0800390e <__sseek>:
 800390e:	b510      	push	{r4, lr}
 8003910:	460c      	mov	r4, r1
 8003912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003916:	f000 f855 	bl	80039c4 <_lseek_r>
 800391a:	1c43      	adds	r3, r0, #1
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	bf15      	itete	ne
 8003920:	6560      	strne	r0, [r4, #84]	; 0x54
 8003922:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003926:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800392a:	81a3      	strheq	r3, [r4, #12]
 800392c:	bf18      	it	ne
 800392e:	81a3      	strhne	r3, [r4, #12]
 8003930:	bd10      	pop	{r4, pc}

08003932 <__sclose>:
 8003932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003936:	f000 b813 	b.w	8003960 <_close_r>
	...

0800393c <_write_r>:
 800393c:	b538      	push	{r3, r4, r5, lr}
 800393e:	4604      	mov	r4, r0
 8003940:	4608      	mov	r0, r1
 8003942:	4611      	mov	r1, r2
 8003944:	2200      	movs	r2, #0
 8003946:	4d05      	ldr	r5, [pc, #20]	; (800395c <_write_r+0x20>)
 8003948:	602a      	str	r2, [r5, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	f7fd f9e0 	bl	8000d10 <_write>
 8003950:	1c43      	adds	r3, r0, #1
 8003952:	d102      	bne.n	800395a <_write_r+0x1e>
 8003954:	682b      	ldr	r3, [r5, #0]
 8003956:	b103      	cbz	r3, 800395a <_write_r+0x1e>
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	bd38      	pop	{r3, r4, r5, pc}
 800395c:	200001e4 	.word	0x200001e4

08003960 <_close_r>:
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	2300      	movs	r3, #0
 8003964:	4d05      	ldr	r5, [pc, #20]	; (800397c <_close_r+0x1c>)
 8003966:	4604      	mov	r4, r0
 8003968:	4608      	mov	r0, r1
 800396a:	602b      	str	r3, [r5, #0]
 800396c:	f7fd fb8f 	bl	800108e <_close>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d102      	bne.n	800397a <_close_r+0x1a>
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	b103      	cbz	r3, 800397a <_close_r+0x1a>
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	200001e4 	.word	0x200001e4

08003980 <_fstat_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	2300      	movs	r3, #0
 8003984:	4d06      	ldr	r5, [pc, #24]	; (80039a0 <_fstat_r+0x20>)
 8003986:	4604      	mov	r4, r0
 8003988:	4608      	mov	r0, r1
 800398a:	4611      	mov	r1, r2
 800398c:	602b      	str	r3, [r5, #0]
 800398e:	f7fd fb89 	bl	80010a4 <_fstat>
 8003992:	1c43      	adds	r3, r0, #1
 8003994:	d102      	bne.n	800399c <_fstat_r+0x1c>
 8003996:	682b      	ldr	r3, [r5, #0]
 8003998:	b103      	cbz	r3, 800399c <_fstat_r+0x1c>
 800399a:	6023      	str	r3, [r4, #0]
 800399c:	bd38      	pop	{r3, r4, r5, pc}
 800399e:	bf00      	nop
 80039a0:	200001e4 	.word	0x200001e4

080039a4 <_isatty_r>:
 80039a4:	b538      	push	{r3, r4, r5, lr}
 80039a6:	2300      	movs	r3, #0
 80039a8:	4d05      	ldr	r5, [pc, #20]	; (80039c0 <_isatty_r+0x1c>)
 80039aa:	4604      	mov	r4, r0
 80039ac:	4608      	mov	r0, r1
 80039ae:	602b      	str	r3, [r5, #0]
 80039b0:	f7fd fb87 	bl	80010c2 <_isatty>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d102      	bne.n	80039be <_isatty_r+0x1a>
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	b103      	cbz	r3, 80039be <_isatty_r+0x1a>
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	bd38      	pop	{r3, r4, r5, pc}
 80039c0:	200001e4 	.word	0x200001e4

080039c4 <_lseek_r>:
 80039c4:	b538      	push	{r3, r4, r5, lr}
 80039c6:	4604      	mov	r4, r0
 80039c8:	4608      	mov	r0, r1
 80039ca:	4611      	mov	r1, r2
 80039cc:	2200      	movs	r2, #0
 80039ce:	4d05      	ldr	r5, [pc, #20]	; (80039e4 <_lseek_r+0x20>)
 80039d0:	602a      	str	r2, [r5, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	f7fd fb7f 	bl	80010d6 <_lseek>
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	d102      	bne.n	80039e2 <_lseek_r+0x1e>
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	b103      	cbz	r3, 80039e2 <_lseek_r+0x1e>
 80039e0:	6023      	str	r3, [r4, #0]
 80039e2:	bd38      	pop	{r3, r4, r5, pc}
 80039e4:	200001e4 	.word	0x200001e4

080039e8 <__malloc_lock>:
 80039e8:	4801      	ldr	r0, [pc, #4]	; (80039f0 <__malloc_lock+0x8>)
 80039ea:	f7ff be47 	b.w	800367c <__retarget_lock_acquire_recursive>
 80039ee:	bf00      	nop
 80039f0:	200001dc 	.word	0x200001dc

080039f4 <__malloc_unlock>:
 80039f4:	4801      	ldr	r0, [pc, #4]	; (80039fc <__malloc_unlock+0x8>)
 80039f6:	f7ff be42 	b.w	800367e <__retarget_lock_release_recursive>
 80039fa:	bf00      	nop
 80039fc:	200001dc 	.word	0x200001dc

08003a00 <_read_r>:
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	4604      	mov	r4, r0
 8003a04:	4608      	mov	r0, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	2200      	movs	r2, #0
 8003a0a:	4d05      	ldr	r5, [pc, #20]	; (8003a20 <_read_r+0x20>)
 8003a0c:	602a      	str	r2, [r5, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f7fd fb20 	bl	8001054 <_read>
 8003a14:	1c43      	adds	r3, r0, #1
 8003a16:	d102      	bne.n	8003a1e <_read_r+0x1e>
 8003a18:	682b      	ldr	r3, [r5, #0]
 8003a1a:	b103      	cbz	r3, 8003a1e <_read_r+0x1e>
 8003a1c:	6023      	str	r3, [r4, #0]
 8003a1e:	bd38      	pop	{r3, r4, r5, pc}
 8003a20:	200001e4 	.word	0x200001e4

08003a24 <_init>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	bf00      	nop
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr

08003a30 <_fini>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	bf00      	nop
 8003a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a36:	bc08      	pop	{r3}
 8003a38:	469e      	mov	lr, r3
 8003a3a:	4770      	bx	lr
