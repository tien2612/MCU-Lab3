
mcu_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003518  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003624  08003624  00013624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036c8  080036c8  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080036c8  080036c8  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036c8  080036c8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036c8  080036c8  000136c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036cc  080036cc  000136cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080036d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200000b0  08003780  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003780  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea40  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a5  00000000  00000000  0002eb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  000311c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019332  00000000  00000000  00031f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f36e  00000000  00000000  0004b282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a0ba  00000000  00000000  0005a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000e46aa  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c60  00000000  00000000  000e4700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c3c  00000000  00000000  000e5360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800360c 	.word	0x0800360c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	0800360c 	.word	0x0800360c

0800014c <WhichButtonIsPressed>:
	BUTTON_PRESS_MORE_THAN_1S
};

enum ButtonState buttonState = BUTTON_RELEASED;

int WhichButtonIsPressed() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return button_mode_is_pressed;
 8000150:	2000      	movs	r0, #0
 8000152:	f000 f991 	bl	8000478 <is_button_pressed>
 8000156:	4603      	mov	r3, r0
 8000158:	2b00      	cmp	r3, #0
 800015a:	d001      	beq.n	8000160 <WhichButtonIsPressed+0x14>
 800015c:	230a      	movs	r3, #10
 800015e:	e018      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(1)) return button_add_is_pressed;
 8000160:	2001      	movs	r0, #1
 8000162:	f000 f989 	bl	8000478 <is_button_pressed>
 8000166:	4603      	mov	r3, r0
 8000168:	2b00      	cmp	r3, #0
 800016a:	d001      	beq.n	8000170 <WhichButtonIsPressed+0x24>
 800016c:	230b      	movs	r3, #11
 800016e:	e010      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(2)) return button_confirm_is_pressed;
 8000170:	2002      	movs	r0, #2
 8000172:	f000 f981 	bl	8000478 <is_button_pressed>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d001      	beq.n	8000180 <WhichButtonIsPressed+0x34>
 800017c:	230c      	movs	r3, #12
 800017e:	e008      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(3)) return button_reset_is_pressed;
 8000180:	2003      	movs	r0, #3
 8000182:	f000 f979 	bl	8000478 <is_button_pressed>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <WhichButtonIsPressed+0x44>
 800018c:	230d      	movs	r3, #13
 800018e:	e000      	b.n	8000192 <WhichButtonIsPressed+0x46>

	return 0; // None of these buttons are pressed
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}
	...

08000198 <fsm_for_input_processing>:
void fsm_for_input_processing() {
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	if (status == RED_MODE || status == GREEN_MODE || status == AMBER_MODE)
 800019c:	4b6d      	ldr	r3, [pc, #436]	; (8000354 <fsm_for_input_processing+0x1bc>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2b02      	cmp	r3, #2
 80001a2:	d007      	beq.n	80001b4 <fsm_for_input_processing+0x1c>
 80001a4:	4b6b      	ldr	r3, [pc, #428]	; (8000354 <fsm_for_input_processing+0x1bc>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	2b04      	cmp	r3, #4
 80001aa:	d003      	beq.n	80001b4 <fsm_for_input_processing+0x1c>
 80001ac:	4b69      	ldr	r3, [pc, #420]	; (8000354 <fsm_for_input_processing+0x1bc>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	2b03      	cmp	r3, #3
 80001b2:	d103      	bne.n	80001bc <fsm_for_input_processing+0x24>
		light_time1 = status;
 80001b4:	4b67      	ldr	r3, [pc, #412]	; (8000354 <fsm_for_input_processing+0x1bc>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a67      	ldr	r2, [pc, #412]	; (8000358 <fsm_for_input_processing+0x1c0>)
 80001ba:	6013      	str	r3, [r2, #0]
	switch(buttonState) {
 80001bc:	4b67      	ldr	r3, [pc, #412]	; (800035c <fsm_for_input_processing+0x1c4>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b02      	cmp	r3, #2
 80001c2:	f000 80b7 	beq.w	8000334 <fsm_for_input_processing+0x19c>
 80001c6:	2b02      	cmp	r3, #2
 80001c8:	f300 80bd 	bgt.w	8000346 <fsm_for_input_processing+0x1ae>
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d003      	beq.n	80001d8 <fsm_for_input_processing+0x40>
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	f000 809c 	beq.w	800030e <fsm_for_input_processing+0x176>
				buttonState = BUTTON_RELEASED;
			}
			// TODO
			break;
		default:
			break;
 80001d6:	e0b6      	b.n	8000346 <fsm_for_input_processing+0x1ae>
			if (WhichButtonIsPressed()) {
 80001d8:	f7ff ffb8 	bl	800014c <WhichButtonIsPressed>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	f000 8095 	beq.w	800030e <fsm_for_input_processing+0x176>
				buttonState = BUTTON_PRESSED;
 80001e4:	4b5d      	ldr	r3, [pc, #372]	; (800035c <fsm_for_input_processing+0x1c4>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	701a      	strb	r2, [r3, #0]
				switch(WhichButtonIsPressed()) {
 80001ea:	f7ff ffaf 	bl	800014c <WhichButtonIsPressed>
 80001ee:	4603      	mov	r3, r0
 80001f0:	3b0a      	subs	r3, #10
 80001f2:	2b03      	cmp	r3, #3
 80001f4:	f200 8089 	bhi.w	800030a <fsm_for_input_processing+0x172>
 80001f8:	a201      	add	r2, pc, #4	; (adr r2, 8000200 <fsm_for_input_processing+0x68>)
 80001fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001fe:	bf00      	nop
 8000200:	08000211 	.word	0x08000211
 8000204:	080002cf 	.word	0x080002cf
 8000208:	08000305 	.word	0x08000305
 800020c:	0800030b 	.word	0x0800030b
						switch(status) {
 8000210:	4b50      	ldr	r3, [pc, #320]	; (8000354 <fsm_for_input_processing+0x1bc>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	3b01      	subs	r3, #1
 8000216:	2b06      	cmp	r3, #6
 8000218:	d854      	bhi.n	80002c4 <fsm_for_input_processing+0x12c>
 800021a:	a201      	add	r2, pc, #4	; (adr r2, 8000220 <fsm_for_input_processing+0x88>)
 800021c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000220:	0800023d 	.word	0x0800023d
 8000224:	08000259 	.word	0x08000259
 8000228:	08000279 	.word	0x08000279
 800022c:	08000299 	.word	0x08000299
 8000230:	08000259 	.word	0x08000259
 8000234:	08000279 	.word	0x08000279
 8000238:	08000299 	.word	0x08000299
								led_init();
 800023c:	f000 f99c 	bl	8000578 <led_init>
								status = RED_MODE;
 8000240:	4b44      	ldr	r3, [pc, #272]	; (8000354 <fsm_for_input_processing+0x1bc>)
 8000242:	2202      	movs	r2, #2
 8000244:	601a      	str	r2, [r3, #0]
								light_time = man_red_time;
 8000246:	4b46      	ldr	r3, [pc, #280]	; (8000360 <fsm_for_input_processing+0x1c8>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a46      	ldr	r2, [pc, #280]	; (8000364 <fsm_for_input_processing+0x1cc>)
 800024c:	6013      	str	r3, [r2, #0]
								temp_value = light_time;
 800024e:	4b45      	ldr	r3, [pc, #276]	; (8000364 <fsm_for_input_processing+0x1cc>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a45      	ldr	r2, [pc, #276]	; (8000368 <fsm_for_input_processing+0x1d0>)
 8000254:	6013      	str	r3, [r2, #0]
								break;
 8000256:	e036      	b.n	80002c6 <fsm_for_input_processing+0x12e>
								GPIOB->BSRR = 0x3F00;
 8000258:	4b44      	ldr	r3, [pc, #272]	; (800036c <fsm_for_input_processing+0x1d4>)
 800025a:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 800025e:	611a      	str	r2, [r3, #16]
								light_time = man_amber_time;
 8000260:	4b43      	ldr	r3, [pc, #268]	; (8000370 <fsm_for_input_processing+0x1d8>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a3f      	ldr	r2, [pc, #252]	; (8000364 <fsm_for_input_processing+0x1cc>)
 8000266:	6013      	str	r3, [r2, #0]
								temp_value = light_time; // store value to temp variable if button add is pressed
 8000268:	4b3e      	ldr	r3, [pc, #248]	; (8000364 <fsm_for_input_processing+0x1cc>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a3e      	ldr	r2, [pc, #248]	; (8000368 <fsm_for_input_processing+0x1d0>)
 800026e:	6013      	str	r3, [r2, #0]
								status = AMBER_MODE;
 8000270:	4b38      	ldr	r3, [pc, #224]	; (8000354 <fsm_for_input_processing+0x1bc>)
 8000272:	2203      	movs	r2, #3
 8000274:	601a      	str	r2, [r3, #0]
								break;
 8000276:	e026      	b.n	80002c6 <fsm_for_input_processing+0x12e>
								GPIOB->BSRR = 0x3F00;
 8000278:	4b3c      	ldr	r3, [pc, #240]	; (800036c <fsm_for_input_processing+0x1d4>)
 800027a:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 800027e:	611a      	str	r2, [r3, #16]
								light_time = man_green_time;
 8000280:	4b3c      	ldr	r3, [pc, #240]	; (8000374 <fsm_for_input_processing+0x1dc>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a37      	ldr	r2, [pc, #220]	; (8000364 <fsm_for_input_processing+0x1cc>)
 8000286:	6013      	str	r3, [r2, #0]
								temp_value = light_time; // store value to temp variable if button add is pressed
 8000288:	4b36      	ldr	r3, [pc, #216]	; (8000364 <fsm_for_input_processing+0x1cc>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a36      	ldr	r2, [pc, #216]	; (8000368 <fsm_for_input_processing+0x1d0>)
 800028e:	6013      	str	r3, [r2, #0]
								status = GREEN_MODE;
 8000290:	4b30      	ldr	r3, [pc, #192]	; (8000354 <fsm_for_input_processing+0x1bc>)
 8000292:	2204      	movs	r2, #4
 8000294:	601a      	str	r2, [r3, #0]
								break;
 8000296:	e016      	b.n	80002c6 <fsm_for_input_processing+0x12e>
								GPIOB->BSRR = 0x3F00;
 8000298:	4b34      	ldr	r3, [pc, #208]	; (800036c <fsm_for_input_processing+0x1d4>)
 800029a:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 800029e:	611a      	str	r2, [r3, #16]
								light_time = man_red_time;
 80002a0:	4b2f      	ldr	r3, [pc, #188]	; (8000360 <fsm_for_input_processing+0x1c8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a2f      	ldr	r2, [pc, #188]	; (8000364 <fsm_for_input_processing+0x1cc>)
 80002a6:	6013      	str	r3, [r2, #0]
								temp_value = light_time; // store value to temp variable if button add is pressed
 80002a8:	4b2e      	ldr	r3, [pc, #184]	; (8000364 <fsm_for_input_processing+0x1cc>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a2e      	ldr	r2, [pc, #184]	; (8000368 <fsm_for_input_processing+0x1d0>)
 80002ae:	6013      	str	r3, [r2, #0]
								status = NORMAL_MODE;
 80002b0:	4b28      	ldr	r3, [pc, #160]	; (8000354 <fsm_for_input_processing+0x1bc>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	601a      	str	r2, [r3, #0]
								traffic_init();
 80002b6:	f000 fe31 	bl	8000f1c <traffic_init>
								update_buffer();
 80002ba:	f000 f919 	bl	80004f0 <update_buffer>
								setTimer3(100);
 80002be:	2064      	movs	r0, #100	; 0x64
 80002c0:	f000 fba4 	bl	8000a0c <setTimer3>
								break;
 80002c4:	bf00      	nop
						buttonState = BUTTON_PRESSED;
 80002c6:	4b25      	ldr	r3, [pc, #148]	; (800035c <fsm_for_input_processing+0x1c4>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	701a      	strb	r2, [r3, #0]
						break;
 80002cc:	e01e      	b.n	800030c <fsm_for_input_processing+0x174>
						switch(status) {
 80002ce:	4b21      	ldr	r3, [pc, #132]	; (8000354 <fsm_for_input_processing+0x1bc>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b04      	cmp	r3, #4
 80002d4:	d00e      	beq.n	80002f4 <fsm_for_input_processing+0x15c>
 80002d6:	2b04      	cmp	r3, #4
 80002d8:	dc10      	bgt.n	80002fc <fsm_for_input_processing+0x164>
 80002da:	2b02      	cmp	r3, #2
 80002dc:	d002      	beq.n	80002e4 <fsm_for_input_processing+0x14c>
 80002de:	2b03      	cmp	r3, #3
 80002e0:	d004      	beq.n	80002ec <fsm_for_input_processing+0x154>
							break;
 80002e2:	e00b      	b.n	80002fc <fsm_for_input_processing+0x164>
							status = MAN_RED_MODE;
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <fsm_for_input_processing+0x1bc>)
 80002e6:	2205      	movs	r2, #5
 80002e8:	601a      	str	r2, [r3, #0]
							break;
 80002ea:	e008      	b.n	80002fe <fsm_for_input_processing+0x166>
							status = MAN_AMBER_MODE;
 80002ec:	4b19      	ldr	r3, [pc, #100]	; (8000354 <fsm_for_input_processing+0x1bc>)
 80002ee:	2206      	movs	r2, #6
 80002f0:	601a      	str	r2, [r3, #0]
							break;
 80002f2:	e004      	b.n	80002fe <fsm_for_input_processing+0x166>
							status = MAN_GREEN_MODE;
 80002f4:	4b17      	ldr	r3, [pc, #92]	; (8000354 <fsm_for_input_processing+0x1bc>)
 80002f6:	2207      	movs	r2, #7
 80002f8:	601a      	str	r2, [r3, #0]
							break;
 80002fa:	e000      	b.n	80002fe <fsm_for_input_processing+0x166>
							break;
 80002fc:	bf00      	nop
						updateTempTime();
 80002fe:	f000 fd75 	bl	8000dec <updateTempTime>
						break;
 8000302:	e003      	b.n	800030c <fsm_for_input_processing+0x174>
						confirmAdjustedTime();
 8000304:	f000 fdc2 	bl	8000e8c <confirmAdjustedTime>
						break;
 8000308:	e000      	b.n	800030c <fsm_for_input_processing+0x174>
						break;
 800030a:	bf00      	nop
				break;
 800030c:	e020      	b.n	8000350 <fsm_for_input_processing+0x1b8>
			if (!WhichButtonIsPressed()) {
 800030e:	f7ff ff1d 	bl	800014c <WhichButtonIsPressed>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d103      	bne.n	8000320 <fsm_for_input_processing+0x188>
				buttonState = BUTTON_RELEASED;
 8000318:	4b10      	ldr	r3, [pc, #64]	; (800035c <fsm_for_input_processing+0x1c4>)
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]
			break;
 800031e:	e014      	b.n	800034a <fsm_for_input_processing+0x1b2>
				if (is_button_pressed_1s(0)) {
 8000320:	2000      	movs	r0, #0
 8000322:	f000 f8cb 	bl	80004bc <is_button_pressed_1s>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d00e      	beq.n	800034a <fsm_for_input_processing+0x1b2>
					buttonState = BUTTON_PRESS_MORE_THAN_1S;
 800032c:	4b0b      	ldr	r3, [pc, #44]	; (800035c <fsm_for_input_processing+0x1c4>)
 800032e:	2202      	movs	r2, #2
 8000330:	701a      	strb	r2, [r3, #0]
			break;
 8000332:	e00a      	b.n	800034a <fsm_for_input_processing+0x1b2>
			if (!WhichButtonIsPressed()) {
 8000334:	f7ff ff0a 	bl	800014c <WhichButtonIsPressed>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d107      	bne.n	800034e <fsm_for_input_processing+0x1b6>
				buttonState = BUTTON_RELEASED;
 800033e:	4b07      	ldr	r3, [pc, #28]	; (800035c <fsm_for_input_processing+0x1c4>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]
			break;
 8000344:	e003      	b.n	800034e <fsm_for_input_processing+0x1b6>
			break;
 8000346:	bf00      	nop
 8000348:	e002      	b.n	8000350 <fsm_for_input_processing+0x1b8>
			break;
 800034a:	bf00      	nop
 800034c:	e000      	b.n	8000350 <fsm_for_input_processing+0x1b8>
			break;
 800034e:	bf00      	nop
	}
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000014 	.word	0x20000014
 8000358:	20000010 	.word	0x20000010
 800035c:	200000d4 	.word	0x200000d4
 8000360:	20000000 	.word	0x20000000
 8000364:	2000000c 	.word	0x2000000c
 8000368:	200000cc 	.word	0x200000cc
 800036c:	40010c00 	.word	0x40010c00
 8000370:	20000004 	.word	0x20000004
 8000374:	20000008 	.word	0x20000008

08000378 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800037e:	2300      	movs	r3, #0
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	e061      	b.n	8000448 <button_reading+0xd0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000384:	4a34      	ldr	r2, [pc, #208]	; (8000458 <button_reading+0xe0>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	7819      	ldrb	r1, [r3, #0]
 800038c:	4a33      	ldr	r2, [pc, #204]	; (800045c <button_reading+0xe4>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4413      	add	r3, r2
 8000392:	460a      	mov	r2, r1
 8000394:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000396:	4a32      	ldr	r2, [pc, #200]	; (8000460 <button_reading+0xe8>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800039e:	4931      	ldr	r1, [pc, #196]	; (8000464 <button_reading+0xec>)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80003a6:	4619      	mov	r1, r3
 80003a8:	4610      	mov	r0, r2
 80003aa:	f001 fa3d 	bl	8001828 <HAL_GPIO_ReadPin>
 80003ae:	4603      	mov	r3, r0
 80003b0:	4619      	mov	r1, r3
 80003b2:	4a29      	ldr	r2, [pc, #164]	; (8000458 <button_reading+0xe0>)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4413      	add	r3, r2
 80003b8:	460a      	mov	r2, r1
 80003ba:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 80003bc:	4a26      	ldr	r2, [pc, #152]	; (8000458 <button_reading+0xe0>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4413      	add	r3, r2
 80003c2:	781a      	ldrb	r2, [r3, #0]
 80003c4:	4925      	ldr	r1, [pc, #148]	; (800045c <button_reading+0xe4>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	440b      	add	r3, r1
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d138      	bne.n	8000442 <button_reading+0xca>
			//valid input, can read now
			buttonBufferPrev[i] = buttonBuffer[i];
 80003d0:	4a25      	ldr	r2, [pc, #148]	; (8000468 <button_reading+0xf0>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4413      	add	r3, r2
 80003d6:	7819      	ldrb	r1, [r3, #0]
 80003d8:	4a24      	ldr	r2, [pc, #144]	; (800046c <button_reading+0xf4>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4413      	add	r3, r2
 80003de:	460a      	mov	r2, r1
 80003e0:	701a      	strb	r2, [r3, #0]
			// chap nhan input
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80003e2:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <button_reading+0xe0>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4413      	add	r3, r2
 80003e8:	7819      	ldrb	r1, [r3, #0]
 80003ea:	4a1f      	ldr	r2, [pc, #124]	; (8000468 <button_reading+0xf0>)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4413      	add	r3, r2
 80003f0:	460a      	mov	r2, r1
 80003f2:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80003f4:	4a1c      	ldr	r2, [pc, #112]	; (8000468 <button_reading+0xf0>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4413      	add	r3, r2
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d116      	bne.n	800042e <button_reading+0xb6>
				//toggle pin to validate
				//HAL_GPIO_TogglePin(BRESP_GPIO_Port, BRESP_Pin);
				//if a button is pressed , we start counting
				if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000400:	4a1b      	ldr	r2, [pc, #108]	; (8000470 <button_reading+0xf8>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000408:	2b63      	cmp	r3, #99	; 0x63
 800040a:	d80a      	bhi.n	8000422 <button_reading+0xaa>
					counterForButtonPress1s[i]++;
 800040c:	4a18      	ldr	r2, [pc, #96]	; (8000470 <button_reading+0xf8>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000414:	3301      	adds	r3, #1
 8000416:	b299      	uxth	r1, r3
 8000418:	4a15      	ldr	r2, [pc, #84]	; (8000470 <button_reading+0xf8>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000420:	e00f      	b.n	8000442 <button_reading+0xca>
				}

				else {
					//the flag is turned on when 1 second has passed
					//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 8000422:	4a14      	ldr	r2, [pc, #80]	; (8000474 <button_reading+0xfc>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4413      	add	r3, r2
 8000428:	2201      	movs	r2, #1
 800042a:	701a      	strb	r2, [r3, #0]
 800042c:	e009      	b.n	8000442 <button_reading+0xca>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 800042e:	4a10      	ldr	r2, [pc, #64]	; (8000470 <button_reading+0xf8>)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2100      	movs	r1, #0
 8000434:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000438:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <button_reading+0xfc>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4413      	add	r3, r2
 800043e:	2200      	movs	r2, #0
 8000440:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3301      	adds	r3, #1
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2b03      	cmp	r3, #3
 800044c:	dd9a      	ble.n	8000384 <button_reading+0xc>
			}
		}
	}
}
 800044e:	bf00      	nop
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	200000e0 	.word	0x200000e0
 800045c:	200000e4 	.word	0x200000e4
 8000460:	2000001c 	.word	0x2000001c
 8000464:	2000002c 	.word	0x2000002c
 8000468:	200000d8 	.word	0x200000d8
 800046c:	200000dc 	.word	0x200000dc
 8000470:	200000ec 	.word	0x200000ec
 8000474:	200000e8 	.word	0x200000e8

08000478 <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	2b03      	cmp	r3, #3
 8000486:	d901      	bls.n	800048c <is_button_pressed+0x14>
 8000488:	2300      	movs	r3, #0
 800048a:	e00d      	b.n	80004a8 <is_button_pressed+0x30>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	4a09      	ldr	r2, [pc, #36]	; (80004b4 <is_button_pressed+0x3c>)
 8000490:	5cd3      	ldrb	r3, [r2, r3]
			&& buttonBufferPrev[index] == BUTTON_IS_RELEASED);
 8000492:	2b00      	cmp	r3, #0
 8000494:	d106      	bne.n	80004a4 <is_button_pressed+0x2c>
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	4a07      	ldr	r2, [pc, #28]	; (80004b8 <is_button_pressed+0x40>)
 800049a:	5cd3      	ldrb	r3, [r2, r3]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d101      	bne.n	80004a4 <is_button_pressed+0x2c>
 80004a0:	2301      	movs	r3, #1
 80004a2:	e000      	b.n	80004a6 <is_button_pressed+0x2e>
 80004a4:	2300      	movs	r3, #0
 80004a6:	b2db      	uxtb	r3, r3
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	200000d8 	.word	0x200000d8
 80004b8:	200000dc 	.word	0x200000dc

080004bc <is_button_pressed_1s>:

// Check for button is pressed more than a second or not
unsigned char is_button_pressed_1s (unsigned char index ) {
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS ) return 0xff ;
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d901      	bls.n	80004d0 <is_button_pressed_1s+0x14>
 80004cc:	23ff      	movs	r3, #255	; 0xff
 80004ce:	e007      	b.n	80004e0 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	4a06      	ldr	r2, [pc, #24]	; (80004ec <is_button_pressed_1s+0x30>)
 80004d4:	5cd3      	ldrb	r3, [r2, r3]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	bf0c      	ite	eq
 80004da:	2301      	moveq	r3, #1
 80004dc:	2300      	movne	r3, #0
 80004de:	b2db      	uxtb	r3, r3
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	200000e8 	.word	0x200000e8

080004f0 <update_buffer>:
#include "led7seg.h"
#include "global.h"
static uint8_t led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
static uint8_t led_buffer[4] = {0};
//static uint8_t man_led_buffer[3] = {0};
void update_buffer() {
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
	if (light_time1 >= 10) return;
 80004f4:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <update_buffer+0x78>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b09      	cmp	r3, #9
 80004fa:	dc30      	bgt.n	800055e <update_buffer+0x6e>
	else {
		led_buffer[0] = 0;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <update_buffer+0x7c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = light_time1;
 8000502:	4b19      	ldr	r3, [pc, #100]	; (8000568 <update_buffer+0x78>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	b2da      	uxtb	r2, r3
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <update_buffer+0x7c>)
 800050a:	705a      	strb	r2, [r3, #1]
	}

	if (light_time >= 10) {
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <update_buffer+0x80>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b09      	cmp	r3, #9
 8000512:	dd1b      	ble.n	800054c <update_buffer+0x5c>
		led_buffer[2] = light_time / 10;
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <update_buffer+0x80>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a16      	ldr	r2, [pc, #88]	; (8000574 <update_buffer+0x84>)
 800051a:	fb82 1203 	smull	r1, r2, r2, r3
 800051e:	1092      	asrs	r2, r2, #2
 8000520:	17db      	asrs	r3, r3, #31
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <update_buffer+0x7c>)
 8000528:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time % 10;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <update_buffer+0x80>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <update_buffer+0x84>)
 8000530:	fb83 1302 	smull	r1, r3, r3, r2
 8000534:	1099      	asrs	r1, r3, #2
 8000536:	17d3      	asrs	r3, r2, #31
 8000538:	1ac9      	subs	r1, r1, r3
 800053a:	460b      	mov	r3, r1
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	440b      	add	r3, r1
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	1ad1      	subs	r1, r2, r3
 8000544:	b2ca      	uxtb	r2, r1
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <update_buffer+0x7c>)
 8000548:	70da      	strb	r2, [r3, #3]
 800054a:	e009      	b.n	8000560 <update_buffer+0x70>
	} else {
		led_buffer[2] = 0;
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <update_buffer+0x7c>)
 800054e:	2200      	movs	r2, #0
 8000550:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time;
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <update_buffer+0x80>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <update_buffer+0x7c>)
 800055a:	70da      	strb	r2, [r3, #3]
 800055c:	e000      	b.n	8000560 <update_buffer+0x70>
	if (light_time1 >= 10) return;
 800055e:	bf00      	nop
	}
}
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000010 	.word	0x20000010
 800056c:	200000f4 	.word	0x200000f4
 8000570:	2000000c 	.word	0x2000000c
 8000574:	66666667 	.word	0x66666667

08000578 <led_init>:

void led_init() {
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	GPIOB->BSRR = 0xFF00;
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <led_init+0x14>)
 800057e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000582:	611a      	str	r2, [r3, #16]
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	40010c00 	.word	0x40010c00

08000590 <update7SEG>:

void led_clear() {
	HAL_GPIO_WritePin(GPIOA, D1_Pin | D2_Pin | D3_Pin | D4_Pin | D5_Pin | D6_Pin, 1);
}

void update7SEG(int index){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b03      	cmp	r3, #3
 800059c:	d872      	bhi.n	8000684 <update7SEG+0xf4>
 800059e:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <update7SEG+0x14>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005b5 	.word	0x080005b5
 80005a8:	080005e9 	.word	0x080005e9
 80005ac:	0800061d 	.word	0x0800061d
 80005b0:	08000651 	.word	0x08000651
	switch(index) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, ON_7SEG); // turn on the first SEG
 80005b4:	2201      	movs	r2, #1
 80005b6:	2110      	movs	r1, #16
 80005b8:	4835      	ldr	r0, [pc, #212]	; (8000690 <update7SEG+0x100>)
 80005ba:	f001 f94c 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 80005be:	2200      	movs	r2, #0
 80005c0:	2120      	movs	r1, #32
 80005c2:	4833      	ldr	r0, [pc, #204]	; (8000690 <update7SEG+0x100>)
 80005c4:	f001 f947 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 80005c8:	2200      	movs	r2, #0
 80005ca:	2140      	movs	r1, #64	; 0x40
 80005cc:	4830      	ldr	r0, [pc, #192]	; (8000690 <update7SEG+0x100>)
 80005ce:	f001 f942 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 80005d2:	2200      	movs	r2, #0
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	482e      	ldr	r0, [pc, #184]	; (8000690 <update7SEG+0x100>)
 80005d8:	f001 f93d 	bl	8001856 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 80005dc:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <update7SEG+0x104>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f859 	bl	8000698 <display7SEG>
			break;
 80005e6:	e04e      	b.n	8000686 <update7SEG+0xf6>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	4828      	ldr	r0, [pc, #160]	; (8000690 <update7SEG+0x100>)
 80005ee:	f001 f932 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, ON_7SEG); // turn on the second SEG
 80005f2:	2201      	movs	r2, #1
 80005f4:	2120      	movs	r1, #32
 80005f6:	4826      	ldr	r0, [pc, #152]	; (8000690 <update7SEG+0x100>)
 80005f8:	f001 f92d 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 80005fc:	2200      	movs	r2, #0
 80005fe:	2140      	movs	r1, #64	; 0x40
 8000600:	4823      	ldr	r0, [pc, #140]	; (8000690 <update7SEG+0x100>)
 8000602:	f001 f928 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 8000606:	2200      	movs	r2, #0
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	4821      	ldr	r0, [pc, #132]	; (8000690 <update7SEG+0x100>)
 800060c:	f001 f923 	bl	8001856 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000610:	4b20      	ldr	r3, [pc, #128]	; (8000694 <update7SEG+0x104>)
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f83f 	bl	8000698 <display7SEG>
			break;
 800061a:	e034      	b.n	8000686 <update7SEG+0xf6>
		case 2:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 800061c:	2200      	movs	r2, #0
 800061e:	2110      	movs	r1, #16
 8000620:	481b      	ldr	r0, [pc, #108]	; (8000690 <update7SEG+0x100>)
 8000622:	f001 f918 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 8000626:	2200      	movs	r2, #0
 8000628:	2120      	movs	r1, #32
 800062a:	4819      	ldr	r0, [pc, #100]	; (8000690 <update7SEG+0x100>)
 800062c:	f001 f913 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, ON_7SEG); // turn on the third SEG
 8000630:	2201      	movs	r2, #1
 8000632:	2140      	movs	r1, #64	; 0x40
 8000634:	4816      	ldr	r0, [pc, #88]	; (8000690 <update7SEG+0x100>)
 8000636:	f001 f90e 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 800063a:	2200      	movs	r2, #0
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	4814      	ldr	r0, [pc, #80]	; (8000690 <update7SEG+0x100>)
 8000640:	f001 f909 	bl	8001856 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <update7SEG+0x104>)
 8000646:	789b      	ldrb	r3, [r3, #2]
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f825 	bl	8000698 <display7SEG>
			break;
 800064e:	e01a      	b.n	8000686 <update7SEG+0xf6>
		case 3:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 8000650:	2200      	movs	r2, #0
 8000652:	2110      	movs	r1, #16
 8000654:	480e      	ldr	r0, [pc, #56]	; (8000690 <update7SEG+0x100>)
 8000656:	f001 f8fe 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 800065a:	2200      	movs	r2, #0
 800065c:	2120      	movs	r1, #32
 800065e:	480c      	ldr	r0, [pc, #48]	; (8000690 <update7SEG+0x100>)
 8000660:	f001 f8f9 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 8000664:	2200      	movs	r2, #0
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <update7SEG+0x100>)
 800066a:	f001 f8f4 	bl	8001856 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, ON_7SEG); // turn on the fourth SEG
 800066e:	2201      	movs	r2, #1
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <update7SEG+0x100>)
 8000674:	f001 f8ef 	bl	8001856 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <update7SEG+0x104>)
 800067a:	78db      	ldrb	r3, [r3, #3]
 800067c:	4618      	mov	r0, r3
 800067e:	f000 f80b 	bl	8000698 <display7SEG>
			break;
 8000682:	e000      	b.n	8000686 <update7SEG+0xf6>
		default:
			break;
 8000684:	bf00      	nop
	}
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40010800 	.word	0x40010800
 8000694:	200000f4 	.word	0x200000f4

08000698 <display7SEG>:
void display7SEG(int num) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	GPIOB->BRR= 0xFF;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <display7SEG+0x24>)
 80006a2:	22ff      	movs	r2, #255	; 0xff
 80006a4:	615a      	str	r2, [r3, #20]
	GPIOB->BSRR = led7seg[num];
 80006a6:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <display7SEG+0x28>)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	781a      	ldrb	r2, [r3, #0]
 80006ae:	4b03      	ldr	r3, [pc, #12]	; (80006bc <display7SEG+0x24>)
 80006b0:	611a      	str	r2, [r3, #16]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40010c00 	.word	0x40010c00
 80006c0:	20000034 	.word	0x20000034

080006c4 <displayMode>:

void displayMode() {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	update_buffer();
 80006c8:	f7ff ff12 	bl	80004f0 <update_buffer>
	if (index_led >= 4) index_led = 0;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <displayMode+0x2c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	dd02      	ble.n	80006da <displayMode+0x16>
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <displayMode+0x2c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
	update7SEG(index_led++);
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <displayMode+0x2c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	4903      	ldr	r1, [pc, #12]	; (80006f0 <displayMode+0x2c>)
 80006e2:	600a      	str	r2, [r1, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff53 	bl	8000590 <update7SEG>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000d0 	.word	0x200000d0

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fdac 	bl	8001254 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f822 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f000 f8d2 	bl	80008a8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000704:	f000 f85a 	bl	80007bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000708:	f000 f8a4 	bl	8000854 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <main+0x48>)
 800070e:	f001 fd3d 	bl	800218c <HAL_TIM_Base_Start_IT>
  //led7SEG_init();
  GPIOA->BRR=0xFF;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <main+0x4c>)
 8000714:	22ff      	movs	r2, #255	; 0xff
 8000716:	615a      	str	r2, [r3, #20]
  led_init();
 8000718:	f7ff ff2e 	bl	8000578 <led_init>
  traffic_init();
 800071c:	f000 fbfe 	bl	8000f1c <traffic_init>
  setTimer1(2);
 8000720:	2002      	movs	r0, #2
 8000722:	f000 f94b 	bl	80009bc <setTimer1>
  setTimer2(100);
 8000726:	2064      	movs	r0, #100	; 0x64
 8000728:	f000 f95c 	bl	80009e4 <setTimer2>
  setTimer3(100);
 800072c:	2064      	movs	r0, #100	; 0x64
 800072e:	f000 f96d 	bl	8000a0c <setTimer3>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // display mode

	  traffic_light_processing();
 8000732:	f000 fd19 	bl	8001168 <traffic_light_processing>
	  fsm_for_input_processing();
 8000736:	f7ff fd2f 	bl	8000198 <fsm_for_input_processing>
	  traffic_light_processing();
 800073a:	e7fa      	b.n	8000732 <main+0x3e>
 800073c:	20000170 	.word	0x20000170
 8000740:	40010800 	.word	0x40010800

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b090      	sub	sp, #64	; 0x40
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0318 	add.w	r3, r7, #24
 800074e:	2228      	movs	r2, #40	; 0x28
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fa90 	bl	8002c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000766:	2302      	movs	r3, #2
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076a:	2301      	movs	r3, #1
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076e:	2310      	movs	r3, #16
 8000770:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000772:	2300      	movs	r3, #0
 8000774:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f89c 	bl	80018b8 <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000786:	f000 f8fd 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fb08 	bl	8001db8 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007ae:	f000 f8e9 	bl	8000984 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3740      	adds	r7, #64	; 0x40
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_TIM2_Init+0x94>)
 80007da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_TIM2_Init+0x94>)
 80007e2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_TIM2_Init+0x94>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_TIM2_Init+0x94>)
 80007f0:	2209      	movs	r2, #9
 80007f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_TIM2_Init+0x94>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_TIM2_Init+0x94>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000800:	4813      	ldr	r0, [pc, #76]	; (8000850 <MX_TIM2_Init+0x94>)
 8000802:	f001 fc73 	bl	80020ec <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800080c:	f000 f8ba 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	4619      	mov	r1, r3
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_TIM2_Init+0x94>)
 800081e:	f001 fe09 	bl	8002434 <HAL_TIM_ConfigClockSource>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000828:	f000 f8ac 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000834:	463b      	mov	r3, r7
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_TIM2_Init+0x94>)
 800083a:	f001 ffd1 	bl	80027e0 <HAL_TIMEx_MasterConfigSynchronization>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000844:	f000 f89e 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000170 	.word	0x20000170

08000854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <MX_USART1_UART_Init+0x50>)
 800085c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USART1_UART_Init+0x4c>)
 800088c:	f002 f812 	bl	80028b4 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000896:	f000 f875 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000012c 	.word	0x2000012c
 80008a4:	40013800 	.word	0x40013800

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a2d      	ldr	r2, [pc, #180]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a27      	ldr	r2, [pc, #156]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <MX_GPIO_Init+0xd0>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	21f0      	movs	r1, #240	; 0xf0
 80008f0:	4822      	ldr	r0, [pc, #136]	; (800097c <MX_GPIO_Init+0xd4>)
 80008f2:	f000 ffb0 	bl	8001856 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_Pin|D4_Pin|D5_Pin|D6_Pin
 80008f6:	2200      	movs	r2, #0
 80008f8:	f643 71f8 	movw	r1, #16376	; 0x3ff8
 80008fc:	4820      	ldr	r0, [pc, #128]	; (8000980 <MX_GPIO_Init+0xd8>)
 80008fe:	f000 ffaa 	bl	8001856 <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |GPIO_PIN_7|D1_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000902:	23f0      	movs	r3, #240	; 0xf0
 8000904:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2302      	movs	r3, #2
 8000910:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	4619      	mov	r1, r3
 8000918:	4818      	ldr	r0, [pc, #96]	; (800097c <MX_GPIO_Init+0xd4>)
 800091a:	f000 fe0b 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin;
 800091e:	2307      	movs	r3, #7
 8000920:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000926:	2301      	movs	r3, #1
 8000928:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	4619      	mov	r1, r3
 8000930:	4813      	ldr	r0, [pc, #76]	; (8000980 <MX_GPIO_Init+0xd8>)
 8000932:	f000 fdff 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D4_Pin D5_Pin D6_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           PB7 D1_Pin D2_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D4_Pin|D5_Pin|D6_Pin
 8000936:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 800093a:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |GPIO_PIN_7|D1_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2302      	movs	r3, #2
 8000946:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	4619      	mov	r1, r3
 800094e:	480c      	ldr	r0, [pc, #48]	; (8000980 <MX_GPIO_Init+0xd8>)
 8000950:	f000 fdf0 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin CONFIRM_Pin RESET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|CONFIRM_Pin|RESET_Pin;
 8000954:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000958:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095e:	2301      	movs	r3, #1
 8000960:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	4619      	mov	r1, r3
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_GPIO_Init+0xd4>)
 800096a:	f000 fde3 	bl	8001534 <HAL_GPIO_Init>

}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000
 800097c:	40010800 	.word	0x40010800
 8000980:	40010c00 	.word	0x40010c00

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <_write>:
#include "output_display.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *ptr, int len)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	b29a      	uxth	r2, r3
 80009a0:	f04f 33ff 	mov.w	r3, #4294967295
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	4804      	ldr	r0, [pc, #16]	; (80009b8 <_write+0x28>)
 80009a8:	f001 ffd1 	bl	800294e <HAL_UART_Transmit>
	return len;
 80009ac:	687b      	ldr	r3, [r7, #4]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000012c 	.word	0x2000012c

080009bc <setTimer1>:
int timer4_counter = 0;
int timer5_counter = 0;

int tick = 50;

void setTimer1(int duration) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
//	if (duration != tick) {
//		duration = tick;
//	}
	timer1_counter = duration ;
 80009c4:	4a05      	ldr	r2, [pc, #20]	; (80009dc <setTimer1+0x20>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <setTimer1+0x24>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	2000010c 	.word	0x2000010c
 80009e0:	200000f8 	.word	0x200000f8

080009e4 <setTimer2>:
void setTimer2(int duration) {
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
//	if (duration != DURATION_LED_BLINKING_2HZ) {
//		duration = DURATION_LED_BLINKING_2HZ;
//	}
	timer2_counter = duration;
 80009ec:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <setTimer2+0x20>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <setTimer2+0x24>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000110 	.word	0x20000110
 8000a08:	200000fc 	.word	0x200000fc

08000a0c <setTimer3>:
void setTimer3(int duration) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8000a14:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <setTimer3+0x20>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <setTimer3+0x24>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000114 	.word	0x20000114
 8000a30:	20000100 	.word	0x20000100

08000a34 <timerRun>:
	}
	timer5_counter = duration;
	timer5_flag = 0;
}

void timerRun() {
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000a38:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <timerRun+0xac>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	dd0b      	ble.n	8000a58 <timerRun+0x24>
		timer1_counter--;
 8000a40:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <timerRun+0xac>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	4a26      	ldr	r2, [pc, #152]	; (8000ae0 <timerRun+0xac>)
 8000a48:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000a4a:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <timerRun+0xac>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	dc02      	bgt.n	8000a58 <timerRun+0x24>
			timer1_flag = 1;
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <timerRun+0xb0>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <timerRun+0xb4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	dd0b      	ble.n	8000a78 <timerRun+0x44>
		timer2_counter--;
 8000a60:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <timerRun+0xb4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	4a20      	ldr	r2, [pc, #128]	; (8000ae8 <timerRun+0xb4>)
 8000a68:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <timerRun+0xb4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	dc02      	bgt.n	8000a78 <timerRun+0x44>
			timer2_flag = 1;
 8000a72:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <timerRun+0xb8>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <timerRun+0xbc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	dd0b      	ble.n	8000a98 <timerRun+0x64>
		timer3_counter--;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <timerRun+0xbc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <timerRun+0xbc>)
 8000a88:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <timerRun+0xbc>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	dc02      	bgt.n	8000a98 <timerRun+0x64>
			timer3_flag = 1;
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <timerRun+0xc0>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <timerRun+0xc4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	dd0b      	ble.n	8000ab8 <timerRun+0x84>
		timer4_counter--;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <timerRun+0xc4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <timerRun+0xc4>)
 8000aa8:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <timerRun+0xc4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	dc02      	bgt.n	8000ab8 <timerRun+0x84>
			timer4_flag = 1;
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <timerRun+0xc8>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <timerRun+0xcc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	dd0b      	ble.n	8000ad8 <timerRun+0xa4>
		timer5_counter--;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <timerRun+0xcc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <timerRun+0xcc>)
 8000ac8:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <timerRun+0xcc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dc02      	bgt.n	8000ad8 <timerRun+0xa4>
			timer5_flag = 1;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <timerRun+0xd0>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	2000010c 	.word	0x2000010c
 8000ae4:	200000f8 	.word	0x200000f8
 8000ae8:	20000110 	.word	0x20000110
 8000aec:	200000fc 	.word	0x200000fc
 8000af0:	20000114 	.word	0x20000114
 8000af4:	20000100 	.word	0x20000100
 8000af8:	20000118 	.word	0x20000118
 8000afc:	20000104 	.word	0x20000104
 8000b00:	2000011c 	.word	0x2000011c
 8000b04:	20000108 	.word	0x20000108

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_MspInit+0x5c>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_MspInit+0x60>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_MspInit+0x60>)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010000 	.word	0x40010000

08000b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b7c:	d113      	bne.n	8000ba6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_TIM_Base_MspInit+0x44>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <HAL_TIM_Base_MspInit+0x44>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_TIM_Base_MspInit+0x44>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	201c      	movs	r0, #28
 8000b9c:	f000 fc93 	bl	80014c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ba0:	201c      	movs	r0, #28
 8000ba2:	f000 fcac 	bl	80014fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <HAL_UART_MspInit+0x8c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d131      	bne.n	8000c38 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <HAL_UART_MspInit+0x90>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <HAL_UART_MspInit+0x90>)
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_UART_MspInit+0x90>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_UART_MspInit+0x90>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <HAL_UART_MspInit+0x90>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_UART_MspInit+0x90>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	4619      	mov	r1, r3
 8000c18:	480b      	ldr	r0, [pc, #44]	; (8000c48 <HAL_UART_MspInit+0x94>)
 8000c1a:	f000 fc8b 	bl	8001534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	4619      	mov	r1, r3
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_UART_MspInit+0x94>)
 8000c34:	f000 fc7e 	bl	8001534 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40013800 	.word	0x40013800
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010800 	.word	0x40010800

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c92:	f000 fb25 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <TIM2_IRQHandler+0x10>)
 8000ca2:	f001 fabf 	bl	8002224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000170 	.word	0x20000170

08000cb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e00a      	b.n	8000cd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cc2:	f3af 8000 	nop.w
 8000cc6:	4601      	mov	r1, r0
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	60ba      	str	r2, [r7, #8]
 8000cce:	b2ca      	uxtb	r2, r1
 8000cd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbf0      	blt.n	8000cc2 <_read+0x12>
	}

return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
	return -1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d10:	605a      	str	r2, [r3, #4]
	return 0;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <_isatty>:

int _isatty(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	return 1;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
	return 0;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
	...

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f001 ff52 	bl	8002c24 <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20002800 	.word	0x20002800
 8000dac:	00000400 	.word	0x00000400
 8000db0:	20000120 	.word	0x20000120
 8000db4:	200001d0 	.word	0x200001d0

08000db8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "software_timer.h"
#include "led7seg.h"
#include "global.h"

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd4:	d103      	bne.n	8000dde <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000dd6:	f7ff facf 	bl	8000378 <button_reading>
		displayMode();
 8000dda:	f7ff fc73 	bl	80006c4 <displayMode>
	}
	timerRun();
 8000dde:	f7ff fe29 	bl	8000a34 <timerRun>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <updateTempTime>:
#include "input_processing.h"
#include "global.h"
#include "led7seg.h"
#include "software_timer.h"

void updateTempTime() {
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
	switch(status) {
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <updateTempTime+0x94>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d83a      	bhi.n	8000e70 <updateTempTime+0x84>
 8000dfa:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <updateTempTime+0x14>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e71 	.word	0x08000e71
 8000e04:	08000e71 	.word	0x08000e71
 8000e08:	08000e71 	.word	0x08000e71
 8000e0c:	08000e71 	.word	0x08000e71
 8000e10:	08000e1d 	.word	0x08000e1d
 8000e14:	08000e39 	.word	0x08000e39
 8000e18:	08000e55 	.word	0x08000e55
		case NORMAL_MODE:
			break;
		case MAN_RED_MODE:
			//light_time = man_red_time;
			if (temp_value >= 99) temp_value = 0;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <updateTempTime+0x98>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b62      	cmp	r3, #98	; 0x62
 8000e22:	dd03      	ble.n	8000e2c <updateTempTime+0x40>
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <updateTempTime+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 8000e2a:	e021      	b.n	8000e70 <updateTempTime+0x84>
			else temp_value++;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <updateTempTime+0x98>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <updateTempTime+0x98>)
 8000e34:	6013      	str	r3, [r2, #0]
			break;
 8000e36:	e01b      	b.n	8000e70 <updateTempTime+0x84>
		case MAN_AMBER_MODE:
			//temp_value = temp_value;
			if (temp_value >= 99) temp_value = 0;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <updateTempTime+0x98>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b62      	cmp	r3, #98	; 0x62
 8000e3e:	dd03      	ble.n	8000e48 <updateTempTime+0x5c>
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <updateTempTime+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 8000e46:	e013      	b.n	8000e70 <updateTempTime+0x84>
			else temp_value++;
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <updateTempTime+0x98>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <updateTempTime+0x98>)
 8000e50:	6013      	str	r3, [r2, #0]
			break;
 8000e52:	e00d      	b.n	8000e70 <updateTempTime+0x84>
		case MAN_GREEN_MODE:
			//light_time = man_green_time;
			if (temp_value >= 99) temp_value = 0;
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <updateTempTime+0x98>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b62      	cmp	r3, #98	; 0x62
 8000e5a:	dd03      	ble.n	8000e64 <updateTempTime+0x78>
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <updateTempTime+0x98>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 8000e62:	e004      	b.n	8000e6e <updateTempTime+0x82>
			else temp_value++;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <updateTempTime+0x98>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <updateTempTime+0x98>)
 8000e6c:	6013      	str	r3, [r2, #0]
			break;
 8000e6e:	bf00      	nop
	}
	light_time = temp_value;
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <updateTempTime+0x98>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <updateTempTime+0x9c>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	20000014 	.word	0x20000014
 8000e84:	200000cc 	.word	0x200000cc
 8000e88:	2000000c 	.word	0x2000000c

08000e8c <confirmAdjustedTime>:

void confirmAdjustedTime() {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	printf("Confirmed adjust time!\r\n");
 8000e90:	481b      	ldr	r0, [pc, #108]	; (8000f00 <confirmAdjustedTime+0x74>)
 8000e92:	f001 ff67 	bl	8002d64 <puts>
	switch(status) {
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <confirmAdjustedTime+0x78>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	2b06      	cmp	r3, #6
 8000e9e:	d82c      	bhi.n	8000efa <confirmAdjustedTime+0x6e>
 8000ea0:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <confirmAdjustedTime+0x1c>)
 8000ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea6:	bf00      	nop
 8000ea8:	08000efb 	.word	0x08000efb
 8000eac:	08000efb 	.word	0x08000efb
 8000eb0:	08000efb 	.word	0x08000efb
 8000eb4:	08000efb 	.word	0x08000efb
 8000eb8:	08000ec5 	.word	0x08000ec5
 8000ebc:	08000ed7 	.word	0x08000ed7
 8000ec0:	08000ee9 	.word	0x08000ee9
		case NORMAL_MODE:
			//temp_value = light_time;
			break;
		case MAN_RED_MODE:
			man_red_time = temp_value;
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <confirmAdjustedTime+0x7c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <confirmAdjustedTime+0x80>)
 8000eca:	6013      	str	r3, [r2, #0]
			light_time = man_red_time;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <confirmAdjustedTime+0x80>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <confirmAdjustedTime+0x84>)
 8000ed2:	6013      	str	r3, [r2, #0]
			break;
 8000ed4:	e012      	b.n	8000efc <confirmAdjustedTime+0x70>
		case MAN_AMBER_MODE:
			man_amber_time = temp_value;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <confirmAdjustedTime+0x7c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <confirmAdjustedTime+0x88>)
 8000edc:	6013      	str	r3, [r2, #0]
			light_time = man_amber_time;
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <confirmAdjustedTime+0x88>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <confirmAdjustedTime+0x84>)
 8000ee4:	6013      	str	r3, [r2, #0]
			break;
 8000ee6:	e009      	b.n	8000efc <confirmAdjustedTime+0x70>
		case MAN_GREEN_MODE:
			man_green_time = temp_value;
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <confirmAdjustedTime+0x7c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <confirmAdjustedTime+0x8c>)
 8000eee:	6013      	str	r3, [r2, #0]
			light_time = man_green_time;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <confirmAdjustedTime+0x8c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <confirmAdjustedTime+0x84>)
 8000ef6:	6013      	str	r3, [r2, #0]
			break;
 8000ef8:	e000      	b.n	8000efc <confirmAdjustedTime+0x70>
		default:
			break;
 8000efa:	bf00      	nop
	}
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	08003624 	.word	0x08003624
 8000f04:	20000014 	.word	0x20000014
 8000f08:	200000cc 	.word	0x200000cc
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	2000000c 	.word	0x2000000c
 8000f14:	20000004 	.word	0x20000004
 8000f18:	20000008 	.word	0x20000008

08000f1c <traffic_init>:

void traffic_init() {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	light_time = man_green_time;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <traffic_init+0x30>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <traffic_init+0x34>)
 8000f26:	6013      	str	r3, [r2, #0]
	light_time1 = man_red_time;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <traffic_init+0x38>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <traffic_init+0x3c>)
 8000f2e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f36:	4809      	ldr	r0, [pc, #36]	; (8000f5c <traffic_init+0x40>)
 8000f38:	f000 fc8d 	bl	8001856 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f42:	4806      	ldr	r0, [pc, #24]	; (8000f5c <traffic_init+0x40>)
 8000f44:	f000 fc87 	bl	8001856 <HAL_GPIO_WritePin>
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	2000000c 	.word	0x2000000c
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000010 	.word	0x20000010
 8000f5c:	40010c00 	.word	0x40010c00

08000f60 <normal_running_traffic_light>:

void normal_running_traffic_light() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	switch(led_status) {
 8000f64:	4b78      	ldr	r3, [pc, #480]	; (8001148 <normal_running_traffic_light+0x1e8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	3b14      	subs	r3, #20
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	f200 80e0 	bhi.w	8001130 <normal_running_traffic_light+0x1d0>
 8000f70:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <normal_running_traffic_light+0x18>)
 8000f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f76:	bf00      	nop
 8000f78:	08000f89 	.word	0x08000f89
 8000f7c:	08001005 	.word	0x08001005
 8000f80:	0800106d 	.word	0x0800106d
 8000f84:	080010cb 	.word	0x080010cb
		case RED_GREEN:
			if (timer3_flag == 1) {
 8000f88:	4b70      	ldr	r3, [pc, #448]	; (800114c <normal_running_traffic_light+0x1ec>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	f040 80d1 	bne.w	8001134 <normal_running_traffic_light+0x1d4>
				led_init();
 8000f92:	f7ff faf1 	bl	8000578 <led_init>
				HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9c:	486c      	ldr	r0, [pc, #432]	; (8001150 <normal_running_traffic_light+0x1f0>)
 8000f9e:	f000 fc5a 	bl	8001856 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa8:	4869      	ldr	r0, [pc, #420]	; (8001150 <normal_running_traffic_light+0x1f0>)
 8000faa:	f000 fc54 	bl	8001856 <HAL_GPIO_WritePin>

				light_time--;
 8000fae:	4b69      	ldr	r3, [pc, #420]	; (8001154 <normal_running_traffic_light+0x1f4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	4a67      	ldr	r2, [pc, #412]	; (8001154 <normal_running_traffic_light+0x1f4>)
 8000fb6:	6013      	str	r3, [r2, #0]
				light_time1--;
 8000fb8:	4b67      	ldr	r3, [pc, #412]	; (8001158 <normal_running_traffic_light+0x1f8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	4a66      	ldr	r2, [pc, #408]	; (8001158 <normal_running_traffic_light+0x1f8>)
 8000fc0:	6013      	str	r3, [r2, #0]
				if (light_time == 0 || light_time1 == 0) {
 8000fc2:	4b64      	ldr	r3, [pc, #400]	; (8001154 <normal_running_traffic_light+0x1f4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <normal_running_traffic_light+0x72>
 8000fca:	4b63      	ldr	r3, [pc, #396]	; (8001158 <normal_running_traffic_light+0x1f8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d114      	bne.n	8000ffc <normal_running_traffic_light+0x9c>
					led_status = RED_AMBER;
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	; (8001148 <normal_running_traffic_light+0x1e8>)
 8000fd4:	2215      	movs	r2, #21
 8000fd6:	601a      	str	r2, [r3, #0]
					light_time = man_amber_time; // Road 2
 8000fd8:	4b60      	ldr	r3, [pc, #384]	; (800115c <normal_running_traffic_light+0x1fc>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a5d      	ldr	r2, [pc, #372]	; (8001154 <normal_running_traffic_light+0x1f4>)
 8000fde:	6013      	str	r3, [r2, #0]
					led_init();
 8000fe0:	f7ff faca 	bl	8000578 <led_init>
					//light_time1 = man_red_time; // Road 1
					HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fea:	4859      	ldr	r0, [pc, #356]	; (8001150 <normal_running_traffic_light+0x1f0>)
 8000fec:	f000 fc33 	bl	8001856 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D5_Pin, 0); // On ROAD 2, turn on the AMBER light. 
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff6:	4856      	ldr	r0, [pc, #344]	; (8001150 <normal_running_traffic_light+0x1f0>)
 8000ff8:	f000 fc2d 	bl	8001856 <HAL_GPIO_WritePin>
				}
				setTimer3(100);
 8000ffc:	2064      	movs	r0, #100	; 0x64
 8000ffe:	f7ff fd05 	bl	8000a0c <setTimer3>
			}
			break;
 8001002:	e097      	b.n	8001134 <normal_running_traffic_light+0x1d4>
		case RED_AMBER:
				if (timer3_flag == 1) {
 8001004:	4b51      	ldr	r3, [pc, #324]	; (800114c <normal_running_traffic_light+0x1ec>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	f040 8095 	bne.w	8001138 <normal_running_traffic_light+0x1d8>
					light_time--;
 800100e:	4b51      	ldr	r3, [pc, #324]	; (8001154 <normal_running_traffic_light+0x1f4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3b01      	subs	r3, #1
 8001014:	4a4f      	ldr	r2, [pc, #316]	; (8001154 <normal_running_traffic_light+0x1f4>)
 8001016:	6013      	str	r3, [r2, #0]
					light_time1--;
 8001018:	4b4f      	ldr	r3, [pc, #316]	; (8001158 <normal_running_traffic_light+0x1f8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3b01      	subs	r3, #1
 800101e:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <normal_running_traffic_light+0x1f8>)
 8001020:	6013      	str	r3, [r2, #0]
					if (!light_time || !light_time1) {
 8001022:	4b4c      	ldr	r3, [pc, #304]	; (8001154 <normal_running_traffic_light+0x1f4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <normal_running_traffic_light+0xd2>
 800102a:	4b4b      	ldr	r3, [pc, #300]	; (8001158 <normal_running_traffic_light+0x1f8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d118      	bne.n	8001064 <normal_running_traffic_light+0x104>
						led_status = GREEN_RED;
 8001032:	4b45      	ldr	r3, [pc, #276]	; (8001148 <normal_running_traffic_light+0x1e8>)
 8001034:	2216      	movs	r2, #22
 8001036:	601a      	str	r2, [r3, #0]
						light_time = man_red_time; // Road 2
 8001038:	4b49      	ldr	r3, [pc, #292]	; (8001160 <normal_running_traffic_light+0x200>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a45      	ldr	r2, [pc, #276]	; (8001154 <normal_running_traffic_light+0x1f4>)
 800103e:	6013      	str	r3, [r2, #0]
						light_time1 = man_green_time; // Road 1
 8001040:	4b48      	ldr	r3, [pc, #288]	; (8001164 <normal_running_traffic_light+0x204>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a44      	ldr	r2, [pc, #272]	; (8001158 <normal_running_traffic_light+0x1f8>)
 8001046:	6013      	str	r3, [r2, #0]

						led_init();
 8001048:	f7ff fa96 	bl	8000578 <led_init>
						HAL_GPIO_WritePin(GPIOB, D4_Pin, 0); // On ROAD 1, turn on the RED light. 
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001052:	483f      	ldr	r0, [pc, #252]	; (8001150 <normal_running_traffic_light+0x1f0>)
 8001054:	f000 fbff 	bl	8001856 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, D3_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105e:	483c      	ldr	r0, [pc, #240]	; (8001150 <normal_running_traffic_light+0x1f0>)
 8001060:	f000 fbf9 	bl	8001856 <HAL_GPIO_WritePin>
					}
					setTimer3(100);
 8001064:	2064      	movs	r0, #100	; 0x64
 8001066:	f7ff fcd1 	bl	8000a0c <setTimer3>
				}

			break;
 800106a:	e065      	b.n	8001138 <normal_running_traffic_light+0x1d8>
		case GREEN_RED:
			if (timer3_flag == 1) {
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <normal_running_traffic_light+0x1ec>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d163      	bne.n	800113c <normal_running_traffic_light+0x1dc>

				light_time--;
 8001074:	4b37      	ldr	r3, [pc, #220]	; (8001154 <normal_running_traffic_light+0x1f4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3b01      	subs	r3, #1
 800107a:	4a36      	ldr	r2, [pc, #216]	; (8001154 <normal_running_traffic_light+0x1f4>)
 800107c:	6013      	str	r3, [r2, #0]
				light_time1--;
 800107e:	4b36      	ldr	r3, [pc, #216]	; (8001158 <normal_running_traffic_light+0x1f8>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3b01      	subs	r3, #1
 8001084:	4a34      	ldr	r2, [pc, #208]	; (8001158 <normal_running_traffic_light+0x1f8>)
 8001086:	6013      	str	r3, [r2, #0]
				if (!light_time || !light_time1) {
 8001088:	4b32      	ldr	r3, [pc, #200]	; (8001154 <normal_running_traffic_light+0x1f4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <normal_running_traffic_light+0x138>
 8001090:	4b31      	ldr	r3, [pc, #196]	; (8001158 <normal_running_traffic_light+0x1f8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d114      	bne.n	80010c2 <normal_running_traffic_light+0x162>
					led_status = AMBER_RED;
 8001098:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <normal_running_traffic_light+0x1e8>)
 800109a:	2217      	movs	r2, #23
 800109c:	601a      	str	r2, [r3, #0]
					light_time1 = man_amber_time; // Road 1
 800109e:	4b2f      	ldr	r3, [pc, #188]	; (800115c <normal_running_traffic_light+0x1fc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a2d      	ldr	r2, [pc, #180]	; (8001158 <normal_running_traffic_light+0x1f8>)
 80010a4:	6013      	str	r3, [r2, #0]
					led_init();
 80010a6:	f7ff fa67 	bl	8000578 <led_init>
					HAL_GPIO_WritePin(GPIOB, D2_Pin, 0); // On ROAD 1, turn on the RED light. 
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b0:	4827      	ldr	r0, [pc, #156]	; (8001150 <normal_running_traffic_light+0x1f0>)
 80010b2:	f000 fbd0 	bl	8001856 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D4_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010bc:	4824      	ldr	r0, [pc, #144]	; (8001150 <normal_running_traffic_light+0x1f0>)
 80010be:	f000 fbca 	bl	8001856 <HAL_GPIO_WritePin>
				}
				setTimer3(100);
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f7ff fca2 	bl	8000a0c <setTimer3>
			}

			break;
 80010c8:	e038      	b.n	800113c <normal_running_traffic_light+0x1dc>
		case AMBER_RED:
			if (timer3_flag == 1) {
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <normal_running_traffic_light+0x1ec>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d136      	bne.n	8001140 <normal_running_traffic_light+0x1e0>
				light_time--;
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <normal_running_traffic_light+0x1f4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <normal_running_traffic_light+0x1f4>)
 80010da:	6013      	str	r3, [r2, #0]
					light_time1--;
 80010dc:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <normal_running_traffic_light+0x1f8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	4a1d      	ldr	r2, [pc, #116]	; (8001158 <normal_running_traffic_light+0x1f8>)
 80010e4:	6013      	str	r3, [r2, #0]
				if (!light_time || !light_time1) {
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <normal_running_traffic_light+0x1f4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <normal_running_traffic_light+0x196>
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <normal_running_traffic_light+0x1f8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d118      	bne.n	8001128 <normal_running_traffic_light+0x1c8>
					led_status = RED_GREEN;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <normal_running_traffic_light+0x1e8>)
 80010f8:	2214      	movs	r2, #20
 80010fa:	601a      	str	r2, [r3, #0]
					light_time = man_green_time; // Road 2
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <normal_running_traffic_light+0x204>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a14      	ldr	r2, [pc, #80]	; (8001154 <normal_running_traffic_light+0x1f4>)
 8001102:	6013      	str	r3, [r2, #0]
					light_time1 = man_red_time; // Road 1
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <normal_running_traffic_light+0x200>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a13      	ldr	r2, [pc, #76]	; (8001158 <normal_running_traffic_light+0x1f8>)
 800110a:	6013      	str	r3, [r2, #0]
					led_init();
 800110c:	f7ff fa34 	bl	8000578 <led_init>
					HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001116:	480e      	ldr	r0, [pc, #56]	; (8001150 <normal_running_traffic_light+0x1f0>)
 8001118:	f000 fb9d 	bl	8001856 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001122:	480b      	ldr	r0, [pc, #44]	; (8001150 <normal_running_traffic_light+0x1f0>)
 8001124:	f000 fb97 	bl	8001856 <HAL_GPIO_WritePin>
				}
				setTimer3(100);
 8001128:	2064      	movs	r0, #100	; 0x64
 800112a:	f7ff fc6f 	bl	8000a0c <setTimer3>
			}
			break;
 800112e:	e007      	b.n	8001140 <normal_running_traffic_light+0x1e0>
		default:
			break;
 8001130:	bf00      	nop
 8001132:	e006      	b.n	8001142 <normal_running_traffic_light+0x1e2>
			break;
 8001134:	bf00      	nop
 8001136:	e004      	b.n	8001142 <normal_running_traffic_light+0x1e2>
			break;
 8001138:	bf00      	nop
 800113a:	e002      	b.n	8001142 <normal_running_traffic_light+0x1e2>
			break;
 800113c:	bf00      	nop
 800113e:	e000      	b.n	8001142 <normal_running_traffic_light+0x1e2>
			break;
 8001140:	bf00      	nop
	}
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000018 	.word	0x20000018
 800114c:	20000100 	.word	0x20000100
 8001150:	40010c00 	.word	0x40010c00
 8001154:	2000000c 	.word	0x2000000c
 8001158:	20000010 	.word	0x20000010
 800115c:	20000004 	.word	0x20000004
 8001160:	20000000 	.word	0x20000000
 8001164:	20000008 	.word	0x20000008

08001168 <traffic_light_processing>:

void traffic_light_processing() {
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	switch(status) {
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <traffic_light_processing+0x94>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3b01      	subs	r3, #1
 8001172:	2b06      	cmp	r3, #6
 8001174:	d83f      	bhi.n	80011f6 <traffic_light_processing+0x8e>
 8001176:	a201      	add	r2, pc, #4	; (adr r2, 800117c <traffic_light_processing+0x14>)
 8001178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117c:	08001199 	.word	0x08001199
 8001180:	0800119f 	.word	0x0800119f
 8001184:	080011b9 	.word	0x080011b9
 8001188:	080011d3 	.word	0x080011d3
 800118c:	0800119f 	.word	0x0800119f
 8001190:	080011b9 	.word	0x080011b9
 8001194:	080011d3 	.word	0x080011d3
		case NORMAL_MODE:
			normal_running_traffic_light();
 8001198:	f7ff fee2 	bl	8000f60 <normal_running_traffic_light>
			break;
 800119c:	e02b      	b.n	80011f6 <traffic_light_processing+0x8e>
		case RED_MODE: case MAN_RED_MODE:
			if (timer1_flag == 1) {
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <traffic_light_processing+0x98>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d122      	bne.n	80011ec <traffic_light_processing+0x84>
				// Toggle RED
				HAL_GPIO_TogglePin(GPIOB, D4_Pin | D1_Pin);
 80011a6:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80011aa:	4816      	ldr	r0, [pc, #88]	; (8001204 <traffic_light_processing+0x9c>)
 80011ac:	f000 fb6b 	bl	8001886 <HAL_GPIO_TogglePin>
				setTimer1(50);
 80011b0:	2032      	movs	r0, #50	; 0x32
 80011b2:	f7ff fc03 	bl	80009bc <setTimer1>
			}
			break;
 80011b6:	e019      	b.n	80011ec <traffic_light_processing+0x84>
		case AMBER_MODE: case MAN_AMBER_MODE:
			if (timer1_flag == 1) {
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <traffic_light_processing+0x98>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d117      	bne.n	80011f0 <traffic_light_processing+0x88>
				// Toggle AMBER
				HAL_GPIO_TogglePin(GPIOB, D2_Pin | D5_Pin);
 80011c0:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80011c4:	480f      	ldr	r0, [pc, #60]	; (8001204 <traffic_light_processing+0x9c>)
 80011c6:	f000 fb5e 	bl	8001886 <HAL_GPIO_TogglePin>
				setTimer1(50);
 80011ca:	2032      	movs	r0, #50	; 0x32
 80011cc:	f7ff fbf6 	bl	80009bc <setTimer1>
			}
			break;
 80011d0:	e00e      	b.n	80011f0 <traffic_light_processing+0x88>
		case GREEN_MODE: case MAN_GREEN_MODE:
			if (timer1_flag == 1) {
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <traffic_light_processing+0x98>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10c      	bne.n	80011f4 <traffic_light_processing+0x8c>
				// Toggle GREEN
				HAL_GPIO_TogglePin(GPIOB, D3_Pin | D6_Pin);
 80011da:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80011de:	4809      	ldr	r0, [pc, #36]	; (8001204 <traffic_light_processing+0x9c>)
 80011e0:	f000 fb51 	bl	8001886 <HAL_GPIO_TogglePin>
				setTimer1(50);
 80011e4:	2032      	movs	r0, #50	; 0x32
 80011e6:	f7ff fbe9 	bl	80009bc <setTimer1>
			}
			break;
 80011ea:	e003      	b.n	80011f4 <traffic_light_processing+0x8c>
			break;
 80011ec:	bf00      	nop
 80011ee:	e002      	b.n	80011f6 <traffic_light_processing+0x8e>
			break;
 80011f0:	bf00      	nop
 80011f2:	e000      	b.n	80011f6 <traffic_light_processing+0x8e>
			break;
 80011f4:	bf00      	nop
	}
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000014 	.word	0x20000014
 8001200:	200000f8 	.word	0x200000f8
 8001204:	40010c00 	.word	0x40010c00

08001208 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800120a:	490d      	ldr	r1, [pc, #52]	; (8001240 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001220:	4c0a      	ldr	r4, [pc, #40]	; (800124c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800122e:	f7ff fdc3 	bl	8000db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001232:	f001 fcfd 	bl	8002c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001236:	f7ff fa5d 	bl	80006f4 <main>
  bx lr
 800123a:	4770      	bx	lr
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001244:	080036d0 	.word	0x080036d0
  ldr r2, =_sbss
 8001248:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 800124c:	200001cc 	.word	0x200001cc

08001250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC1_2_IRQHandler>
	...

08001254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_Init+0x28>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a07      	ldr	r2, [pc, #28]	; (800127c <HAL_Init+0x28>)
 800125e:	f043 0310 	orr.w	r3, r3, #16
 8001262:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 f923 	bl	80014b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126a:	200f      	movs	r0, #15
 800126c:	f000 f808 	bl	8001280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001270:	f7ff fc4a 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40022000 	.word	0x40022000

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x54>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x58>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f93b 	bl	800151a <HAL_SYSTICK_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00e      	b.n	80012cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d80a      	bhi.n	80012ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f000 f903 	bl	80014c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <HAL_InitTick+0x5c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000040 	.word	0x20000040
 80012d8:	20000048 	.word	0x20000048
 80012dc:	20000044 	.word	0x20000044

080012e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_IncTick+0x1c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_IncTick+0x20>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a03      	ldr	r2, [pc, #12]	; (8001300 <HAL_IncTick+0x20>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	20000048 	.word	0x20000048
 8001300:	200001b8 	.word	0x200001b8

08001304 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <HAL_GetTick+0x10>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	200001b8 	.word	0x200001b8

08001318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <__NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db0b      	blt.n	80013a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f003 021f 	and.w	r2, r3, #31
 8001394:	4906      	ldr	r1, [pc, #24]	; (80013b0 <__NVIC_EnableIRQ+0x34>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	2001      	movs	r0, #1
 800139e:	fa00 f202 	lsl.w	r2, r0, r2
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800147c:	d301      	bcc.n	8001482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147e:	2301      	movs	r3, #1
 8001480:	e00f      	b.n	80014a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <SysTick_Config+0x40>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148a:	210f      	movs	r1, #15
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f7ff ff90 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <SysTick_Config+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SysTick_Config+0x40>)
 800149c:	2207      	movs	r2, #7
 800149e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff2d 	bl	8001318 <__NVIC_SetPriorityGrouping>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff42 	bl	8001360 <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff90 	bl	8001408 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5f 	bl	80013b4 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff35 	bl	800137c <__NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffa2 	bl	800146c <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001534:	b480      	push	{r7}
 8001536:	b08b      	sub	sp, #44	; 0x2c
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001546:	e148      	b.n	80017da <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001548:	2201      	movs	r2, #1
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	429a      	cmp	r2, r3
 8001562:	f040 8137 	bne.w	80017d4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4aa3      	ldr	r2, [pc, #652]	; (80017f8 <HAL_GPIO_Init+0x2c4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d05e      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 8001570:	4aa1      	ldr	r2, [pc, #644]	; (80017f8 <HAL_GPIO_Init+0x2c4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d875      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 8001576:	4aa1      	ldr	r2, [pc, #644]	; (80017fc <HAL_GPIO_Init+0x2c8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d058      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 800157c:	4a9f      	ldr	r2, [pc, #636]	; (80017fc <HAL_GPIO_Init+0x2c8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d86f      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 8001582:	4a9f      	ldr	r2, [pc, #636]	; (8001800 <HAL_GPIO_Init+0x2cc>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d052      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 8001588:	4a9d      	ldr	r2, [pc, #628]	; (8001800 <HAL_GPIO_Init+0x2cc>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d869      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 800158e:	4a9d      	ldr	r2, [pc, #628]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d04c      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 8001594:	4a9b      	ldr	r2, [pc, #620]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d863      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 800159a:	4a9b      	ldr	r2, [pc, #620]	; (8001808 <HAL_GPIO_Init+0x2d4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d046      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 80015a0:	4a99      	ldr	r2, [pc, #612]	; (8001808 <HAL_GPIO_Init+0x2d4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d85d      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 80015a6:	2b12      	cmp	r3, #18
 80015a8:	d82a      	bhi.n	8001600 <HAL_GPIO_Init+0xcc>
 80015aa:	2b12      	cmp	r3, #18
 80015ac:	d859      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 80015ae:	a201      	add	r2, pc, #4	; (adr r2, 80015b4 <HAL_GPIO_Init+0x80>)
 80015b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b4:	0800162f 	.word	0x0800162f
 80015b8:	08001609 	.word	0x08001609
 80015bc:	0800161b 	.word	0x0800161b
 80015c0:	0800165d 	.word	0x0800165d
 80015c4:	08001663 	.word	0x08001663
 80015c8:	08001663 	.word	0x08001663
 80015cc:	08001663 	.word	0x08001663
 80015d0:	08001663 	.word	0x08001663
 80015d4:	08001663 	.word	0x08001663
 80015d8:	08001663 	.word	0x08001663
 80015dc:	08001663 	.word	0x08001663
 80015e0:	08001663 	.word	0x08001663
 80015e4:	08001663 	.word	0x08001663
 80015e8:	08001663 	.word	0x08001663
 80015ec:	08001663 	.word	0x08001663
 80015f0:	08001663 	.word	0x08001663
 80015f4:	08001663 	.word	0x08001663
 80015f8:	08001611 	.word	0x08001611
 80015fc:	08001625 	.word	0x08001625
 8001600:	4a82      	ldr	r2, [pc, #520]	; (800180c <HAL_GPIO_Init+0x2d8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d013      	beq.n	800162e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001606:	e02c      	b.n	8001662 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e029      	b.n	8001664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	3304      	adds	r3, #4
 8001616:	623b      	str	r3, [r7, #32]
          break;
 8001618:	e024      	b.n	8001664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	3308      	adds	r3, #8
 8001620:	623b      	str	r3, [r7, #32]
          break;
 8001622:	e01f      	b.n	8001664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	330c      	adds	r3, #12
 800162a:	623b      	str	r3, [r7, #32]
          break;
 800162c:	e01a      	b.n	8001664 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d102      	bne.n	800163c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001636:	2304      	movs	r3, #4
 8001638:	623b      	str	r3, [r7, #32]
          break;
 800163a:	e013      	b.n	8001664 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001644:	2308      	movs	r3, #8
 8001646:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	611a      	str	r2, [r3, #16]
          break;
 800164e:	e009      	b.n	8001664 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001650:	2308      	movs	r3, #8
 8001652:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	615a      	str	r2, [r3, #20]
          break;
 800165a:	e003      	b.n	8001664 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
          break;
 8001660:	e000      	b.n	8001664 <HAL_GPIO_Init+0x130>
          break;
 8001662:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2bff      	cmp	r3, #255	; 0xff
 8001668:	d801      	bhi.n	800166e <HAL_GPIO_Init+0x13a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	e001      	b.n	8001672 <HAL_GPIO_Init+0x13e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3304      	adds	r3, #4
 8001672:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2bff      	cmp	r3, #255	; 0xff
 8001678:	d802      	bhi.n	8001680 <HAL_GPIO_Init+0x14c>
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	e002      	b.n	8001686 <HAL_GPIO_Init+0x152>
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	3b08      	subs	r3, #8
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	210f      	movs	r1, #15
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	401a      	ands	r2, r3
 8001698:	6a39      	ldr	r1, [r7, #32]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	431a      	orrs	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 8090 	beq.w	80017d4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016b4:	4b56      	ldr	r3, [pc, #344]	; (8001810 <HAL_GPIO_Init+0x2dc>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a55      	ldr	r2, [pc, #340]	; (8001810 <HAL_GPIO_Init+0x2dc>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b53      	ldr	r3, [pc, #332]	; (8001810 <HAL_GPIO_Init+0x2dc>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016cc:	4a51      	ldr	r2, [pc, #324]	; (8001814 <HAL_GPIO_Init+0x2e0>)
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	3302      	adds	r3, #2
 80016d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	220f      	movs	r2, #15
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a49      	ldr	r2, [pc, #292]	; (8001818 <HAL_GPIO_Init+0x2e4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d00d      	beq.n	8001714 <HAL_GPIO_Init+0x1e0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a48      	ldr	r2, [pc, #288]	; (800181c <HAL_GPIO_Init+0x2e8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d007      	beq.n	8001710 <HAL_GPIO_Init+0x1dc>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a47      	ldr	r2, [pc, #284]	; (8001820 <HAL_GPIO_Init+0x2ec>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d101      	bne.n	800170c <HAL_GPIO_Init+0x1d8>
 8001708:	2302      	movs	r3, #2
 800170a:	e004      	b.n	8001716 <HAL_GPIO_Init+0x1e2>
 800170c:	2303      	movs	r3, #3
 800170e:	e002      	b.n	8001716 <HAL_GPIO_Init+0x1e2>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_GPIO_Init+0x1e2>
 8001714:	2300      	movs	r3, #0
 8001716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001718:	f002 0203 	and.w	r2, r2, #3
 800171c:	0092      	lsls	r2, r2, #2
 800171e:	4093      	lsls	r3, r2
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001726:	493b      	ldr	r1, [pc, #236]	; (8001814 <HAL_GPIO_Init+0x2e0>)
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3302      	adds	r3, #2
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d006      	beq.n	800174e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001740:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4937      	ldr	r1, [pc, #220]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800174e:	4b35      	ldr	r3, [pc, #212]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	43db      	mvns	r3, r3
 8001756:	4933      	ldr	r1, [pc, #204]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 8001758:	4013      	ands	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001768:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	492d      	ldr	r1, [pc, #180]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	43db      	mvns	r3, r3
 800177e:	4929      	ldr	r1, [pc, #164]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 8001780:	4013      	ands	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001790:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	4923      	ldr	r1, [pc, #140]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	608b      	str	r3, [r1, #8]
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	491f      	ldr	r1, [pc, #124]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	4919      	ldr	r1, [pc, #100]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60cb      	str	r3, [r1, #12]
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4915      	ldr	r1, [pc, #84]	; (8001824 <HAL_GPIO_Init+0x2f0>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	3301      	adds	r3, #1
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f47f aeaf 	bne.w	8001548 <HAL_GPIO_Init+0x14>
  }
}
 80017ea:	bf00      	nop
 80017ec:	bf00      	nop
 80017ee:	372c      	adds	r7, #44	; 0x2c
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	10320000 	.word	0x10320000
 80017fc:	10310000 	.word	0x10310000
 8001800:	10220000 	.word	0x10220000
 8001804:	10210000 	.word	0x10210000
 8001808:	10120000 	.word	0x10120000
 800180c:	10110000 	.word	0x10110000
 8001810:	40021000 	.word	0x40021000
 8001814:	40010000 	.word	0x40010000
 8001818:	40010800 	.word	0x40010800
 800181c:	40010c00 	.word	0x40010c00
 8001820:	40011000 	.word	0x40011000
 8001824:	40010400 	.word	0x40010400

08001828 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	887b      	ldrh	r3, [r7, #2]
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d002      	beq.n	8001846 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
 8001844:	e001      	b.n	800184a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	807b      	strh	r3, [r7, #2]
 8001862:	4613      	mov	r3, r2
 8001864:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001866:	787b      	ldrb	r3, [r7, #1]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186c:	887a      	ldrh	r2, [r7, #2]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001872:	e003      	b.n	800187c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001874:	887b      	ldrh	r3, [r7, #2]
 8001876:	041a      	lsls	r2, r3, #16
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	611a      	str	r2, [r3, #16]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001886:	b480      	push	{r7}
 8001888:	b085      	sub	sp, #20
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001898:	887a      	ldrh	r2, [r7, #2]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4013      	ands	r3, r2
 800189e:	041a      	lsls	r2, r3, #16
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	400b      	ands	r3, r1
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	611a      	str	r2, [r3, #16]
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e26c      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8087 	beq.w	80019e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d8:	4b92      	ldr	r3, [pc, #584]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d00c      	beq.n	80018fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e4:	4b8f      	ldr	r3, [pc, #572]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d112      	bne.n	8001916 <HAL_RCC_OscConfig+0x5e>
 80018f0:	4b8c      	ldr	r3, [pc, #560]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fc:	d10b      	bne.n	8001916 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fe:	4b89      	ldr	r3, [pc, #548]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d06c      	beq.n	80019e4 <HAL_RCC_OscConfig+0x12c>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d168      	bne.n	80019e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e246      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x76>
 8001920:	4b80      	ldr	r3, [pc, #512]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a7f      	ldr	r2, [pc, #508]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	e02e      	b.n	800198c <HAL_RCC_OscConfig+0xd4>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x98>
 8001936:	4b7b      	ldr	r3, [pc, #492]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a7a      	ldr	r2, [pc, #488]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 800193c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b78      	ldr	r3, [pc, #480]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a77      	ldr	r2, [pc, #476]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001948:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e01d      	b.n	800198c <HAL_RCC_OscConfig+0xd4>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0xbc>
 800195a:	4b72      	ldr	r3, [pc, #456]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a71      	ldr	r2, [pc, #452]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a6e      	ldr	r2, [pc, #440]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 800196c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0xd4>
 8001974:	4b6b      	ldr	r3, [pc, #428]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a6a      	ldr	r2, [pc, #424]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 800197a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b68      	ldr	r3, [pc, #416]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a67      	ldr	r2, [pc, #412]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fcb6 	bl	8001304 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff fcb2 	bl	8001304 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1fa      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b5d      	ldr	r3, [pc, #372]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0xe4>
 80019ba:	e014      	b.n	80019e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff fca2 	bl	8001304 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff fc9e 	bl	8001304 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1e6      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d6:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x10c>
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d063      	beq.n	8001aba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019f2:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019fe:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d11c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x18c>
 8001a0a:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d116      	bne.n	8001a44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a16:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <HAL_RCC_OscConfig+0x176>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e1ba      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4939      	ldr	r1, [pc, #228]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a42:	e03a      	b.n	8001aba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d020      	beq.n	8001a8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a4c:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7ff fc57 	bl	8001304 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fc53 	bl	8001304 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e19b      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4927      	ldr	r1, [pc, #156]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]
 8001a8c:	e015      	b.n	8001aba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fc36 	bl	8001304 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fc32 	bl	8001304 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e17a      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d03a      	beq.n	8001b3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d019      	beq.n	8001b02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fc16 	bl	8001304 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff fc12 	bl	8001304 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e15a      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f000 fad8 	bl	80020b0 <RCC_Delay>
 8001b00:	e01c      	b.n	8001b3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7ff fbfc 	bl	8001304 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0e:	e00f      	b.n	8001b30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b10:	f7ff fbf8 	bl	8001304 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d908      	bls.n	8001b30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e140      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	42420000 	.word	0x42420000
 8001b2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b30:	4b9e      	ldr	r3, [pc, #632]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1e9      	bne.n	8001b10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80a6 	beq.w	8001c96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4e:	4b97      	ldr	r3, [pc, #604]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10d      	bne.n	8001b76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4b94      	ldr	r3, [pc, #592]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a93      	ldr	r2, [pc, #588]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	61d3      	str	r3, [r2, #28]
 8001b66:	4b91      	ldr	r3, [pc, #580]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b72:	2301      	movs	r3, #1
 8001b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	4b8e      	ldr	r3, [pc, #568]	; (8001db0 <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d118      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b82:	4b8b      	ldr	r3, [pc, #556]	; (8001db0 <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a8a      	ldr	r2, [pc, #552]	; (8001db0 <HAL_RCC_OscConfig+0x4f8>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fbb9 	bl	8001304 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b96:	f7ff fbb5 	bl	8001304 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b64      	cmp	r3, #100	; 0x64
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e0fd      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	4b81      	ldr	r3, [pc, #516]	; (8001db0 <HAL_RCC_OscConfig+0x4f8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d106      	bne.n	8001bca <HAL_RCC_OscConfig+0x312>
 8001bbc:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a7a      	ldr	r2, [pc, #488]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6213      	str	r3, [r2, #32]
 8001bc8:	e02d      	b.n	8001c26 <HAL_RCC_OscConfig+0x36e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x334>
 8001bd2:	4b76      	ldr	r3, [pc, #472]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a75      	ldr	r2, [pc, #468]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	6213      	str	r3, [r2, #32]
 8001bde:	4b73      	ldr	r3, [pc, #460]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a72      	ldr	r2, [pc, #456]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	6213      	str	r3, [r2, #32]
 8001bea:	e01c      	b.n	8001c26 <HAL_RCC_OscConfig+0x36e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d10c      	bne.n	8001c0e <HAL_RCC_OscConfig+0x356>
 8001bf4:	4b6d      	ldr	r3, [pc, #436]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4a6c      	ldr	r2, [pc, #432]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	6213      	str	r3, [r2, #32]
 8001c00:	4b6a      	ldr	r3, [pc, #424]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a69      	ldr	r2, [pc, #420]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6213      	str	r3, [r2, #32]
 8001c0c:	e00b      	b.n	8001c26 <HAL_RCC_OscConfig+0x36e>
 8001c0e:	4b67      	ldr	r3, [pc, #412]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	4a66      	ldr	r2, [pc, #408]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	6213      	str	r3, [r2, #32]
 8001c1a:	4b64      	ldr	r3, [pc, #400]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4a63      	ldr	r2, [pc, #396]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	f023 0304 	bic.w	r3, r3, #4
 8001c24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d015      	beq.n	8001c5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fb69 	bl	8001304 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff fb65 	bl	8001304 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0ab      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	4b57      	ldr	r3, [pc, #348]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0ee      	beq.n	8001c36 <HAL_RCC_OscConfig+0x37e>
 8001c58:	e014      	b.n	8001c84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff fb53 	bl	8001304 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f7ff fb4f 	bl	8001304 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e095      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c78:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1ee      	bne.n	8001c62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d105      	bne.n	8001c96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c8a:	4b48      	ldr	r3, [pc, #288]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4a47      	ldr	r2, [pc, #284]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8081 	beq.w	8001da2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca0:	4b42      	ldr	r3, [pc, #264]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d061      	beq.n	8001d70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d146      	bne.n	8001d42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb4:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <HAL_RCC_OscConfig+0x4fc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff fb23 	bl	8001304 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff fb1f 	bl	8001304 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e067      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce8:	d108      	bne.n	8001cfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cea:	4b30      	ldr	r3, [pc, #192]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	492d      	ldr	r1, [pc, #180]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a19      	ldr	r1, [r3, #32]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	4927      	ldr	r1, [pc, #156]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <HAL_RCC_OscConfig+0x4fc>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7ff faf3 	bl	8001304 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d22:	f7ff faef 	bl	8001304 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e037      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x46a>
 8001d40:	e02f      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d42:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <HAL_RCC_OscConfig+0x4fc>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fadc 	bl	8001304 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d50:	f7ff fad8 	bl	8001304 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e020      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x498>
 8001d6e:	e018      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e013      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d106      	bne.n	8001d9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40007000 	.word	0x40007000
 8001db4:	42420060 	.word	0x42420060

08001db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0d0      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d910      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 0207 	bic.w	r2, r3, #7
 8001de2:	4965      	ldr	r1, [pc, #404]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	494d      	ldr	r1, [pc, #308]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d040      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d115      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e073      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06b      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4936      	ldr	r1, [pc, #216]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea8:	f7ff fa2c 	bl	8001304 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7ff fa28 	bl	8001304 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e053      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d210      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
 8001eee:	4922      	ldr	r1, [pc, #136]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e032      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4916      	ldr	r1, [pc, #88]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f46:	f000 f821 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	490a      	ldr	r1, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x1c8>)
 8001f58:	5ccb      	ldrb	r3, [r1, r3]
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1cc>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x1d0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff f98a 	bl	8001280 <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	0800364c 	.word	0x0800364c
 8001f84:	20000040 	.word	0x20000040
 8001f88:	20000044 	.word	0x20000044

08001f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b490      	push	{r4, r7}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f92:	4b2a      	ldr	r3, [pc, #168]	; (800203c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f94:	1d3c      	adds	r4, r7, #4
 8001f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f9c:	f240 2301 	movw	r3, #513	; 0x201
 8001fa0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fb6:	4b22      	ldr	r3, [pc, #136]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d002      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x40>
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x46>
 8001fca:	e02d      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fce:	623b      	str	r3, [r7, #32]
      break;
 8001fd0:	e02d      	b.n	800202e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	0c9b      	lsrs	r3, r3, #18
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fde:	4413      	add	r3, r2
 8001fe0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fe4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	0c5b      	lsrs	r3, r3, #17
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ffe:	4413      	add	r3, r2
 8002000:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002004:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 800200a:	fb02 f203 	mul.w	r2, r2, r3
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
 8002016:	e004      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <HAL_RCC_GetSysClockFreq+0xbc>)
 800201c:	fb02 f303 	mul.w	r3, r2, r3
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	623b      	str	r3, [r7, #32]
      break;
 8002026:	e002      	b.n	800202e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 800202a:	623b      	str	r3, [r7, #32]
      break;
 800202c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202e:	6a3b      	ldr	r3, [r7, #32]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3728      	adds	r7, #40	; 0x28
 8002034:	46bd      	mov	sp, r7
 8002036:	bc90      	pop	{r4, r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	0800363c 	.word	0x0800363c
 8002040:	40021000 	.word	0x40021000
 8002044:	007a1200 	.word	0x007a1200
 8002048:	003d0900 	.word	0x003d0900

0800204c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002050:	4b02      	ldr	r3, [pc, #8]	; (800205c <HAL_RCC_GetHCLKFreq+0x10>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	20000040 	.word	0x20000040

08002060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002064:	f7ff fff2 	bl	800204c <HAL_RCC_GetHCLKFreq>
 8002068:	4602      	mov	r2, r0
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4903      	ldr	r1, [pc, #12]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002076:	5ccb      	ldrb	r3, [r1, r3]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	0800365c 	.word	0x0800365c

08002088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800208c:	f7ff ffde 	bl	800204c <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	0adb      	lsrs	r3, r3, #11
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4903      	ldr	r1, [pc, #12]	; (80020ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	0800365c 	.word	0x0800365c

080020b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <RCC_Delay+0x34>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <RCC_Delay+0x38>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0a5b      	lsrs	r3, r3, #9
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020cc:	bf00      	nop
  }
  while (Delay --);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1e5a      	subs	r2, r3, #1
 80020d2:	60fa      	str	r2, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f9      	bne.n	80020cc <RCC_Delay+0x1c>
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	20000040 	.word	0x20000040
 80020e8:	10624dd3 	.word	0x10624dd3

080020ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e041      	b.n	8002182 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe fd2a 	bl	8000b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3304      	adds	r3, #4
 8002128:	4619      	mov	r1, r3
 800212a:	4610      	mov	r0, r2
 800212c:	f000 fa6a 	bl	8002604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d001      	beq.n	80021a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e035      	b.n	8002210 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a16      	ldr	r2, [pc, #88]	; (800221c <HAL_TIM_Base_Start_IT+0x90>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d009      	beq.n	80021da <HAL_TIM_Base_Start_IT+0x4e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ce:	d004      	beq.n	80021da <HAL_TIM_Base_Start_IT+0x4e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a12      	ldr	r2, [pc, #72]	; (8002220 <HAL_TIM_Base_Start_IT+0x94>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d111      	bne.n	80021fe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b06      	cmp	r3, #6
 80021ea:	d010      	beq.n	800220e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021fc:	e007      	b.n	800220e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40012c00 	.word	0x40012c00
 8002220:	40000400 	.word	0x40000400

08002224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b02      	cmp	r3, #2
 8002238:	d122      	bne.n	8002280 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b02      	cmp	r3, #2
 8002246:	d11b      	bne.n	8002280 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0202 	mvn.w	r2, #2
 8002250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f9b1 	bl	80025ce <HAL_TIM_IC_CaptureCallback>
 800226c:	e005      	b.n	800227a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f9a4 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f9b3 	bl	80025e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b04      	cmp	r3, #4
 800228c:	d122      	bne.n	80022d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d11b      	bne.n	80022d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0204 	mvn.w	r2, #4
 80022a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2202      	movs	r2, #2
 80022aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f987 	bl	80025ce <HAL_TIM_IC_CaptureCallback>
 80022c0:	e005      	b.n	80022ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f97a 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f989 	bl	80025e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d122      	bne.n	8002328 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d11b      	bne.n	8002328 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0208 	mvn.w	r2, #8
 80022f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2204      	movs	r2, #4
 80022fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f95d 	bl	80025ce <HAL_TIM_IC_CaptureCallback>
 8002314:	e005      	b.n	8002322 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f950 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f95f 	bl	80025e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b10      	cmp	r3, #16
 8002334:	d122      	bne.n	800237c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b10      	cmp	r3, #16
 8002342:	d11b      	bne.n	800237c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0210 	mvn.w	r2, #16
 800234c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2208      	movs	r2, #8
 8002352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f933 	bl	80025ce <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f926 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f935 	bl	80025e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10e      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0201 	mvn.w	r2, #1
 80023a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fd0e 	bl	8000dc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b80      	cmp	r3, #128	; 0x80
 80023b4:	d10e      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c0:	2b80      	cmp	r3, #128	; 0x80
 80023c2:	d107      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fa67 	bl	80028a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	2b40      	cmp	r3, #64	; 0x40
 80023e0:	d10e      	bne.n	8002400 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ec:	2b40      	cmp	r3, #64	; 0x40
 80023ee:	d107      	bne.n	8002400 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f8f9 	bl	80025f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b20      	cmp	r3, #32
 800240c:	d10e      	bne.n	800242c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b20      	cmp	r3, #32
 800241a:	d107      	bne.n	800242c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0220 	mvn.w	r2, #32
 8002424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fa32 	bl	8002890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_TIM_ConfigClockSource+0x18>
 8002448:	2302      	movs	r3, #2
 800244a:	e0b3      	b.n	80025b4 <HAL_TIM_ConfigClockSource+0x180>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800246a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002472:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002484:	d03e      	beq.n	8002504 <HAL_TIM_ConfigClockSource+0xd0>
 8002486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800248a:	f200 8087 	bhi.w	800259c <HAL_TIM_ConfigClockSource+0x168>
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002492:	f000 8085 	beq.w	80025a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249a:	d87f      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x168>
 800249c:	2b70      	cmp	r3, #112	; 0x70
 800249e:	d01a      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0xa2>
 80024a0:	2b70      	cmp	r3, #112	; 0x70
 80024a2:	d87b      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x168>
 80024a4:	2b60      	cmp	r3, #96	; 0x60
 80024a6:	d050      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x116>
 80024a8:	2b60      	cmp	r3, #96	; 0x60
 80024aa:	d877      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x168>
 80024ac:	2b50      	cmp	r3, #80	; 0x50
 80024ae:	d03c      	beq.n	800252a <HAL_TIM_ConfigClockSource+0xf6>
 80024b0:	2b50      	cmp	r3, #80	; 0x50
 80024b2:	d873      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x168>
 80024b4:	2b40      	cmp	r3, #64	; 0x40
 80024b6:	d058      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x136>
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d86f      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x168>
 80024bc:	2b30      	cmp	r3, #48	; 0x30
 80024be:	d064      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x156>
 80024c0:	2b30      	cmp	r3, #48	; 0x30
 80024c2:	d86b      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x168>
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d060      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x156>
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d867      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x168>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05c      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x156>
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d05a      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80024d4:	e062      	b.n	800259c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6899      	ldr	r1, [r3, #8]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f000 f95c 	bl	80027a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	609a      	str	r2, [r3, #8]
      break;
 8002502:	e04e      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f000 f945 	bl	80027a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002526:	609a      	str	r2, [r3, #8]
      break;
 8002528:	e03b      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	461a      	mov	r2, r3
 8002538:	f000 f8bc 	bl	80026b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2150      	movs	r1, #80	; 0x50
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f913 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002548:	e02b      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	461a      	mov	r2, r3
 8002558:	f000 f8da 	bl	8002710 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2160      	movs	r1, #96	; 0x60
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f903 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002568:	e01b      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	461a      	mov	r2, r3
 8002578:	f000 f89c 	bl	80026b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f8f3 	bl	800276e <TIM_ITRx_SetConfig>
      break;
 8002588:	e00b      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f000 f8ea 	bl	800276e <TIM_ITRx_SetConfig>
        break;
 800259a:	e002      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800259c:	bf00      	nop
 800259e:	e000      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a25      	ldr	r2, [pc, #148]	; (80026ac <TIM_Base_SetConfig+0xa8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d007      	beq.n	800262c <TIM_Base_SetConfig+0x28>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002622:	d003      	beq.n	800262c <TIM_Base_SetConfig+0x28>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a22      	ldr	r2, [pc, #136]	; (80026b0 <TIM_Base_SetConfig+0xac>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d108      	bne.n	800263e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a1a      	ldr	r2, [pc, #104]	; (80026ac <TIM_Base_SetConfig+0xa8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d007      	beq.n	8002656 <TIM_Base_SetConfig+0x52>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264c:	d003      	beq.n	8002656 <TIM_Base_SetConfig+0x52>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a17      	ldr	r2, [pc, #92]	; (80026b0 <TIM_Base_SetConfig+0xac>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d108      	bne.n	8002668 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a07      	ldr	r2, [pc, #28]	; (80026ac <TIM_Base_SetConfig+0xa8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d103      	bne.n	800269c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	615a      	str	r2, [r3, #20]
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40012c00 	.word	0x40012c00
 80026b0:	40000400 	.word	0x40000400

080026b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f023 0201 	bic.w	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f023 030a 	bic.w	r3, r3, #10
 80026f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	621a      	str	r2, [r3, #32]
}
 8002706:	bf00      	nop
 8002708:	371c      	adds	r7, #28
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f023 0210 	bic.w	r2, r3, #16
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800273a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	031b      	lsls	r3, r3, #12
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800274c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	621a      	str	r2, [r3, #32]
}
 8002764:	bf00      	nop
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	f043 0307 	orr.w	r3, r3, #7
 8002790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	609a      	str	r2, [r3, #8]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b087      	sub	sp, #28
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	021a      	lsls	r2, r3, #8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	609a      	str	r2, [r3, #8]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e041      	b.n	800287c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a14      	ldr	r2, [pc, #80]	; (8002888 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d009      	beq.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002844:	d004      	beq.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a10      	ldr	r2, [pc, #64]	; (800288c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d10c      	bne.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002856:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	4313      	orrs	r3, r2
 8002860:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40012c00 	.word	0x40012c00
 800288c:	40000400 	.word	0x40000400

08002890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e03f      	b.n	8002946 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe f96a 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2224      	movs	r2, #36	; 0x24
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f905 	bl	8002b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800290c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800291c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800292c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b08a      	sub	sp, #40	; 0x28
 8002952:	af02      	add	r7, sp, #8
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b20      	cmp	r3, #32
 800296c:	d17c      	bne.n	8002a68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_UART_Transmit+0x2c>
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e075      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_UART_Transmit+0x3e>
 8002988:	2302      	movs	r3, #2
 800298a:	e06e      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2221      	movs	r2, #33	; 0x21
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029a2:	f7fe fcaf 	bl	8001304 <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	88fa      	ldrh	r2, [r7, #6]
 80029ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	88fa      	ldrh	r2, [r7, #6]
 80029b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029bc:	d108      	bne.n	80029d0 <HAL_UART_Transmit+0x82>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d104      	bne.n	80029d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e003      	b.n	80029d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029e0:	e02a      	b.n	8002a38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2200      	movs	r2, #0
 80029ea:	2180      	movs	r1, #128	; 0x80
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 f840 	bl	8002a72 <UART_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e036      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10b      	bne.n	8002a1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	3302      	adds	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	e007      	b.n	8002a2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	3301      	adds	r3, #1
 8002a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1cf      	bne.n	80029e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2140      	movs	r1, #64	; 0x40
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f810 	bl	8002a72 <UART_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e006      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e000      	b.n	8002a6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
  }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a82:	e02c      	b.n	8002ade <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8a:	d028      	beq.n	8002ade <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a92:	f7fe fc37 	bl	8001304 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d21d      	bcs.n	8002ade <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ab0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0201 	bic.w	r2, r2, #1
 8002ac0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e00f      	b.n	8002afe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	bf0c      	ite	eq
 8002aee:	2301      	moveq	r3, #1
 8002af0:	2300      	movne	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d0c3      	beq.n	8002a84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b42:	f023 030c 	bic.w	r3, r3, #12
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a2c      	ldr	r2, [pc, #176]	; (8002c1c <UART_SetConfig+0x114>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d103      	bne.n	8002b78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b70:	f7ff fa8a 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	e002      	b.n	8002b7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b78:	f7ff fa72 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 8002b7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	009a      	lsls	r2, r3, #2
 8002b88:	441a      	add	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b94:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <UART_SetConfig+0x118>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	0119      	lsls	r1, r3, #4
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009a      	lsls	r2, r3, #2
 8002ba8:	441a      	add	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <UART_SetConfig+0x118>)
 8002bb6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2064      	movs	r0, #100	; 0x64
 8002bbe:	fb00 f303 	mul.w	r3, r0, r3
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	3332      	adds	r3, #50	; 0x32
 8002bc8:	4a15      	ldr	r2, [pc, #84]	; (8002c20 <UART_SetConfig+0x118>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd4:	4419      	add	r1, r3
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	009a      	lsls	r2, r3, #2
 8002be0:	441a      	add	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <UART_SetConfig+0x118>)
 8002bee:	fba3 0302 	umull	r0, r3, r3, r2
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	2064      	movs	r0, #100	; 0x64
 8002bf6:	fb00 f303 	mul.w	r3, r0, r3
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	3332      	adds	r3, #50	; 0x32
 8002c00:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <UART_SetConfig+0x118>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	f003 020f 	and.w	r2, r3, #15
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	440a      	add	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	51eb851f 	.word	0x51eb851f

08002c24 <__errno>:
 8002c24:	4b01      	ldr	r3, [pc, #4]	; (8002c2c <__errno+0x8>)
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	2000004c 	.word	0x2000004c

08002c30 <__libc_init_array>:
 8002c30:	b570      	push	{r4, r5, r6, lr}
 8002c32:	2600      	movs	r6, #0
 8002c34:	4d0c      	ldr	r5, [pc, #48]	; (8002c68 <__libc_init_array+0x38>)
 8002c36:	4c0d      	ldr	r4, [pc, #52]	; (8002c6c <__libc_init_array+0x3c>)
 8002c38:	1b64      	subs	r4, r4, r5
 8002c3a:	10a4      	asrs	r4, r4, #2
 8002c3c:	42a6      	cmp	r6, r4
 8002c3e:	d109      	bne.n	8002c54 <__libc_init_array+0x24>
 8002c40:	f000 fce4 	bl	800360c <_init>
 8002c44:	2600      	movs	r6, #0
 8002c46:	4d0a      	ldr	r5, [pc, #40]	; (8002c70 <__libc_init_array+0x40>)
 8002c48:	4c0a      	ldr	r4, [pc, #40]	; (8002c74 <__libc_init_array+0x44>)
 8002c4a:	1b64      	subs	r4, r4, r5
 8002c4c:	10a4      	asrs	r4, r4, #2
 8002c4e:	42a6      	cmp	r6, r4
 8002c50:	d105      	bne.n	8002c5e <__libc_init_array+0x2e>
 8002c52:	bd70      	pop	{r4, r5, r6, pc}
 8002c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c58:	4798      	blx	r3
 8002c5a:	3601      	adds	r6, #1
 8002c5c:	e7ee      	b.n	8002c3c <__libc_init_array+0xc>
 8002c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c62:	4798      	blx	r3
 8002c64:	3601      	adds	r6, #1
 8002c66:	e7f2      	b.n	8002c4e <__libc_init_array+0x1e>
 8002c68:	080036c8 	.word	0x080036c8
 8002c6c:	080036c8 	.word	0x080036c8
 8002c70:	080036c8 	.word	0x080036c8
 8002c74:	080036cc 	.word	0x080036cc

08002c78 <memset>:
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4402      	add	r2, r0
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d100      	bne.n	8002c82 <memset+0xa>
 8002c80:	4770      	bx	lr
 8002c82:	f803 1b01 	strb.w	r1, [r3], #1
 8002c86:	e7f9      	b.n	8002c7c <memset+0x4>

08002c88 <_puts_r>:
 8002c88:	b570      	push	{r4, r5, r6, lr}
 8002c8a:	460e      	mov	r6, r1
 8002c8c:	4605      	mov	r5, r0
 8002c8e:	b118      	cbz	r0, 8002c98 <_puts_r+0x10>
 8002c90:	6983      	ldr	r3, [r0, #24]
 8002c92:	b90b      	cbnz	r3, 8002c98 <_puts_r+0x10>
 8002c94:	f000 fa48 	bl	8003128 <__sinit>
 8002c98:	69ab      	ldr	r3, [r5, #24]
 8002c9a:	68ac      	ldr	r4, [r5, #8]
 8002c9c:	b913      	cbnz	r3, 8002ca4 <_puts_r+0x1c>
 8002c9e:	4628      	mov	r0, r5
 8002ca0:	f000 fa42 	bl	8003128 <__sinit>
 8002ca4:	4b2c      	ldr	r3, [pc, #176]	; (8002d58 <_puts_r+0xd0>)
 8002ca6:	429c      	cmp	r4, r3
 8002ca8:	d120      	bne.n	8002cec <_puts_r+0x64>
 8002caa:	686c      	ldr	r4, [r5, #4]
 8002cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cae:	07db      	lsls	r3, r3, #31
 8002cb0:	d405      	bmi.n	8002cbe <_puts_r+0x36>
 8002cb2:	89a3      	ldrh	r3, [r4, #12]
 8002cb4:	0598      	lsls	r0, r3, #22
 8002cb6:	d402      	bmi.n	8002cbe <_puts_r+0x36>
 8002cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cba:	f000 fad3 	bl	8003264 <__retarget_lock_acquire_recursive>
 8002cbe:	89a3      	ldrh	r3, [r4, #12]
 8002cc0:	0719      	lsls	r1, r3, #28
 8002cc2:	d51d      	bpl.n	8002d00 <_puts_r+0x78>
 8002cc4:	6923      	ldr	r3, [r4, #16]
 8002cc6:	b1db      	cbz	r3, 8002d00 <_puts_r+0x78>
 8002cc8:	3e01      	subs	r6, #1
 8002cca:	68a3      	ldr	r3, [r4, #8]
 8002ccc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	60a3      	str	r3, [r4, #8]
 8002cd4:	bb39      	cbnz	r1, 8002d26 <_puts_r+0x9e>
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	da38      	bge.n	8002d4c <_puts_r+0xc4>
 8002cda:	4622      	mov	r2, r4
 8002cdc:	210a      	movs	r1, #10
 8002cde:	4628      	mov	r0, r5
 8002ce0:	f000 f848 	bl	8002d74 <__swbuf_r>
 8002ce4:	3001      	adds	r0, #1
 8002ce6:	d011      	beq.n	8002d0c <_puts_r+0x84>
 8002ce8:	250a      	movs	r5, #10
 8002cea:	e011      	b.n	8002d10 <_puts_r+0x88>
 8002cec:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <_puts_r+0xd4>)
 8002cee:	429c      	cmp	r4, r3
 8002cf0:	d101      	bne.n	8002cf6 <_puts_r+0x6e>
 8002cf2:	68ac      	ldr	r4, [r5, #8]
 8002cf4:	e7da      	b.n	8002cac <_puts_r+0x24>
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <_puts_r+0xd8>)
 8002cf8:	429c      	cmp	r4, r3
 8002cfa:	bf08      	it	eq
 8002cfc:	68ec      	ldreq	r4, [r5, #12]
 8002cfe:	e7d5      	b.n	8002cac <_puts_r+0x24>
 8002d00:	4621      	mov	r1, r4
 8002d02:	4628      	mov	r0, r5
 8002d04:	f000 f888 	bl	8002e18 <__swsetup_r>
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	d0dd      	beq.n	8002cc8 <_puts_r+0x40>
 8002d0c:	f04f 35ff 	mov.w	r5, #4294967295
 8002d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d12:	07da      	lsls	r2, r3, #31
 8002d14:	d405      	bmi.n	8002d22 <_puts_r+0x9a>
 8002d16:	89a3      	ldrh	r3, [r4, #12]
 8002d18:	059b      	lsls	r3, r3, #22
 8002d1a:	d402      	bmi.n	8002d22 <_puts_r+0x9a>
 8002d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d1e:	f000 faa2 	bl	8003266 <__retarget_lock_release_recursive>
 8002d22:	4628      	mov	r0, r5
 8002d24:	bd70      	pop	{r4, r5, r6, pc}
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	da04      	bge.n	8002d34 <_puts_r+0xac>
 8002d2a:	69a2      	ldr	r2, [r4, #24]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	dc06      	bgt.n	8002d3e <_puts_r+0xb6>
 8002d30:	290a      	cmp	r1, #10
 8002d32:	d004      	beq.n	8002d3e <_puts_r+0xb6>
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	6022      	str	r2, [r4, #0]
 8002d3a:	7019      	strb	r1, [r3, #0]
 8002d3c:	e7c5      	b.n	8002cca <_puts_r+0x42>
 8002d3e:	4622      	mov	r2, r4
 8002d40:	4628      	mov	r0, r5
 8002d42:	f000 f817 	bl	8002d74 <__swbuf_r>
 8002d46:	3001      	adds	r0, #1
 8002d48:	d1bf      	bne.n	8002cca <_puts_r+0x42>
 8002d4a:	e7df      	b.n	8002d0c <_puts_r+0x84>
 8002d4c:	250a      	movs	r5, #10
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	6022      	str	r2, [r4, #0]
 8002d54:	701d      	strb	r5, [r3, #0]
 8002d56:	e7db      	b.n	8002d10 <_puts_r+0x88>
 8002d58:	08003688 	.word	0x08003688
 8002d5c:	080036a8 	.word	0x080036a8
 8002d60:	08003668 	.word	0x08003668

08002d64 <puts>:
 8002d64:	4b02      	ldr	r3, [pc, #8]	; (8002d70 <puts+0xc>)
 8002d66:	4601      	mov	r1, r0
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	f7ff bf8d 	b.w	8002c88 <_puts_r>
 8002d6e:	bf00      	nop
 8002d70:	2000004c 	.word	0x2000004c

08002d74 <__swbuf_r>:
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d76:	460e      	mov	r6, r1
 8002d78:	4614      	mov	r4, r2
 8002d7a:	4605      	mov	r5, r0
 8002d7c:	b118      	cbz	r0, 8002d86 <__swbuf_r+0x12>
 8002d7e:	6983      	ldr	r3, [r0, #24]
 8002d80:	b90b      	cbnz	r3, 8002d86 <__swbuf_r+0x12>
 8002d82:	f000 f9d1 	bl	8003128 <__sinit>
 8002d86:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <__swbuf_r+0x98>)
 8002d88:	429c      	cmp	r4, r3
 8002d8a:	d12b      	bne.n	8002de4 <__swbuf_r+0x70>
 8002d8c:	686c      	ldr	r4, [r5, #4]
 8002d8e:	69a3      	ldr	r3, [r4, #24]
 8002d90:	60a3      	str	r3, [r4, #8]
 8002d92:	89a3      	ldrh	r3, [r4, #12]
 8002d94:	071a      	lsls	r2, r3, #28
 8002d96:	d52f      	bpl.n	8002df8 <__swbuf_r+0x84>
 8002d98:	6923      	ldr	r3, [r4, #16]
 8002d9a:	b36b      	cbz	r3, 8002df8 <__swbuf_r+0x84>
 8002d9c:	6923      	ldr	r3, [r4, #16]
 8002d9e:	6820      	ldr	r0, [r4, #0]
 8002da0:	b2f6      	uxtb	r6, r6
 8002da2:	1ac0      	subs	r0, r0, r3
 8002da4:	6963      	ldr	r3, [r4, #20]
 8002da6:	4637      	mov	r7, r6
 8002da8:	4283      	cmp	r3, r0
 8002daa:	dc04      	bgt.n	8002db6 <__swbuf_r+0x42>
 8002dac:	4621      	mov	r1, r4
 8002dae:	4628      	mov	r0, r5
 8002db0:	f000 f926 	bl	8003000 <_fflush_r>
 8002db4:	bb30      	cbnz	r0, 8002e04 <__swbuf_r+0x90>
 8002db6:	68a3      	ldr	r3, [r4, #8]
 8002db8:	3001      	adds	r0, #1
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	60a3      	str	r3, [r4, #8]
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	6022      	str	r2, [r4, #0]
 8002dc4:	701e      	strb	r6, [r3, #0]
 8002dc6:	6963      	ldr	r3, [r4, #20]
 8002dc8:	4283      	cmp	r3, r0
 8002dca:	d004      	beq.n	8002dd6 <__swbuf_r+0x62>
 8002dcc:	89a3      	ldrh	r3, [r4, #12]
 8002dce:	07db      	lsls	r3, r3, #31
 8002dd0:	d506      	bpl.n	8002de0 <__swbuf_r+0x6c>
 8002dd2:	2e0a      	cmp	r6, #10
 8002dd4:	d104      	bne.n	8002de0 <__swbuf_r+0x6c>
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	4628      	mov	r0, r5
 8002dda:	f000 f911 	bl	8003000 <_fflush_r>
 8002dde:	b988      	cbnz	r0, 8002e04 <__swbuf_r+0x90>
 8002de0:	4638      	mov	r0, r7
 8002de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <__swbuf_r+0x9c>)
 8002de6:	429c      	cmp	r4, r3
 8002de8:	d101      	bne.n	8002dee <__swbuf_r+0x7a>
 8002dea:	68ac      	ldr	r4, [r5, #8]
 8002dec:	e7cf      	b.n	8002d8e <__swbuf_r+0x1a>
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <__swbuf_r+0xa0>)
 8002df0:	429c      	cmp	r4, r3
 8002df2:	bf08      	it	eq
 8002df4:	68ec      	ldreq	r4, [r5, #12]
 8002df6:	e7ca      	b.n	8002d8e <__swbuf_r+0x1a>
 8002df8:	4621      	mov	r1, r4
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	f000 f80c 	bl	8002e18 <__swsetup_r>
 8002e00:	2800      	cmp	r0, #0
 8002e02:	d0cb      	beq.n	8002d9c <__swbuf_r+0x28>
 8002e04:	f04f 37ff 	mov.w	r7, #4294967295
 8002e08:	e7ea      	b.n	8002de0 <__swbuf_r+0x6c>
 8002e0a:	bf00      	nop
 8002e0c:	08003688 	.word	0x08003688
 8002e10:	080036a8 	.word	0x080036a8
 8002e14:	08003668 	.word	0x08003668

08002e18 <__swsetup_r>:
 8002e18:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <__swsetup_r+0xcc>)
 8002e1a:	b570      	push	{r4, r5, r6, lr}
 8002e1c:	681d      	ldr	r5, [r3, #0]
 8002e1e:	4606      	mov	r6, r0
 8002e20:	460c      	mov	r4, r1
 8002e22:	b125      	cbz	r5, 8002e2e <__swsetup_r+0x16>
 8002e24:	69ab      	ldr	r3, [r5, #24]
 8002e26:	b913      	cbnz	r3, 8002e2e <__swsetup_r+0x16>
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f000 f97d 	bl	8003128 <__sinit>
 8002e2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ee8 <__swsetup_r+0xd0>)
 8002e30:	429c      	cmp	r4, r3
 8002e32:	d10f      	bne.n	8002e54 <__swsetup_r+0x3c>
 8002e34:	686c      	ldr	r4, [r5, #4]
 8002e36:	89a3      	ldrh	r3, [r4, #12]
 8002e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e3c:	0719      	lsls	r1, r3, #28
 8002e3e:	d42c      	bmi.n	8002e9a <__swsetup_r+0x82>
 8002e40:	06dd      	lsls	r5, r3, #27
 8002e42:	d411      	bmi.n	8002e68 <__swsetup_r+0x50>
 8002e44:	2309      	movs	r3, #9
 8002e46:	6033      	str	r3, [r6, #0]
 8002e48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	81a3      	strh	r3, [r4, #12]
 8002e52:	e03e      	b.n	8002ed2 <__swsetup_r+0xba>
 8002e54:	4b25      	ldr	r3, [pc, #148]	; (8002eec <__swsetup_r+0xd4>)
 8002e56:	429c      	cmp	r4, r3
 8002e58:	d101      	bne.n	8002e5e <__swsetup_r+0x46>
 8002e5a:	68ac      	ldr	r4, [r5, #8]
 8002e5c:	e7eb      	b.n	8002e36 <__swsetup_r+0x1e>
 8002e5e:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <__swsetup_r+0xd8>)
 8002e60:	429c      	cmp	r4, r3
 8002e62:	bf08      	it	eq
 8002e64:	68ec      	ldreq	r4, [r5, #12]
 8002e66:	e7e6      	b.n	8002e36 <__swsetup_r+0x1e>
 8002e68:	0758      	lsls	r0, r3, #29
 8002e6a:	d512      	bpl.n	8002e92 <__swsetup_r+0x7a>
 8002e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e6e:	b141      	cbz	r1, 8002e82 <__swsetup_r+0x6a>
 8002e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e74:	4299      	cmp	r1, r3
 8002e76:	d002      	beq.n	8002e7e <__swsetup_r+0x66>
 8002e78:	4630      	mov	r0, r6
 8002e7a:	f000 fa59 	bl	8003330 <_free_r>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	6363      	str	r3, [r4, #52]	; 0x34
 8002e82:	89a3      	ldrh	r3, [r4, #12]
 8002e84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e88:	81a3      	strh	r3, [r4, #12]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	6063      	str	r3, [r4, #4]
 8002e8e:	6923      	ldr	r3, [r4, #16]
 8002e90:	6023      	str	r3, [r4, #0]
 8002e92:	89a3      	ldrh	r3, [r4, #12]
 8002e94:	f043 0308 	orr.w	r3, r3, #8
 8002e98:	81a3      	strh	r3, [r4, #12]
 8002e9a:	6923      	ldr	r3, [r4, #16]
 8002e9c:	b94b      	cbnz	r3, 8002eb2 <__swsetup_r+0x9a>
 8002e9e:	89a3      	ldrh	r3, [r4, #12]
 8002ea0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea8:	d003      	beq.n	8002eb2 <__swsetup_r+0x9a>
 8002eaa:	4621      	mov	r1, r4
 8002eac:	4630      	mov	r0, r6
 8002eae:	f000 f9ff 	bl	80032b0 <__smakebuf_r>
 8002eb2:	89a0      	ldrh	r0, [r4, #12]
 8002eb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002eb8:	f010 0301 	ands.w	r3, r0, #1
 8002ebc:	d00a      	beq.n	8002ed4 <__swsetup_r+0xbc>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60a3      	str	r3, [r4, #8]
 8002ec2:	6963      	ldr	r3, [r4, #20]
 8002ec4:	425b      	negs	r3, r3
 8002ec6:	61a3      	str	r3, [r4, #24]
 8002ec8:	6923      	ldr	r3, [r4, #16]
 8002eca:	b943      	cbnz	r3, 8002ede <__swsetup_r+0xc6>
 8002ecc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ed0:	d1ba      	bne.n	8002e48 <__swsetup_r+0x30>
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}
 8002ed4:	0781      	lsls	r1, r0, #30
 8002ed6:	bf58      	it	pl
 8002ed8:	6963      	ldrpl	r3, [r4, #20]
 8002eda:	60a3      	str	r3, [r4, #8]
 8002edc:	e7f4      	b.n	8002ec8 <__swsetup_r+0xb0>
 8002ede:	2000      	movs	r0, #0
 8002ee0:	e7f7      	b.n	8002ed2 <__swsetup_r+0xba>
 8002ee2:	bf00      	nop
 8002ee4:	2000004c 	.word	0x2000004c
 8002ee8:	08003688 	.word	0x08003688
 8002eec:	080036a8 	.word	0x080036a8
 8002ef0:	08003668 	.word	0x08003668

08002ef4 <__sflush_r>:
 8002ef4:	898a      	ldrh	r2, [r1, #12]
 8002ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002efa:	4605      	mov	r5, r0
 8002efc:	0710      	lsls	r0, r2, #28
 8002efe:	460c      	mov	r4, r1
 8002f00:	d458      	bmi.n	8002fb4 <__sflush_r+0xc0>
 8002f02:	684b      	ldr	r3, [r1, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	dc05      	bgt.n	8002f14 <__sflush_r+0x20>
 8002f08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	dc02      	bgt.n	8002f14 <__sflush_r+0x20>
 8002f0e:	2000      	movs	r0, #0
 8002f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f16:	2e00      	cmp	r6, #0
 8002f18:	d0f9      	beq.n	8002f0e <__sflush_r+0x1a>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f20:	682f      	ldr	r7, [r5, #0]
 8002f22:	602b      	str	r3, [r5, #0]
 8002f24:	d032      	beq.n	8002f8c <__sflush_r+0x98>
 8002f26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f28:	89a3      	ldrh	r3, [r4, #12]
 8002f2a:	075a      	lsls	r2, r3, #29
 8002f2c:	d505      	bpl.n	8002f3a <__sflush_r+0x46>
 8002f2e:	6863      	ldr	r3, [r4, #4]
 8002f30:	1ac0      	subs	r0, r0, r3
 8002f32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f34:	b10b      	cbz	r3, 8002f3a <__sflush_r+0x46>
 8002f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f38:	1ac0      	subs	r0, r0, r3
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f40:	4628      	mov	r0, r5
 8002f42:	6a21      	ldr	r1, [r4, #32]
 8002f44:	47b0      	blx	r6
 8002f46:	1c43      	adds	r3, r0, #1
 8002f48:	89a3      	ldrh	r3, [r4, #12]
 8002f4a:	d106      	bne.n	8002f5a <__sflush_r+0x66>
 8002f4c:	6829      	ldr	r1, [r5, #0]
 8002f4e:	291d      	cmp	r1, #29
 8002f50:	d82c      	bhi.n	8002fac <__sflush_r+0xb8>
 8002f52:	4a2a      	ldr	r2, [pc, #168]	; (8002ffc <__sflush_r+0x108>)
 8002f54:	40ca      	lsrs	r2, r1
 8002f56:	07d6      	lsls	r6, r2, #31
 8002f58:	d528      	bpl.n	8002fac <__sflush_r+0xb8>
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	6062      	str	r2, [r4, #4]
 8002f5e:	6922      	ldr	r2, [r4, #16]
 8002f60:	04d9      	lsls	r1, r3, #19
 8002f62:	6022      	str	r2, [r4, #0]
 8002f64:	d504      	bpl.n	8002f70 <__sflush_r+0x7c>
 8002f66:	1c42      	adds	r2, r0, #1
 8002f68:	d101      	bne.n	8002f6e <__sflush_r+0x7a>
 8002f6a:	682b      	ldr	r3, [r5, #0]
 8002f6c:	b903      	cbnz	r3, 8002f70 <__sflush_r+0x7c>
 8002f6e:	6560      	str	r0, [r4, #84]	; 0x54
 8002f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f72:	602f      	str	r7, [r5, #0]
 8002f74:	2900      	cmp	r1, #0
 8002f76:	d0ca      	beq.n	8002f0e <__sflush_r+0x1a>
 8002f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f7c:	4299      	cmp	r1, r3
 8002f7e:	d002      	beq.n	8002f86 <__sflush_r+0x92>
 8002f80:	4628      	mov	r0, r5
 8002f82:	f000 f9d5 	bl	8003330 <_free_r>
 8002f86:	2000      	movs	r0, #0
 8002f88:	6360      	str	r0, [r4, #52]	; 0x34
 8002f8a:	e7c1      	b.n	8002f10 <__sflush_r+0x1c>
 8002f8c:	6a21      	ldr	r1, [r4, #32]
 8002f8e:	2301      	movs	r3, #1
 8002f90:	4628      	mov	r0, r5
 8002f92:	47b0      	blx	r6
 8002f94:	1c41      	adds	r1, r0, #1
 8002f96:	d1c7      	bne.n	8002f28 <__sflush_r+0x34>
 8002f98:	682b      	ldr	r3, [r5, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0c4      	beq.n	8002f28 <__sflush_r+0x34>
 8002f9e:	2b1d      	cmp	r3, #29
 8002fa0:	d001      	beq.n	8002fa6 <__sflush_r+0xb2>
 8002fa2:	2b16      	cmp	r3, #22
 8002fa4:	d101      	bne.n	8002faa <__sflush_r+0xb6>
 8002fa6:	602f      	str	r7, [r5, #0]
 8002fa8:	e7b1      	b.n	8002f0e <__sflush_r+0x1a>
 8002faa:	89a3      	ldrh	r3, [r4, #12]
 8002fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb0:	81a3      	strh	r3, [r4, #12]
 8002fb2:	e7ad      	b.n	8002f10 <__sflush_r+0x1c>
 8002fb4:	690f      	ldr	r7, [r1, #16]
 8002fb6:	2f00      	cmp	r7, #0
 8002fb8:	d0a9      	beq.n	8002f0e <__sflush_r+0x1a>
 8002fba:	0793      	lsls	r3, r2, #30
 8002fbc:	bf18      	it	ne
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	680e      	ldr	r6, [r1, #0]
 8002fc2:	bf08      	it	eq
 8002fc4:	694b      	ldreq	r3, [r1, #20]
 8002fc6:	eba6 0807 	sub.w	r8, r6, r7
 8002fca:	600f      	str	r7, [r1, #0]
 8002fcc:	608b      	str	r3, [r1, #8]
 8002fce:	f1b8 0f00 	cmp.w	r8, #0
 8002fd2:	dd9c      	ble.n	8002f0e <__sflush_r+0x1a>
 8002fd4:	4643      	mov	r3, r8
 8002fd6:	463a      	mov	r2, r7
 8002fd8:	4628      	mov	r0, r5
 8002fda:	6a21      	ldr	r1, [r4, #32]
 8002fdc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fde:	47b0      	blx	r6
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	dc06      	bgt.n	8002ff2 <__sflush_r+0xfe>
 8002fe4:	89a3      	ldrh	r3, [r4, #12]
 8002fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8002fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fee:	81a3      	strh	r3, [r4, #12]
 8002ff0:	e78e      	b.n	8002f10 <__sflush_r+0x1c>
 8002ff2:	4407      	add	r7, r0
 8002ff4:	eba8 0800 	sub.w	r8, r8, r0
 8002ff8:	e7e9      	b.n	8002fce <__sflush_r+0xda>
 8002ffa:	bf00      	nop
 8002ffc:	20400001 	.word	0x20400001

08003000 <_fflush_r>:
 8003000:	b538      	push	{r3, r4, r5, lr}
 8003002:	690b      	ldr	r3, [r1, #16]
 8003004:	4605      	mov	r5, r0
 8003006:	460c      	mov	r4, r1
 8003008:	b913      	cbnz	r3, 8003010 <_fflush_r+0x10>
 800300a:	2500      	movs	r5, #0
 800300c:	4628      	mov	r0, r5
 800300e:	bd38      	pop	{r3, r4, r5, pc}
 8003010:	b118      	cbz	r0, 800301a <_fflush_r+0x1a>
 8003012:	6983      	ldr	r3, [r0, #24]
 8003014:	b90b      	cbnz	r3, 800301a <_fflush_r+0x1a>
 8003016:	f000 f887 	bl	8003128 <__sinit>
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <_fflush_r+0x6c>)
 800301c:	429c      	cmp	r4, r3
 800301e:	d11b      	bne.n	8003058 <_fflush_r+0x58>
 8003020:	686c      	ldr	r4, [r5, #4]
 8003022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0ef      	beq.n	800300a <_fflush_r+0xa>
 800302a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800302c:	07d0      	lsls	r0, r2, #31
 800302e:	d404      	bmi.n	800303a <_fflush_r+0x3a>
 8003030:	0599      	lsls	r1, r3, #22
 8003032:	d402      	bmi.n	800303a <_fflush_r+0x3a>
 8003034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003036:	f000 f915 	bl	8003264 <__retarget_lock_acquire_recursive>
 800303a:	4628      	mov	r0, r5
 800303c:	4621      	mov	r1, r4
 800303e:	f7ff ff59 	bl	8002ef4 <__sflush_r>
 8003042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003044:	4605      	mov	r5, r0
 8003046:	07da      	lsls	r2, r3, #31
 8003048:	d4e0      	bmi.n	800300c <_fflush_r+0xc>
 800304a:	89a3      	ldrh	r3, [r4, #12]
 800304c:	059b      	lsls	r3, r3, #22
 800304e:	d4dd      	bmi.n	800300c <_fflush_r+0xc>
 8003050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003052:	f000 f908 	bl	8003266 <__retarget_lock_release_recursive>
 8003056:	e7d9      	b.n	800300c <_fflush_r+0xc>
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <_fflush_r+0x70>)
 800305a:	429c      	cmp	r4, r3
 800305c:	d101      	bne.n	8003062 <_fflush_r+0x62>
 800305e:	68ac      	ldr	r4, [r5, #8]
 8003060:	e7df      	b.n	8003022 <_fflush_r+0x22>
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <_fflush_r+0x74>)
 8003064:	429c      	cmp	r4, r3
 8003066:	bf08      	it	eq
 8003068:	68ec      	ldreq	r4, [r5, #12]
 800306a:	e7da      	b.n	8003022 <_fflush_r+0x22>
 800306c:	08003688 	.word	0x08003688
 8003070:	080036a8 	.word	0x080036a8
 8003074:	08003668 	.word	0x08003668

08003078 <std>:
 8003078:	2300      	movs	r3, #0
 800307a:	b510      	push	{r4, lr}
 800307c:	4604      	mov	r4, r0
 800307e:	e9c0 3300 	strd	r3, r3, [r0]
 8003082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003086:	6083      	str	r3, [r0, #8]
 8003088:	8181      	strh	r1, [r0, #12]
 800308a:	6643      	str	r3, [r0, #100]	; 0x64
 800308c:	81c2      	strh	r2, [r0, #14]
 800308e:	6183      	str	r3, [r0, #24]
 8003090:	4619      	mov	r1, r3
 8003092:	2208      	movs	r2, #8
 8003094:	305c      	adds	r0, #92	; 0x5c
 8003096:	f7ff fdef 	bl	8002c78 <memset>
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <std+0x38>)
 800309c:	6224      	str	r4, [r4, #32]
 800309e:	6263      	str	r3, [r4, #36]	; 0x24
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <std+0x3c>)
 80030a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <std+0x40>)
 80030a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <std+0x44>)
 80030aa:	6323      	str	r3, [r4, #48]	; 0x30
 80030ac:	bd10      	pop	{r4, pc}
 80030ae:	bf00      	nop
 80030b0:	0800349d 	.word	0x0800349d
 80030b4:	080034bf 	.word	0x080034bf
 80030b8:	080034f7 	.word	0x080034f7
 80030bc:	0800351b 	.word	0x0800351b

080030c0 <_cleanup_r>:
 80030c0:	4901      	ldr	r1, [pc, #4]	; (80030c8 <_cleanup_r+0x8>)
 80030c2:	f000 b8af 	b.w	8003224 <_fwalk_reent>
 80030c6:	bf00      	nop
 80030c8:	08003001 	.word	0x08003001

080030cc <__sfmoreglue>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	2568      	movs	r5, #104	; 0x68
 80030d0:	1e4a      	subs	r2, r1, #1
 80030d2:	4355      	muls	r5, r2
 80030d4:	460e      	mov	r6, r1
 80030d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030da:	f000 f975 	bl	80033c8 <_malloc_r>
 80030de:	4604      	mov	r4, r0
 80030e0:	b140      	cbz	r0, 80030f4 <__sfmoreglue+0x28>
 80030e2:	2100      	movs	r1, #0
 80030e4:	e9c0 1600 	strd	r1, r6, [r0]
 80030e8:	300c      	adds	r0, #12
 80030ea:	60a0      	str	r0, [r4, #8]
 80030ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030f0:	f7ff fdc2 	bl	8002c78 <memset>
 80030f4:	4620      	mov	r0, r4
 80030f6:	bd70      	pop	{r4, r5, r6, pc}

080030f8 <__sfp_lock_acquire>:
 80030f8:	4801      	ldr	r0, [pc, #4]	; (8003100 <__sfp_lock_acquire+0x8>)
 80030fa:	f000 b8b3 	b.w	8003264 <__retarget_lock_acquire_recursive>
 80030fe:	bf00      	nop
 8003100:	200001c4 	.word	0x200001c4

08003104 <__sfp_lock_release>:
 8003104:	4801      	ldr	r0, [pc, #4]	; (800310c <__sfp_lock_release+0x8>)
 8003106:	f000 b8ae 	b.w	8003266 <__retarget_lock_release_recursive>
 800310a:	bf00      	nop
 800310c:	200001c4 	.word	0x200001c4

08003110 <__sinit_lock_acquire>:
 8003110:	4801      	ldr	r0, [pc, #4]	; (8003118 <__sinit_lock_acquire+0x8>)
 8003112:	f000 b8a7 	b.w	8003264 <__retarget_lock_acquire_recursive>
 8003116:	bf00      	nop
 8003118:	200001bf 	.word	0x200001bf

0800311c <__sinit_lock_release>:
 800311c:	4801      	ldr	r0, [pc, #4]	; (8003124 <__sinit_lock_release+0x8>)
 800311e:	f000 b8a2 	b.w	8003266 <__retarget_lock_release_recursive>
 8003122:	bf00      	nop
 8003124:	200001bf 	.word	0x200001bf

08003128 <__sinit>:
 8003128:	b510      	push	{r4, lr}
 800312a:	4604      	mov	r4, r0
 800312c:	f7ff fff0 	bl	8003110 <__sinit_lock_acquire>
 8003130:	69a3      	ldr	r3, [r4, #24]
 8003132:	b11b      	cbz	r3, 800313c <__sinit+0x14>
 8003134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003138:	f7ff bff0 	b.w	800311c <__sinit_lock_release>
 800313c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003140:	6523      	str	r3, [r4, #80]	; 0x50
 8003142:	4b13      	ldr	r3, [pc, #76]	; (8003190 <__sinit+0x68>)
 8003144:	4a13      	ldr	r2, [pc, #76]	; (8003194 <__sinit+0x6c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	62a2      	str	r2, [r4, #40]	; 0x28
 800314a:	42a3      	cmp	r3, r4
 800314c:	bf08      	it	eq
 800314e:	2301      	moveq	r3, #1
 8003150:	4620      	mov	r0, r4
 8003152:	bf08      	it	eq
 8003154:	61a3      	streq	r3, [r4, #24]
 8003156:	f000 f81f 	bl	8003198 <__sfp>
 800315a:	6060      	str	r0, [r4, #4]
 800315c:	4620      	mov	r0, r4
 800315e:	f000 f81b 	bl	8003198 <__sfp>
 8003162:	60a0      	str	r0, [r4, #8]
 8003164:	4620      	mov	r0, r4
 8003166:	f000 f817 	bl	8003198 <__sfp>
 800316a:	2200      	movs	r2, #0
 800316c:	2104      	movs	r1, #4
 800316e:	60e0      	str	r0, [r4, #12]
 8003170:	6860      	ldr	r0, [r4, #4]
 8003172:	f7ff ff81 	bl	8003078 <std>
 8003176:	2201      	movs	r2, #1
 8003178:	2109      	movs	r1, #9
 800317a:	68a0      	ldr	r0, [r4, #8]
 800317c:	f7ff ff7c 	bl	8003078 <std>
 8003180:	2202      	movs	r2, #2
 8003182:	2112      	movs	r1, #18
 8003184:	68e0      	ldr	r0, [r4, #12]
 8003186:	f7ff ff77 	bl	8003078 <std>
 800318a:	2301      	movs	r3, #1
 800318c:	61a3      	str	r3, [r4, #24]
 800318e:	e7d1      	b.n	8003134 <__sinit+0xc>
 8003190:	08003664 	.word	0x08003664
 8003194:	080030c1 	.word	0x080030c1

08003198 <__sfp>:
 8003198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319a:	4607      	mov	r7, r0
 800319c:	f7ff ffac 	bl	80030f8 <__sfp_lock_acquire>
 80031a0:	4b1e      	ldr	r3, [pc, #120]	; (800321c <__sfp+0x84>)
 80031a2:	681e      	ldr	r6, [r3, #0]
 80031a4:	69b3      	ldr	r3, [r6, #24]
 80031a6:	b913      	cbnz	r3, 80031ae <__sfp+0x16>
 80031a8:	4630      	mov	r0, r6
 80031aa:	f7ff ffbd 	bl	8003128 <__sinit>
 80031ae:	3648      	adds	r6, #72	; 0x48
 80031b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	d503      	bpl.n	80031c0 <__sfp+0x28>
 80031b8:	6833      	ldr	r3, [r6, #0]
 80031ba:	b30b      	cbz	r3, 8003200 <__sfp+0x68>
 80031bc:	6836      	ldr	r6, [r6, #0]
 80031be:	e7f7      	b.n	80031b0 <__sfp+0x18>
 80031c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031c4:	b9d5      	cbnz	r5, 80031fc <__sfp+0x64>
 80031c6:	4b16      	ldr	r3, [pc, #88]	; (8003220 <__sfp+0x88>)
 80031c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031cc:	60e3      	str	r3, [r4, #12]
 80031ce:	6665      	str	r5, [r4, #100]	; 0x64
 80031d0:	f000 f847 	bl	8003262 <__retarget_lock_init_recursive>
 80031d4:	f7ff ff96 	bl	8003104 <__sfp_lock_release>
 80031d8:	2208      	movs	r2, #8
 80031da:	4629      	mov	r1, r5
 80031dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031e4:	6025      	str	r5, [r4, #0]
 80031e6:	61a5      	str	r5, [r4, #24]
 80031e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031ec:	f7ff fd44 	bl	8002c78 <memset>
 80031f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031f8:	4620      	mov	r0, r4
 80031fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031fc:	3468      	adds	r4, #104	; 0x68
 80031fe:	e7d9      	b.n	80031b4 <__sfp+0x1c>
 8003200:	2104      	movs	r1, #4
 8003202:	4638      	mov	r0, r7
 8003204:	f7ff ff62 	bl	80030cc <__sfmoreglue>
 8003208:	4604      	mov	r4, r0
 800320a:	6030      	str	r0, [r6, #0]
 800320c:	2800      	cmp	r0, #0
 800320e:	d1d5      	bne.n	80031bc <__sfp+0x24>
 8003210:	f7ff ff78 	bl	8003104 <__sfp_lock_release>
 8003214:	230c      	movs	r3, #12
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	e7ee      	b.n	80031f8 <__sfp+0x60>
 800321a:	bf00      	nop
 800321c:	08003664 	.word	0x08003664
 8003220:	ffff0001 	.word	0xffff0001

08003224 <_fwalk_reent>:
 8003224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003228:	4606      	mov	r6, r0
 800322a:	4688      	mov	r8, r1
 800322c:	2700      	movs	r7, #0
 800322e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003232:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003236:	f1b9 0901 	subs.w	r9, r9, #1
 800323a:	d505      	bpl.n	8003248 <_fwalk_reent+0x24>
 800323c:	6824      	ldr	r4, [r4, #0]
 800323e:	2c00      	cmp	r4, #0
 8003240:	d1f7      	bne.n	8003232 <_fwalk_reent+0xe>
 8003242:	4638      	mov	r0, r7
 8003244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003248:	89ab      	ldrh	r3, [r5, #12]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d907      	bls.n	800325e <_fwalk_reent+0x3a>
 800324e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003252:	3301      	adds	r3, #1
 8003254:	d003      	beq.n	800325e <_fwalk_reent+0x3a>
 8003256:	4629      	mov	r1, r5
 8003258:	4630      	mov	r0, r6
 800325a:	47c0      	blx	r8
 800325c:	4307      	orrs	r7, r0
 800325e:	3568      	adds	r5, #104	; 0x68
 8003260:	e7e9      	b.n	8003236 <_fwalk_reent+0x12>

08003262 <__retarget_lock_init_recursive>:
 8003262:	4770      	bx	lr

08003264 <__retarget_lock_acquire_recursive>:
 8003264:	4770      	bx	lr

08003266 <__retarget_lock_release_recursive>:
 8003266:	4770      	bx	lr

08003268 <__swhatbuf_r>:
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	460e      	mov	r6, r1
 800326c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003270:	4614      	mov	r4, r2
 8003272:	2900      	cmp	r1, #0
 8003274:	461d      	mov	r5, r3
 8003276:	b096      	sub	sp, #88	; 0x58
 8003278:	da07      	bge.n	800328a <__swhatbuf_r+0x22>
 800327a:	2300      	movs	r3, #0
 800327c:	602b      	str	r3, [r5, #0]
 800327e:	89b3      	ldrh	r3, [r6, #12]
 8003280:	061a      	lsls	r2, r3, #24
 8003282:	d410      	bmi.n	80032a6 <__swhatbuf_r+0x3e>
 8003284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003288:	e00e      	b.n	80032a8 <__swhatbuf_r+0x40>
 800328a:	466a      	mov	r2, sp
 800328c:	f000 f96c 	bl	8003568 <_fstat_r>
 8003290:	2800      	cmp	r0, #0
 8003292:	dbf2      	blt.n	800327a <__swhatbuf_r+0x12>
 8003294:	9a01      	ldr	r2, [sp, #4]
 8003296:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800329a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800329e:	425a      	negs	r2, r3
 80032a0:	415a      	adcs	r2, r3
 80032a2:	602a      	str	r2, [r5, #0]
 80032a4:	e7ee      	b.n	8003284 <__swhatbuf_r+0x1c>
 80032a6:	2340      	movs	r3, #64	; 0x40
 80032a8:	2000      	movs	r0, #0
 80032aa:	6023      	str	r3, [r4, #0]
 80032ac:	b016      	add	sp, #88	; 0x58
 80032ae:	bd70      	pop	{r4, r5, r6, pc}

080032b0 <__smakebuf_r>:
 80032b0:	898b      	ldrh	r3, [r1, #12]
 80032b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032b4:	079d      	lsls	r5, r3, #30
 80032b6:	4606      	mov	r6, r0
 80032b8:	460c      	mov	r4, r1
 80032ba:	d507      	bpl.n	80032cc <__smakebuf_r+0x1c>
 80032bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032c0:	6023      	str	r3, [r4, #0]
 80032c2:	6123      	str	r3, [r4, #16]
 80032c4:	2301      	movs	r3, #1
 80032c6:	6163      	str	r3, [r4, #20]
 80032c8:	b002      	add	sp, #8
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
 80032cc:	466a      	mov	r2, sp
 80032ce:	ab01      	add	r3, sp, #4
 80032d0:	f7ff ffca 	bl	8003268 <__swhatbuf_r>
 80032d4:	9900      	ldr	r1, [sp, #0]
 80032d6:	4605      	mov	r5, r0
 80032d8:	4630      	mov	r0, r6
 80032da:	f000 f875 	bl	80033c8 <_malloc_r>
 80032de:	b948      	cbnz	r0, 80032f4 <__smakebuf_r+0x44>
 80032e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032e4:	059a      	lsls	r2, r3, #22
 80032e6:	d4ef      	bmi.n	80032c8 <__smakebuf_r+0x18>
 80032e8:	f023 0303 	bic.w	r3, r3, #3
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	81a3      	strh	r3, [r4, #12]
 80032f2:	e7e3      	b.n	80032bc <__smakebuf_r+0xc>
 80032f4:	4b0d      	ldr	r3, [pc, #52]	; (800332c <__smakebuf_r+0x7c>)
 80032f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	6020      	str	r0, [r4, #0]
 80032fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003300:	81a3      	strh	r3, [r4, #12]
 8003302:	9b00      	ldr	r3, [sp, #0]
 8003304:	6120      	str	r0, [r4, #16]
 8003306:	6163      	str	r3, [r4, #20]
 8003308:	9b01      	ldr	r3, [sp, #4]
 800330a:	b15b      	cbz	r3, 8003324 <__smakebuf_r+0x74>
 800330c:	4630      	mov	r0, r6
 800330e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003312:	f000 f93b 	bl	800358c <_isatty_r>
 8003316:	b128      	cbz	r0, 8003324 <__smakebuf_r+0x74>
 8003318:	89a3      	ldrh	r3, [r4, #12]
 800331a:	f023 0303 	bic.w	r3, r3, #3
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	81a3      	strh	r3, [r4, #12]
 8003324:	89a0      	ldrh	r0, [r4, #12]
 8003326:	4305      	orrs	r5, r0
 8003328:	81a5      	strh	r5, [r4, #12]
 800332a:	e7cd      	b.n	80032c8 <__smakebuf_r+0x18>
 800332c:	080030c1 	.word	0x080030c1

08003330 <_free_r>:
 8003330:	b538      	push	{r3, r4, r5, lr}
 8003332:	4605      	mov	r5, r0
 8003334:	2900      	cmp	r1, #0
 8003336:	d043      	beq.n	80033c0 <_free_r+0x90>
 8003338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800333c:	1f0c      	subs	r4, r1, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	bfb8      	it	lt
 8003342:	18e4      	addlt	r4, r4, r3
 8003344:	f000 f944 	bl	80035d0 <__malloc_lock>
 8003348:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <_free_r+0x94>)
 800334a:	6813      	ldr	r3, [r2, #0]
 800334c:	4610      	mov	r0, r2
 800334e:	b933      	cbnz	r3, 800335e <_free_r+0x2e>
 8003350:	6063      	str	r3, [r4, #4]
 8003352:	6014      	str	r4, [r2, #0]
 8003354:	4628      	mov	r0, r5
 8003356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800335a:	f000 b93f 	b.w	80035dc <__malloc_unlock>
 800335e:	42a3      	cmp	r3, r4
 8003360:	d90a      	bls.n	8003378 <_free_r+0x48>
 8003362:	6821      	ldr	r1, [r4, #0]
 8003364:	1862      	adds	r2, r4, r1
 8003366:	4293      	cmp	r3, r2
 8003368:	bf01      	itttt	eq
 800336a:	681a      	ldreq	r2, [r3, #0]
 800336c:	685b      	ldreq	r3, [r3, #4]
 800336e:	1852      	addeq	r2, r2, r1
 8003370:	6022      	streq	r2, [r4, #0]
 8003372:	6063      	str	r3, [r4, #4]
 8003374:	6004      	str	r4, [r0, #0]
 8003376:	e7ed      	b.n	8003354 <_free_r+0x24>
 8003378:	461a      	mov	r2, r3
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	b10b      	cbz	r3, 8003382 <_free_r+0x52>
 800337e:	42a3      	cmp	r3, r4
 8003380:	d9fa      	bls.n	8003378 <_free_r+0x48>
 8003382:	6811      	ldr	r1, [r2, #0]
 8003384:	1850      	adds	r0, r2, r1
 8003386:	42a0      	cmp	r0, r4
 8003388:	d10b      	bne.n	80033a2 <_free_r+0x72>
 800338a:	6820      	ldr	r0, [r4, #0]
 800338c:	4401      	add	r1, r0
 800338e:	1850      	adds	r0, r2, r1
 8003390:	4283      	cmp	r3, r0
 8003392:	6011      	str	r1, [r2, #0]
 8003394:	d1de      	bne.n	8003354 <_free_r+0x24>
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4401      	add	r1, r0
 800339c:	6011      	str	r1, [r2, #0]
 800339e:	6053      	str	r3, [r2, #4]
 80033a0:	e7d8      	b.n	8003354 <_free_r+0x24>
 80033a2:	d902      	bls.n	80033aa <_free_r+0x7a>
 80033a4:	230c      	movs	r3, #12
 80033a6:	602b      	str	r3, [r5, #0]
 80033a8:	e7d4      	b.n	8003354 <_free_r+0x24>
 80033aa:	6820      	ldr	r0, [r4, #0]
 80033ac:	1821      	adds	r1, r4, r0
 80033ae:	428b      	cmp	r3, r1
 80033b0:	bf01      	itttt	eq
 80033b2:	6819      	ldreq	r1, [r3, #0]
 80033b4:	685b      	ldreq	r3, [r3, #4]
 80033b6:	1809      	addeq	r1, r1, r0
 80033b8:	6021      	streq	r1, [r4, #0]
 80033ba:	6063      	str	r3, [r4, #4]
 80033bc:	6054      	str	r4, [r2, #4]
 80033be:	e7c9      	b.n	8003354 <_free_r+0x24>
 80033c0:	bd38      	pop	{r3, r4, r5, pc}
 80033c2:	bf00      	nop
 80033c4:	20000124 	.word	0x20000124

080033c8 <_malloc_r>:
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ca:	1ccd      	adds	r5, r1, #3
 80033cc:	f025 0503 	bic.w	r5, r5, #3
 80033d0:	3508      	adds	r5, #8
 80033d2:	2d0c      	cmp	r5, #12
 80033d4:	bf38      	it	cc
 80033d6:	250c      	movcc	r5, #12
 80033d8:	2d00      	cmp	r5, #0
 80033da:	4606      	mov	r6, r0
 80033dc:	db01      	blt.n	80033e2 <_malloc_r+0x1a>
 80033de:	42a9      	cmp	r1, r5
 80033e0:	d903      	bls.n	80033ea <_malloc_r+0x22>
 80033e2:	230c      	movs	r3, #12
 80033e4:	6033      	str	r3, [r6, #0]
 80033e6:	2000      	movs	r0, #0
 80033e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ea:	f000 f8f1 	bl	80035d0 <__malloc_lock>
 80033ee:	4921      	ldr	r1, [pc, #132]	; (8003474 <_malloc_r+0xac>)
 80033f0:	680a      	ldr	r2, [r1, #0]
 80033f2:	4614      	mov	r4, r2
 80033f4:	b99c      	cbnz	r4, 800341e <_malloc_r+0x56>
 80033f6:	4f20      	ldr	r7, [pc, #128]	; (8003478 <_malloc_r+0xb0>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b923      	cbnz	r3, 8003406 <_malloc_r+0x3e>
 80033fc:	4621      	mov	r1, r4
 80033fe:	4630      	mov	r0, r6
 8003400:	f000 f83c 	bl	800347c <_sbrk_r>
 8003404:	6038      	str	r0, [r7, #0]
 8003406:	4629      	mov	r1, r5
 8003408:	4630      	mov	r0, r6
 800340a:	f000 f837 	bl	800347c <_sbrk_r>
 800340e:	1c43      	adds	r3, r0, #1
 8003410:	d123      	bne.n	800345a <_malloc_r+0x92>
 8003412:	230c      	movs	r3, #12
 8003414:	4630      	mov	r0, r6
 8003416:	6033      	str	r3, [r6, #0]
 8003418:	f000 f8e0 	bl	80035dc <__malloc_unlock>
 800341c:	e7e3      	b.n	80033e6 <_malloc_r+0x1e>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	1b5b      	subs	r3, r3, r5
 8003422:	d417      	bmi.n	8003454 <_malloc_r+0x8c>
 8003424:	2b0b      	cmp	r3, #11
 8003426:	d903      	bls.n	8003430 <_malloc_r+0x68>
 8003428:	6023      	str	r3, [r4, #0]
 800342a:	441c      	add	r4, r3
 800342c:	6025      	str	r5, [r4, #0]
 800342e:	e004      	b.n	800343a <_malloc_r+0x72>
 8003430:	6863      	ldr	r3, [r4, #4]
 8003432:	42a2      	cmp	r2, r4
 8003434:	bf0c      	ite	eq
 8003436:	600b      	streq	r3, [r1, #0]
 8003438:	6053      	strne	r3, [r2, #4]
 800343a:	4630      	mov	r0, r6
 800343c:	f000 f8ce 	bl	80035dc <__malloc_unlock>
 8003440:	f104 000b 	add.w	r0, r4, #11
 8003444:	1d23      	adds	r3, r4, #4
 8003446:	f020 0007 	bic.w	r0, r0, #7
 800344a:	1ac2      	subs	r2, r0, r3
 800344c:	d0cc      	beq.n	80033e8 <_malloc_r+0x20>
 800344e:	1a1b      	subs	r3, r3, r0
 8003450:	50a3      	str	r3, [r4, r2]
 8003452:	e7c9      	b.n	80033e8 <_malloc_r+0x20>
 8003454:	4622      	mov	r2, r4
 8003456:	6864      	ldr	r4, [r4, #4]
 8003458:	e7cc      	b.n	80033f4 <_malloc_r+0x2c>
 800345a:	1cc4      	adds	r4, r0, #3
 800345c:	f024 0403 	bic.w	r4, r4, #3
 8003460:	42a0      	cmp	r0, r4
 8003462:	d0e3      	beq.n	800342c <_malloc_r+0x64>
 8003464:	1a21      	subs	r1, r4, r0
 8003466:	4630      	mov	r0, r6
 8003468:	f000 f808 	bl	800347c <_sbrk_r>
 800346c:	3001      	adds	r0, #1
 800346e:	d1dd      	bne.n	800342c <_malloc_r+0x64>
 8003470:	e7cf      	b.n	8003412 <_malloc_r+0x4a>
 8003472:	bf00      	nop
 8003474:	20000124 	.word	0x20000124
 8003478:	20000128 	.word	0x20000128

0800347c <_sbrk_r>:
 800347c:	b538      	push	{r3, r4, r5, lr}
 800347e:	2300      	movs	r3, #0
 8003480:	4d05      	ldr	r5, [pc, #20]	; (8003498 <_sbrk_r+0x1c>)
 8003482:	4604      	mov	r4, r0
 8003484:	4608      	mov	r0, r1
 8003486:	602b      	str	r3, [r5, #0]
 8003488:	f7fd fc60 	bl	8000d4c <_sbrk>
 800348c:	1c43      	adds	r3, r0, #1
 800348e:	d102      	bne.n	8003496 <_sbrk_r+0x1a>
 8003490:	682b      	ldr	r3, [r5, #0]
 8003492:	b103      	cbz	r3, 8003496 <_sbrk_r+0x1a>
 8003494:	6023      	str	r3, [r4, #0]
 8003496:	bd38      	pop	{r3, r4, r5, pc}
 8003498:	200001c8 	.word	0x200001c8

0800349c <__sread>:
 800349c:	b510      	push	{r4, lr}
 800349e:	460c      	mov	r4, r1
 80034a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a4:	f000 f8a0 	bl	80035e8 <_read_r>
 80034a8:	2800      	cmp	r0, #0
 80034aa:	bfab      	itete	ge
 80034ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034ae:	89a3      	ldrhlt	r3, [r4, #12]
 80034b0:	181b      	addge	r3, r3, r0
 80034b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034b6:	bfac      	ite	ge
 80034b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80034ba:	81a3      	strhlt	r3, [r4, #12]
 80034bc:	bd10      	pop	{r4, pc}

080034be <__swrite>:
 80034be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c2:	461f      	mov	r7, r3
 80034c4:	898b      	ldrh	r3, [r1, #12]
 80034c6:	4605      	mov	r5, r0
 80034c8:	05db      	lsls	r3, r3, #23
 80034ca:	460c      	mov	r4, r1
 80034cc:	4616      	mov	r6, r2
 80034ce:	d505      	bpl.n	80034dc <__swrite+0x1e>
 80034d0:	2302      	movs	r3, #2
 80034d2:	2200      	movs	r2, #0
 80034d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d8:	f000 f868 	bl	80035ac <_lseek_r>
 80034dc:	89a3      	ldrh	r3, [r4, #12]
 80034de:	4632      	mov	r2, r6
 80034e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034e4:	81a3      	strh	r3, [r4, #12]
 80034e6:	4628      	mov	r0, r5
 80034e8:	463b      	mov	r3, r7
 80034ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034f2:	f000 b817 	b.w	8003524 <_write_r>

080034f6 <__sseek>:
 80034f6:	b510      	push	{r4, lr}
 80034f8:	460c      	mov	r4, r1
 80034fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034fe:	f000 f855 	bl	80035ac <_lseek_r>
 8003502:	1c43      	adds	r3, r0, #1
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	bf15      	itete	ne
 8003508:	6560      	strne	r0, [r4, #84]	; 0x54
 800350a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800350e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003512:	81a3      	strheq	r3, [r4, #12]
 8003514:	bf18      	it	ne
 8003516:	81a3      	strhne	r3, [r4, #12]
 8003518:	bd10      	pop	{r4, pc}

0800351a <__sclose>:
 800351a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800351e:	f000 b813 	b.w	8003548 <_close_r>
	...

08003524 <_write_r>:
 8003524:	b538      	push	{r3, r4, r5, lr}
 8003526:	4604      	mov	r4, r0
 8003528:	4608      	mov	r0, r1
 800352a:	4611      	mov	r1, r2
 800352c:	2200      	movs	r2, #0
 800352e:	4d05      	ldr	r5, [pc, #20]	; (8003544 <_write_r+0x20>)
 8003530:	602a      	str	r2, [r5, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	f7fd fa2c 	bl	8000990 <_write>
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	d102      	bne.n	8003542 <_write_r+0x1e>
 800353c:	682b      	ldr	r3, [r5, #0]
 800353e:	b103      	cbz	r3, 8003542 <_write_r+0x1e>
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	bd38      	pop	{r3, r4, r5, pc}
 8003544:	200001c8 	.word	0x200001c8

08003548 <_close_r>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	2300      	movs	r3, #0
 800354c:	4d05      	ldr	r5, [pc, #20]	; (8003564 <_close_r+0x1c>)
 800354e:	4604      	mov	r4, r0
 8003550:	4608      	mov	r0, r1
 8003552:	602b      	str	r3, [r5, #0]
 8003554:	f7fd fbc9 	bl	8000cea <_close>
 8003558:	1c43      	adds	r3, r0, #1
 800355a:	d102      	bne.n	8003562 <_close_r+0x1a>
 800355c:	682b      	ldr	r3, [r5, #0]
 800355e:	b103      	cbz	r3, 8003562 <_close_r+0x1a>
 8003560:	6023      	str	r3, [r4, #0]
 8003562:	bd38      	pop	{r3, r4, r5, pc}
 8003564:	200001c8 	.word	0x200001c8

08003568 <_fstat_r>:
 8003568:	b538      	push	{r3, r4, r5, lr}
 800356a:	2300      	movs	r3, #0
 800356c:	4d06      	ldr	r5, [pc, #24]	; (8003588 <_fstat_r+0x20>)
 800356e:	4604      	mov	r4, r0
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	602b      	str	r3, [r5, #0]
 8003576:	f7fd fbc3 	bl	8000d00 <_fstat>
 800357a:	1c43      	adds	r3, r0, #1
 800357c:	d102      	bne.n	8003584 <_fstat_r+0x1c>
 800357e:	682b      	ldr	r3, [r5, #0]
 8003580:	b103      	cbz	r3, 8003584 <_fstat_r+0x1c>
 8003582:	6023      	str	r3, [r4, #0]
 8003584:	bd38      	pop	{r3, r4, r5, pc}
 8003586:	bf00      	nop
 8003588:	200001c8 	.word	0x200001c8

0800358c <_isatty_r>:
 800358c:	b538      	push	{r3, r4, r5, lr}
 800358e:	2300      	movs	r3, #0
 8003590:	4d05      	ldr	r5, [pc, #20]	; (80035a8 <_isatty_r+0x1c>)
 8003592:	4604      	mov	r4, r0
 8003594:	4608      	mov	r0, r1
 8003596:	602b      	str	r3, [r5, #0]
 8003598:	f7fd fbc1 	bl	8000d1e <_isatty>
 800359c:	1c43      	adds	r3, r0, #1
 800359e:	d102      	bne.n	80035a6 <_isatty_r+0x1a>
 80035a0:	682b      	ldr	r3, [r5, #0]
 80035a2:	b103      	cbz	r3, 80035a6 <_isatty_r+0x1a>
 80035a4:	6023      	str	r3, [r4, #0]
 80035a6:	bd38      	pop	{r3, r4, r5, pc}
 80035a8:	200001c8 	.word	0x200001c8

080035ac <_lseek_r>:
 80035ac:	b538      	push	{r3, r4, r5, lr}
 80035ae:	4604      	mov	r4, r0
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	2200      	movs	r2, #0
 80035b6:	4d05      	ldr	r5, [pc, #20]	; (80035cc <_lseek_r+0x20>)
 80035b8:	602a      	str	r2, [r5, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f7fd fbb9 	bl	8000d32 <_lseek>
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	d102      	bne.n	80035ca <_lseek_r+0x1e>
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	b103      	cbz	r3, 80035ca <_lseek_r+0x1e>
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
 80035cc:	200001c8 	.word	0x200001c8

080035d0 <__malloc_lock>:
 80035d0:	4801      	ldr	r0, [pc, #4]	; (80035d8 <__malloc_lock+0x8>)
 80035d2:	f7ff be47 	b.w	8003264 <__retarget_lock_acquire_recursive>
 80035d6:	bf00      	nop
 80035d8:	200001c0 	.word	0x200001c0

080035dc <__malloc_unlock>:
 80035dc:	4801      	ldr	r0, [pc, #4]	; (80035e4 <__malloc_unlock+0x8>)
 80035de:	f7ff be42 	b.w	8003266 <__retarget_lock_release_recursive>
 80035e2:	bf00      	nop
 80035e4:	200001c0 	.word	0x200001c0

080035e8 <_read_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	4604      	mov	r4, r0
 80035ec:	4608      	mov	r0, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	2200      	movs	r2, #0
 80035f2:	4d05      	ldr	r5, [pc, #20]	; (8003608 <_read_r+0x20>)
 80035f4:	602a      	str	r2, [r5, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	f7fd fb5a 	bl	8000cb0 <_read>
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	d102      	bne.n	8003606 <_read_r+0x1e>
 8003600:	682b      	ldr	r3, [r5, #0]
 8003602:	b103      	cbz	r3, 8003606 <_read_r+0x1e>
 8003604:	6023      	str	r3, [r4, #0]
 8003606:	bd38      	pop	{r3, r4, r5, pc}
 8003608:	200001c8 	.word	0x200001c8

0800360c <_init>:
 800360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360e:	bf00      	nop
 8003610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003612:	bc08      	pop	{r3}
 8003614:	469e      	mov	lr, r3
 8003616:	4770      	bx	lr

08003618 <_fini>:
 8003618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361a:	bf00      	nop
 800361c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361e:	bc08      	pop	{r3}
 8003620:	469e      	mov	lr, r3
 8003622:	4770      	bx	lr
