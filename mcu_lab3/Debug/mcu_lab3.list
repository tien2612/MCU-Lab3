
mcu_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003640  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800395c  0800395c  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800395c  0800395c  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800395c  0800395c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08003964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200000b4  08003a18  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08003a18  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2f4  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000278b  00000000  00000000  0002f3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00031b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019497  00000000  00000000  000328f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f595  00000000  00000000  0004bd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a0ea  00000000  00000000  0005b324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000e540e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c68  00000000  00000000  000e5468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c58  00000000  00000000  000e60d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003734 	.word	0x08003734

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08003734 	.word	0x08003734

0800014c <WhichButtonIsPressed>:
	BUTTON_PRESS_MORE_THAN_1S
};

enum ButtonState buttonState = BUTTON_RELEASED;

int WhichButtonIsPressed() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return button_mode_is_pressed;
 8000150:	2000      	movs	r0, #0
 8000152:	f000 f9bf 	bl	80004d4 <is_button_pressed>
 8000156:	4603      	mov	r3, r0
 8000158:	2b00      	cmp	r3, #0
 800015a:	d001      	beq.n	8000160 <WhichButtonIsPressed+0x14>
 800015c:	230a      	movs	r3, #10
 800015e:	e018      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(1)) return button_add_is_pressed;
 8000160:	2001      	movs	r0, #1
 8000162:	f000 f9b7 	bl	80004d4 <is_button_pressed>
 8000166:	4603      	mov	r3, r0
 8000168:	2b00      	cmp	r3, #0
 800016a:	d001      	beq.n	8000170 <WhichButtonIsPressed+0x24>
 800016c:	230b      	movs	r3, #11
 800016e:	e010      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(2)) return button_confirm_is_pressed;
 8000170:	2002      	movs	r0, #2
 8000172:	f000 f9af 	bl	80004d4 <is_button_pressed>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d001      	beq.n	8000180 <WhichButtonIsPressed+0x34>
 800017c:	230c      	movs	r3, #12
 800017e:	e008      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(3)) return button_reset_is_pressed;
 8000180:	2003      	movs	r0, #3
 8000182:	f000 f9a7 	bl	80004d4 <is_button_pressed>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <WhichButtonIsPressed+0x44>
 800018c:	230d      	movs	r3, #13
 800018e:	e000      	b.n	8000192 <WhichButtonIsPressed+0x46>

	return 0; // None of these buttons are pressed
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}
	...

08000198 <fsm_for_input_processing>:
void fsm_for_input_processing() {
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	// Only display 3 MODE to modify value.
	if (status == RED_MODE || status == GREEN_MODE || status == AMBER_MODE)
 800019c:	4b7e      	ldr	r3, [pc, #504]	; (8000398 <fsm_for_input_processing+0x200>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2b02      	cmp	r3, #2
 80001a2:	d007      	beq.n	80001b4 <fsm_for_input_processing+0x1c>
 80001a4:	4b7c      	ldr	r3, [pc, #496]	; (8000398 <fsm_for_input_processing+0x200>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	2b04      	cmp	r3, #4
 80001aa:	d003      	beq.n	80001b4 <fsm_for_input_processing+0x1c>
 80001ac:	4b7a      	ldr	r3, [pc, #488]	; (8000398 <fsm_for_input_processing+0x200>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	2b03      	cmp	r3, #3
 80001b2:	d103      	bne.n	80001bc <fsm_for_input_processing+0x24>
		light_time1 = status;
 80001b4:	4b78      	ldr	r3, [pc, #480]	; (8000398 <fsm_for_input_processing+0x200>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a78      	ldr	r2, [pc, #480]	; (800039c <fsm_for_input_processing+0x204>)
 80001ba:	6013      	str	r3, [r2, #0]
	switch(buttonState) {
 80001bc:	4b78      	ldr	r3, [pc, #480]	; (80003a0 <fsm_for_input_processing+0x208>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b02      	cmp	r3, #2
 80001c2:	f000 80d8 	beq.w	8000376 <fsm_for_input_processing+0x1de>
 80001c6:	2b02      	cmp	r3, #2
 80001c8:	f300 80de 	bgt.w	8000388 <fsm_for_input_processing+0x1f0>
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d003      	beq.n	80001d8 <fsm_for_input_processing+0x40>
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	f000 80bd 	beq.w	8000350 <fsm_for_input_processing+0x1b8>
				buttonState = BUTTON_RELEASED;
			}
			// TODO
			break;
		default:
			break;
 80001d6:	e0d7      	b.n	8000388 <fsm_for_input_processing+0x1f0>
			if (WhichButtonIsPressed()) {
 80001d8:	f7ff ffb8 	bl	800014c <WhichButtonIsPressed>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	f000 80b6 	beq.w	8000350 <fsm_for_input_processing+0x1b8>
				buttonState = BUTTON_PRESSED;
 80001e4:	4b6e      	ldr	r3, [pc, #440]	; (80003a0 <fsm_for_input_processing+0x208>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	701a      	strb	r2, [r3, #0]
				switch(WhichButtonIsPressed()) {
 80001ea:	f7ff ffaf 	bl	800014c <WhichButtonIsPressed>
 80001ee:	4603      	mov	r3, r0
 80001f0:	3b0a      	subs	r3, #10
 80001f2:	2b03      	cmp	r3, #3
 80001f4:	f200 80aa 	bhi.w	800034c <fsm_for_input_processing+0x1b4>
 80001f8:	a201      	add	r2, pc, #4	; (adr r2, 8000200 <fsm_for_input_processing+0x68>)
 80001fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001fe:	bf00      	nop
 8000200:	08000211 	.word	0x08000211
 8000204:	0800030b 	.word	0x0800030b
 8000208:	08000341 	.word	0x08000341
 800020c:	08000347 	.word	0x08000347
						switch(status) {
 8000210:	4b61      	ldr	r3, [pc, #388]	; (8000398 <fsm_for_input_processing+0x200>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	3b01      	subs	r3, #1
 8000216:	2b06      	cmp	r3, #6
 8000218:	d872      	bhi.n	8000300 <fsm_for_input_processing+0x168>
 800021a:	a201      	add	r2, pc, #4	; (adr r2, 8000220 <fsm_for_input_processing+0x88>)
 800021c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000220:	0800023d 	.word	0x0800023d
 8000224:	08000267 	.word	0x08000267
 8000228:	08000289 	.word	0x08000289
 800022c:	080002af 	.word	0x080002af
 8000230:	08000267 	.word	0x08000267
 8000234:	08000289 	.word	0x08000289
 8000238:	080002af 	.word	0x080002af
								led_init();
 800023c:	f000 f9e4 	bl	8000608 <led_init>
								status = RED_MODE;
 8000240:	4b55      	ldr	r3, [pc, #340]	; (8000398 <fsm_for_input_processing+0x200>)
 8000242:	2202      	movs	r2, #2
 8000244:	601a      	str	r2, [r3, #0]
								printf("The system is in MODE '2 - RED_MODE' \r\n");
 8000246:	4857      	ldr	r0, [pc, #348]	; (80003a4 <fsm_for_input_processing+0x20c>)
 8000248:	f002 fe20 	bl	8002e8c <puts>
								light_time = man_red_time;
 800024c:	4b56      	ldr	r3, [pc, #344]	; (80003a8 <fsm_for_input_processing+0x210>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a56      	ldr	r2, [pc, #344]	; (80003ac <fsm_for_input_processing+0x214>)
 8000252:	6013      	str	r3, [r2, #0]
								temp_value = light_time;
 8000254:	4b55      	ldr	r3, [pc, #340]	; (80003ac <fsm_for_input_processing+0x214>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a55      	ldr	r2, [pc, #340]	; (80003b0 <fsm_for_input_processing+0x218>)
 800025a:	6013      	str	r3, [r2, #0]
								setTimer1(DURATION_HALF_OF_SECOND);
 800025c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000260:	f000 fbfc 	bl	8000a5c <setTimer1>
								break;
 8000264:	e04d      	b.n	8000302 <fsm_for_input_processing+0x16a>
								led_init();
 8000266:	f000 f9cf 	bl	8000608 <led_init>
								light_time = man_amber_time;
 800026a:	4b52      	ldr	r3, [pc, #328]	; (80003b4 <fsm_for_input_processing+0x21c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a4f      	ldr	r2, [pc, #316]	; (80003ac <fsm_for_input_processing+0x214>)
 8000270:	6013      	str	r3, [r2, #0]
								temp_value = light_time; // store value to temp variable if button add is pressed
 8000272:	4b4e      	ldr	r3, [pc, #312]	; (80003ac <fsm_for_input_processing+0x214>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a4e      	ldr	r2, [pc, #312]	; (80003b0 <fsm_for_input_processing+0x218>)
 8000278:	6013      	str	r3, [r2, #0]
								status = AMBER_MODE;
 800027a:	4b47      	ldr	r3, [pc, #284]	; (8000398 <fsm_for_input_processing+0x200>)
 800027c:	2203      	movs	r2, #3
 800027e:	601a      	str	r2, [r3, #0]
								printf("The system is in MODE '3 - AMBER_MODE' \r\n");
 8000280:	484d      	ldr	r0, [pc, #308]	; (80003b8 <fsm_for_input_processing+0x220>)
 8000282:	f002 fe03 	bl	8002e8c <puts>
								break;
 8000286:	e03c      	b.n	8000302 <fsm_for_input_processing+0x16a>
								GPIOB->BSRR = 0x3F00;
 8000288:	4b4c      	ldr	r3, [pc, #304]	; (80003bc <fsm_for_input_processing+0x224>)
 800028a:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 800028e:	611a      	str	r2, [r3, #16]
								light_time = man_green_time;
 8000290:	4b4b      	ldr	r3, [pc, #300]	; (80003c0 <fsm_for_input_processing+0x228>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a45      	ldr	r2, [pc, #276]	; (80003ac <fsm_for_input_processing+0x214>)
 8000296:	6013      	str	r3, [r2, #0]
								temp_value = light_time; // store value to temp variable if button add is pressed
 8000298:	4b44      	ldr	r3, [pc, #272]	; (80003ac <fsm_for_input_processing+0x214>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a44      	ldr	r2, [pc, #272]	; (80003b0 <fsm_for_input_processing+0x218>)
 800029e:	6013      	str	r3, [r2, #0]
								status = GREEN_MODE;
 80002a0:	4b3d      	ldr	r3, [pc, #244]	; (8000398 <fsm_for_input_processing+0x200>)
 80002a2:	2204      	movs	r2, #4
 80002a4:	601a      	str	r2, [r3, #0]
								printf("The system is in MODE '4 - GREEN_MODE' \r\n");
 80002a6:	4847      	ldr	r0, [pc, #284]	; (80003c4 <fsm_for_input_processing+0x22c>)
 80002a8:	f002 fdf0 	bl	8002e8c <puts>
								break;
 80002ac:	e029      	b.n	8000302 <fsm_for_input_processing+0x16a>
								led_init();
 80002ae:	f000 f9ab 	bl	8000608 <led_init>
								light_time = man_red_time;
 80002b2:	4b3d      	ldr	r3, [pc, #244]	; (80003a8 <fsm_for_input_processing+0x210>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a3d      	ldr	r2, [pc, #244]	; (80003ac <fsm_for_input_processing+0x214>)
 80002b8:	6013      	str	r3, [r2, #0]
								temp_value = light_time;
 80002ba:	4b3c      	ldr	r3, [pc, #240]	; (80003ac <fsm_for_input_processing+0x214>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a3c      	ldr	r2, [pc, #240]	; (80003b0 <fsm_for_input_processing+0x218>)
 80002c0:	6013      	str	r3, [r2, #0]
								status = NORMAL_MODE;
 80002c2:	4b35      	ldr	r3, [pc, #212]	; (8000398 <fsm_for_input_processing+0x200>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	601a      	str	r2, [r3, #0]
								printf("The system is in MODE '1 - NORMAL' \r\n");
 80002c8:	483f      	ldr	r0, [pc, #252]	; (80003c8 <fsm_for_input_processing+0x230>)
 80002ca:	f002 fddf 	bl	8002e8c <puts>
								traffic_init();
 80002ce:	f000 fdef 	bl	8000eb0 <traffic_init>
								update_buffer();
 80002d2:	f000 f93b 	bl	800054c <update_buffer>
								if (man_red_time != man_green_time + man_amber_time) {
 80002d6:	4b3a      	ldr	r3, [pc, #232]	; (80003c0 <fsm_for_input_processing+0x228>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	4b36      	ldr	r3, [pc, #216]	; (80003b4 <fsm_for_input_processing+0x21c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	441a      	add	r2, r3
 80002e0:	4b31      	ldr	r3, [pc, #196]	; (80003a8 <fsm_for_input_processing+0x210>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d007      	beq.n	80002f8 <fsm_for_input_processing+0x160>
									printf("The setting is incorrect.\r\n");
 80002e8:	4838      	ldr	r0, [pc, #224]	; (80003cc <fsm_for_input_processing+0x234>)
 80002ea:	f002 fdcf 	bl	8002e8c <puts>
									printf("You should choose red = green + amber (time).\r\n");
 80002ee:	4838      	ldr	r0, [pc, #224]	; (80003d0 <fsm_for_input_processing+0x238>)
 80002f0:	f002 fdcc 	bl	8002e8c <puts>
									resetToTheDefaultSetting();
 80002f4:	f000 fe96 	bl	8001024 <resetToTheDefaultSetting>
								setTimer3(DURATION_1S);
 80002f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fc:	f000 fbe2 	bl	8000ac4 <setTimer3>
								break;
 8000300:	bf00      	nop
						buttonState = BUTTON_PRESSED;
 8000302:	4b27      	ldr	r3, [pc, #156]	; (80003a0 <fsm_for_input_processing+0x208>)
 8000304:	2201      	movs	r2, #1
 8000306:	701a      	strb	r2, [r3, #0]
						break;
 8000308:	e021      	b.n	800034e <fsm_for_input_processing+0x1b6>
						switch(status) {
 800030a:	4b23      	ldr	r3, [pc, #140]	; (8000398 <fsm_for_input_processing+0x200>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b04      	cmp	r3, #4
 8000310:	d00e      	beq.n	8000330 <fsm_for_input_processing+0x198>
 8000312:	2b04      	cmp	r3, #4
 8000314:	dc10      	bgt.n	8000338 <fsm_for_input_processing+0x1a0>
 8000316:	2b02      	cmp	r3, #2
 8000318:	d002      	beq.n	8000320 <fsm_for_input_processing+0x188>
 800031a:	2b03      	cmp	r3, #3
 800031c:	d004      	beq.n	8000328 <fsm_for_input_processing+0x190>
							break;
 800031e:	e00b      	b.n	8000338 <fsm_for_input_processing+0x1a0>
							status = MAN_RED_MODE;
 8000320:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <fsm_for_input_processing+0x200>)
 8000322:	2205      	movs	r2, #5
 8000324:	601a      	str	r2, [r3, #0]
							break;
 8000326:	e008      	b.n	800033a <fsm_for_input_processing+0x1a2>
							status = MAN_AMBER_MODE;
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <fsm_for_input_processing+0x200>)
 800032a:	2206      	movs	r2, #6
 800032c:	601a      	str	r2, [r3, #0]
							break;
 800032e:	e004      	b.n	800033a <fsm_for_input_processing+0x1a2>
							status = MAN_GREEN_MODE;
 8000330:	4b19      	ldr	r3, [pc, #100]	; (8000398 <fsm_for_input_processing+0x200>)
 8000332:	2207      	movs	r2, #7
 8000334:	601a      	str	r2, [r3, #0]
							break;
 8000336:	e000      	b.n	800033a <fsm_for_input_processing+0x1a2>
							break;
 8000338:	bf00      	nop
						updateTempTime();
 800033a:	f000 fddb 	bl	8000ef4 <updateTempTime>
						break;
 800033e:	e006      	b.n	800034e <fsm_for_input_processing+0x1b6>
						confirmAdjustedTime();
 8000340:	f000 fe28 	bl	8000f94 <confirmAdjustedTime>
						break;
 8000344:	e003      	b.n	800034e <fsm_for_input_processing+0x1b6>
						resetToTheDefaultSetting();
 8000346:	f000 fe6d 	bl	8001024 <resetToTheDefaultSetting>
						break;
 800034a:	e000      	b.n	800034e <fsm_for_input_processing+0x1b6>
						break;
 800034c:	bf00      	nop
				break;
 800034e:	e020      	b.n	8000392 <fsm_for_input_processing+0x1fa>
			if (!WhichButtonIsPressed()) {
 8000350:	f7ff fefc 	bl	800014c <WhichButtonIsPressed>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d103      	bne.n	8000362 <fsm_for_input_processing+0x1ca>
				buttonState = BUTTON_RELEASED;
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <fsm_for_input_processing+0x208>)
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
			break;
 8000360:	e014      	b.n	800038c <fsm_for_input_processing+0x1f4>
				if (is_button_pressed_1s(0)) {
 8000362:	2000      	movs	r0, #0
 8000364:	f000 f8d8 	bl	8000518 <is_button_pressed_1s>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d00e      	beq.n	800038c <fsm_for_input_processing+0x1f4>
					buttonState = BUTTON_PRESS_MORE_THAN_1S;
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <fsm_for_input_processing+0x208>)
 8000370:	2202      	movs	r2, #2
 8000372:	701a      	strb	r2, [r3, #0]
			break;
 8000374:	e00a      	b.n	800038c <fsm_for_input_processing+0x1f4>
			if (!WhichButtonIsPressed()) {
 8000376:	f7ff fee9 	bl	800014c <WhichButtonIsPressed>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d107      	bne.n	8000390 <fsm_for_input_processing+0x1f8>
				buttonState = BUTTON_RELEASED;
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <fsm_for_input_processing+0x208>)
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]
			break;
 8000386:	e003      	b.n	8000390 <fsm_for_input_processing+0x1f8>
			break;
 8000388:	bf00      	nop
 800038a:	e002      	b.n	8000392 <fsm_for_input_processing+0x1fa>
			break;
 800038c:	bf00      	nop
 800038e:	e000      	b.n	8000392 <fsm_for_input_processing+0x1fa>
			break;
 8000390:	bf00      	nop
	}
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000014 	.word	0x20000014
 800039c:	20000010 	.word	0x20000010
 80003a0:	200000d8 	.word	0x200000d8
 80003a4:	0800374c 	.word	0x0800374c
 80003a8:	20000000 	.word	0x20000000
 80003ac:	2000000c 	.word	0x2000000c
 80003b0:	200000d0 	.word	0x200000d0
 80003b4:	20000004 	.word	0x20000004
 80003b8:	08003774 	.word	0x08003774
 80003bc:	40010c00 	.word	0x40010c00
 80003c0:	20000008 	.word	0x20000008
 80003c4:	080037a0 	.word	0x080037a0
 80003c8:	080037cc 	.word	0x080037cc
 80003cc:	080037f4 	.word	0x080037f4
 80003d0:	08003810 	.word	0x08003810

080003d4 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	e061      	b.n	80004a4 <button_reading+0xd0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80003e0:	4a34      	ldr	r2, [pc, #208]	; (80004b4 <button_reading+0xe0>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	7819      	ldrb	r1, [r3, #0]
 80003e8:	4a33      	ldr	r2, [pc, #204]	; (80004b8 <button_reading+0xe4>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4413      	add	r3, r2
 80003ee:	460a      	mov	r2, r1
 80003f0:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 80003f2:	4a32      	ldr	r2, [pc, #200]	; (80004bc <button_reading+0xe8>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003fa:	4931      	ldr	r1, [pc, #196]	; (80004c0 <button_reading+0xec>)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000402:	4619      	mov	r1, r3
 8000404:	4610      	mov	r0, r2
 8000406:	f001 faa3 	bl	8001950 <HAL_GPIO_ReadPin>
 800040a:	4603      	mov	r3, r0
 800040c:	4619      	mov	r1, r3
 800040e:	4a29      	ldr	r2, [pc, #164]	; (80004b4 <button_reading+0xe0>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4413      	add	r3, r2
 8000414:	460a      	mov	r2, r1
 8000416:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8000418:	4a26      	ldr	r2, [pc, #152]	; (80004b4 <button_reading+0xe0>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	781a      	ldrb	r2, [r3, #0]
 8000420:	4925      	ldr	r1, [pc, #148]	; (80004b8 <button_reading+0xe4>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	440b      	add	r3, r1
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	429a      	cmp	r2, r3
 800042a:	d138      	bne.n	800049e <button_reading+0xca>
			//valid input, can read now
			buttonBufferPrev[i] = buttonBuffer[i];
 800042c:	4a25      	ldr	r2, [pc, #148]	; (80004c4 <button_reading+0xf0>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4413      	add	r3, r2
 8000432:	7819      	ldrb	r1, [r3, #0]
 8000434:	4a24      	ldr	r2, [pc, #144]	; (80004c8 <button_reading+0xf4>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4413      	add	r3, r2
 800043a:	460a      	mov	r2, r1
 800043c:	701a      	strb	r2, [r3, #0]
			// chap nhan input
			buttonBuffer[i] = debounceButtonBuffer1[i];
 800043e:	4a1d      	ldr	r2, [pc, #116]	; (80004b4 <button_reading+0xe0>)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4413      	add	r3, r2
 8000444:	7819      	ldrb	r1, [r3, #0]
 8000446:	4a1f      	ldr	r2, [pc, #124]	; (80004c4 <button_reading+0xf0>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4413      	add	r3, r2
 800044c:	460a      	mov	r2, r1
 800044e:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000450:	4a1c      	ldr	r2, [pc, #112]	; (80004c4 <button_reading+0xf0>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d116      	bne.n	800048a <button_reading+0xb6>
				//toggle pin to validate
				//HAL_GPIO_TogglePin(BRESP_GPIO_Port, BRESP_Pin);
				//if a button is pressed , we start counting
				if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 800045c:	4a1b      	ldr	r2, [pc, #108]	; (80004cc <button_reading+0xf8>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000464:	2b63      	cmp	r3, #99	; 0x63
 8000466:	d80a      	bhi.n	800047e <button_reading+0xaa>
					counterForButtonPress1s[i]++;
 8000468:	4a18      	ldr	r2, [pc, #96]	; (80004cc <button_reading+0xf8>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000470:	3301      	adds	r3, #1
 8000472:	b299      	uxth	r1, r3
 8000474:	4a15      	ldr	r2, [pc, #84]	; (80004cc <button_reading+0xf8>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800047c:	e00f      	b.n	800049e <button_reading+0xca>
				}

				else {
					//the flag is turned on when 1 second has passed
					//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 800047e:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <button_reading+0xfc>)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4413      	add	r3, r2
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
 8000488:	e009      	b.n	800049e <button_reading+0xca>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 800048a:	4a10      	ldr	r2, [pc, #64]	; (80004cc <button_reading+0xf8>)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2100      	movs	r1, #0
 8000490:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000494:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <button_reading+0xfc>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4413      	add	r3, r2
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	3301      	adds	r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b03      	cmp	r3, #3
 80004a8:	dd9a      	ble.n	80003e0 <button_reading+0xc>
			}
		}
	}
}
 80004aa:	bf00      	nop
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	200000e4 	.word	0x200000e4
 80004b8:	200000e8 	.word	0x200000e8
 80004bc:	2000001c 	.word	0x2000001c
 80004c0:	2000002c 	.word	0x2000002c
 80004c4:	200000dc 	.word	0x200000dc
 80004c8:	200000e0 	.word	0x200000e0
 80004cc:	200000f0 	.word	0x200000f0
 80004d0:	200000ec 	.word	0x200000ec

080004d4 <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d901      	bls.n	80004e8 <is_button_pressed+0x14>
 80004e4:	2300      	movs	r3, #0
 80004e6:	e00d      	b.n	8000504 <is_button_pressed+0x30>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	4a09      	ldr	r2, [pc, #36]	; (8000510 <is_button_pressed+0x3c>)
 80004ec:	5cd3      	ldrb	r3, [r2, r3]
			&& buttonBufferPrev[index] == BUTTON_IS_RELEASED);
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d106      	bne.n	8000500 <is_button_pressed+0x2c>
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	4a07      	ldr	r2, [pc, #28]	; (8000514 <is_button_pressed+0x40>)
 80004f6:	5cd3      	ldrb	r3, [r2, r3]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d101      	bne.n	8000500 <is_button_pressed+0x2c>
 80004fc:	2301      	movs	r3, #1
 80004fe:	e000      	b.n	8000502 <is_button_pressed+0x2e>
 8000500:	2300      	movs	r3, #0
 8000502:	b2db      	uxtb	r3, r3
}
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	200000dc 	.word	0x200000dc
 8000514:	200000e0 	.word	0x200000e0

08000518 <is_button_pressed_1s>:

// Check for button is pressed more than a second or not
unsigned char is_button_pressed_1s (unsigned char index ) {
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS ) return 0xff ;
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	2b03      	cmp	r3, #3
 8000526:	d901      	bls.n	800052c <is_button_pressed_1s+0x14>
 8000528:	23ff      	movs	r3, #255	; 0xff
 800052a:	e007      	b.n	800053c <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	4a06      	ldr	r2, [pc, #24]	; (8000548 <is_button_pressed_1s+0x30>)
 8000530:	5cd3      	ldrb	r3, [r2, r3]
 8000532:	2b01      	cmp	r3, #1
 8000534:	bf0c      	ite	eq
 8000536:	2301      	moveq	r3, #1
 8000538:	2300      	movne	r3, #0
 800053a:	b2db      	uxtb	r3, r3
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	200000ec 	.word	0x200000ec

0800054c <update_buffer>:
#include "led7seg.h"
#include "global.h"
static uint8_t led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
static uint8_t led_buffer[4] = {0};
//static uint8_t man_led_buffer[3] = {0};
void update_buffer() {
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
	if (light_time1 >= 10) {
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <update_buffer+0xac>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b09      	cmp	r3, #9
 8000556:	dd1b      	ble.n	8000590 <update_buffer+0x44>
		led_buffer[0] = light_time1 / 10;
 8000558:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <update_buffer+0xac>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a27      	ldr	r2, [pc, #156]	; (80005fc <update_buffer+0xb0>)
 800055e:	fb82 1203 	smull	r1, r2, r2, r3
 8000562:	1092      	asrs	r2, r2, #2
 8000564:	17db      	asrs	r3, r3, #31
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b25      	ldr	r3, [pc, #148]	; (8000600 <update_buffer+0xb4>)
 800056c:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = light_time1 % 10;
 800056e:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <update_buffer+0xac>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <update_buffer+0xb0>)
 8000574:	fb83 1302 	smull	r1, r3, r3, r2
 8000578:	1099      	asrs	r1, r3, #2
 800057a:	17d3      	asrs	r3, r2, #31
 800057c:	1ac9      	subs	r1, r1, r3
 800057e:	460b      	mov	r3, r1
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	440b      	add	r3, r1
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	1ad1      	subs	r1, r2, r3
 8000588:	b2ca      	uxtb	r2, r1
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <update_buffer+0xb4>)
 800058c:	705a      	strb	r2, [r3, #1]
 800058e:	e007      	b.n	80005a0 <update_buffer+0x54>
	} else {
		led_buffer[0] = 0;
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <update_buffer+0xb4>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = light_time1;
 8000596:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <update_buffer+0xac>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	b2da      	uxtb	r2, r3
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <update_buffer+0xb4>)
 800059e:	705a      	strb	r2, [r3, #1]
	}

	if (light_time >= 10) {
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <update_buffer+0xb8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b09      	cmp	r3, #9
 80005a6:	dd1b      	ble.n	80005e0 <update_buffer+0x94>
		led_buffer[2] = light_time / 10;
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <update_buffer+0xb8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a13      	ldr	r2, [pc, #76]	; (80005fc <update_buffer+0xb0>)
 80005ae:	fb82 1203 	smull	r1, r2, r2, r3
 80005b2:	1092      	asrs	r2, r2, #2
 80005b4:	17db      	asrs	r3, r3, #31
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <update_buffer+0xb4>)
 80005bc:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time % 10;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <update_buffer+0xb8>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <update_buffer+0xb0>)
 80005c4:	fb83 1302 	smull	r1, r3, r3, r2
 80005c8:	1099      	asrs	r1, r3, #2
 80005ca:	17d3      	asrs	r3, r2, #31
 80005cc:	1ac9      	subs	r1, r1, r3
 80005ce:	460b      	mov	r3, r1
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	440b      	add	r3, r1
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	1ad1      	subs	r1, r2, r3
 80005d8:	b2ca      	uxtb	r2, r1
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <update_buffer+0xb4>)
 80005dc:	70da      	strb	r2, [r3, #3]
	} else {
		led_buffer[2] = 0;
		led_buffer[3] = light_time;
	}
}
 80005de:	e007      	b.n	80005f0 <update_buffer+0xa4>
		led_buffer[2] = 0;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <update_buffer+0xb4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <update_buffer+0xb8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <update_buffer+0xb4>)
 80005ee:	70da      	strb	r2, [r3, #3]
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr
 80005f8:	20000010 	.word	0x20000010
 80005fc:	66666667 	.word	0x66666667
 8000600:	200000f8 	.word	0x200000f8
 8000604:	2000000c 	.word	0x2000000c

08000608 <led_init>:

void led_init() {
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
	GPIOB->BSRR = 0x3F00;
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <led_init+0x14>)
 800060e:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8000612:	611a      	str	r2, [r3, #16]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40010c00 	.word	0x40010c00

08000620 <update7SEG>:

void led_clear() {
	HAL_GPIO_WritePin(GPIOA, D1_Pin | D2_Pin | D3_Pin | D4_Pin | D5_Pin | D6_Pin, 1);
}

void update7SEG(int index){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b03      	cmp	r3, #3
 800062c:	d872      	bhi.n	8000714 <update7SEG+0xf4>
 800062e:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <update7SEG+0x14>)
 8000630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000634:	08000645 	.word	0x08000645
 8000638:	08000679 	.word	0x08000679
 800063c:	080006ad 	.word	0x080006ad
 8000640:	080006e1 	.word	0x080006e1
	switch(index) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, ON_7SEG); // turn on the first SEG
 8000644:	2201      	movs	r2, #1
 8000646:	2110      	movs	r1, #16
 8000648:	4835      	ldr	r0, [pc, #212]	; (8000720 <update7SEG+0x100>)
 800064a:	f001 f998 	bl	800197e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 800064e:	2200      	movs	r2, #0
 8000650:	2120      	movs	r1, #32
 8000652:	4833      	ldr	r0, [pc, #204]	; (8000720 <update7SEG+0x100>)
 8000654:	f001 f993 	bl	800197e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 8000658:	2200      	movs	r2, #0
 800065a:	2140      	movs	r1, #64	; 0x40
 800065c:	4830      	ldr	r0, [pc, #192]	; (8000720 <update7SEG+0x100>)
 800065e:	f001 f98e 	bl	800197e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 8000662:	2200      	movs	r2, #0
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	482e      	ldr	r0, [pc, #184]	; (8000720 <update7SEG+0x100>)
 8000668:	f001 f989 	bl	800197e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 800066c:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <update7SEG+0x104>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f859 	bl	8000728 <display7SEG>
			break;
 8000676:	e04e      	b.n	8000716 <update7SEG+0xf6>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 8000678:	2200      	movs	r2, #0
 800067a:	2110      	movs	r1, #16
 800067c:	4828      	ldr	r0, [pc, #160]	; (8000720 <update7SEG+0x100>)
 800067e:	f001 f97e 	bl	800197e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, ON_7SEG); // turn on the second SEG
 8000682:	2201      	movs	r2, #1
 8000684:	2120      	movs	r1, #32
 8000686:	4826      	ldr	r0, [pc, #152]	; (8000720 <update7SEG+0x100>)
 8000688:	f001 f979 	bl	800197e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 800068c:	2200      	movs	r2, #0
 800068e:	2140      	movs	r1, #64	; 0x40
 8000690:	4823      	ldr	r0, [pc, #140]	; (8000720 <update7SEG+0x100>)
 8000692:	f001 f974 	bl	800197e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 8000696:	2200      	movs	r2, #0
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	4821      	ldr	r0, [pc, #132]	; (8000720 <update7SEG+0x100>)
 800069c:	f001 f96f 	bl	800197e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 80006a0:	4b20      	ldr	r3, [pc, #128]	; (8000724 <update7SEG+0x104>)
 80006a2:	785b      	ldrb	r3, [r3, #1]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f83f 	bl	8000728 <display7SEG>
			break;
 80006aa:	e034      	b.n	8000716 <update7SEG+0xf6>
		case 2:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 80006ac:	2200      	movs	r2, #0
 80006ae:	2110      	movs	r1, #16
 80006b0:	481b      	ldr	r0, [pc, #108]	; (8000720 <update7SEG+0x100>)
 80006b2:	f001 f964 	bl	800197e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	4819      	ldr	r0, [pc, #100]	; (8000720 <update7SEG+0x100>)
 80006bc:	f001 f95f 	bl	800197e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, ON_7SEG); // turn on the third SEG
 80006c0:	2201      	movs	r2, #1
 80006c2:	2140      	movs	r1, #64	; 0x40
 80006c4:	4816      	ldr	r0, [pc, #88]	; (8000720 <update7SEG+0x100>)
 80006c6:	f001 f95a 	bl	800197e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 80006ca:	2200      	movs	r2, #0
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	4814      	ldr	r0, [pc, #80]	; (8000720 <update7SEG+0x100>)
 80006d0:	f001 f955 	bl	800197e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <update7SEG+0x104>)
 80006d6:	789b      	ldrb	r3, [r3, #2]
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f825 	bl	8000728 <display7SEG>
			break;
 80006de:	e01a      	b.n	8000716 <update7SEG+0xf6>
		case 3:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 80006e0:	2200      	movs	r2, #0
 80006e2:	2110      	movs	r1, #16
 80006e4:	480e      	ldr	r0, [pc, #56]	; (8000720 <update7SEG+0x100>)
 80006e6:	f001 f94a 	bl	800197e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 80006ea:	2200      	movs	r2, #0
 80006ec:	2120      	movs	r1, #32
 80006ee:	480c      	ldr	r0, [pc, #48]	; (8000720 <update7SEG+0x100>)
 80006f0:	f001 f945 	bl	800197e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 80006f4:	2200      	movs	r2, #0
 80006f6:	2140      	movs	r1, #64	; 0x40
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <update7SEG+0x100>)
 80006fa:	f001 f940 	bl	800197e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, ON_7SEG); // turn on the fourth SEG
 80006fe:	2201      	movs	r2, #1
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	4807      	ldr	r0, [pc, #28]	; (8000720 <update7SEG+0x100>)
 8000704:	f001 f93b 	bl	800197e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <update7SEG+0x104>)
 800070a:	78db      	ldrb	r3, [r3, #3]
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f80b 	bl	8000728 <display7SEG>
			break;
 8000712:	e000      	b.n	8000716 <update7SEG+0xf6>
		default:
			break;
 8000714:	bf00      	nop
	}
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40010800 	.word	0x40010800
 8000724:	200000f8 	.word	0x200000f8

08000728 <display7SEG>:
void display7SEG(int num) {
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	GPIOB->BRR= 0xFF;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <display7SEG+0x24>)
 8000732:	22ff      	movs	r2, #255	; 0xff
 8000734:	615a      	str	r2, [r3, #20]
	GPIOB->BSRR = led7seg[num];
 8000736:	4a06      	ldr	r2, [pc, #24]	; (8000750 <display7SEG+0x28>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4413      	add	r3, r2
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	4b03      	ldr	r3, [pc, #12]	; (800074c <display7SEG+0x24>)
 8000740:	611a      	str	r2, [r3, #16]
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	40010c00 	.word	0x40010c00
 8000750:	20000034 	.word	0x20000034

08000754 <displayMode>:

void displayMode() {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	update_buffer();
 8000758:	f7ff fef8 	bl	800054c <update_buffer>
	if (index_led >= 4) index_led = 0;
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <displayMode+0x2c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b03      	cmp	r3, #3
 8000762:	dd02      	ble.n	800076a <displayMode+0x16>
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <displayMode+0x2c>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
	update7SEG(index_led++);
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <displayMode+0x2c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	4903      	ldr	r1, [pc, #12]	; (8000780 <displayMode+0x2c>)
 8000772:	600a      	str	r2, [r1, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff53 	bl	8000620 <update7SEG>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000d4 	.word	0x200000d4

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000788:	f000 fdf8 	bl	800137c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078c:	f000 f82a 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f000 f8da 	bl	8000948 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000794:	f000 f862 	bl	800085c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000798:	f000 f8ac 	bl	80008f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 800079c:	480e      	ldr	r0, [pc, #56]	; (80007d8 <main+0x54>)
 800079e:	f001 fd89 	bl	80022b4 <HAL_TIM_Base_Start_IT>
  //led7SEG_init();
  GPIOA->BRR=0xFF;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <main+0x58>)
 80007a4:	22ff      	movs	r2, #255	; 0xff
 80007a6:	615a      	str	r2, [r3, #20]
  led_init();
 80007a8:	f7ff ff2e 	bl	8000608 <led_init>
  traffic_init();
 80007ac:	f000 fb80 	bl	8000eb0 <traffic_init>
  setTimer1(2);
 80007b0:	2002      	movs	r0, #2
 80007b2:	f000 f953 	bl	8000a5c <setTimer1>
  setTimer2(DURATION_1S);
 80007b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ba:	f000 f969 	bl	8000a90 <setTimer2>
  setTimer3(DURATION_1S);
 80007be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c2:	f000 f97f 	bl	8000ac4 <setTimer3>
  printf("The system is in MODE '1 - NORMAL_MODE' \r\n");
 80007c6:	4806      	ldr	r0, [pc, #24]	; (80007e0 <main+0x5c>)
 80007c8:	f002 fb60 	bl	8002e8c <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // display mode

	  traffic_light_processing();
 80007cc:	f000 fd5e 	bl	800128c <traffic_light_processing>
	  fsm_for_input_processing();
 80007d0:	f7ff fce2 	bl	8000198 <fsm_for_input_processing>
	  traffic_light_processing();
 80007d4:	e7fa      	b.n	80007cc <main+0x48>
 80007d6:	bf00      	nop
 80007d8:	20000174 	.word	0x20000174
 80007dc:	40010800 	.word	0x40010800
 80007e0:	08003840 	.word	0x08003840

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b090      	sub	sp, #64	; 0x40
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	2228      	movs	r2, #40	; 0x28
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fad4 	bl	8002da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000806:	2302      	movs	r3, #2
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080a:	2301      	movs	r3, #1
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080e:	2310      	movs	r3, #16
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000812:	2300      	movs	r3, #0
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 0318 	add.w	r3, r7, #24
 800081a:	4618      	mov	r0, r3
 800081c:	f001 f8e0 	bl	80019e0 <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000826:	f000 f8fd 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fb4c 	bl	8001ee0 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800084e:	f000 f8e9 	bl	8000a24 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3740      	adds	r7, #64	; 0x40
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_TIM2_Init+0x94>)
 800087a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800087e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_TIM2_Init+0x94>)
 8000882:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000886:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_TIM2_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_TIM2_Init+0x94>)
 8000890:	2209      	movs	r2, #9
 8000892:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_TIM2_Init+0x94>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_TIM2_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a0:	4813      	ldr	r0, [pc, #76]	; (80008f0 <MX_TIM2_Init+0x94>)
 80008a2:	f001 fcb7 	bl	8002214 <HAL_TIM_Base_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008ac:	f000 f8ba 	bl	8000a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	4619      	mov	r1, r3
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <MX_TIM2_Init+0x94>)
 80008be:	f001 fe4d 	bl	800255c <HAL_TIM_ConfigClockSource>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008c8:	f000 f8ac 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_TIM2_Init+0x94>)
 80008da:	f002 f815 	bl	8002908 <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008e4:	f000 f89e 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000174 	.word	0x20000174

080008f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <MX_USART1_UART_Init+0x50>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART1_UART_Init+0x4c>)
 800092c:	f002 f856 	bl	80029dc <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000936:	f000 f875 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000130 	.word	0x20000130
 8000944:	40013800 	.word	0x40013800

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <MX_GPIO_Init+0xd0>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a2d      	ldr	r2, [pc, #180]	; (8000a18 <MX_GPIO_Init+0xd0>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <MX_GPIO_Init+0xd0>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <MX_GPIO_Init+0xd0>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a27      	ldr	r2, [pc, #156]	; (8000a18 <MX_GPIO_Init+0xd0>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <MX_GPIO_Init+0xd0>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0308 	and.w	r3, r3, #8
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	21f0      	movs	r1, #240	; 0xf0
 8000990:	4822      	ldr	r0, [pc, #136]	; (8000a1c <MX_GPIO_Init+0xd4>)
 8000992:	f000 fff4 	bl	800197e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_Pin|D4_Pin|D5_Pin|D6_Pin
 8000996:	2200      	movs	r2, #0
 8000998:	f643 71f8 	movw	r1, #16376	; 0x3ff8
 800099c:	4820      	ldr	r0, [pc, #128]	; (8000a20 <MX_GPIO_Init+0xd8>)
 800099e:	f000 ffee 	bl	800197e <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |GPIO_PIN_7|D1_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 80009a2:	23f0      	movs	r3, #240	; 0xf0
 80009a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2302      	movs	r3, #2
 80009b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	4619      	mov	r1, r3
 80009b8:	4818      	ldr	r0, [pc, #96]	; (8000a1c <MX_GPIO_Init+0xd4>)
 80009ba:	f000 fe4f 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin;
 80009be:	2307      	movs	r3, #7
 80009c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	4619      	mov	r1, r3
 80009d0:	4813      	ldr	r0, [pc, #76]	; (8000a20 <MX_GPIO_Init+0xd8>)
 80009d2:	f000 fe43 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D4_Pin D5_Pin D6_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           PB7 D1_Pin D2_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D4_Pin|D5_Pin|D6_Pin
 80009d6:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 80009da:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |GPIO_PIN_7|D1_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2302      	movs	r3, #2
 80009e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	4619      	mov	r1, r3
 80009ee:	480c      	ldr	r0, [pc, #48]	; (8000a20 <MX_GPIO_Init+0xd8>)
 80009f0:	f000 fe34 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin CONFIRM_Pin RESET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|CONFIRM_Pin|RESET_Pin;
 80009f4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4619      	mov	r1, r3
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_GPIO_Init+0xd4>)
 8000a0a:	f000 fe27 	bl	800165c <HAL_GPIO_Init>

}
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010800 	.word	0x40010800
 8000a20:	40010c00 	.word	0x40010c00

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <_write>:
#include "output_display.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *ptr, int len)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	68b9      	ldr	r1, [r7, #8]
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <_write+0x28>)
 8000a48:	f002 f815 	bl	8002a76 <HAL_UART_Transmit>
	return len;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000130 	.word	0x20000130

08000a5c <setTimer1>:
int timer3_counter = 0;
int timer4_counter = 0;
int timer5_counter = 0;

int TIMER_CYCLE = 10; // 10ms
void setTimer1(int duration) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <setTimer1+0x28>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a6e:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <setTimer1+0x2c>)
 8000a70:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <setTimer1+0x30>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000040 	.word	0x20000040
 8000a88:	20000110 	.word	0x20000110
 8000a8c:	200000fc 	.word	0x200000fc

08000a90 <setTimer2>:
void setTimer2(int duration) {
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <setTimer2+0x28>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000aa2:	4a06      	ldr	r2, [pc, #24]	; (8000abc <setTimer2+0x2c>)
 8000aa4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <setTimer2+0x30>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000040 	.word	0x20000040
 8000abc:	20000114 	.word	0x20000114
 8000ac0:	20000100 	.word	0x20000100

08000ac4 <setTimer3>:
void setTimer3(int duration) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <setTimer3+0x28>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ad6:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <setTimer3+0x2c>)
 8000ad8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <setTimer3+0x30>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000040 	.word	0x20000040
 8000af0:	20000118 	.word	0x20000118
 8000af4:	20000104 	.word	0x20000104

08000af8 <timerRun>:
void setTimer5(int duration) {
	timer5_counter = duration / TIMER_CYCLE;
	timer5_flag = 0;
}

void timerRun() {
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000afc:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <timerRun+0xac>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	dd0b      	ble.n	8000b1c <timerRun+0x24>
		timer1_counter--;
 8000b04:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <timerRun+0xac>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	4a26      	ldr	r2, [pc, #152]	; (8000ba4 <timerRun+0xac>)
 8000b0c:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <timerRun+0xac>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	dc02      	bgt.n	8000b1c <timerRun+0x24>
			timer1_flag = 1;
 8000b16:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <timerRun+0xb0>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <timerRun+0xb4>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	dd0b      	ble.n	8000b3c <timerRun+0x44>
		timer2_counter--;
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <timerRun+0xb4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	4a20      	ldr	r2, [pc, #128]	; (8000bac <timerRun+0xb4>)
 8000b2c:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <timerRun+0xb4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	dc02      	bgt.n	8000b3c <timerRun+0x44>
			timer2_flag = 1;
 8000b36:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <timerRun+0xb8>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <timerRun+0xbc>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	dd0b      	ble.n	8000b5c <timerRun+0x64>
		timer3_counter--;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <timerRun+0xbc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	4a1a      	ldr	r2, [pc, #104]	; (8000bb4 <timerRun+0xbc>)
 8000b4c:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <timerRun+0xbc>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	dc02      	bgt.n	8000b5c <timerRun+0x64>
			timer3_flag = 1;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <timerRun+0xc0>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <timerRun+0xc4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	dd0b      	ble.n	8000b7c <timerRun+0x84>
		timer4_counter--;
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <timerRun+0xc4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <timerRun+0xc4>)
 8000b6c:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <timerRun+0xc4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	dc02      	bgt.n	8000b7c <timerRun+0x84>
			timer4_flag = 1;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <timerRun+0xc8>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <timerRun+0xcc>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	dd0b      	ble.n	8000b9c <timerRun+0xa4>
		timer5_counter--;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <timerRun+0xcc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <timerRun+0xcc>)
 8000b8c:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <timerRun+0xcc>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	dc02      	bgt.n	8000b9c <timerRun+0xa4>
			timer5_flag = 1;
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <timerRun+0xd0>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	20000110 	.word	0x20000110
 8000ba8:	200000fc 	.word	0x200000fc
 8000bac:	20000114 	.word	0x20000114
 8000bb0:	20000100 	.word	0x20000100
 8000bb4:	20000118 	.word	0x20000118
 8000bb8:	20000104 	.word	0x20000104
 8000bbc:	2000011c 	.word	0x2000011c
 8000bc0:	20000108 	.word	0x20000108
 8000bc4:	20000120 	.word	0x20000120
 8000bc8:	2000010c 	.word	0x2000010c

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6193      	str	r3, [r2, #24]
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_MspInit+0x5c>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	61d3      	str	r3, [r2, #28]
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_MspInit+0x5c>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_MspInit+0x60>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_MspInit+0x60>)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000

08000c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c40:	d113      	bne.n	8000c6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_TIM_Base_MspInit+0x44>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <HAL_TIM_Base_MspInit+0x44>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	61d3      	str	r3, [r2, #28]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_TIM_Base_MspInit+0x44>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	201c      	movs	r0, #28
 8000c60:	f000 fcc5 	bl	80015ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c64:	201c      	movs	r0, #28
 8000c66:	f000 fcde 	bl	8001626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <HAL_UART_MspInit+0x8c>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d131      	bne.n	8000cfc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <HAL_UART_MspInit+0x90>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a1a      	ldr	r2, [pc, #104]	; (8000d08 <HAL_UART_MspInit+0x90>)
 8000c9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_UART_MspInit+0x90>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_UART_MspInit+0x90>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <HAL_UART_MspInit+0x90>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_UART_MspInit+0x90>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ccc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480b      	ldr	r0, [pc, #44]	; (8000d0c <HAL_UART_MspInit+0x94>)
 8000cde:	f000 fcbd 	bl	800165c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_UART_MspInit+0x94>)
 8000cf8:	f000 fcb0 	bl	800165c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40013800 	.word	0x40013800
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010800 	.word	0x40010800

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <NMI_Handler+0x4>

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr

08000d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d56:	f000 fb57 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <TIM2_IRQHandler+0x10>)
 8000d66:	f001 faf1 	bl	800234c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000174 	.word	0x20000174

08000d74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e00a      	b.n	8000d9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d86:	f3af 8000 	nop.w
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	b2ca      	uxtb	r2, r1
 8000d94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf0      	blt.n	8000d86 <_read+0x12>
	}

return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_close>:
	}
	return len;
}

int _close(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	return -1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dd4:	605a      	str	r2, [r3, #4]
	return 0;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <_isatty>:

int _isatty(int file)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
	return 1;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr

08000df6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b085      	sub	sp, #20
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
	return 0;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
	...

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f001 ff84 	bl	8002d4c <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20002800 	.word	0x20002800
 8000e70:	00000400 	.word	0x00000400
 8000e74:	20000124 	.word	0x20000124
 8000e78:	200001d0 	.word	0x200001d0

08000e7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "software_timer.h"
#include "led7seg.h"
#include "global.h"

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e98:	d103      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000e9a:	f7ff fa9b 	bl	80003d4 <button_reading>
		displayMode();
 8000e9e:	f7ff fc59 	bl	8000754 <displayMode>
	}
	timerRun();
 8000ea2:	f7ff fe29 	bl	8000af8 <timerRun>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <traffic_init>:
#include "input_processing.h"
#include "global.h"
#include "led7seg.h"
#include "software_timer.h"

void traffic_init() {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	light_time = man_green_time;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <traffic_init+0x30>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <traffic_init+0x34>)
 8000eba:	6013      	str	r3, [r2, #0]
	light_time1 = man_red_time;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <traffic_init+0x38>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <traffic_init+0x3c>)
 8000ec2:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eca:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <traffic_init+0x40>)
 8000ecc:	f000 fd57 	bl	800197e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <traffic_init+0x40>)
 8000ed8:	f000 fd51 	bl	800197e <HAL_GPIO_WritePin>
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	2000000c 	.word	0x2000000c
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000010 	.word	0x20000010
 8000ef0:	40010c00 	.word	0x40010c00

08000ef4 <updateTempTime>:

void updateTempTime() {
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
	switch(status) {
 8000ef8:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <updateTempTime+0x94>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d83a      	bhi.n	8000f78 <updateTempTime+0x84>
 8000f02:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <updateTempTime+0x14>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f79 	.word	0x08000f79
 8000f0c:	08000f79 	.word	0x08000f79
 8000f10:	08000f79 	.word	0x08000f79
 8000f14:	08000f79 	.word	0x08000f79
 8000f18:	08000f25 	.word	0x08000f25
 8000f1c:	08000f41 	.word	0x08000f41
 8000f20:	08000f5d 	.word	0x08000f5d
		case NORMAL_MODE:
			break;
		case MAN_RED_MODE:
			//light_time = man_red_time;
			if (temp_value >= 99) temp_value = 0;
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <updateTempTime+0x98>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b62      	cmp	r3, #98	; 0x62
 8000f2a:	dd03      	ble.n	8000f34 <updateTempTime+0x40>
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <updateTempTime+0x98>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 8000f32:	e021      	b.n	8000f78 <updateTempTime+0x84>
			else temp_value++;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <updateTempTime+0x98>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <updateTempTime+0x98>)
 8000f3c:	6013      	str	r3, [r2, #0]
			break;
 8000f3e:	e01b      	b.n	8000f78 <updateTempTime+0x84>
		case MAN_AMBER_MODE:
			//temp_value = temp_value;
			if (temp_value >= 99) temp_value = 0;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <updateTempTime+0x98>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b62      	cmp	r3, #98	; 0x62
 8000f46:	dd03      	ble.n	8000f50 <updateTempTime+0x5c>
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <updateTempTime+0x98>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 8000f4e:	e013      	b.n	8000f78 <updateTempTime+0x84>
			else temp_value++;
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <updateTempTime+0x98>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <updateTempTime+0x98>)
 8000f58:	6013      	str	r3, [r2, #0]
			break;
 8000f5a:	e00d      	b.n	8000f78 <updateTempTime+0x84>
		case MAN_GREEN_MODE:
			//light_time = man_green_time;
			if (temp_value >= 99) temp_value = 0;
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <updateTempTime+0x98>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b62      	cmp	r3, #98	; 0x62
 8000f62:	dd03      	ble.n	8000f6c <updateTempTime+0x78>
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <updateTempTime+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 8000f6a:	e004      	b.n	8000f76 <updateTempTime+0x82>
			else temp_value++;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <updateTempTime+0x98>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <updateTempTime+0x98>)
 8000f74:	6013      	str	r3, [r2, #0]
			break;
 8000f76:	bf00      	nop
	}
	light_time = temp_value;
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <updateTempTime+0x98>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <updateTempTime+0x9c>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000014 	.word	0x20000014
 8000f8c:	200000d0 	.word	0x200000d0
 8000f90:	2000000c 	.word	0x2000000c

08000f94 <confirmAdjustedTime>:

void confirmAdjustedTime() {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	printf("Confirmed adjust time!\r\n");
 8000f98:	481b      	ldr	r0, [pc, #108]	; (8001008 <confirmAdjustedTime+0x74>)
 8000f9a:	f001 ff77 	bl	8002e8c <puts>
	switch(status) {
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <confirmAdjustedTime+0x78>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	2b06      	cmp	r3, #6
 8000fa6:	d82c      	bhi.n	8001002 <confirmAdjustedTime+0x6e>
 8000fa8:	a201      	add	r2, pc, #4	; (adr r2, 8000fb0 <confirmAdjustedTime+0x1c>)
 8000faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fae:	bf00      	nop
 8000fb0:	08001003 	.word	0x08001003
 8000fb4:	08001003 	.word	0x08001003
 8000fb8:	08001003 	.word	0x08001003
 8000fbc:	08001003 	.word	0x08001003
 8000fc0:	08000fcd 	.word	0x08000fcd
 8000fc4:	08000fdf 	.word	0x08000fdf
 8000fc8:	08000ff1 	.word	0x08000ff1
		case NORMAL_MODE:
			//temp_value = light_time;
			break;
		case MAN_RED_MODE:
			man_red_time = temp_value;
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <confirmAdjustedTime+0x7c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a10      	ldr	r2, [pc, #64]	; (8001014 <confirmAdjustedTime+0x80>)
 8000fd2:	6013      	str	r3, [r2, #0]
			light_time = man_red_time;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <confirmAdjustedTime+0x80>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <confirmAdjustedTime+0x84>)
 8000fda:	6013      	str	r3, [r2, #0]
			break;
 8000fdc:	e012      	b.n	8001004 <confirmAdjustedTime+0x70>
		case MAN_AMBER_MODE:
			man_amber_time = temp_value;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <confirmAdjustedTime+0x7c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <confirmAdjustedTime+0x88>)
 8000fe4:	6013      	str	r3, [r2, #0]
			light_time = man_amber_time;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <confirmAdjustedTime+0x88>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <confirmAdjustedTime+0x84>)
 8000fec:	6013      	str	r3, [r2, #0]
			break;
 8000fee:	e009      	b.n	8001004 <confirmAdjustedTime+0x70>
		case MAN_GREEN_MODE:
			man_green_time = temp_value;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <confirmAdjustedTime+0x7c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <confirmAdjustedTime+0x8c>)
 8000ff6:	6013      	str	r3, [r2, #0]
			light_time = man_green_time;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <confirmAdjustedTime+0x8c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <confirmAdjustedTime+0x84>)
 8000ffe:	6013      	str	r3, [r2, #0]
			break;
 8001000:	e000      	b.n	8001004 <confirmAdjustedTime+0x70>
		default:
			break;
 8001002:	bf00      	nop
	}
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	0800386c 	.word	0x0800386c
 800100c:	20000014 	.word	0x20000014
 8001010:	200000d0 	.word	0x200000d0
 8001014:	20000000 	.word	0x20000000
 8001018:	2000000c 	.word	0x2000000c
 800101c:	20000004 	.word	0x20000004
 8001020:	20000008 	.word	0x20000008

08001024 <resetToTheDefaultSetting>:

void resetToTheDefaultSetting() {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	// default settings
	printf("All settings have been reset!\r\n");
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <resetToTheDefaultSetting+0x38>)
 800102a:	f001 ff2f 	bl	8002e8c <puts>
	printf("The system is in MODE '1 - NORMAL_MODE' \r\n");
 800102e:	480c      	ldr	r0, [pc, #48]	; (8001060 <resetToTheDefaultSetting+0x3c>)
 8001030:	f001 ff2c 	bl	8002e8c <puts>
	light_time = GREEN_TIME / 100;
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <resetToTheDefaultSetting+0x40>)
 8001036:	2203      	movs	r2, #3
 8001038:	601a      	str	r2, [r3, #0]
	light_time1 = RED_TIME / 100;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <resetToTheDefaultSetting+0x44>)
 800103c:	2205      	movs	r2, #5
 800103e:	601a      	str	r2, [r3, #0]
	status = NORMAL_MODE;
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <resetToTheDefaultSetting+0x48>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
	led_status = RED_GREEN;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <resetToTheDefaultSetting+0x4c>)
 8001048:	2214      	movs	r2, #20
 800104a:	601a      	str	r2, [r3, #0]
	index_led = 0;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <resetToTheDefaultSetting+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
	temp_value = 0;
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <resetToTheDefaultSetting+0x54>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	08003884 	.word	0x08003884
 8001060:	080038a4 	.word	0x080038a4
 8001064:	2000000c 	.word	0x2000000c
 8001068:	20000010 	.word	0x20000010
 800106c:	20000014 	.word	0x20000014
 8001070:	20000018 	.word	0x20000018
 8001074:	200000d4 	.word	0x200000d4
 8001078:	200000d0 	.word	0x200000d0

0800107c <normal_running_traffic_light>:

void normal_running_traffic_light() {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	switch(led_status) {
 8001080:	4b7a      	ldr	r3, [pc, #488]	; (800126c <normal_running_traffic_light+0x1f0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3b14      	subs	r3, #20
 8001086:	2b03      	cmp	r3, #3
 8001088:	f200 80e4 	bhi.w	8001254 <normal_running_traffic_light+0x1d8>
 800108c:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <normal_running_traffic_light+0x18>)
 800108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001092:	bf00      	nop
 8001094:	080010a5 	.word	0x080010a5
 8001098:	08001123 	.word	0x08001123
 800109c:	0800118d 	.word	0x0800118d
 80010a0:	080011ed 	.word	0x080011ed
		case RED_GREEN:
			if (timer3_flag == 1) {
 80010a4:	4b72      	ldr	r3, [pc, #456]	; (8001270 <normal_running_traffic_light+0x1f4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 80d5 	bne.w	8001258 <normal_running_traffic_light+0x1dc>
				led_init();
 80010ae:	f7ff faab 	bl	8000608 <led_init>
				HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b8:	486e      	ldr	r0, [pc, #440]	; (8001274 <normal_running_traffic_light+0x1f8>)
 80010ba:	f000 fc60 	bl	800197e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c4:	486b      	ldr	r0, [pc, #428]	; (8001274 <normal_running_traffic_light+0x1f8>)
 80010c6:	f000 fc5a 	bl	800197e <HAL_GPIO_WritePin>

				light_time--;
 80010ca:	4b6b      	ldr	r3, [pc, #428]	; (8001278 <normal_running_traffic_light+0x1fc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	4a69      	ldr	r2, [pc, #420]	; (8001278 <normal_running_traffic_light+0x1fc>)
 80010d2:	6013      	str	r3, [r2, #0]
				light_time1--;
 80010d4:	4b69      	ldr	r3, [pc, #420]	; (800127c <normal_running_traffic_light+0x200>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3b01      	subs	r3, #1
 80010da:	4a68      	ldr	r2, [pc, #416]	; (800127c <normal_running_traffic_light+0x200>)
 80010dc:	6013      	str	r3, [r2, #0]
				if (light_time == 0 || light_time1 == 0) {
 80010de:	4b66      	ldr	r3, [pc, #408]	; (8001278 <normal_running_traffic_light+0x1fc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <normal_running_traffic_light+0x72>
 80010e6:	4b65      	ldr	r3, [pc, #404]	; (800127c <normal_running_traffic_light+0x200>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d114      	bne.n	8001118 <normal_running_traffic_light+0x9c>
					led_status = RED_AMBER;
 80010ee:	4b5f      	ldr	r3, [pc, #380]	; (800126c <normal_running_traffic_light+0x1f0>)
 80010f0:	2215      	movs	r2, #21
 80010f2:	601a      	str	r2, [r3, #0]
					light_time = man_amber_time; // Road 2
 80010f4:	4b62      	ldr	r3, [pc, #392]	; (8001280 <normal_running_traffic_light+0x204>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a5f      	ldr	r2, [pc, #380]	; (8001278 <normal_running_traffic_light+0x1fc>)
 80010fa:	6013      	str	r3, [r2, #0]
					led_init();
 80010fc:	f7ff fa84 	bl	8000608 <led_init>
					//light_time1 = man_red_time; // Road 1
					HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001106:	485b      	ldr	r0, [pc, #364]	; (8001274 <normal_running_traffic_light+0x1f8>)
 8001108:	f000 fc39 	bl	800197e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D5_Pin, 0); // On ROAD 2, turn on the AMBER light. 
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001112:	4858      	ldr	r0, [pc, #352]	; (8001274 <normal_running_traffic_light+0x1f8>)
 8001114:	f000 fc33 	bl	800197e <HAL_GPIO_WritePin>
				}
				setTimer3(DURATION_1S);
 8001118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800111c:	f7ff fcd2 	bl	8000ac4 <setTimer3>
			}
			break;
 8001120:	e09a      	b.n	8001258 <normal_running_traffic_light+0x1dc>
		case RED_AMBER:
				if (timer3_flag == 1) {
 8001122:	4b53      	ldr	r3, [pc, #332]	; (8001270 <normal_running_traffic_light+0x1f4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	f040 8098 	bne.w	800125c <normal_running_traffic_light+0x1e0>
					light_time--;
 800112c:	4b52      	ldr	r3, [pc, #328]	; (8001278 <normal_running_traffic_light+0x1fc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3b01      	subs	r3, #1
 8001132:	4a51      	ldr	r2, [pc, #324]	; (8001278 <normal_running_traffic_light+0x1fc>)
 8001134:	6013      	str	r3, [r2, #0]
					light_time1--;
 8001136:	4b51      	ldr	r3, [pc, #324]	; (800127c <normal_running_traffic_light+0x200>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3b01      	subs	r3, #1
 800113c:	4a4f      	ldr	r2, [pc, #316]	; (800127c <normal_running_traffic_light+0x200>)
 800113e:	6013      	str	r3, [r2, #0]
					if (!light_time || !light_time1) {
 8001140:	4b4d      	ldr	r3, [pc, #308]	; (8001278 <normal_running_traffic_light+0x1fc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <normal_running_traffic_light+0xd4>
 8001148:	4b4c      	ldr	r3, [pc, #304]	; (800127c <normal_running_traffic_light+0x200>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d118      	bne.n	8001182 <normal_running_traffic_light+0x106>
						led_status = GREEN_RED;
 8001150:	4b46      	ldr	r3, [pc, #280]	; (800126c <normal_running_traffic_light+0x1f0>)
 8001152:	2216      	movs	r2, #22
 8001154:	601a      	str	r2, [r3, #0]
						light_time = man_red_time; // Road 2
 8001156:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <normal_running_traffic_light+0x208>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a47      	ldr	r2, [pc, #284]	; (8001278 <normal_running_traffic_light+0x1fc>)
 800115c:	6013      	str	r3, [r2, #0]
						light_time1 = man_green_time; // Road 1
 800115e:	4b4a      	ldr	r3, [pc, #296]	; (8001288 <normal_running_traffic_light+0x20c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a46      	ldr	r2, [pc, #280]	; (800127c <normal_running_traffic_light+0x200>)
 8001164:	6013      	str	r3, [r2, #0]

						led_init();
 8001166:	f7ff fa4f 	bl	8000608 <led_init>
						HAL_GPIO_WritePin(GPIOB, D4_Pin, 0); // On ROAD 1, turn on the RED light. 
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001170:	4840      	ldr	r0, [pc, #256]	; (8001274 <normal_running_traffic_light+0x1f8>)
 8001172:	f000 fc04 	bl	800197e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, D3_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117c:	483d      	ldr	r0, [pc, #244]	; (8001274 <normal_running_traffic_light+0x1f8>)
 800117e:	f000 fbfe 	bl	800197e <HAL_GPIO_WritePin>
					}
					setTimer3(DURATION_1S);
 8001182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001186:	f7ff fc9d 	bl	8000ac4 <setTimer3>
				}

			break;
 800118a:	e067      	b.n	800125c <normal_running_traffic_light+0x1e0>
		case GREEN_RED:
			if (timer3_flag == 1) {
 800118c:	4b38      	ldr	r3, [pc, #224]	; (8001270 <normal_running_traffic_light+0x1f4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d165      	bne.n	8001260 <normal_running_traffic_light+0x1e4>

				light_time--;
 8001194:	4b38      	ldr	r3, [pc, #224]	; (8001278 <normal_running_traffic_light+0x1fc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3b01      	subs	r3, #1
 800119a:	4a37      	ldr	r2, [pc, #220]	; (8001278 <normal_running_traffic_light+0x1fc>)
 800119c:	6013      	str	r3, [r2, #0]
				light_time1--;
 800119e:	4b37      	ldr	r3, [pc, #220]	; (800127c <normal_running_traffic_light+0x200>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	4a35      	ldr	r2, [pc, #212]	; (800127c <normal_running_traffic_light+0x200>)
 80011a6:	6013      	str	r3, [r2, #0]
				if (!light_time || !light_time1) {
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <normal_running_traffic_light+0x1fc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <normal_running_traffic_light+0x13c>
 80011b0:	4b32      	ldr	r3, [pc, #200]	; (800127c <normal_running_traffic_light+0x200>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d114      	bne.n	80011e2 <normal_running_traffic_light+0x166>
					led_status = AMBER_RED;
 80011b8:	4b2c      	ldr	r3, [pc, #176]	; (800126c <normal_running_traffic_light+0x1f0>)
 80011ba:	2217      	movs	r2, #23
 80011bc:	601a      	str	r2, [r3, #0]
					light_time1 = man_amber_time; // Road 1
 80011be:	4b30      	ldr	r3, [pc, #192]	; (8001280 <normal_running_traffic_light+0x204>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a2e      	ldr	r2, [pc, #184]	; (800127c <normal_running_traffic_light+0x200>)
 80011c4:	6013      	str	r3, [r2, #0]
					led_init();
 80011c6:	f7ff fa1f 	bl	8000608 <led_init>
					HAL_GPIO_WritePin(GPIOB, D2_Pin, 0); // On ROAD 1, turn on the RED light. 
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d0:	4828      	ldr	r0, [pc, #160]	; (8001274 <normal_running_traffic_light+0x1f8>)
 80011d2:	f000 fbd4 	bl	800197e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D4_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011dc:	4825      	ldr	r0, [pc, #148]	; (8001274 <normal_running_traffic_light+0x1f8>)
 80011de:	f000 fbce 	bl	800197e <HAL_GPIO_WritePin>
				}
				setTimer3(DURATION_1S);
 80011e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e6:	f7ff fc6d 	bl	8000ac4 <setTimer3>
			}

			break;
 80011ea:	e039      	b.n	8001260 <normal_running_traffic_light+0x1e4>
		case AMBER_RED:
			if (timer3_flag == 1) {
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <normal_running_traffic_light+0x1f4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d137      	bne.n	8001264 <normal_running_traffic_light+0x1e8>
				light_time--;
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <normal_running_traffic_light+0x1fc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <normal_running_traffic_light+0x1fc>)
 80011fc:	6013      	str	r3, [r2, #0]
					light_time1--;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <normal_running_traffic_light+0x200>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3b01      	subs	r3, #1
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <normal_running_traffic_light+0x200>)
 8001206:	6013      	str	r3, [r2, #0]
				if (!light_time || !light_time1) {
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <normal_running_traffic_light+0x1fc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <normal_running_traffic_light+0x19c>
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <normal_running_traffic_light+0x200>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d118      	bne.n	800124a <normal_running_traffic_light+0x1ce>
					led_status = RED_GREEN;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <normal_running_traffic_light+0x1f0>)
 800121a:	2214      	movs	r2, #20
 800121c:	601a      	str	r2, [r3, #0]
					light_time = man_green_time; // Road 2
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <normal_running_traffic_light+0x20c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <normal_running_traffic_light+0x1fc>)
 8001224:	6013      	str	r3, [r2, #0]
					light_time1 = man_red_time; // Road 1
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <normal_running_traffic_light+0x208>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a14      	ldr	r2, [pc, #80]	; (800127c <normal_running_traffic_light+0x200>)
 800122c:	6013      	str	r3, [r2, #0]
					led_init();
 800122e:	f7ff f9eb 	bl	8000608 <led_init>
					HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001238:	480e      	ldr	r0, [pc, #56]	; (8001274 <normal_running_traffic_light+0x1f8>)
 800123a:	f000 fba0 	bl	800197e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001244:	480b      	ldr	r0, [pc, #44]	; (8001274 <normal_running_traffic_light+0x1f8>)
 8001246:	f000 fb9a 	bl	800197e <HAL_GPIO_WritePin>
				}
				setTimer3(DURATION_1S);
 800124a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124e:	f7ff fc39 	bl	8000ac4 <setTimer3>
			}
			break;
 8001252:	e007      	b.n	8001264 <normal_running_traffic_light+0x1e8>
		default:
			break;
 8001254:	bf00      	nop
 8001256:	e006      	b.n	8001266 <normal_running_traffic_light+0x1ea>
			break;
 8001258:	bf00      	nop
 800125a:	e004      	b.n	8001266 <normal_running_traffic_light+0x1ea>
			break;
 800125c:	bf00      	nop
 800125e:	e002      	b.n	8001266 <normal_running_traffic_light+0x1ea>
			break;
 8001260:	bf00      	nop
 8001262:	e000      	b.n	8001266 <normal_running_traffic_light+0x1ea>
			break;
 8001264:	bf00      	nop
	}
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000018 	.word	0x20000018
 8001270:	20000104 	.word	0x20000104
 8001274:	40010c00 	.word	0x40010c00
 8001278:	2000000c 	.word	0x2000000c
 800127c:	20000010 	.word	0x20000010
 8001280:	20000004 	.word	0x20000004
 8001284:	20000000 	.word	0x20000000
 8001288:	20000008 	.word	0x20000008

0800128c <traffic_light_processing>:

void traffic_light_processing() {
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	switch(status) {
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <traffic_light_processing+0x98>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3b01      	subs	r3, #1
 8001296:	2b06      	cmp	r3, #6
 8001298:	d842      	bhi.n	8001320 <traffic_light_processing+0x94>
 800129a:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <traffic_light_processing+0x14>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	080012bd 	.word	0x080012bd
 80012a4:	080012c3 	.word	0x080012c3
 80012a8:	080012df 	.word	0x080012df
 80012ac:	080012fb 	.word	0x080012fb
 80012b0:	080012c3 	.word	0x080012c3
 80012b4:	080012df 	.word	0x080012df
 80012b8:	080012fb 	.word	0x080012fb
		case NORMAL_MODE:
			normal_running_traffic_light();
 80012bc:	f7ff fede 	bl	800107c <normal_running_traffic_light>
			break;
 80012c0:	e02e      	b.n	8001320 <traffic_light_processing+0x94>
		case RED_MODE: case MAN_RED_MODE:
			if (timer1_flag == 1) {
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <traffic_light_processing+0x9c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d125      	bne.n	8001316 <traffic_light_processing+0x8a>
				// Toggle RED
				HAL_GPIO_TogglePin(GPIOB, D4_Pin | D1_Pin);
 80012ca:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80012ce:	4817      	ldr	r0, [pc, #92]	; (800132c <traffic_light_processing+0xa0>)
 80012d0:	f000 fb6d 	bl	80019ae <HAL_GPIO_TogglePin>
				setTimer1(DURATION_HALF_OF_SECOND);
 80012d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d8:	f7ff fbc0 	bl	8000a5c <setTimer1>
			}
			break;
 80012dc:	e01b      	b.n	8001316 <traffic_light_processing+0x8a>
		case AMBER_MODE: case MAN_AMBER_MODE:
			if (timer1_flag == 1) {
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <traffic_light_processing+0x9c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d119      	bne.n	800131a <traffic_light_processing+0x8e>
				// Toggle AMBER
				HAL_GPIO_TogglePin(GPIOB, D2_Pin | D5_Pin);
 80012e6:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80012ea:	4810      	ldr	r0, [pc, #64]	; (800132c <traffic_light_processing+0xa0>)
 80012ec:	f000 fb5f 	bl	80019ae <HAL_GPIO_TogglePin>
				setTimer1(DURATION_HALF_OF_SECOND);
 80012f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f4:	f7ff fbb2 	bl	8000a5c <setTimer1>
			}
			break;
 80012f8:	e00f      	b.n	800131a <traffic_light_processing+0x8e>
		case GREEN_MODE: case MAN_GREEN_MODE:
			if (timer1_flag == 1) {
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <traffic_light_processing+0x9c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d10d      	bne.n	800131e <traffic_light_processing+0x92>
				// Toggle GREEN
				HAL_GPIO_TogglePin(GPIOB, D3_Pin | D6_Pin);
 8001302:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8001306:	4809      	ldr	r0, [pc, #36]	; (800132c <traffic_light_processing+0xa0>)
 8001308:	f000 fb51 	bl	80019ae <HAL_GPIO_TogglePin>
				setTimer1(DURATION_HALF_OF_SECOND);
 800130c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001310:	f7ff fba4 	bl	8000a5c <setTimer1>
			}
			break;
 8001314:	e003      	b.n	800131e <traffic_light_processing+0x92>
			break;
 8001316:	bf00      	nop
 8001318:	e002      	b.n	8001320 <traffic_light_processing+0x94>
			break;
 800131a:	bf00      	nop
 800131c:	e000      	b.n	8001320 <traffic_light_processing+0x94>
			break;
 800131e:	bf00      	nop
	}
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000014 	.word	0x20000014
 8001328:	200000fc 	.word	0x200000fc
 800132c:	40010c00 	.word	0x40010c00

08001330 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001332:	490d      	ldr	r1, [pc, #52]	; (8001368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001348:	4c0a      	ldr	r4, [pc, #40]	; (8001374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001356:	f7ff fd91 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135a:	f001 fcfd 	bl	8002d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800135e:	f7ff fa11 	bl	8000784 <main>
  bx lr
 8001362:	4770      	bx	lr
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 800136c:	08003964 	.word	0x08003964
  ldr r2, =_sbss
 8001370:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001374:	200001d0 	.word	0x200001d0

08001378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC1_2_IRQHandler>
	...

0800137c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_Init+0x28>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_Init+0x28>)
 8001386:	f043 0310 	orr.w	r3, r3, #16
 800138a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 f923 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001392:	200f      	movs	r0, #15
 8001394:	f000 f808 	bl	80013a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001398:	f7ff fc18 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40022000 	.word	0x40022000

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x54>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x58>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f93b 	bl	8001642 <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f000 f903 	bl	80015ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_InitTick+0x5c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000044 	.word	0x20000044
 8001400:	2000004c 	.word	0x2000004c
 8001404:	20000048 	.word	0x20000048

08001408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_IncTick+0x1c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_IncTick+0x20>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a03      	ldr	r2, [pc, #12]	; (8001428 <HAL_IncTick+0x20>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	2000004c 	.word	0x2000004c
 8001428:	200001bc 	.word	0x200001bc

0800142c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <HAL_GetTick+0x10>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	200001bc 	.word	0x200001bc

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0b      	blt.n	80014ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	4906      	ldr	r1, [pc, #24]	; (80014d8 <__NVIC_EnableIRQ+0x34>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2001      	movs	r0, #1
 80014c6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <__NVIC_SetPriority+0x50>)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f7ff ff90 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff2d 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001600:	f7ff ff42 	bl	8001488 <__NVIC_GetPriorityGrouping>
 8001604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	6978      	ldr	r0, [r7, #20]
 800160c:	f7ff ff90 	bl	8001530 <NVIC_EncodePriority>
 8001610:	4602      	mov	r2, r0
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff5f 	bl	80014dc <__NVIC_SetPriority>
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff35 	bl	80014a4 <__NVIC_EnableIRQ>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffa2 	bl	8001594 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800165c:	b480      	push	{r7}
 800165e:	b08b      	sub	sp, #44	; 0x2c
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166e:	e148      	b.n	8001902 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001670:	2201      	movs	r2, #1
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	429a      	cmp	r2, r3
 800168a:	f040 8137 	bne.w	80018fc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4aa3      	ldr	r2, [pc, #652]	; (8001920 <HAL_GPIO_Init+0x2c4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d05e      	beq.n	8001756 <HAL_GPIO_Init+0xfa>
 8001698:	4aa1      	ldr	r2, [pc, #644]	; (8001920 <HAL_GPIO_Init+0x2c4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d875      	bhi.n	800178a <HAL_GPIO_Init+0x12e>
 800169e:	4aa1      	ldr	r2, [pc, #644]	; (8001924 <HAL_GPIO_Init+0x2c8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d058      	beq.n	8001756 <HAL_GPIO_Init+0xfa>
 80016a4:	4a9f      	ldr	r2, [pc, #636]	; (8001924 <HAL_GPIO_Init+0x2c8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d86f      	bhi.n	800178a <HAL_GPIO_Init+0x12e>
 80016aa:	4a9f      	ldr	r2, [pc, #636]	; (8001928 <HAL_GPIO_Init+0x2cc>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d052      	beq.n	8001756 <HAL_GPIO_Init+0xfa>
 80016b0:	4a9d      	ldr	r2, [pc, #628]	; (8001928 <HAL_GPIO_Init+0x2cc>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d869      	bhi.n	800178a <HAL_GPIO_Init+0x12e>
 80016b6:	4a9d      	ldr	r2, [pc, #628]	; (800192c <HAL_GPIO_Init+0x2d0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d04c      	beq.n	8001756 <HAL_GPIO_Init+0xfa>
 80016bc:	4a9b      	ldr	r2, [pc, #620]	; (800192c <HAL_GPIO_Init+0x2d0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d863      	bhi.n	800178a <HAL_GPIO_Init+0x12e>
 80016c2:	4a9b      	ldr	r2, [pc, #620]	; (8001930 <HAL_GPIO_Init+0x2d4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d046      	beq.n	8001756 <HAL_GPIO_Init+0xfa>
 80016c8:	4a99      	ldr	r2, [pc, #612]	; (8001930 <HAL_GPIO_Init+0x2d4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d85d      	bhi.n	800178a <HAL_GPIO_Init+0x12e>
 80016ce:	2b12      	cmp	r3, #18
 80016d0:	d82a      	bhi.n	8001728 <HAL_GPIO_Init+0xcc>
 80016d2:	2b12      	cmp	r3, #18
 80016d4:	d859      	bhi.n	800178a <HAL_GPIO_Init+0x12e>
 80016d6:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <HAL_GPIO_Init+0x80>)
 80016d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016dc:	08001757 	.word	0x08001757
 80016e0:	08001731 	.word	0x08001731
 80016e4:	08001743 	.word	0x08001743
 80016e8:	08001785 	.word	0x08001785
 80016ec:	0800178b 	.word	0x0800178b
 80016f0:	0800178b 	.word	0x0800178b
 80016f4:	0800178b 	.word	0x0800178b
 80016f8:	0800178b 	.word	0x0800178b
 80016fc:	0800178b 	.word	0x0800178b
 8001700:	0800178b 	.word	0x0800178b
 8001704:	0800178b 	.word	0x0800178b
 8001708:	0800178b 	.word	0x0800178b
 800170c:	0800178b 	.word	0x0800178b
 8001710:	0800178b 	.word	0x0800178b
 8001714:	0800178b 	.word	0x0800178b
 8001718:	0800178b 	.word	0x0800178b
 800171c:	0800178b 	.word	0x0800178b
 8001720:	08001739 	.word	0x08001739
 8001724:	0800174d 	.word	0x0800174d
 8001728:	4a82      	ldr	r2, [pc, #520]	; (8001934 <HAL_GPIO_Init+0x2d8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d013      	beq.n	8001756 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800172e:	e02c      	b.n	800178a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	623b      	str	r3, [r7, #32]
          break;
 8001736:	e029      	b.n	800178c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	3304      	adds	r3, #4
 800173e:	623b      	str	r3, [r7, #32]
          break;
 8001740:	e024      	b.n	800178c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	3308      	adds	r3, #8
 8001748:	623b      	str	r3, [r7, #32]
          break;
 800174a:	e01f      	b.n	800178c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	330c      	adds	r3, #12
 8001752:	623b      	str	r3, [r7, #32]
          break;
 8001754:	e01a      	b.n	800178c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800175e:	2304      	movs	r3, #4
 8001760:	623b      	str	r3, [r7, #32]
          break;
 8001762:	e013      	b.n	800178c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d105      	bne.n	8001778 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800176c:	2308      	movs	r3, #8
 800176e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	611a      	str	r2, [r3, #16]
          break;
 8001776:	e009      	b.n	800178c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001778:	2308      	movs	r3, #8
 800177a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	615a      	str	r2, [r3, #20]
          break;
 8001782:	e003      	b.n	800178c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e000      	b.n	800178c <HAL_GPIO_Init+0x130>
          break;
 800178a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2bff      	cmp	r3, #255	; 0xff
 8001790:	d801      	bhi.n	8001796 <HAL_GPIO_Init+0x13a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	e001      	b.n	800179a <HAL_GPIO_Init+0x13e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3304      	adds	r3, #4
 800179a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2bff      	cmp	r3, #255	; 0xff
 80017a0:	d802      	bhi.n	80017a8 <HAL_GPIO_Init+0x14c>
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	e002      	b.n	80017ae <HAL_GPIO_Init+0x152>
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	3b08      	subs	r3, #8
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	210f      	movs	r1, #15
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	401a      	ands	r2, r3
 80017c0:	6a39      	ldr	r1, [r7, #32]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	431a      	orrs	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8090 	beq.w	80018fc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017dc:	4b56      	ldr	r3, [pc, #344]	; (8001938 <HAL_GPIO_Init+0x2dc>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a55      	ldr	r2, [pc, #340]	; (8001938 <HAL_GPIO_Init+0x2dc>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_GPIO_Init+0x2dc>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017f4:	4a51      	ldr	r2, [pc, #324]	; (800193c <HAL_GPIO_Init+0x2e0>)
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001800:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	220f      	movs	r2, #15
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a49      	ldr	r2, [pc, #292]	; (8001940 <HAL_GPIO_Init+0x2e4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00d      	beq.n	800183c <HAL_GPIO_Init+0x1e0>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a48      	ldr	r2, [pc, #288]	; (8001944 <HAL_GPIO_Init+0x2e8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d007      	beq.n	8001838 <HAL_GPIO_Init+0x1dc>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a47      	ldr	r2, [pc, #284]	; (8001948 <HAL_GPIO_Init+0x2ec>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d101      	bne.n	8001834 <HAL_GPIO_Init+0x1d8>
 8001830:	2302      	movs	r3, #2
 8001832:	e004      	b.n	800183e <HAL_GPIO_Init+0x1e2>
 8001834:	2303      	movs	r3, #3
 8001836:	e002      	b.n	800183e <HAL_GPIO_Init+0x1e2>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <HAL_GPIO_Init+0x1e2>
 800183c:	2300      	movs	r3, #0
 800183e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001840:	f002 0203 	and.w	r2, r2, #3
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	4093      	lsls	r3, r2
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800184e:	493b      	ldr	r1, [pc, #236]	; (800193c <HAL_GPIO_Init+0x2e0>)
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001868:	4b38      	ldr	r3, [pc, #224]	; (800194c <HAL_GPIO_Init+0x2f0>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4937      	ldr	r1, [pc, #220]	; (800194c <HAL_GPIO_Init+0x2f0>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	e006      	b.n	8001884 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001876:	4b35      	ldr	r3, [pc, #212]	; (800194c <HAL_GPIO_Init+0x2f0>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	43db      	mvns	r3, r3
 800187e:	4933      	ldr	r1, [pc, #204]	; (800194c <HAL_GPIO_Init+0x2f0>)
 8001880:	4013      	ands	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001890:	4b2e      	ldr	r3, [pc, #184]	; (800194c <HAL_GPIO_Init+0x2f0>)
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	492d      	ldr	r1, [pc, #180]	; (800194c <HAL_GPIO_Init+0x2f0>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <HAL_GPIO_Init+0x2f0>)
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	4929      	ldr	r1, [pc, #164]	; (800194c <HAL_GPIO_Init+0x2f0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_GPIO_Init+0x2f0>)
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	4923      	ldr	r1, [pc, #140]	; (800194c <HAL_GPIO_Init+0x2f0>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018c6:	4b21      	ldr	r3, [pc, #132]	; (800194c <HAL_GPIO_Init+0x2f0>)
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	491f      	ldr	r1, [pc, #124]	; (800194c <HAL_GPIO_Init+0x2f0>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <HAL_GPIO_Init+0x2f0>)
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	4919      	ldr	r1, [pc, #100]	; (800194c <HAL_GPIO_Init+0x2f0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60cb      	str	r3, [r1, #12]
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <HAL_GPIO_Init+0x2f0>)
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4915      	ldr	r1, [pc, #84]	; (800194c <HAL_GPIO_Init+0x2f0>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	3301      	adds	r3, #1
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	fa22 f303 	lsr.w	r3, r2, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	f47f aeaf 	bne.w	8001670 <HAL_GPIO_Init+0x14>
  }
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	372c      	adds	r7, #44	; 0x2c
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	10320000 	.word	0x10320000
 8001924:	10310000 	.word	0x10310000
 8001928:	10220000 	.word	0x10220000
 800192c:	10210000 	.word	0x10210000
 8001930:	10120000 	.word	0x10120000
 8001934:	10110000 	.word	0x10110000
 8001938:	40021000 	.word	0x40021000
 800193c:	40010000 	.word	0x40010000
 8001940:	40010800 	.word	0x40010800
 8001944:	40010c00 	.word	0x40010c00
 8001948:	40011000 	.word	0x40011000
 800194c:	40010400 	.word	0x40010400

08001950 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	887b      	ldrh	r3, [r7, #2]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	e001      	b.n	8001972 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001972:	7bfb      	ldrb	r3, [r7, #15]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	807b      	strh	r3, [r7, #2]
 800198a:	4613      	mov	r3, r2
 800198c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800198e:	787b      	ldrb	r3, [r7, #1]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001994:	887a      	ldrh	r2, [r7, #2]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800199a:	e003      	b.n	80019a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	041a      	lsls	r2, r3, #16
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	611a      	str	r2, [r3, #16]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019c0:	887a      	ldrh	r2, [r7, #2]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4013      	ands	r3, r2
 80019c6:	041a      	lsls	r2, r3, #16
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	887b      	ldrh	r3, [r7, #2]
 80019ce:	400b      	ands	r3, r1
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	611a      	str	r2, [r3, #16]
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e26c      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8087 	beq.w	8001b0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a00:	4b92      	ldr	r3, [pc, #584]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d00c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a0c:	4b8f      	ldr	r3, [pc, #572]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d112      	bne.n	8001a3e <HAL_RCC_OscConfig+0x5e>
 8001a18:	4b8c      	ldr	r3, [pc, #560]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a24:	d10b      	bne.n	8001a3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a26:	4b89      	ldr	r3, [pc, #548]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d06c      	beq.n	8001b0c <HAL_RCC_OscConfig+0x12c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d168      	bne.n	8001b0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e246      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x76>
 8001a48:	4b80      	ldr	r3, [pc, #512]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a7f      	ldr	r2, [pc, #508]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e02e      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x98>
 8001a5e:	4b7b      	ldr	r3, [pc, #492]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a7a      	ldr	r2, [pc, #488]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b78      	ldr	r3, [pc, #480]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a77      	ldr	r2, [pc, #476]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e01d      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0xbc>
 8001a82:	4b72      	ldr	r3, [pc, #456]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a71      	ldr	r2, [pc, #452]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b6f      	ldr	r3, [pc, #444]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6e      	ldr	r2, [pc, #440]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a9c:	4b6b      	ldr	r3, [pc, #428]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a6a      	ldr	r2, [pc, #424]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a67      	ldr	r2, [pc, #412]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d013      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fcb6 	bl	800142c <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fcb2 	bl	800142c <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e1fa      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xe4>
 8001ae2:	e014      	b.n	8001b0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fca2 	bl	800142c <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff fc9e 	bl	800142c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e1e6      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x10c>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d063      	beq.n	8001be2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b1a:	4b4c      	ldr	r3, [pc, #304]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d11c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x18c>
 8001b32:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d116      	bne.n	8001b6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <HAL_RCC_OscConfig+0x176>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e1ba      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4939      	ldr	r1, [pc, #228]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	e03a      	b.n	8001be2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d020      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b74:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fc57 	bl	800142c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b82:	f7ff fc53 	bl	800142c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e19b      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4927      	ldr	r1, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
 8001bb4:	e015      	b.n	8001be2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fc36 	bl	800142c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fc32 	bl	800142c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e17a      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d03a      	beq.n	8001c64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d019      	beq.n	8001c2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfc:	f7ff fc16 	bl	800142c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff fc12 	bl	800142c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e15a      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f000 fad8 	bl	80021d8 <RCC_Delay>
 8001c28:	e01c      	b.n	8001c64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_RCC_OscConfig+0x274>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c30:	f7ff fbfc 	bl	800142c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c36:	e00f      	b.n	8001c58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c38:	f7ff fbf8 	bl	800142c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d908      	bls.n	8001c58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e140      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	42420000 	.word	0x42420000
 8001c54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c58:	4b9e      	ldr	r3, [pc, #632]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e9      	bne.n	8001c38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80a6 	beq.w	8001dbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c76:	4b97      	ldr	r3, [pc, #604]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	4b94      	ldr	r3, [pc, #592]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4a93      	ldr	r2, [pc, #588]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	61d3      	str	r3, [r2, #28]
 8001c8e:	4b91      	ldr	r3, [pc, #580]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	4b8e      	ldr	r3, [pc, #568]	; (8001ed8 <HAL_RCC_OscConfig+0x4f8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	4b8b      	ldr	r3, [pc, #556]	; (8001ed8 <HAL_RCC_OscConfig+0x4f8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a8a      	ldr	r2, [pc, #552]	; (8001ed8 <HAL_RCC_OscConfig+0x4f8>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fbb9 	bl	800142c <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7ff fbb5 	bl	800142c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b64      	cmp	r3, #100	; 0x64
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e0fd      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b81      	ldr	r3, [pc, #516]	; (8001ed8 <HAL_RCC_OscConfig+0x4f8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x312>
 8001ce4:	4b7b      	ldr	r3, [pc, #492]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a7a      	ldr	r2, [pc, #488]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	e02d      	b.n	8001d4e <HAL_RCC_OscConfig+0x36e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x334>
 8001cfa:	4b76      	ldr	r3, [pc, #472]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a75      	ldr	r2, [pc, #468]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	4b73      	ldr	r3, [pc, #460]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a72      	ldr	r2, [pc, #456]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	6213      	str	r3, [r2, #32]
 8001d12:	e01c      	b.n	8001d4e <HAL_RCC_OscConfig+0x36e>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d10c      	bne.n	8001d36 <HAL_RCC_OscConfig+0x356>
 8001d1c:	4b6d      	ldr	r3, [pc, #436]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a6c      	ldr	r2, [pc, #432]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	4b6a      	ldr	r3, [pc, #424]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4a69      	ldr	r2, [pc, #420]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6213      	str	r3, [r2, #32]
 8001d34:	e00b      	b.n	8001d4e <HAL_RCC_OscConfig+0x36e>
 8001d36:	4b67      	ldr	r3, [pc, #412]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4a66      	ldr	r2, [pc, #408]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6213      	str	r3, [r2, #32]
 8001d42:	4b64      	ldr	r3, [pc, #400]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4a63      	ldr	r2, [pc, #396]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d015      	beq.n	8001d82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d56:	f7ff fb69 	bl	800142c <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7ff fb65 	bl	800142c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0ab      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	4b57      	ldr	r3, [pc, #348]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ee      	beq.n	8001d5e <HAL_RCC_OscConfig+0x37e>
 8001d80:	e014      	b.n	8001dac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7ff fb53 	bl	800142c <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff fb4f 	bl	800142c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e095      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ee      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	4b48      	ldr	r3, [pc, #288]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a47      	ldr	r2, [pc, #284]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8081 	beq.w	8001eca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc8:	4b42      	ldr	r3, [pc, #264]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d061      	beq.n	8001e98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d146      	bne.n	8001e6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ddc:	4b3f      	ldr	r3, [pc, #252]	; (8001edc <HAL_RCC_OscConfig+0x4fc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff fb23 	bl	800142c <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dea:	f7ff fb1f 	bl	800142c <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e067      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfc:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f0      	bne.n	8001dea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e10:	d108      	bne.n	8001e24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e12:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	492d      	ldr	r1, [pc, #180]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a19      	ldr	r1, [r3, #32]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	430b      	orrs	r3, r1
 8001e36:	4927      	ldr	r1, [pc, #156]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <HAL_RCC_OscConfig+0x4fc>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7ff faf3 	bl	800142c <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7ff faef 	bl	800142c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e037      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x46a>
 8001e68:	e02f      	b.n	8001eca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_RCC_OscConfig+0x4fc>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff fadc 	bl	800142c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7ff fad8 	bl	800142c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e020      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x498>
 8001e96:	e018      	b.n	8001eca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e013      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	42420060 	.word	0x42420060

08001ee0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0d0      	b.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d910      	bls.n	8001f24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 0207 	bic.w	r2, r3, #7
 8001f0a:	4965      	ldr	r1, [pc, #404]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b63      	ldr	r3, [pc, #396]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0b8      	b.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f3c:	4b59      	ldr	r3, [pc, #356]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4a58      	ldr	r2, [pc, #352]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f54:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a52      	ldr	r2, [pc, #328]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	494d      	ldr	r1, [pc, #308]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d040      	beq.n	8002000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d115      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e07f      	b.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9e:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e073      	b.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fae:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e06b      	b.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fbe:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f023 0203 	bic.w	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4936      	ldr	r1, [pc, #216]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd0:	f7ff fa2c 	bl	800142c <HAL_GetTick>
 8001fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd8:	f7ff fa28 	bl	800142c <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e053      	b.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 020c 	and.w	r2, r3, #12
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d1eb      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002000:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d210      	bcs.n	8002030 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 0207 	bic.w	r2, r3, #7
 8002016:	4922      	ldr	r1, [pc, #136]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e032      	b.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4916      	ldr	r1, [pc, #88]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	490e      	ldr	r1, [pc, #56]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800206e:	f000 f821 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8002072:	4602      	mov	r2, r0
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	490a      	ldr	r1, [pc, #40]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002080:	5ccb      	ldrb	r3, [r1, r3]
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	4a09      	ldr	r2, [pc, #36]	; (80020ac <HAL_RCC_ClockConfig+0x1cc>)
 8002088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1d0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff f98a 	bl	80013a8 <HAL_InitTick>

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40022000 	.word	0x40022000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	080038e0 	.word	0x080038e0
 80020ac:	20000044 	.word	0x20000044
 80020b0:	20000048 	.word	0x20000048

080020b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b490      	push	{r4, r7}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020bc:	1d3c      	adds	r4, r7, #4
 80020be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020c4:	f240 2301 	movw	r3, #513	; 0x201
 80020c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020de:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d002      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x40>
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d003      	beq.n	80020fa <HAL_RCC_GetSysClockFreq+0x46>
 80020f2:	e02d      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020f4:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f6:	623b      	str	r3, [r7, #32]
      break;
 80020f8:	e02d      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	0c9b      	lsrs	r3, r3, #18
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002106:	4413      	add	r3, r2
 8002108:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800210c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_RCC_GetSysClockFreq+0xb4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	0c5b      	lsrs	r3, r3, #17
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002126:	4413      	add	r3, r2
 8002128:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800212c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	4a0e      	ldr	r2, [pc, #56]	; (800216c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002132:	fb02 f203 	mul.w	r2, r2, r3
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
 800213e:	e004      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002144:	fb02 f303 	mul.w	r3, r2, r3
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	623b      	str	r3, [r7, #32]
      break;
 800214e:	e002      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002152:	623b      	str	r3, [r7, #32]
      break;
 8002154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002156:	6a3b      	ldr	r3, [r7, #32]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bc90      	pop	{r4, r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	080038d0 	.word	0x080038d0
 8002168:	40021000 	.word	0x40021000
 800216c:	007a1200 	.word	0x007a1200
 8002170:	003d0900 	.word	0x003d0900

08002174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002178:	4b02      	ldr	r3, [pc, #8]	; (8002184 <HAL_RCC_GetHCLKFreq+0x10>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	20000044 	.word	0x20000044

08002188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800218c:	f7ff fff2 	bl	8002174 <HAL_RCC_GetHCLKFreq>
 8002190:	4602      	mov	r2, r0
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	4903      	ldr	r1, [pc, #12]	; (80021ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800219e:	5ccb      	ldrb	r3, [r1, r3]
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	080038f0 	.word	0x080038f0

080021b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021b4:	f7ff ffde 	bl	8002174 <HAL_RCC_GetHCLKFreq>
 80021b8:	4602      	mov	r2, r0
 80021ba:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	0adb      	lsrs	r3, r3, #11
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	4903      	ldr	r1, [pc, #12]	; (80021d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021c6:	5ccb      	ldrb	r3, [r1, r3]
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	080038f0 	.word	0x080038f0

080021d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <RCC_Delay+0x34>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <RCC_Delay+0x38>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0a5b      	lsrs	r3, r3, #9
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021f4:	bf00      	nop
  }
  while (Delay --);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1e5a      	subs	r2, r3, #1
 80021fa:	60fa      	str	r2, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f9      	bne.n	80021f4 <RCC_Delay+0x1c>
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	20000044 	.word	0x20000044
 8002210:	10624dd3 	.word	0x10624dd3

08002214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e041      	b.n	80022aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fe fcf8 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3304      	adds	r3, #4
 8002250:	4619      	mov	r1, r3
 8002252:	4610      	mov	r0, r2
 8002254:	f000 fa6a 	bl	800272c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d001      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e035      	b.n	8002338 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a16      	ldr	r2, [pc, #88]	; (8002344 <HAL_TIM_Base_Start_IT+0x90>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d009      	beq.n	8002302 <HAL_TIM_Base_Start_IT+0x4e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f6:	d004      	beq.n	8002302 <HAL_TIM_Base_Start_IT+0x4e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a12      	ldr	r2, [pc, #72]	; (8002348 <HAL_TIM_Base_Start_IT+0x94>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d111      	bne.n	8002326 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b06      	cmp	r3, #6
 8002312:	d010      	beq.n	8002336 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002324:	e007      	b.n	8002336 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40000400 	.word	0x40000400

0800234c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d122      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b02      	cmp	r3, #2
 800236e:	d11b      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0202 	mvn.w	r2, #2
 8002378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f9b1 	bl	80026f6 <HAL_TIM_IC_CaptureCallback>
 8002394:	e005      	b.n	80023a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f9a4 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f9b3 	bl	8002708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d122      	bne.n	80023fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d11b      	bne.n	80023fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0204 	mvn.w	r2, #4
 80023cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f987 	bl	80026f6 <HAL_TIM_IC_CaptureCallback>
 80023e8:	e005      	b.n	80023f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f97a 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f989 	bl	8002708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b08      	cmp	r3, #8
 8002408:	d122      	bne.n	8002450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b08      	cmp	r3, #8
 8002416:	d11b      	bne.n	8002450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0208 	mvn.w	r2, #8
 8002420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2204      	movs	r2, #4
 8002426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f95d 	bl	80026f6 <HAL_TIM_IC_CaptureCallback>
 800243c:	e005      	b.n	800244a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f950 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f95f 	bl	8002708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b10      	cmp	r3, #16
 800245c:	d122      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b10      	cmp	r3, #16
 800246a:	d11b      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0210 	mvn.w	r2, #16
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2208      	movs	r2, #8
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f933 	bl	80026f6 <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f926 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f935 	bl	8002708 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d107      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0201 	mvn.w	r2, #1
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fcdc 	bl	8000e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024da:	2b80      	cmp	r3, #128	; 0x80
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	2b80      	cmp	r3, #128	; 0x80
 80024ea:	d107      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fa67 	bl	80029ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d10e      	bne.n	8002528 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d107      	bne.n	8002528 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8f9 	bl	800271a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b20      	cmp	r3, #32
 8002534:	d10e      	bne.n	8002554 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b20      	cmp	r3, #32
 8002542:	d107      	bne.n	8002554 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0220 	mvn.w	r2, #32
 800254c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa32 	bl	80029b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_TIM_ConfigClockSource+0x18>
 8002570:	2302      	movs	r3, #2
 8002572:	e0b3      	b.n	80026dc <HAL_TIM_ConfigClockSource+0x180>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002592:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800259a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ac:	d03e      	beq.n	800262c <HAL_TIM_ConfigClockSource+0xd0>
 80025ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b2:	f200 8087 	bhi.w	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ba:	f000 8085 	beq.w	80026c8 <HAL_TIM_ConfigClockSource+0x16c>
 80025be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c2:	d87f      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025c4:	2b70      	cmp	r3, #112	; 0x70
 80025c6:	d01a      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0xa2>
 80025c8:	2b70      	cmp	r3, #112	; 0x70
 80025ca:	d87b      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025cc:	2b60      	cmp	r3, #96	; 0x60
 80025ce:	d050      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0x116>
 80025d0:	2b60      	cmp	r3, #96	; 0x60
 80025d2:	d877      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025d4:	2b50      	cmp	r3, #80	; 0x50
 80025d6:	d03c      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0xf6>
 80025d8:	2b50      	cmp	r3, #80	; 0x50
 80025da:	d873      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d058      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0x136>
 80025e0:	2b40      	cmp	r3, #64	; 0x40
 80025e2:	d86f      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025e4:	2b30      	cmp	r3, #48	; 0x30
 80025e6:	d064      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x156>
 80025e8:	2b30      	cmp	r3, #48	; 0x30
 80025ea:	d86b      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d060      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x156>
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d867      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d05c      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x156>
 80025f8:	2b10      	cmp	r3, #16
 80025fa:	d05a      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80025fc:	e062      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6899      	ldr	r1, [r3, #8]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f000 f95c 	bl	80028ca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002620:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	609a      	str	r2, [r3, #8]
      break;
 800262a:	e04e      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6899      	ldr	r1, [r3, #8]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f000 f945 	bl	80028ca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800264e:	609a      	str	r2, [r3, #8]
      break;
 8002650:	e03b      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	461a      	mov	r2, r3
 8002660:	f000 f8bc 	bl	80027dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2150      	movs	r1, #80	; 0x50
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f913 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 8002670:	e02b      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6859      	ldr	r1, [r3, #4]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	461a      	mov	r2, r3
 8002680:	f000 f8da 	bl	8002838 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2160      	movs	r1, #96	; 0x60
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f903 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 8002690:	e01b      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6859      	ldr	r1, [r3, #4]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	461a      	mov	r2, r3
 80026a0:	f000 f89c 	bl	80027dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2140      	movs	r1, #64	; 0x40
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f8f3 	bl	8002896 <TIM_ITRx_SetConfig>
      break;
 80026b0:	e00b      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f000 f8ea 	bl	8002896 <TIM_ITRx_SetConfig>
        break;
 80026c2:	e002      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026c4:	bf00      	nop
 80026c6:	e000      	b.n	80026ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <TIM_Base_SetConfig+0xa8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d007      	beq.n	8002754 <TIM_Base_SetConfig+0x28>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274a:	d003      	beq.n	8002754 <TIM_Base_SetConfig+0x28>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <TIM_Base_SetConfig+0xac>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d108      	bne.n	8002766 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a1a      	ldr	r2, [pc, #104]	; (80027d4 <TIM_Base_SetConfig+0xa8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <TIM_Base_SetConfig+0x52>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002774:	d003      	beq.n	800277e <TIM_Base_SetConfig+0x52>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <TIM_Base_SetConfig+0xac>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d108      	bne.n	8002790 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <TIM_Base_SetConfig+0xa8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d103      	bne.n	80027c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	615a      	str	r2, [r3, #20]
}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400

080027dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f023 0201 	bic.w	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f023 030a 	bic.w	r3, r3, #10
 8002818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	621a      	str	r2, [r3, #32]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f023 0210 	bic.w	r2, r3, #16
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002862:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	031b      	lsls	r3, r3, #12
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002874:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	621a      	str	r2, [r3, #32]
}
 800288c:	bf00      	nop
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f043 0307 	orr.w	r3, r3, #7
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	609a      	str	r2, [r3, #8]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b087      	sub	sp, #28
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	021a      	lsls	r2, r3, #8
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	609a      	str	r2, [r3, #8]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800291c:	2302      	movs	r3, #2
 800291e:	e041      	b.n	80029a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d009      	beq.n	8002978 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296c:	d004      	beq.n	8002978 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d10c      	bne.n	8002992 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800297e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	4313      	orrs	r3, r2
 8002988:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40000400 	.word	0x40000400

080029b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e03f      	b.n	8002a6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe f938 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2224      	movs	r2, #36	; 0x24
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f905 	bl	8002c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b08a      	sub	sp, #40	; 0x28
 8002a7a:	af02      	add	r7, sp, #8
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d17c      	bne.n	8002b90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_UART_Transmit+0x2c>
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e075      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_UART_Transmit+0x3e>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e06e      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2221      	movs	r2, #33	; 0x21
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aca:	f7fe fcaf 	bl	800142c <HAL_GetTick>
 8002ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae4:	d108      	bne.n	8002af8 <HAL_UART_Transmit+0x82>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d104      	bne.n	8002af8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	e003      	b.n	8002b00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b08:	e02a      	b.n	8002b60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2200      	movs	r2, #0
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f840 	bl	8002b9a <UART_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e036      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10b      	bne.n	8002b42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	e007      	b.n	8002b52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	781a      	ldrb	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1cf      	bne.n	8002b0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2140      	movs	r1, #64	; 0x40
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f810 	bl	8002b9a <UART_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e006      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e000      	b.n	8002b92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b90:	2302      	movs	r3, #2
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3720      	adds	r7, #32
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002baa:	e02c      	b.n	8002c06 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb2:	d028      	beq.n	8002c06 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d007      	beq.n	8002bca <UART_WaitOnFlagUntilTimeout+0x30>
 8002bba:	f7fe fc37 	bl	800142c <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d21d      	bcs.n	8002c06 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bd8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0201 	bic.w	r2, r2, #1
 8002be8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e00f      	b.n	8002c26 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d0c3      	beq.n	8002bac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c6a:	f023 030c 	bic.w	r3, r3, #12
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	430b      	orrs	r3, r1
 8002c76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2c      	ldr	r2, [pc, #176]	; (8002d44 <UART_SetConfig+0x114>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d103      	bne.n	8002ca0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c98:	f7ff fa8a 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	e002      	b.n	8002ca6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ca0:	f7ff fa72 	bl	8002188 <HAL_RCC_GetPCLK1Freq>
 8002ca4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	009a      	lsls	r2, r3, #2
 8002cb0:	441a      	add	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	4a22      	ldr	r2, [pc, #136]	; (8002d48 <UART_SetConfig+0x118>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	0119      	lsls	r1, r3, #4
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009a      	lsls	r2, r3, #2
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cdc:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <UART_SetConfig+0x118>)
 8002cde:	fba3 0302 	umull	r0, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2064      	movs	r0, #100	; 0x64
 8002ce6:	fb00 f303 	mul.w	r3, r0, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3332      	adds	r3, #50	; 0x32
 8002cf0:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <UART_SetConfig+0x118>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cfc:	4419      	add	r1, r3
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	009a      	lsls	r2, r3, #2
 8002d08:	441a      	add	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <UART_SetConfig+0x118>)
 8002d16:	fba3 0302 	umull	r0, r3, r3, r2
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2064      	movs	r0, #100	; 0x64
 8002d1e:	fb00 f303 	mul.w	r3, r0, r3
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	3332      	adds	r3, #50	; 0x32
 8002d28:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <UART_SetConfig+0x118>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	f003 020f 	and.w	r2, r3, #15
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	440a      	add	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40013800 	.word	0x40013800
 8002d48:	51eb851f 	.word	0x51eb851f

08002d4c <__errno>:
 8002d4c:	4b01      	ldr	r3, [pc, #4]	; (8002d54 <__errno+0x8>)
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000050 	.word	0x20000050

08002d58 <__libc_init_array>:
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	2600      	movs	r6, #0
 8002d5c:	4d0c      	ldr	r5, [pc, #48]	; (8002d90 <__libc_init_array+0x38>)
 8002d5e:	4c0d      	ldr	r4, [pc, #52]	; (8002d94 <__libc_init_array+0x3c>)
 8002d60:	1b64      	subs	r4, r4, r5
 8002d62:	10a4      	asrs	r4, r4, #2
 8002d64:	42a6      	cmp	r6, r4
 8002d66:	d109      	bne.n	8002d7c <__libc_init_array+0x24>
 8002d68:	f000 fce4 	bl	8003734 <_init>
 8002d6c:	2600      	movs	r6, #0
 8002d6e:	4d0a      	ldr	r5, [pc, #40]	; (8002d98 <__libc_init_array+0x40>)
 8002d70:	4c0a      	ldr	r4, [pc, #40]	; (8002d9c <__libc_init_array+0x44>)
 8002d72:	1b64      	subs	r4, r4, r5
 8002d74:	10a4      	asrs	r4, r4, #2
 8002d76:	42a6      	cmp	r6, r4
 8002d78:	d105      	bne.n	8002d86 <__libc_init_array+0x2e>
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}
 8002d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d80:	4798      	blx	r3
 8002d82:	3601      	adds	r6, #1
 8002d84:	e7ee      	b.n	8002d64 <__libc_init_array+0xc>
 8002d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8a:	4798      	blx	r3
 8002d8c:	3601      	adds	r6, #1
 8002d8e:	e7f2      	b.n	8002d76 <__libc_init_array+0x1e>
 8002d90:	0800395c 	.word	0x0800395c
 8002d94:	0800395c 	.word	0x0800395c
 8002d98:	0800395c 	.word	0x0800395c
 8002d9c:	08003960 	.word	0x08003960

08002da0 <memset>:
 8002da0:	4603      	mov	r3, r0
 8002da2:	4402      	add	r2, r0
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d100      	bne.n	8002daa <memset+0xa>
 8002da8:	4770      	bx	lr
 8002daa:	f803 1b01 	strb.w	r1, [r3], #1
 8002dae:	e7f9      	b.n	8002da4 <memset+0x4>

08002db0 <_puts_r>:
 8002db0:	b570      	push	{r4, r5, r6, lr}
 8002db2:	460e      	mov	r6, r1
 8002db4:	4605      	mov	r5, r0
 8002db6:	b118      	cbz	r0, 8002dc0 <_puts_r+0x10>
 8002db8:	6983      	ldr	r3, [r0, #24]
 8002dba:	b90b      	cbnz	r3, 8002dc0 <_puts_r+0x10>
 8002dbc:	f000 fa48 	bl	8003250 <__sinit>
 8002dc0:	69ab      	ldr	r3, [r5, #24]
 8002dc2:	68ac      	ldr	r4, [r5, #8]
 8002dc4:	b913      	cbnz	r3, 8002dcc <_puts_r+0x1c>
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	f000 fa42 	bl	8003250 <__sinit>
 8002dcc:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <_puts_r+0xd0>)
 8002dce:	429c      	cmp	r4, r3
 8002dd0:	d120      	bne.n	8002e14 <_puts_r+0x64>
 8002dd2:	686c      	ldr	r4, [r5, #4]
 8002dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dd6:	07db      	lsls	r3, r3, #31
 8002dd8:	d405      	bmi.n	8002de6 <_puts_r+0x36>
 8002dda:	89a3      	ldrh	r3, [r4, #12]
 8002ddc:	0598      	lsls	r0, r3, #22
 8002dde:	d402      	bmi.n	8002de6 <_puts_r+0x36>
 8002de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002de2:	f000 fad3 	bl	800338c <__retarget_lock_acquire_recursive>
 8002de6:	89a3      	ldrh	r3, [r4, #12]
 8002de8:	0719      	lsls	r1, r3, #28
 8002dea:	d51d      	bpl.n	8002e28 <_puts_r+0x78>
 8002dec:	6923      	ldr	r3, [r4, #16]
 8002dee:	b1db      	cbz	r3, 8002e28 <_puts_r+0x78>
 8002df0:	3e01      	subs	r6, #1
 8002df2:	68a3      	ldr	r3, [r4, #8]
 8002df4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	60a3      	str	r3, [r4, #8]
 8002dfc:	bb39      	cbnz	r1, 8002e4e <_puts_r+0x9e>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	da38      	bge.n	8002e74 <_puts_r+0xc4>
 8002e02:	4622      	mov	r2, r4
 8002e04:	210a      	movs	r1, #10
 8002e06:	4628      	mov	r0, r5
 8002e08:	f000 f848 	bl	8002e9c <__swbuf_r>
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	d011      	beq.n	8002e34 <_puts_r+0x84>
 8002e10:	250a      	movs	r5, #10
 8002e12:	e011      	b.n	8002e38 <_puts_r+0x88>
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <_puts_r+0xd4>)
 8002e16:	429c      	cmp	r4, r3
 8002e18:	d101      	bne.n	8002e1e <_puts_r+0x6e>
 8002e1a:	68ac      	ldr	r4, [r5, #8]
 8002e1c:	e7da      	b.n	8002dd4 <_puts_r+0x24>
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <_puts_r+0xd8>)
 8002e20:	429c      	cmp	r4, r3
 8002e22:	bf08      	it	eq
 8002e24:	68ec      	ldreq	r4, [r5, #12]
 8002e26:	e7d5      	b.n	8002dd4 <_puts_r+0x24>
 8002e28:	4621      	mov	r1, r4
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	f000 f888 	bl	8002f40 <__swsetup_r>
 8002e30:	2800      	cmp	r0, #0
 8002e32:	d0dd      	beq.n	8002df0 <_puts_r+0x40>
 8002e34:	f04f 35ff 	mov.w	r5, #4294967295
 8002e38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e3a:	07da      	lsls	r2, r3, #31
 8002e3c:	d405      	bmi.n	8002e4a <_puts_r+0x9a>
 8002e3e:	89a3      	ldrh	r3, [r4, #12]
 8002e40:	059b      	lsls	r3, r3, #22
 8002e42:	d402      	bmi.n	8002e4a <_puts_r+0x9a>
 8002e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e46:	f000 faa2 	bl	800338e <__retarget_lock_release_recursive>
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	da04      	bge.n	8002e5c <_puts_r+0xac>
 8002e52:	69a2      	ldr	r2, [r4, #24]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	dc06      	bgt.n	8002e66 <_puts_r+0xb6>
 8002e58:	290a      	cmp	r1, #10
 8002e5a:	d004      	beq.n	8002e66 <_puts_r+0xb6>
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	6022      	str	r2, [r4, #0]
 8002e62:	7019      	strb	r1, [r3, #0]
 8002e64:	e7c5      	b.n	8002df2 <_puts_r+0x42>
 8002e66:	4622      	mov	r2, r4
 8002e68:	4628      	mov	r0, r5
 8002e6a:	f000 f817 	bl	8002e9c <__swbuf_r>
 8002e6e:	3001      	adds	r0, #1
 8002e70:	d1bf      	bne.n	8002df2 <_puts_r+0x42>
 8002e72:	e7df      	b.n	8002e34 <_puts_r+0x84>
 8002e74:	250a      	movs	r5, #10
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	6022      	str	r2, [r4, #0]
 8002e7c:	701d      	strb	r5, [r3, #0]
 8002e7e:	e7db      	b.n	8002e38 <_puts_r+0x88>
 8002e80:	0800391c 	.word	0x0800391c
 8002e84:	0800393c 	.word	0x0800393c
 8002e88:	080038fc 	.word	0x080038fc

08002e8c <puts>:
 8002e8c:	4b02      	ldr	r3, [pc, #8]	; (8002e98 <puts+0xc>)
 8002e8e:	4601      	mov	r1, r0
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	f7ff bf8d 	b.w	8002db0 <_puts_r>
 8002e96:	bf00      	nop
 8002e98:	20000050 	.word	0x20000050

08002e9c <__swbuf_r>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	460e      	mov	r6, r1
 8002ea0:	4614      	mov	r4, r2
 8002ea2:	4605      	mov	r5, r0
 8002ea4:	b118      	cbz	r0, 8002eae <__swbuf_r+0x12>
 8002ea6:	6983      	ldr	r3, [r0, #24]
 8002ea8:	b90b      	cbnz	r3, 8002eae <__swbuf_r+0x12>
 8002eaa:	f000 f9d1 	bl	8003250 <__sinit>
 8002eae:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <__swbuf_r+0x98>)
 8002eb0:	429c      	cmp	r4, r3
 8002eb2:	d12b      	bne.n	8002f0c <__swbuf_r+0x70>
 8002eb4:	686c      	ldr	r4, [r5, #4]
 8002eb6:	69a3      	ldr	r3, [r4, #24]
 8002eb8:	60a3      	str	r3, [r4, #8]
 8002eba:	89a3      	ldrh	r3, [r4, #12]
 8002ebc:	071a      	lsls	r2, r3, #28
 8002ebe:	d52f      	bpl.n	8002f20 <__swbuf_r+0x84>
 8002ec0:	6923      	ldr	r3, [r4, #16]
 8002ec2:	b36b      	cbz	r3, 8002f20 <__swbuf_r+0x84>
 8002ec4:	6923      	ldr	r3, [r4, #16]
 8002ec6:	6820      	ldr	r0, [r4, #0]
 8002ec8:	b2f6      	uxtb	r6, r6
 8002eca:	1ac0      	subs	r0, r0, r3
 8002ecc:	6963      	ldr	r3, [r4, #20]
 8002ece:	4637      	mov	r7, r6
 8002ed0:	4283      	cmp	r3, r0
 8002ed2:	dc04      	bgt.n	8002ede <__swbuf_r+0x42>
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f000 f926 	bl	8003128 <_fflush_r>
 8002edc:	bb30      	cbnz	r0, 8002f2c <__swbuf_r+0x90>
 8002ede:	68a3      	ldr	r3, [r4, #8]
 8002ee0:	3001      	adds	r0, #1
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	60a3      	str	r3, [r4, #8]
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	6022      	str	r2, [r4, #0]
 8002eec:	701e      	strb	r6, [r3, #0]
 8002eee:	6963      	ldr	r3, [r4, #20]
 8002ef0:	4283      	cmp	r3, r0
 8002ef2:	d004      	beq.n	8002efe <__swbuf_r+0x62>
 8002ef4:	89a3      	ldrh	r3, [r4, #12]
 8002ef6:	07db      	lsls	r3, r3, #31
 8002ef8:	d506      	bpl.n	8002f08 <__swbuf_r+0x6c>
 8002efa:	2e0a      	cmp	r6, #10
 8002efc:	d104      	bne.n	8002f08 <__swbuf_r+0x6c>
 8002efe:	4621      	mov	r1, r4
 8002f00:	4628      	mov	r0, r5
 8002f02:	f000 f911 	bl	8003128 <_fflush_r>
 8002f06:	b988      	cbnz	r0, 8002f2c <__swbuf_r+0x90>
 8002f08:	4638      	mov	r0, r7
 8002f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <__swbuf_r+0x9c>)
 8002f0e:	429c      	cmp	r4, r3
 8002f10:	d101      	bne.n	8002f16 <__swbuf_r+0x7a>
 8002f12:	68ac      	ldr	r4, [r5, #8]
 8002f14:	e7cf      	b.n	8002eb6 <__swbuf_r+0x1a>
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <__swbuf_r+0xa0>)
 8002f18:	429c      	cmp	r4, r3
 8002f1a:	bf08      	it	eq
 8002f1c:	68ec      	ldreq	r4, [r5, #12]
 8002f1e:	e7ca      	b.n	8002eb6 <__swbuf_r+0x1a>
 8002f20:	4621      	mov	r1, r4
 8002f22:	4628      	mov	r0, r5
 8002f24:	f000 f80c 	bl	8002f40 <__swsetup_r>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d0cb      	beq.n	8002ec4 <__swbuf_r+0x28>
 8002f2c:	f04f 37ff 	mov.w	r7, #4294967295
 8002f30:	e7ea      	b.n	8002f08 <__swbuf_r+0x6c>
 8002f32:	bf00      	nop
 8002f34:	0800391c 	.word	0x0800391c
 8002f38:	0800393c 	.word	0x0800393c
 8002f3c:	080038fc 	.word	0x080038fc

08002f40 <__swsetup_r>:
 8002f40:	4b32      	ldr	r3, [pc, #200]	; (800300c <__swsetup_r+0xcc>)
 8002f42:	b570      	push	{r4, r5, r6, lr}
 8002f44:	681d      	ldr	r5, [r3, #0]
 8002f46:	4606      	mov	r6, r0
 8002f48:	460c      	mov	r4, r1
 8002f4a:	b125      	cbz	r5, 8002f56 <__swsetup_r+0x16>
 8002f4c:	69ab      	ldr	r3, [r5, #24]
 8002f4e:	b913      	cbnz	r3, 8002f56 <__swsetup_r+0x16>
 8002f50:	4628      	mov	r0, r5
 8002f52:	f000 f97d 	bl	8003250 <__sinit>
 8002f56:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <__swsetup_r+0xd0>)
 8002f58:	429c      	cmp	r4, r3
 8002f5a:	d10f      	bne.n	8002f7c <__swsetup_r+0x3c>
 8002f5c:	686c      	ldr	r4, [r5, #4]
 8002f5e:	89a3      	ldrh	r3, [r4, #12]
 8002f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f64:	0719      	lsls	r1, r3, #28
 8002f66:	d42c      	bmi.n	8002fc2 <__swsetup_r+0x82>
 8002f68:	06dd      	lsls	r5, r3, #27
 8002f6a:	d411      	bmi.n	8002f90 <__swsetup_r+0x50>
 8002f6c:	2309      	movs	r3, #9
 8002f6e:	6033      	str	r3, [r6, #0]
 8002f70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295
 8002f78:	81a3      	strh	r3, [r4, #12]
 8002f7a:	e03e      	b.n	8002ffa <__swsetup_r+0xba>
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <__swsetup_r+0xd4>)
 8002f7e:	429c      	cmp	r4, r3
 8002f80:	d101      	bne.n	8002f86 <__swsetup_r+0x46>
 8002f82:	68ac      	ldr	r4, [r5, #8]
 8002f84:	e7eb      	b.n	8002f5e <__swsetup_r+0x1e>
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <__swsetup_r+0xd8>)
 8002f88:	429c      	cmp	r4, r3
 8002f8a:	bf08      	it	eq
 8002f8c:	68ec      	ldreq	r4, [r5, #12]
 8002f8e:	e7e6      	b.n	8002f5e <__swsetup_r+0x1e>
 8002f90:	0758      	lsls	r0, r3, #29
 8002f92:	d512      	bpl.n	8002fba <__swsetup_r+0x7a>
 8002f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f96:	b141      	cbz	r1, 8002faa <__swsetup_r+0x6a>
 8002f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f9c:	4299      	cmp	r1, r3
 8002f9e:	d002      	beq.n	8002fa6 <__swsetup_r+0x66>
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	f000 fa59 	bl	8003458 <_free_r>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8002faa:	89a3      	ldrh	r3, [r4, #12]
 8002fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fb0:	81a3      	strh	r3, [r4, #12]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6063      	str	r3, [r4, #4]
 8002fb6:	6923      	ldr	r3, [r4, #16]
 8002fb8:	6023      	str	r3, [r4, #0]
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	81a3      	strh	r3, [r4, #12]
 8002fc2:	6923      	ldr	r3, [r4, #16]
 8002fc4:	b94b      	cbnz	r3, 8002fda <__swsetup_r+0x9a>
 8002fc6:	89a3      	ldrh	r3, [r4, #12]
 8002fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd0:	d003      	beq.n	8002fda <__swsetup_r+0x9a>
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	f000 f9ff 	bl	80033d8 <__smakebuf_r>
 8002fda:	89a0      	ldrh	r0, [r4, #12]
 8002fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fe0:	f010 0301 	ands.w	r3, r0, #1
 8002fe4:	d00a      	beq.n	8002ffc <__swsetup_r+0xbc>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60a3      	str	r3, [r4, #8]
 8002fea:	6963      	ldr	r3, [r4, #20]
 8002fec:	425b      	negs	r3, r3
 8002fee:	61a3      	str	r3, [r4, #24]
 8002ff0:	6923      	ldr	r3, [r4, #16]
 8002ff2:	b943      	cbnz	r3, 8003006 <__swsetup_r+0xc6>
 8002ff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ff8:	d1ba      	bne.n	8002f70 <__swsetup_r+0x30>
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	0781      	lsls	r1, r0, #30
 8002ffe:	bf58      	it	pl
 8003000:	6963      	ldrpl	r3, [r4, #20]
 8003002:	60a3      	str	r3, [r4, #8]
 8003004:	e7f4      	b.n	8002ff0 <__swsetup_r+0xb0>
 8003006:	2000      	movs	r0, #0
 8003008:	e7f7      	b.n	8002ffa <__swsetup_r+0xba>
 800300a:	bf00      	nop
 800300c:	20000050 	.word	0x20000050
 8003010:	0800391c 	.word	0x0800391c
 8003014:	0800393c 	.word	0x0800393c
 8003018:	080038fc 	.word	0x080038fc

0800301c <__sflush_r>:
 800301c:	898a      	ldrh	r2, [r1, #12]
 800301e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003022:	4605      	mov	r5, r0
 8003024:	0710      	lsls	r0, r2, #28
 8003026:	460c      	mov	r4, r1
 8003028:	d458      	bmi.n	80030dc <__sflush_r+0xc0>
 800302a:	684b      	ldr	r3, [r1, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	dc05      	bgt.n	800303c <__sflush_r+0x20>
 8003030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	dc02      	bgt.n	800303c <__sflush_r+0x20>
 8003036:	2000      	movs	r0, #0
 8003038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800303c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800303e:	2e00      	cmp	r6, #0
 8003040:	d0f9      	beq.n	8003036 <__sflush_r+0x1a>
 8003042:	2300      	movs	r3, #0
 8003044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003048:	682f      	ldr	r7, [r5, #0]
 800304a:	602b      	str	r3, [r5, #0]
 800304c:	d032      	beq.n	80030b4 <__sflush_r+0x98>
 800304e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	075a      	lsls	r2, r3, #29
 8003054:	d505      	bpl.n	8003062 <__sflush_r+0x46>
 8003056:	6863      	ldr	r3, [r4, #4]
 8003058:	1ac0      	subs	r0, r0, r3
 800305a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800305c:	b10b      	cbz	r3, 8003062 <__sflush_r+0x46>
 800305e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003060:	1ac0      	subs	r0, r0, r3
 8003062:	2300      	movs	r3, #0
 8003064:	4602      	mov	r2, r0
 8003066:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003068:	4628      	mov	r0, r5
 800306a:	6a21      	ldr	r1, [r4, #32]
 800306c:	47b0      	blx	r6
 800306e:	1c43      	adds	r3, r0, #1
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	d106      	bne.n	8003082 <__sflush_r+0x66>
 8003074:	6829      	ldr	r1, [r5, #0]
 8003076:	291d      	cmp	r1, #29
 8003078:	d82c      	bhi.n	80030d4 <__sflush_r+0xb8>
 800307a:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <__sflush_r+0x108>)
 800307c:	40ca      	lsrs	r2, r1
 800307e:	07d6      	lsls	r6, r2, #31
 8003080:	d528      	bpl.n	80030d4 <__sflush_r+0xb8>
 8003082:	2200      	movs	r2, #0
 8003084:	6062      	str	r2, [r4, #4]
 8003086:	6922      	ldr	r2, [r4, #16]
 8003088:	04d9      	lsls	r1, r3, #19
 800308a:	6022      	str	r2, [r4, #0]
 800308c:	d504      	bpl.n	8003098 <__sflush_r+0x7c>
 800308e:	1c42      	adds	r2, r0, #1
 8003090:	d101      	bne.n	8003096 <__sflush_r+0x7a>
 8003092:	682b      	ldr	r3, [r5, #0]
 8003094:	b903      	cbnz	r3, 8003098 <__sflush_r+0x7c>
 8003096:	6560      	str	r0, [r4, #84]	; 0x54
 8003098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800309a:	602f      	str	r7, [r5, #0]
 800309c:	2900      	cmp	r1, #0
 800309e:	d0ca      	beq.n	8003036 <__sflush_r+0x1a>
 80030a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030a4:	4299      	cmp	r1, r3
 80030a6:	d002      	beq.n	80030ae <__sflush_r+0x92>
 80030a8:	4628      	mov	r0, r5
 80030aa:	f000 f9d5 	bl	8003458 <_free_r>
 80030ae:	2000      	movs	r0, #0
 80030b0:	6360      	str	r0, [r4, #52]	; 0x34
 80030b2:	e7c1      	b.n	8003038 <__sflush_r+0x1c>
 80030b4:	6a21      	ldr	r1, [r4, #32]
 80030b6:	2301      	movs	r3, #1
 80030b8:	4628      	mov	r0, r5
 80030ba:	47b0      	blx	r6
 80030bc:	1c41      	adds	r1, r0, #1
 80030be:	d1c7      	bne.n	8003050 <__sflush_r+0x34>
 80030c0:	682b      	ldr	r3, [r5, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0c4      	beq.n	8003050 <__sflush_r+0x34>
 80030c6:	2b1d      	cmp	r3, #29
 80030c8:	d001      	beq.n	80030ce <__sflush_r+0xb2>
 80030ca:	2b16      	cmp	r3, #22
 80030cc:	d101      	bne.n	80030d2 <__sflush_r+0xb6>
 80030ce:	602f      	str	r7, [r5, #0]
 80030d0:	e7b1      	b.n	8003036 <__sflush_r+0x1a>
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d8:	81a3      	strh	r3, [r4, #12]
 80030da:	e7ad      	b.n	8003038 <__sflush_r+0x1c>
 80030dc:	690f      	ldr	r7, [r1, #16]
 80030de:	2f00      	cmp	r7, #0
 80030e0:	d0a9      	beq.n	8003036 <__sflush_r+0x1a>
 80030e2:	0793      	lsls	r3, r2, #30
 80030e4:	bf18      	it	ne
 80030e6:	2300      	movne	r3, #0
 80030e8:	680e      	ldr	r6, [r1, #0]
 80030ea:	bf08      	it	eq
 80030ec:	694b      	ldreq	r3, [r1, #20]
 80030ee:	eba6 0807 	sub.w	r8, r6, r7
 80030f2:	600f      	str	r7, [r1, #0]
 80030f4:	608b      	str	r3, [r1, #8]
 80030f6:	f1b8 0f00 	cmp.w	r8, #0
 80030fa:	dd9c      	ble.n	8003036 <__sflush_r+0x1a>
 80030fc:	4643      	mov	r3, r8
 80030fe:	463a      	mov	r2, r7
 8003100:	4628      	mov	r0, r5
 8003102:	6a21      	ldr	r1, [r4, #32]
 8003104:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003106:	47b0      	blx	r6
 8003108:	2800      	cmp	r0, #0
 800310a:	dc06      	bgt.n	800311a <__sflush_r+0xfe>
 800310c:	89a3      	ldrh	r3, [r4, #12]
 800310e:	f04f 30ff 	mov.w	r0, #4294967295
 8003112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003116:	81a3      	strh	r3, [r4, #12]
 8003118:	e78e      	b.n	8003038 <__sflush_r+0x1c>
 800311a:	4407      	add	r7, r0
 800311c:	eba8 0800 	sub.w	r8, r8, r0
 8003120:	e7e9      	b.n	80030f6 <__sflush_r+0xda>
 8003122:	bf00      	nop
 8003124:	20400001 	.word	0x20400001

08003128 <_fflush_r>:
 8003128:	b538      	push	{r3, r4, r5, lr}
 800312a:	690b      	ldr	r3, [r1, #16]
 800312c:	4605      	mov	r5, r0
 800312e:	460c      	mov	r4, r1
 8003130:	b913      	cbnz	r3, 8003138 <_fflush_r+0x10>
 8003132:	2500      	movs	r5, #0
 8003134:	4628      	mov	r0, r5
 8003136:	bd38      	pop	{r3, r4, r5, pc}
 8003138:	b118      	cbz	r0, 8003142 <_fflush_r+0x1a>
 800313a:	6983      	ldr	r3, [r0, #24]
 800313c:	b90b      	cbnz	r3, 8003142 <_fflush_r+0x1a>
 800313e:	f000 f887 	bl	8003250 <__sinit>
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <_fflush_r+0x6c>)
 8003144:	429c      	cmp	r4, r3
 8003146:	d11b      	bne.n	8003180 <_fflush_r+0x58>
 8003148:	686c      	ldr	r4, [r5, #4]
 800314a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0ef      	beq.n	8003132 <_fflush_r+0xa>
 8003152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003154:	07d0      	lsls	r0, r2, #31
 8003156:	d404      	bmi.n	8003162 <_fflush_r+0x3a>
 8003158:	0599      	lsls	r1, r3, #22
 800315a:	d402      	bmi.n	8003162 <_fflush_r+0x3a>
 800315c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800315e:	f000 f915 	bl	800338c <__retarget_lock_acquire_recursive>
 8003162:	4628      	mov	r0, r5
 8003164:	4621      	mov	r1, r4
 8003166:	f7ff ff59 	bl	800301c <__sflush_r>
 800316a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800316c:	4605      	mov	r5, r0
 800316e:	07da      	lsls	r2, r3, #31
 8003170:	d4e0      	bmi.n	8003134 <_fflush_r+0xc>
 8003172:	89a3      	ldrh	r3, [r4, #12]
 8003174:	059b      	lsls	r3, r3, #22
 8003176:	d4dd      	bmi.n	8003134 <_fflush_r+0xc>
 8003178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800317a:	f000 f908 	bl	800338e <__retarget_lock_release_recursive>
 800317e:	e7d9      	b.n	8003134 <_fflush_r+0xc>
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <_fflush_r+0x70>)
 8003182:	429c      	cmp	r4, r3
 8003184:	d101      	bne.n	800318a <_fflush_r+0x62>
 8003186:	68ac      	ldr	r4, [r5, #8]
 8003188:	e7df      	b.n	800314a <_fflush_r+0x22>
 800318a:	4b04      	ldr	r3, [pc, #16]	; (800319c <_fflush_r+0x74>)
 800318c:	429c      	cmp	r4, r3
 800318e:	bf08      	it	eq
 8003190:	68ec      	ldreq	r4, [r5, #12]
 8003192:	e7da      	b.n	800314a <_fflush_r+0x22>
 8003194:	0800391c 	.word	0x0800391c
 8003198:	0800393c 	.word	0x0800393c
 800319c:	080038fc 	.word	0x080038fc

080031a0 <std>:
 80031a0:	2300      	movs	r3, #0
 80031a2:	b510      	push	{r4, lr}
 80031a4:	4604      	mov	r4, r0
 80031a6:	e9c0 3300 	strd	r3, r3, [r0]
 80031aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031ae:	6083      	str	r3, [r0, #8]
 80031b0:	8181      	strh	r1, [r0, #12]
 80031b2:	6643      	str	r3, [r0, #100]	; 0x64
 80031b4:	81c2      	strh	r2, [r0, #14]
 80031b6:	6183      	str	r3, [r0, #24]
 80031b8:	4619      	mov	r1, r3
 80031ba:	2208      	movs	r2, #8
 80031bc:	305c      	adds	r0, #92	; 0x5c
 80031be:	f7ff fdef 	bl	8002da0 <memset>
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <std+0x38>)
 80031c4:	6224      	str	r4, [r4, #32]
 80031c6:	6263      	str	r3, [r4, #36]	; 0x24
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <std+0x3c>)
 80031ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <std+0x40>)
 80031ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <std+0x44>)
 80031d2:	6323      	str	r3, [r4, #48]	; 0x30
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	bf00      	nop
 80031d8:	080035c5 	.word	0x080035c5
 80031dc:	080035e7 	.word	0x080035e7
 80031e0:	0800361f 	.word	0x0800361f
 80031e4:	08003643 	.word	0x08003643

080031e8 <_cleanup_r>:
 80031e8:	4901      	ldr	r1, [pc, #4]	; (80031f0 <_cleanup_r+0x8>)
 80031ea:	f000 b8af 	b.w	800334c <_fwalk_reent>
 80031ee:	bf00      	nop
 80031f0:	08003129 	.word	0x08003129

080031f4 <__sfmoreglue>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	2568      	movs	r5, #104	; 0x68
 80031f8:	1e4a      	subs	r2, r1, #1
 80031fa:	4355      	muls	r5, r2
 80031fc:	460e      	mov	r6, r1
 80031fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003202:	f000 f975 	bl	80034f0 <_malloc_r>
 8003206:	4604      	mov	r4, r0
 8003208:	b140      	cbz	r0, 800321c <__sfmoreglue+0x28>
 800320a:	2100      	movs	r1, #0
 800320c:	e9c0 1600 	strd	r1, r6, [r0]
 8003210:	300c      	adds	r0, #12
 8003212:	60a0      	str	r0, [r4, #8]
 8003214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003218:	f7ff fdc2 	bl	8002da0 <memset>
 800321c:	4620      	mov	r0, r4
 800321e:	bd70      	pop	{r4, r5, r6, pc}

08003220 <__sfp_lock_acquire>:
 8003220:	4801      	ldr	r0, [pc, #4]	; (8003228 <__sfp_lock_acquire+0x8>)
 8003222:	f000 b8b3 	b.w	800338c <__retarget_lock_acquire_recursive>
 8003226:	bf00      	nop
 8003228:	200001c8 	.word	0x200001c8

0800322c <__sfp_lock_release>:
 800322c:	4801      	ldr	r0, [pc, #4]	; (8003234 <__sfp_lock_release+0x8>)
 800322e:	f000 b8ae 	b.w	800338e <__retarget_lock_release_recursive>
 8003232:	bf00      	nop
 8003234:	200001c8 	.word	0x200001c8

08003238 <__sinit_lock_acquire>:
 8003238:	4801      	ldr	r0, [pc, #4]	; (8003240 <__sinit_lock_acquire+0x8>)
 800323a:	f000 b8a7 	b.w	800338c <__retarget_lock_acquire_recursive>
 800323e:	bf00      	nop
 8003240:	200001c3 	.word	0x200001c3

08003244 <__sinit_lock_release>:
 8003244:	4801      	ldr	r0, [pc, #4]	; (800324c <__sinit_lock_release+0x8>)
 8003246:	f000 b8a2 	b.w	800338e <__retarget_lock_release_recursive>
 800324a:	bf00      	nop
 800324c:	200001c3 	.word	0x200001c3

08003250 <__sinit>:
 8003250:	b510      	push	{r4, lr}
 8003252:	4604      	mov	r4, r0
 8003254:	f7ff fff0 	bl	8003238 <__sinit_lock_acquire>
 8003258:	69a3      	ldr	r3, [r4, #24]
 800325a:	b11b      	cbz	r3, 8003264 <__sinit+0x14>
 800325c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003260:	f7ff bff0 	b.w	8003244 <__sinit_lock_release>
 8003264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003268:	6523      	str	r3, [r4, #80]	; 0x50
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <__sinit+0x68>)
 800326c:	4a13      	ldr	r2, [pc, #76]	; (80032bc <__sinit+0x6c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	62a2      	str	r2, [r4, #40]	; 0x28
 8003272:	42a3      	cmp	r3, r4
 8003274:	bf08      	it	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	4620      	mov	r0, r4
 800327a:	bf08      	it	eq
 800327c:	61a3      	streq	r3, [r4, #24]
 800327e:	f000 f81f 	bl	80032c0 <__sfp>
 8003282:	6060      	str	r0, [r4, #4]
 8003284:	4620      	mov	r0, r4
 8003286:	f000 f81b 	bl	80032c0 <__sfp>
 800328a:	60a0      	str	r0, [r4, #8]
 800328c:	4620      	mov	r0, r4
 800328e:	f000 f817 	bl	80032c0 <__sfp>
 8003292:	2200      	movs	r2, #0
 8003294:	2104      	movs	r1, #4
 8003296:	60e0      	str	r0, [r4, #12]
 8003298:	6860      	ldr	r0, [r4, #4]
 800329a:	f7ff ff81 	bl	80031a0 <std>
 800329e:	2201      	movs	r2, #1
 80032a0:	2109      	movs	r1, #9
 80032a2:	68a0      	ldr	r0, [r4, #8]
 80032a4:	f7ff ff7c 	bl	80031a0 <std>
 80032a8:	2202      	movs	r2, #2
 80032aa:	2112      	movs	r1, #18
 80032ac:	68e0      	ldr	r0, [r4, #12]
 80032ae:	f7ff ff77 	bl	80031a0 <std>
 80032b2:	2301      	movs	r3, #1
 80032b4:	61a3      	str	r3, [r4, #24]
 80032b6:	e7d1      	b.n	800325c <__sinit+0xc>
 80032b8:	080038f8 	.word	0x080038f8
 80032bc:	080031e9 	.word	0x080031e9

080032c0 <__sfp>:
 80032c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c2:	4607      	mov	r7, r0
 80032c4:	f7ff ffac 	bl	8003220 <__sfp_lock_acquire>
 80032c8:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <__sfp+0x84>)
 80032ca:	681e      	ldr	r6, [r3, #0]
 80032cc:	69b3      	ldr	r3, [r6, #24]
 80032ce:	b913      	cbnz	r3, 80032d6 <__sfp+0x16>
 80032d0:	4630      	mov	r0, r6
 80032d2:	f7ff ffbd 	bl	8003250 <__sinit>
 80032d6:	3648      	adds	r6, #72	; 0x48
 80032d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80032dc:	3b01      	subs	r3, #1
 80032de:	d503      	bpl.n	80032e8 <__sfp+0x28>
 80032e0:	6833      	ldr	r3, [r6, #0]
 80032e2:	b30b      	cbz	r3, 8003328 <__sfp+0x68>
 80032e4:	6836      	ldr	r6, [r6, #0]
 80032e6:	e7f7      	b.n	80032d8 <__sfp+0x18>
 80032e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80032ec:	b9d5      	cbnz	r5, 8003324 <__sfp+0x64>
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <__sfp+0x88>)
 80032f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80032f4:	60e3      	str	r3, [r4, #12]
 80032f6:	6665      	str	r5, [r4, #100]	; 0x64
 80032f8:	f000 f847 	bl	800338a <__retarget_lock_init_recursive>
 80032fc:	f7ff ff96 	bl	800322c <__sfp_lock_release>
 8003300:	2208      	movs	r2, #8
 8003302:	4629      	mov	r1, r5
 8003304:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003308:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800330c:	6025      	str	r5, [r4, #0]
 800330e:	61a5      	str	r5, [r4, #24]
 8003310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003314:	f7ff fd44 	bl	8002da0 <memset>
 8003318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800331c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003320:	4620      	mov	r0, r4
 8003322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003324:	3468      	adds	r4, #104	; 0x68
 8003326:	e7d9      	b.n	80032dc <__sfp+0x1c>
 8003328:	2104      	movs	r1, #4
 800332a:	4638      	mov	r0, r7
 800332c:	f7ff ff62 	bl	80031f4 <__sfmoreglue>
 8003330:	4604      	mov	r4, r0
 8003332:	6030      	str	r0, [r6, #0]
 8003334:	2800      	cmp	r0, #0
 8003336:	d1d5      	bne.n	80032e4 <__sfp+0x24>
 8003338:	f7ff ff78 	bl	800322c <__sfp_lock_release>
 800333c:	230c      	movs	r3, #12
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	e7ee      	b.n	8003320 <__sfp+0x60>
 8003342:	bf00      	nop
 8003344:	080038f8 	.word	0x080038f8
 8003348:	ffff0001 	.word	0xffff0001

0800334c <_fwalk_reent>:
 800334c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003350:	4606      	mov	r6, r0
 8003352:	4688      	mov	r8, r1
 8003354:	2700      	movs	r7, #0
 8003356:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800335a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800335e:	f1b9 0901 	subs.w	r9, r9, #1
 8003362:	d505      	bpl.n	8003370 <_fwalk_reent+0x24>
 8003364:	6824      	ldr	r4, [r4, #0]
 8003366:	2c00      	cmp	r4, #0
 8003368:	d1f7      	bne.n	800335a <_fwalk_reent+0xe>
 800336a:	4638      	mov	r0, r7
 800336c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003370:	89ab      	ldrh	r3, [r5, #12]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d907      	bls.n	8003386 <_fwalk_reent+0x3a>
 8003376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800337a:	3301      	adds	r3, #1
 800337c:	d003      	beq.n	8003386 <_fwalk_reent+0x3a>
 800337e:	4629      	mov	r1, r5
 8003380:	4630      	mov	r0, r6
 8003382:	47c0      	blx	r8
 8003384:	4307      	orrs	r7, r0
 8003386:	3568      	adds	r5, #104	; 0x68
 8003388:	e7e9      	b.n	800335e <_fwalk_reent+0x12>

0800338a <__retarget_lock_init_recursive>:
 800338a:	4770      	bx	lr

0800338c <__retarget_lock_acquire_recursive>:
 800338c:	4770      	bx	lr

0800338e <__retarget_lock_release_recursive>:
 800338e:	4770      	bx	lr

08003390 <__swhatbuf_r>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	460e      	mov	r6, r1
 8003394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003398:	4614      	mov	r4, r2
 800339a:	2900      	cmp	r1, #0
 800339c:	461d      	mov	r5, r3
 800339e:	b096      	sub	sp, #88	; 0x58
 80033a0:	da07      	bge.n	80033b2 <__swhatbuf_r+0x22>
 80033a2:	2300      	movs	r3, #0
 80033a4:	602b      	str	r3, [r5, #0]
 80033a6:	89b3      	ldrh	r3, [r6, #12]
 80033a8:	061a      	lsls	r2, r3, #24
 80033aa:	d410      	bmi.n	80033ce <__swhatbuf_r+0x3e>
 80033ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b0:	e00e      	b.n	80033d0 <__swhatbuf_r+0x40>
 80033b2:	466a      	mov	r2, sp
 80033b4:	f000 f96c 	bl	8003690 <_fstat_r>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	dbf2      	blt.n	80033a2 <__swhatbuf_r+0x12>
 80033bc:	9a01      	ldr	r2, [sp, #4]
 80033be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033c6:	425a      	negs	r2, r3
 80033c8:	415a      	adcs	r2, r3
 80033ca:	602a      	str	r2, [r5, #0]
 80033cc:	e7ee      	b.n	80033ac <__swhatbuf_r+0x1c>
 80033ce:	2340      	movs	r3, #64	; 0x40
 80033d0:	2000      	movs	r0, #0
 80033d2:	6023      	str	r3, [r4, #0]
 80033d4:	b016      	add	sp, #88	; 0x58
 80033d6:	bd70      	pop	{r4, r5, r6, pc}

080033d8 <__smakebuf_r>:
 80033d8:	898b      	ldrh	r3, [r1, #12]
 80033da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033dc:	079d      	lsls	r5, r3, #30
 80033de:	4606      	mov	r6, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	d507      	bpl.n	80033f4 <__smakebuf_r+0x1c>
 80033e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80033e8:	6023      	str	r3, [r4, #0]
 80033ea:	6123      	str	r3, [r4, #16]
 80033ec:	2301      	movs	r3, #1
 80033ee:	6163      	str	r3, [r4, #20]
 80033f0:	b002      	add	sp, #8
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	466a      	mov	r2, sp
 80033f6:	ab01      	add	r3, sp, #4
 80033f8:	f7ff ffca 	bl	8003390 <__swhatbuf_r>
 80033fc:	9900      	ldr	r1, [sp, #0]
 80033fe:	4605      	mov	r5, r0
 8003400:	4630      	mov	r0, r6
 8003402:	f000 f875 	bl	80034f0 <_malloc_r>
 8003406:	b948      	cbnz	r0, 800341c <__smakebuf_r+0x44>
 8003408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800340c:	059a      	lsls	r2, r3, #22
 800340e:	d4ef      	bmi.n	80033f0 <__smakebuf_r+0x18>
 8003410:	f023 0303 	bic.w	r3, r3, #3
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	81a3      	strh	r3, [r4, #12]
 800341a:	e7e3      	b.n	80033e4 <__smakebuf_r+0xc>
 800341c:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <__smakebuf_r+0x7c>)
 800341e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	6020      	str	r0, [r4, #0]
 8003424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003428:	81a3      	strh	r3, [r4, #12]
 800342a:	9b00      	ldr	r3, [sp, #0]
 800342c:	6120      	str	r0, [r4, #16]
 800342e:	6163      	str	r3, [r4, #20]
 8003430:	9b01      	ldr	r3, [sp, #4]
 8003432:	b15b      	cbz	r3, 800344c <__smakebuf_r+0x74>
 8003434:	4630      	mov	r0, r6
 8003436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800343a:	f000 f93b 	bl	80036b4 <_isatty_r>
 800343e:	b128      	cbz	r0, 800344c <__smakebuf_r+0x74>
 8003440:	89a3      	ldrh	r3, [r4, #12]
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	81a3      	strh	r3, [r4, #12]
 800344c:	89a0      	ldrh	r0, [r4, #12]
 800344e:	4305      	orrs	r5, r0
 8003450:	81a5      	strh	r5, [r4, #12]
 8003452:	e7cd      	b.n	80033f0 <__smakebuf_r+0x18>
 8003454:	080031e9 	.word	0x080031e9

08003458 <_free_r>:
 8003458:	b538      	push	{r3, r4, r5, lr}
 800345a:	4605      	mov	r5, r0
 800345c:	2900      	cmp	r1, #0
 800345e:	d043      	beq.n	80034e8 <_free_r+0x90>
 8003460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003464:	1f0c      	subs	r4, r1, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	bfb8      	it	lt
 800346a:	18e4      	addlt	r4, r4, r3
 800346c:	f000 f944 	bl	80036f8 <__malloc_lock>
 8003470:	4a1e      	ldr	r2, [pc, #120]	; (80034ec <_free_r+0x94>)
 8003472:	6813      	ldr	r3, [r2, #0]
 8003474:	4610      	mov	r0, r2
 8003476:	b933      	cbnz	r3, 8003486 <_free_r+0x2e>
 8003478:	6063      	str	r3, [r4, #4]
 800347a:	6014      	str	r4, [r2, #0]
 800347c:	4628      	mov	r0, r5
 800347e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003482:	f000 b93f 	b.w	8003704 <__malloc_unlock>
 8003486:	42a3      	cmp	r3, r4
 8003488:	d90a      	bls.n	80034a0 <_free_r+0x48>
 800348a:	6821      	ldr	r1, [r4, #0]
 800348c:	1862      	adds	r2, r4, r1
 800348e:	4293      	cmp	r3, r2
 8003490:	bf01      	itttt	eq
 8003492:	681a      	ldreq	r2, [r3, #0]
 8003494:	685b      	ldreq	r3, [r3, #4]
 8003496:	1852      	addeq	r2, r2, r1
 8003498:	6022      	streq	r2, [r4, #0]
 800349a:	6063      	str	r3, [r4, #4]
 800349c:	6004      	str	r4, [r0, #0]
 800349e:	e7ed      	b.n	800347c <_free_r+0x24>
 80034a0:	461a      	mov	r2, r3
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	b10b      	cbz	r3, 80034aa <_free_r+0x52>
 80034a6:	42a3      	cmp	r3, r4
 80034a8:	d9fa      	bls.n	80034a0 <_free_r+0x48>
 80034aa:	6811      	ldr	r1, [r2, #0]
 80034ac:	1850      	adds	r0, r2, r1
 80034ae:	42a0      	cmp	r0, r4
 80034b0:	d10b      	bne.n	80034ca <_free_r+0x72>
 80034b2:	6820      	ldr	r0, [r4, #0]
 80034b4:	4401      	add	r1, r0
 80034b6:	1850      	adds	r0, r2, r1
 80034b8:	4283      	cmp	r3, r0
 80034ba:	6011      	str	r1, [r2, #0]
 80034bc:	d1de      	bne.n	800347c <_free_r+0x24>
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4401      	add	r1, r0
 80034c4:	6011      	str	r1, [r2, #0]
 80034c6:	6053      	str	r3, [r2, #4]
 80034c8:	e7d8      	b.n	800347c <_free_r+0x24>
 80034ca:	d902      	bls.n	80034d2 <_free_r+0x7a>
 80034cc:	230c      	movs	r3, #12
 80034ce:	602b      	str	r3, [r5, #0]
 80034d0:	e7d4      	b.n	800347c <_free_r+0x24>
 80034d2:	6820      	ldr	r0, [r4, #0]
 80034d4:	1821      	adds	r1, r4, r0
 80034d6:	428b      	cmp	r3, r1
 80034d8:	bf01      	itttt	eq
 80034da:	6819      	ldreq	r1, [r3, #0]
 80034dc:	685b      	ldreq	r3, [r3, #4]
 80034de:	1809      	addeq	r1, r1, r0
 80034e0:	6021      	streq	r1, [r4, #0]
 80034e2:	6063      	str	r3, [r4, #4]
 80034e4:	6054      	str	r4, [r2, #4]
 80034e6:	e7c9      	b.n	800347c <_free_r+0x24>
 80034e8:	bd38      	pop	{r3, r4, r5, pc}
 80034ea:	bf00      	nop
 80034ec:	20000128 	.word	0x20000128

080034f0 <_malloc_r>:
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f2:	1ccd      	adds	r5, r1, #3
 80034f4:	f025 0503 	bic.w	r5, r5, #3
 80034f8:	3508      	adds	r5, #8
 80034fa:	2d0c      	cmp	r5, #12
 80034fc:	bf38      	it	cc
 80034fe:	250c      	movcc	r5, #12
 8003500:	2d00      	cmp	r5, #0
 8003502:	4606      	mov	r6, r0
 8003504:	db01      	blt.n	800350a <_malloc_r+0x1a>
 8003506:	42a9      	cmp	r1, r5
 8003508:	d903      	bls.n	8003512 <_malloc_r+0x22>
 800350a:	230c      	movs	r3, #12
 800350c:	6033      	str	r3, [r6, #0]
 800350e:	2000      	movs	r0, #0
 8003510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003512:	f000 f8f1 	bl	80036f8 <__malloc_lock>
 8003516:	4921      	ldr	r1, [pc, #132]	; (800359c <_malloc_r+0xac>)
 8003518:	680a      	ldr	r2, [r1, #0]
 800351a:	4614      	mov	r4, r2
 800351c:	b99c      	cbnz	r4, 8003546 <_malloc_r+0x56>
 800351e:	4f20      	ldr	r7, [pc, #128]	; (80035a0 <_malloc_r+0xb0>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	b923      	cbnz	r3, 800352e <_malloc_r+0x3e>
 8003524:	4621      	mov	r1, r4
 8003526:	4630      	mov	r0, r6
 8003528:	f000 f83c 	bl	80035a4 <_sbrk_r>
 800352c:	6038      	str	r0, [r7, #0]
 800352e:	4629      	mov	r1, r5
 8003530:	4630      	mov	r0, r6
 8003532:	f000 f837 	bl	80035a4 <_sbrk_r>
 8003536:	1c43      	adds	r3, r0, #1
 8003538:	d123      	bne.n	8003582 <_malloc_r+0x92>
 800353a:	230c      	movs	r3, #12
 800353c:	4630      	mov	r0, r6
 800353e:	6033      	str	r3, [r6, #0]
 8003540:	f000 f8e0 	bl	8003704 <__malloc_unlock>
 8003544:	e7e3      	b.n	800350e <_malloc_r+0x1e>
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	1b5b      	subs	r3, r3, r5
 800354a:	d417      	bmi.n	800357c <_malloc_r+0x8c>
 800354c:	2b0b      	cmp	r3, #11
 800354e:	d903      	bls.n	8003558 <_malloc_r+0x68>
 8003550:	6023      	str	r3, [r4, #0]
 8003552:	441c      	add	r4, r3
 8003554:	6025      	str	r5, [r4, #0]
 8003556:	e004      	b.n	8003562 <_malloc_r+0x72>
 8003558:	6863      	ldr	r3, [r4, #4]
 800355a:	42a2      	cmp	r2, r4
 800355c:	bf0c      	ite	eq
 800355e:	600b      	streq	r3, [r1, #0]
 8003560:	6053      	strne	r3, [r2, #4]
 8003562:	4630      	mov	r0, r6
 8003564:	f000 f8ce 	bl	8003704 <__malloc_unlock>
 8003568:	f104 000b 	add.w	r0, r4, #11
 800356c:	1d23      	adds	r3, r4, #4
 800356e:	f020 0007 	bic.w	r0, r0, #7
 8003572:	1ac2      	subs	r2, r0, r3
 8003574:	d0cc      	beq.n	8003510 <_malloc_r+0x20>
 8003576:	1a1b      	subs	r3, r3, r0
 8003578:	50a3      	str	r3, [r4, r2]
 800357a:	e7c9      	b.n	8003510 <_malloc_r+0x20>
 800357c:	4622      	mov	r2, r4
 800357e:	6864      	ldr	r4, [r4, #4]
 8003580:	e7cc      	b.n	800351c <_malloc_r+0x2c>
 8003582:	1cc4      	adds	r4, r0, #3
 8003584:	f024 0403 	bic.w	r4, r4, #3
 8003588:	42a0      	cmp	r0, r4
 800358a:	d0e3      	beq.n	8003554 <_malloc_r+0x64>
 800358c:	1a21      	subs	r1, r4, r0
 800358e:	4630      	mov	r0, r6
 8003590:	f000 f808 	bl	80035a4 <_sbrk_r>
 8003594:	3001      	adds	r0, #1
 8003596:	d1dd      	bne.n	8003554 <_malloc_r+0x64>
 8003598:	e7cf      	b.n	800353a <_malloc_r+0x4a>
 800359a:	bf00      	nop
 800359c:	20000128 	.word	0x20000128
 80035a0:	2000012c 	.word	0x2000012c

080035a4 <_sbrk_r>:
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	2300      	movs	r3, #0
 80035a8:	4d05      	ldr	r5, [pc, #20]	; (80035c0 <_sbrk_r+0x1c>)
 80035aa:	4604      	mov	r4, r0
 80035ac:	4608      	mov	r0, r1
 80035ae:	602b      	str	r3, [r5, #0]
 80035b0:	f7fd fc2e 	bl	8000e10 <_sbrk>
 80035b4:	1c43      	adds	r3, r0, #1
 80035b6:	d102      	bne.n	80035be <_sbrk_r+0x1a>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	b103      	cbz	r3, 80035be <_sbrk_r+0x1a>
 80035bc:	6023      	str	r3, [r4, #0]
 80035be:	bd38      	pop	{r3, r4, r5, pc}
 80035c0:	200001cc 	.word	0x200001cc

080035c4 <__sread>:
 80035c4:	b510      	push	{r4, lr}
 80035c6:	460c      	mov	r4, r1
 80035c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035cc:	f000 f8a0 	bl	8003710 <_read_r>
 80035d0:	2800      	cmp	r0, #0
 80035d2:	bfab      	itete	ge
 80035d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035d6:	89a3      	ldrhlt	r3, [r4, #12]
 80035d8:	181b      	addge	r3, r3, r0
 80035da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035de:	bfac      	ite	ge
 80035e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80035e2:	81a3      	strhlt	r3, [r4, #12]
 80035e4:	bd10      	pop	{r4, pc}

080035e6 <__swrite>:
 80035e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ea:	461f      	mov	r7, r3
 80035ec:	898b      	ldrh	r3, [r1, #12]
 80035ee:	4605      	mov	r5, r0
 80035f0:	05db      	lsls	r3, r3, #23
 80035f2:	460c      	mov	r4, r1
 80035f4:	4616      	mov	r6, r2
 80035f6:	d505      	bpl.n	8003604 <__swrite+0x1e>
 80035f8:	2302      	movs	r3, #2
 80035fa:	2200      	movs	r2, #0
 80035fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003600:	f000 f868 	bl	80036d4 <_lseek_r>
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	4632      	mov	r2, r6
 8003608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800360c:	81a3      	strh	r3, [r4, #12]
 800360e:	4628      	mov	r0, r5
 8003610:	463b      	mov	r3, r7
 8003612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800361a:	f000 b817 	b.w	800364c <_write_r>

0800361e <__sseek>:
 800361e:	b510      	push	{r4, lr}
 8003620:	460c      	mov	r4, r1
 8003622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003626:	f000 f855 	bl	80036d4 <_lseek_r>
 800362a:	1c43      	adds	r3, r0, #1
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	bf15      	itete	ne
 8003630:	6560      	strne	r0, [r4, #84]	; 0x54
 8003632:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003636:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800363a:	81a3      	strheq	r3, [r4, #12]
 800363c:	bf18      	it	ne
 800363e:	81a3      	strhne	r3, [r4, #12]
 8003640:	bd10      	pop	{r4, pc}

08003642 <__sclose>:
 8003642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003646:	f000 b813 	b.w	8003670 <_close_r>
	...

0800364c <_write_r>:
 800364c:	b538      	push	{r3, r4, r5, lr}
 800364e:	4604      	mov	r4, r0
 8003650:	4608      	mov	r0, r1
 8003652:	4611      	mov	r1, r2
 8003654:	2200      	movs	r2, #0
 8003656:	4d05      	ldr	r5, [pc, #20]	; (800366c <_write_r+0x20>)
 8003658:	602a      	str	r2, [r5, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	f7fd f9e8 	bl	8000a30 <_write>
 8003660:	1c43      	adds	r3, r0, #1
 8003662:	d102      	bne.n	800366a <_write_r+0x1e>
 8003664:	682b      	ldr	r3, [r5, #0]
 8003666:	b103      	cbz	r3, 800366a <_write_r+0x1e>
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	bd38      	pop	{r3, r4, r5, pc}
 800366c:	200001cc 	.word	0x200001cc

08003670 <_close_r>:
 8003670:	b538      	push	{r3, r4, r5, lr}
 8003672:	2300      	movs	r3, #0
 8003674:	4d05      	ldr	r5, [pc, #20]	; (800368c <_close_r+0x1c>)
 8003676:	4604      	mov	r4, r0
 8003678:	4608      	mov	r0, r1
 800367a:	602b      	str	r3, [r5, #0]
 800367c:	f7fd fb97 	bl	8000dae <_close>
 8003680:	1c43      	adds	r3, r0, #1
 8003682:	d102      	bne.n	800368a <_close_r+0x1a>
 8003684:	682b      	ldr	r3, [r5, #0]
 8003686:	b103      	cbz	r3, 800368a <_close_r+0x1a>
 8003688:	6023      	str	r3, [r4, #0]
 800368a:	bd38      	pop	{r3, r4, r5, pc}
 800368c:	200001cc 	.word	0x200001cc

08003690 <_fstat_r>:
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	2300      	movs	r3, #0
 8003694:	4d06      	ldr	r5, [pc, #24]	; (80036b0 <_fstat_r+0x20>)
 8003696:	4604      	mov	r4, r0
 8003698:	4608      	mov	r0, r1
 800369a:	4611      	mov	r1, r2
 800369c:	602b      	str	r3, [r5, #0]
 800369e:	f7fd fb91 	bl	8000dc4 <_fstat>
 80036a2:	1c43      	adds	r3, r0, #1
 80036a4:	d102      	bne.n	80036ac <_fstat_r+0x1c>
 80036a6:	682b      	ldr	r3, [r5, #0]
 80036a8:	b103      	cbz	r3, 80036ac <_fstat_r+0x1c>
 80036aa:	6023      	str	r3, [r4, #0]
 80036ac:	bd38      	pop	{r3, r4, r5, pc}
 80036ae:	bf00      	nop
 80036b0:	200001cc 	.word	0x200001cc

080036b4 <_isatty_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	2300      	movs	r3, #0
 80036b8:	4d05      	ldr	r5, [pc, #20]	; (80036d0 <_isatty_r+0x1c>)
 80036ba:	4604      	mov	r4, r0
 80036bc:	4608      	mov	r0, r1
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	f7fd fb8f 	bl	8000de2 <_isatty>
 80036c4:	1c43      	adds	r3, r0, #1
 80036c6:	d102      	bne.n	80036ce <_isatty_r+0x1a>
 80036c8:	682b      	ldr	r3, [r5, #0]
 80036ca:	b103      	cbz	r3, 80036ce <_isatty_r+0x1a>
 80036cc:	6023      	str	r3, [r4, #0]
 80036ce:	bd38      	pop	{r3, r4, r5, pc}
 80036d0:	200001cc 	.word	0x200001cc

080036d4 <_lseek_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4604      	mov	r4, r0
 80036d8:	4608      	mov	r0, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	2200      	movs	r2, #0
 80036de:	4d05      	ldr	r5, [pc, #20]	; (80036f4 <_lseek_r+0x20>)
 80036e0:	602a      	str	r2, [r5, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f7fd fb87 	bl	8000df6 <_lseek>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d102      	bne.n	80036f2 <_lseek_r+0x1e>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	b103      	cbz	r3, 80036f2 <_lseek_r+0x1e>
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	200001cc 	.word	0x200001cc

080036f8 <__malloc_lock>:
 80036f8:	4801      	ldr	r0, [pc, #4]	; (8003700 <__malloc_lock+0x8>)
 80036fa:	f7ff be47 	b.w	800338c <__retarget_lock_acquire_recursive>
 80036fe:	bf00      	nop
 8003700:	200001c4 	.word	0x200001c4

08003704 <__malloc_unlock>:
 8003704:	4801      	ldr	r0, [pc, #4]	; (800370c <__malloc_unlock+0x8>)
 8003706:	f7ff be42 	b.w	800338e <__retarget_lock_release_recursive>
 800370a:	bf00      	nop
 800370c:	200001c4 	.word	0x200001c4

08003710 <_read_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4604      	mov	r4, r0
 8003714:	4608      	mov	r0, r1
 8003716:	4611      	mov	r1, r2
 8003718:	2200      	movs	r2, #0
 800371a:	4d05      	ldr	r5, [pc, #20]	; (8003730 <_read_r+0x20>)
 800371c:	602a      	str	r2, [r5, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	f7fd fb28 	bl	8000d74 <_read>
 8003724:	1c43      	adds	r3, r0, #1
 8003726:	d102      	bne.n	800372e <_read_r+0x1e>
 8003728:	682b      	ldr	r3, [r5, #0]
 800372a:	b103      	cbz	r3, 800372e <_read_r+0x1e>
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	bd38      	pop	{r3, r4, r5, pc}
 8003730:	200001cc 	.word	0x200001cc

08003734 <_init>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	bf00      	nop
 8003738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373a:	bc08      	pop	{r3}
 800373c:	469e      	mov	lr, r3
 800373e:	4770      	bx	lr

08003740 <_fini>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	bf00      	nop
 8003744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003746:	bc08      	pop	{r3}
 8003748:	469e      	mov	lr, r3
 800374a:	4770      	bx	lr
