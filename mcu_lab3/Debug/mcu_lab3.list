
mcu_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003508  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036b8  080036b8  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080036b8  080036b8  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036b8  080036b8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036b8  080036b8  000136b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036bc  080036bc  000136bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080036c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200000b0  08003770  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003770  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea3e  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002694  00000000  00000000  0002eb17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  000311b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019332  00000000  00000000  00031f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f356  00000000  00000000  0004b272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a0ba  00000000  00000000  0005a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000e4682  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c60  00000000  00000000  000e46d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c3c  00000000  00000000  000e5338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	080035fc 	.word	0x080035fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	080035fc 	.word	0x080035fc

0800014c <WhichButtonIsPressed>:
	BUTTON_PRESS_MORE_THAN_1S
};

enum ButtonState buttonState = BUTTON_RELEASED;

int WhichButtonIsPressed() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return button_mode_is_pressed;
 8000150:	2000      	movs	r0, #0
 8000152:	f000 f987 	bl	8000464 <is_button_pressed>
 8000156:	4603      	mov	r3, r0
 8000158:	2b00      	cmp	r3, #0
 800015a:	d001      	beq.n	8000160 <WhichButtonIsPressed+0x14>
 800015c:	230a      	movs	r3, #10
 800015e:	e018      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(1)) return button_add_is_pressed;
 8000160:	2001      	movs	r0, #1
 8000162:	f000 f97f 	bl	8000464 <is_button_pressed>
 8000166:	4603      	mov	r3, r0
 8000168:	2b00      	cmp	r3, #0
 800016a:	d001      	beq.n	8000170 <WhichButtonIsPressed+0x24>
 800016c:	230b      	movs	r3, #11
 800016e:	e010      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(2)) return button_confirm_is_pressed;
 8000170:	2002      	movs	r0, #2
 8000172:	f000 f977 	bl	8000464 <is_button_pressed>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d001      	beq.n	8000180 <WhichButtonIsPressed+0x34>
 800017c:	230c      	movs	r3, #12
 800017e:	e008      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(3)) return button_reset_is_pressed;
 8000180:	2003      	movs	r0, #3
 8000182:	f000 f96f 	bl	8000464 <is_button_pressed>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <WhichButtonIsPressed+0x44>
 800018c:	230d      	movs	r3, #13
 800018e:	e000      	b.n	8000192 <WhichButtonIsPressed+0x46>

	return 0; // None of these buttons are pressed
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}
	...

08000198 <fsm_for_input_processing>:
void fsm_for_input_processing() {
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	if (status != NORMAL_MODE) light_time1 = status;
 800019c:	4b68      	ldr	r3, [pc, #416]	; (8000340 <fsm_for_input_processing+0x1a8>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d003      	beq.n	80001ac <fsm_for_input_processing+0x14>
 80001a4:	4b66      	ldr	r3, [pc, #408]	; (8000340 <fsm_for_input_processing+0x1a8>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a66      	ldr	r2, [pc, #408]	; (8000344 <fsm_for_input_processing+0x1ac>)
 80001aa:	6013      	str	r3, [r2, #0]
	switch(buttonState) {
 80001ac:	4b66      	ldr	r3, [pc, #408]	; (8000348 <fsm_for_input_processing+0x1b0>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	f000 80b5 	beq.w	8000320 <fsm_for_input_processing+0x188>
 80001b6:	2b02      	cmp	r3, #2
 80001b8:	f300 80bb 	bgt.w	8000332 <fsm_for_input_processing+0x19a>
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d003      	beq.n	80001c8 <fsm_for_input_processing+0x30>
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	f000 809a 	beq.w	80002fa <fsm_for_input_processing+0x162>
				buttonState = BUTTON_RELEASED;
			}
			// TODO
			break;
		default:
			break;
 80001c6:	e0b4      	b.n	8000332 <fsm_for_input_processing+0x19a>
			if (WhichButtonIsPressed()) {
 80001c8:	f7ff ffc0 	bl	800014c <WhichButtonIsPressed>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	f000 8093 	beq.w	80002fa <fsm_for_input_processing+0x162>
				buttonState = BUTTON_PRESSED;
 80001d4:	4b5c      	ldr	r3, [pc, #368]	; (8000348 <fsm_for_input_processing+0x1b0>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	701a      	strb	r2, [r3, #0]
				switch(WhichButtonIsPressed()) {
 80001da:	f7ff ffb7 	bl	800014c <WhichButtonIsPressed>
 80001de:	4603      	mov	r3, r0
 80001e0:	3b0a      	subs	r3, #10
 80001e2:	2b03      	cmp	r3, #3
 80001e4:	f200 8087 	bhi.w	80002f6 <fsm_for_input_processing+0x15e>
 80001e8:	a201      	add	r2, pc, #4	; (adr r2, 80001f0 <fsm_for_input_processing+0x58>)
 80001ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ee:	bf00      	nop
 80001f0:	08000201 	.word	0x08000201
 80001f4:	080002bb 	.word	0x080002bb
 80001f8:	080002f1 	.word	0x080002f1
 80001fc:	080002f7 	.word	0x080002f7
						switch(status) {
 8000200:	4b4f      	ldr	r3, [pc, #316]	; (8000340 <fsm_for_input_processing+0x1a8>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	3b01      	subs	r3, #1
 8000206:	2b07      	cmp	r3, #7
 8000208:	d852      	bhi.n	80002b0 <fsm_for_input_processing+0x118>
 800020a:	a201      	add	r2, pc, #4	; (adr r2, 8000210 <fsm_for_input_processing+0x78>)
 800020c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000210:	08000231 	.word	0x08000231
 8000214:	0800024d 	.word	0x0800024d
 8000218:	0800026d 	.word	0x0800026d
 800021c:	0800028d 	.word	0x0800028d
 8000220:	0800024d 	.word	0x0800024d
 8000224:	0800026d 	.word	0x0800026d
 8000228:	0800028d 	.word	0x0800028d
 800022c:	080002ab 	.word	0x080002ab
								led_init();
 8000230:	f000 f998 	bl	8000564 <led_init>
								status = RED_MODE;
 8000234:	4b42      	ldr	r3, [pc, #264]	; (8000340 <fsm_for_input_processing+0x1a8>)
 8000236:	2202      	movs	r2, #2
 8000238:	601a      	str	r2, [r3, #0]
								light_time = man_red_time;
 800023a:	4b44      	ldr	r3, [pc, #272]	; (800034c <fsm_for_input_processing+0x1b4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a44      	ldr	r2, [pc, #272]	; (8000350 <fsm_for_input_processing+0x1b8>)
 8000240:	6013      	str	r3, [r2, #0]
								temp_value = light_time;
 8000242:	4b43      	ldr	r3, [pc, #268]	; (8000350 <fsm_for_input_processing+0x1b8>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a43      	ldr	r2, [pc, #268]	; (8000354 <fsm_for_input_processing+0x1bc>)
 8000248:	6013      	str	r3, [r2, #0]
								break;
 800024a:	e032      	b.n	80002b2 <fsm_for_input_processing+0x11a>
								GPIOB->BSRR = 0x3F00;
 800024c:	4b42      	ldr	r3, [pc, #264]	; (8000358 <fsm_for_input_processing+0x1c0>)
 800024e:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8000252:	611a      	str	r2, [r3, #16]
								light_time = man_amber_time;
 8000254:	4b41      	ldr	r3, [pc, #260]	; (800035c <fsm_for_input_processing+0x1c4>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a3d      	ldr	r2, [pc, #244]	; (8000350 <fsm_for_input_processing+0x1b8>)
 800025a:	6013      	str	r3, [r2, #0]
								temp_value = light_time; // store value to temp variable if button add is pressed
 800025c:	4b3c      	ldr	r3, [pc, #240]	; (8000350 <fsm_for_input_processing+0x1b8>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a3c      	ldr	r2, [pc, #240]	; (8000354 <fsm_for_input_processing+0x1bc>)
 8000262:	6013      	str	r3, [r2, #0]
								status = AMBER_MODE;
 8000264:	4b36      	ldr	r3, [pc, #216]	; (8000340 <fsm_for_input_processing+0x1a8>)
 8000266:	2203      	movs	r2, #3
 8000268:	601a      	str	r2, [r3, #0]
								break;
 800026a:	e022      	b.n	80002b2 <fsm_for_input_processing+0x11a>
								GPIOB->BSRR = 0x3F00;
 800026c:	4b3a      	ldr	r3, [pc, #232]	; (8000358 <fsm_for_input_processing+0x1c0>)
 800026e:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8000272:	611a      	str	r2, [r3, #16]
								light_time = man_green_time;
 8000274:	4b3a      	ldr	r3, [pc, #232]	; (8000360 <fsm_for_input_processing+0x1c8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a35      	ldr	r2, [pc, #212]	; (8000350 <fsm_for_input_processing+0x1b8>)
 800027a:	6013      	str	r3, [r2, #0]
								temp_value = light_time; // store value to temp variable if button add is pressed
 800027c:	4b34      	ldr	r3, [pc, #208]	; (8000350 <fsm_for_input_processing+0x1b8>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a34      	ldr	r2, [pc, #208]	; (8000354 <fsm_for_input_processing+0x1bc>)
 8000282:	6013      	str	r3, [r2, #0]
								status = GREEN_MODE;
 8000284:	4b2e      	ldr	r3, [pc, #184]	; (8000340 <fsm_for_input_processing+0x1a8>)
 8000286:	2204      	movs	r2, #4
 8000288:	601a      	str	r2, [r3, #0]
								break;
 800028a:	e012      	b.n	80002b2 <fsm_for_input_processing+0x11a>
								GPIOB->BSRR = 0x3F00;
 800028c:	4b32      	ldr	r3, [pc, #200]	; (8000358 <fsm_for_input_processing+0x1c0>)
 800028e:	f44f 527c 	mov.w	r2, #16128	; 0x3f00
 8000292:	611a      	str	r2, [r3, #16]
								light_time = man_red_time;
 8000294:	4b2d      	ldr	r3, [pc, #180]	; (800034c <fsm_for_input_processing+0x1b4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a2d      	ldr	r2, [pc, #180]	; (8000350 <fsm_for_input_processing+0x1b8>)
 800029a:	6013      	str	r3, [r2, #0]
								temp_value = light_time; // store value to temp variable if button add is pressed
 800029c:	4b2c      	ldr	r3, [pc, #176]	; (8000350 <fsm_for_input_processing+0x1b8>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a2c      	ldr	r2, [pc, #176]	; (8000354 <fsm_for_input_processing+0x1bc>)
 80002a2:	6013      	str	r3, [r2, #0]
								status = NORMAL_MODE;
 80002a4:	4b26      	ldr	r3, [pc, #152]	; (8000340 <fsm_for_input_processing+0x1a8>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	601a      	str	r2, [r3, #0]
								status = NORMAL_MODE;
 80002aa:	4b25      	ldr	r3, [pc, #148]	; (8000340 <fsm_for_input_processing+0x1a8>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
								break;
 80002b0:	bf00      	nop
						buttonState = BUTTON_PRESSED;
 80002b2:	4b25      	ldr	r3, [pc, #148]	; (8000348 <fsm_for_input_processing+0x1b0>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	701a      	strb	r2, [r3, #0]
						break;
 80002b8:	e01e      	b.n	80002f8 <fsm_for_input_processing+0x160>
						switch(status) {
 80002ba:	4b21      	ldr	r3, [pc, #132]	; (8000340 <fsm_for_input_processing+0x1a8>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b04      	cmp	r3, #4
 80002c0:	d00e      	beq.n	80002e0 <fsm_for_input_processing+0x148>
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	dc10      	bgt.n	80002e8 <fsm_for_input_processing+0x150>
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	d002      	beq.n	80002d0 <fsm_for_input_processing+0x138>
 80002ca:	2b03      	cmp	r3, #3
 80002cc:	d004      	beq.n	80002d8 <fsm_for_input_processing+0x140>
							break;
 80002ce:	e00b      	b.n	80002e8 <fsm_for_input_processing+0x150>
							status = MAN_RED_MODE;
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <fsm_for_input_processing+0x1a8>)
 80002d2:	2205      	movs	r2, #5
 80002d4:	601a      	str	r2, [r3, #0]
							break;
 80002d6:	e008      	b.n	80002ea <fsm_for_input_processing+0x152>
							status = MAN_AMBER_MODE;
 80002d8:	4b19      	ldr	r3, [pc, #100]	; (8000340 <fsm_for_input_processing+0x1a8>)
 80002da:	2206      	movs	r2, #6
 80002dc:	601a      	str	r2, [r3, #0]
							break;
 80002de:	e004      	b.n	80002ea <fsm_for_input_processing+0x152>
							status = MAN_GREEN_MODE;
 80002e0:	4b17      	ldr	r3, [pc, #92]	; (8000340 <fsm_for_input_processing+0x1a8>)
 80002e2:	2207      	movs	r2, #7
 80002e4:	601a      	str	r2, [r3, #0]
							break;
 80002e6:	e000      	b.n	80002ea <fsm_for_input_processing+0x152>
							break;
 80002e8:	bf00      	nop
						updateTempTime();
 80002ea:	f000 fd97 	bl	8000e1c <updateTempTime>
						break;
 80002ee:	e003      	b.n	80002f8 <fsm_for_input_processing+0x160>
						confirmAdjustedTime();
 80002f0:	f000 fde4 	bl	8000ebc <confirmAdjustedTime>
						break;
 80002f4:	e000      	b.n	80002f8 <fsm_for_input_processing+0x160>
						break;
 80002f6:	bf00      	nop
				break;
 80002f8:	e020      	b.n	800033c <fsm_for_input_processing+0x1a4>
			if (!WhichButtonIsPressed()) {
 80002fa:	f7ff ff27 	bl	800014c <WhichButtonIsPressed>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d103      	bne.n	800030c <fsm_for_input_processing+0x174>
				buttonState = BUTTON_RELEASED;
 8000304:	4b10      	ldr	r3, [pc, #64]	; (8000348 <fsm_for_input_processing+0x1b0>)
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
			break;
 800030a:	e014      	b.n	8000336 <fsm_for_input_processing+0x19e>
				if (is_button_pressed_1s(0)) {
 800030c:	2000      	movs	r0, #0
 800030e:	f000 f8cb 	bl	80004a8 <is_button_pressed_1s>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d00e      	beq.n	8000336 <fsm_for_input_processing+0x19e>
					buttonState = BUTTON_PRESS_MORE_THAN_1S;
 8000318:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <fsm_for_input_processing+0x1b0>)
 800031a:	2202      	movs	r2, #2
 800031c:	701a      	strb	r2, [r3, #0]
			break;
 800031e:	e00a      	b.n	8000336 <fsm_for_input_processing+0x19e>
			if (!WhichButtonIsPressed()) {
 8000320:	f7ff ff14 	bl	800014c <WhichButtonIsPressed>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d107      	bne.n	800033a <fsm_for_input_processing+0x1a2>
				buttonState = BUTTON_RELEASED;
 800032a:	4b07      	ldr	r3, [pc, #28]	; (8000348 <fsm_for_input_processing+0x1b0>)
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
			break;
 8000330:	e003      	b.n	800033a <fsm_for_input_processing+0x1a2>
			break;
 8000332:	bf00      	nop
 8000334:	e002      	b.n	800033c <fsm_for_input_processing+0x1a4>
			break;
 8000336:	bf00      	nop
 8000338:	e000      	b.n	800033c <fsm_for_input_processing+0x1a4>
			break;
 800033a:	bf00      	nop
	}
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000014 	.word	0x20000014
 8000344:	20000010 	.word	0x20000010
 8000348:	200000d4 	.word	0x200000d4
 800034c:	20000000 	.word	0x20000000
 8000350:	2000000c 	.word	0x2000000c
 8000354:	200000cc 	.word	0x200000cc
 8000358:	40010c00 	.word	0x40010c00
 800035c:	20000004 	.word	0x20000004
 8000360:	20000008 	.word	0x20000008

08000364 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800036a:	2300      	movs	r3, #0
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	e061      	b.n	8000434 <button_reading+0xd0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000370:	4a34      	ldr	r2, [pc, #208]	; (8000444 <button_reading+0xe0>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4413      	add	r3, r2
 8000376:	7819      	ldrb	r1, [r3, #0]
 8000378:	4a33      	ldr	r2, [pc, #204]	; (8000448 <button_reading+0xe4>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	460a      	mov	r2, r1
 8000380:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000382:	4a32      	ldr	r2, [pc, #200]	; (800044c <button_reading+0xe8>)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800038a:	4931      	ldr	r1, [pc, #196]	; (8000450 <button_reading+0xec>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000392:	4619      	mov	r1, r3
 8000394:	4610      	mov	r0, r2
 8000396:	f001 fa3f 	bl	8001818 <HAL_GPIO_ReadPin>
 800039a:	4603      	mov	r3, r0
 800039c:	4619      	mov	r1, r3
 800039e:	4a29      	ldr	r2, [pc, #164]	; (8000444 <button_reading+0xe0>)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4413      	add	r3, r2
 80003a4:	460a      	mov	r2, r1
 80003a6:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 80003a8:	4a26      	ldr	r2, [pc, #152]	; (8000444 <button_reading+0xe0>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4413      	add	r3, r2
 80003ae:	781a      	ldrb	r2, [r3, #0]
 80003b0:	4925      	ldr	r1, [pc, #148]	; (8000448 <button_reading+0xe4>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	440b      	add	r3, r1
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d138      	bne.n	800042e <button_reading+0xca>
			//valid input, can read now
			buttonBufferPrev[i] = buttonBuffer[i];
 80003bc:	4a25      	ldr	r2, [pc, #148]	; (8000454 <button_reading+0xf0>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4413      	add	r3, r2
 80003c2:	7819      	ldrb	r1, [r3, #0]
 80003c4:	4a24      	ldr	r2, [pc, #144]	; (8000458 <button_reading+0xf4>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4413      	add	r3, r2
 80003ca:	460a      	mov	r2, r1
 80003cc:	701a      	strb	r2, [r3, #0]
			// chap nhan input
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80003ce:	4a1d      	ldr	r2, [pc, #116]	; (8000444 <button_reading+0xe0>)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4413      	add	r3, r2
 80003d4:	7819      	ldrb	r1, [r3, #0]
 80003d6:	4a1f      	ldr	r2, [pc, #124]	; (8000454 <button_reading+0xf0>)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4413      	add	r3, r2
 80003dc:	460a      	mov	r2, r1
 80003de:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80003e0:	4a1c      	ldr	r2, [pc, #112]	; (8000454 <button_reading+0xf0>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d116      	bne.n	800041a <button_reading+0xb6>
				//toggle pin to validate
				//HAL_GPIO_TogglePin(BRESP_GPIO_Port, BRESP_Pin);
				//if a button is pressed , we start counting
				if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80003ec:	4a1b      	ldr	r2, [pc, #108]	; (800045c <button_reading+0xf8>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003f4:	2b63      	cmp	r3, #99	; 0x63
 80003f6:	d80a      	bhi.n	800040e <button_reading+0xaa>
					counterForButtonPress1s[i]++;
 80003f8:	4a18      	ldr	r2, [pc, #96]	; (800045c <button_reading+0xf8>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000400:	3301      	adds	r3, #1
 8000402:	b299      	uxth	r1, r3
 8000404:	4a15      	ldr	r2, [pc, #84]	; (800045c <button_reading+0xf8>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800040c:	e00f      	b.n	800042e <button_reading+0xca>
				}

				else {
					//the flag is turned on when 1 second has passed
					//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 800040e:	4a14      	ldr	r2, [pc, #80]	; (8000460 <button_reading+0xfc>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4413      	add	r3, r2
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	e009      	b.n	800042e <button_reading+0xca>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 800041a:	4a10      	ldr	r2, [pc, #64]	; (800045c <button_reading+0xf8>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2100      	movs	r1, #0
 8000420:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000424:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <button_reading+0xfc>)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4413      	add	r3, r2
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3301      	adds	r3, #1
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b03      	cmp	r3, #3
 8000438:	dd9a      	ble.n	8000370 <button_reading+0xc>
			}
		}
	}
}
 800043a:	bf00      	nop
 800043c:	bf00      	nop
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200000e0 	.word	0x200000e0
 8000448:	200000e4 	.word	0x200000e4
 800044c:	2000001c 	.word	0x2000001c
 8000450:	2000002c 	.word	0x2000002c
 8000454:	200000d8 	.word	0x200000d8
 8000458:	200000dc 	.word	0x200000dc
 800045c:	200000ec 	.word	0x200000ec
 8000460:	200000e8 	.word	0x200000e8

08000464 <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2b03      	cmp	r3, #3
 8000472:	d901      	bls.n	8000478 <is_button_pressed+0x14>
 8000474:	2300      	movs	r3, #0
 8000476:	e00d      	b.n	8000494 <is_button_pressed+0x30>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	4a09      	ldr	r2, [pc, #36]	; (80004a0 <is_button_pressed+0x3c>)
 800047c:	5cd3      	ldrb	r3, [r2, r3]
			&& buttonBufferPrev[index] == BUTTON_IS_RELEASED);
 800047e:	2b00      	cmp	r3, #0
 8000480:	d106      	bne.n	8000490 <is_button_pressed+0x2c>
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	4a07      	ldr	r2, [pc, #28]	; (80004a4 <is_button_pressed+0x40>)
 8000486:	5cd3      	ldrb	r3, [r2, r3]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d101      	bne.n	8000490 <is_button_pressed+0x2c>
 800048c:	2301      	movs	r3, #1
 800048e:	e000      	b.n	8000492 <is_button_pressed+0x2e>
 8000490:	2300      	movs	r3, #0
 8000492:	b2db      	uxtb	r3, r3
}
 8000494:	4618      	mov	r0, r3
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	200000d8 	.word	0x200000d8
 80004a4:	200000dc 	.word	0x200000dc

080004a8 <is_button_pressed_1s>:

// Check for button is pressed more than a second or not
unsigned char is_button_pressed_1s (unsigned char index ) {
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS ) return 0xff ;
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	2b03      	cmp	r3, #3
 80004b6:	d901      	bls.n	80004bc <is_button_pressed_1s+0x14>
 80004b8:	23ff      	movs	r3, #255	; 0xff
 80004ba:	e007      	b.n	80004cc <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <is_button_pressed_1s+0x30>)
 80004c0:	5cd3      	ldrb	r3, [r2, r3]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	bf0c      	ite	eq
 80004c6:	2301      	moveq	r3, #1
 80004c8:	2300      	movne	r3, #0
 80004ca:	b2db      	uxtb	r3, r3
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	200000e8 	.word	0x200000e8

080004dc <update_buffer>:
#include "led7seg.h"
#include "global.h"
static uint8_t led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
static uint8_t led_buffer[4] = {0};
//static uint8_t man_led_buffer[3] = {0};
void update_buffer() {
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
	if (light_time1 >= 10) return;
 80004e0:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <update_buffer+0x78>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b09      	cmp	r3, #9
 80004e6:	dc30      	bgt.n	800054a <update_buffer+0x6e>
	else {
		led_buffer[0] = 0;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <update_buffer+0x7c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = light_time1;
 80004ee:	4b19      	ldr	r3, [pc, #100]	; (8000554 <update_buffer+0x78>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <update_buffer+0x7c>)
 80004f6:	705a      	strb	r2, [r3, #1]
	}

	if (light_time >= 10) {
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <update_buffer+0x80>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b09      	cmp	r3, #9
 80004fe:	dd1b      	ble.n	8000538 <update_buffer+0x5c>
		led_buffer[2] = light_time / 10;
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <update_buffer+0x80>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a16      	ldr	r2, [pc, #88]	; (8000560 <update_buffer+0x84>)
 8000506:	fb82 1203 	smull	r1, r2, r2, r3
 800050a:	1092      	asrs	r2, r2, #2
 800050c:	17db      	asrs	r3, r3, #31
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <update_buffer+0x7c>)
 8000514:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time % 10;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <update_buffer+0x80>)
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <update_buffer+0x84>)
 800051c:	fb83 1302 	smull	r1, r3, r3, r2
 8000520:	1099      	asrs	r1, r3, #2
 8000522:	17d3      	asrs	r3, r2, #31
 8000524:	1ac9      	subs	r1, r1, r3
 8000526:	460b      	mov	r3, r1
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	440b      	add	r3, r1
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	1ad1      	subs	r1, r2, r3
 8000530:	b2ca      	uxtb	r2, r1
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <update_buffer+0x7c>)
 8000534:	70da      	strb	r2, [r3, #3]
 8000536:	e009      	b.n	800054c <update_buffer+0x70>
	} else {
		led_buffer[2] = 0;
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <update_buffer+0x7c>)
 800053a:	2200      	movs	r2, #0
 800053c:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time;
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <update_buffer+0x80>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	b2da      	uxtb	r2, r3
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <update_buffer+0x7c>)
 8000546:	70da      	strb	r2, [r3, #3]
 8000548:	e000      	b.n	800054c <update_buffer+0x70>
	if (light_time1 >= 10) return;
 800054a:	bf00      	nop
	}
}
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000010 	.word	0x20000010
 8000558:	200000f4 	.word	0x200000f4
 800055c:	2000000c 	.word	0x2000000c
 8000560:	66666667 	.word	0x66666667

08000564 <led_init>:

void led_init() {
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
	GPIOB->BSRR = 0xFF00;
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <led_init+0x14>)
 800056a:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800056e:	611a      	str	r2, [r3, #16]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40010c00 	.word	0x40010c00

0800057c <traffic_init>:

void traffic_init() {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	light_time = man_green_time;
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <traffic_init+0x30>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <traffic_init+0x34>)
 8000586:	6013      	str	r3, [r2, #0]
	light_time1 = man_red_time;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <traffic_init+0x38>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <traffic_init+0x3c>)
 800058e:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000596:	4809      	ldr	r0, [pc, #36]	; (80005bc <traffic_init+0x40>)
 8000598:	f001 f955 	bl	8001846 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a2:	4806      	ldr	r0, [pc, #24]	; (80005bc <traffic_init+0x40>)
 80005a4:	f001 f94f 	bl	8001846 <HAL_GPIO_WritePin>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000008 	.word	0x20000008
 80005b0:	2000000c 	.word	0x2000000c
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000010 	.word	0x20000010
 80005bc:	40010c00 	.word	0x40010c00

080005c0 <update7SEG>:

void led_clear() {
	HAL_GPIO_WritePin(GPIOA, D1_Pin | D2_Pin | D3_Pin | D4_Pin | D5_Pin | D6_Pin, 1);
}

void update7SEG(int index){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d872      	bhi.n	80006b4 <update7SEG+0xf4>
 80005ce:	a201      	add	r2, pc, #4	; (adr r2, 80005d4 <update7SEG+0x14>)
 80005d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d4:	080005e5 	.word	0x080005e5
 80005d8:	08000619 	.word	0x08000619
 80005dc:	0800064d 	.word	0x0800064d
 80005e0:	08000681 	.word	0x08000681
	switch(index) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, ON_7SEG); // turn on the first SEG
 80005e4:	2201      	movs	r2, #1
 80005e6:	2110      	movs	r1, #16
 80005e8:	4835      	ldr	r0, [pc, #212]	; (80006c0 <update7SEG+0x100>)
 80005ea:	f001 f92c 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 80005ee:	2200      	movs	r2, #0
 80005f0:	2120      	movs	r1, #32
 80005f2:	4833      	ldr	r0, [pc, #204]	; (80006c0 <update7SEG+0x100>)
 80005f4:	f001 f927 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 80005f8:	2200      	movs	r2, #0
 80005fa:	2140      	movs	r1, #64	; 0x40
 80005fc:	4830      	ldr	r0, [pc, #192]	; (80006c0 <update7SEG+0x100>)
 80005fe:	f001 f922 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 8000602:	2200      	movs	r2, #0
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	482e      	ldr	r0, [pc, #184]	; (80006c0 <update7SEG+0x100>)
 8000608:	f001 f91d 	bl	8001846 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 800060c:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <update7SEG+0x104>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f859 	bl	80006c8 <display7SEG>
			break;
 8000616:	e04e      	b.n	80006b6 <update7SEG+0xf6>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 8000618:	2200      	movs	r2, #0
 800061a:	2110      	movs	r1, #16
 800061c:	4828      	ldr	r0, [pc, #160]	; (80006c0 <update7SEG+0x100>)
 800061e:	f001 f912 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, ON_7SEG); // turn on the second SEG
 8000622:	2201      	movs	r2, #1
 8000624:	2120      	movs	r1, #32
 8000626:	4826      	ldr	r0, [pc, #152]	; (80006c0 <update7SEG+0x100>)
 8000628:	f001 f90d 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 800062c:	2200      	movs	r2, #0
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	4823      	ldr	r0, [pc, #140]	; (80006c0 <update7SEG+0x100>)
 8000632:	f001 f908 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 8000636:	2200      	movs	r2, #0
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	4821      	ldr	r0, [pc, #132]	; (80006c0 <update7SEG+0x100>)
 800063c:	f001 f903 	bl	8001846 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <update7SEG+0x104>)
 8000642:	785b      	ldrb	r3, [r3, #1]
 8000644:	4618      	mov	r0, r3
 8000646:	f000 f83f 	bl	80006c8 <display7SEG>
			break;
 800064a:	e034      	b.n	80006b6 <update7SEG+0xf6>
		case 2:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	481b      	ldr	r0, [pc, #108]	; (80006c0 <update7SEG+0x100>)
 8000652:	f001 f8f8 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 8000656:	2200      	movs	r2, #0
 8000658:	2120      	movs	r1, #32
 800065a:	4819      	ldr	r0, [pc, #100]	; (80006c0 <update7SEG+0x100>)
 800065c:	f001 f8f3 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, ON_7SEG); // turn on the third SEG
 8000660:	2201      	movs	r2, #1
 8000662:	2140      	movs	r1, #64	; 0x40
 8000664:	4816      	ldr	r0, [pc, #88]	; (80006c0 <update7SEG+0x100>)
 8000666:	f001 f8ee 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 800066a:	2200      	movs	r2, #0
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	4814      	ldr	r0, [pc, #80]	; (80006c0 <update7SEG+0x100>)
 8000670:	f001 f8e9 	bl	8001846 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <update7SEG+0x104>)
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f825 	bl	80006c8 <display7SEG>
			break;
 800067e:	e01a      	b.n	80006b6 <update7SEG+0xf6>
		case 3:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 8000680:	2200      	movs	r2, #0
 8000682:	2110      	movs	r1, #16
 8000684:	480e      	ldr	r0, [pc, #56]	; (80006c0 <update7SEG+0x100>)
 8000686:	f001 f8de 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 800068a:	2200      	movs	r2, #0
 800068c:	2120      	movs	r1, #32
 800068e:	480c      	ldr	r0, [pc, #48]	; (80006c0 <update7SEG+0x100>)
 8000690:	f001 f8d9 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 8000694:	2200      	movs	r2, #0
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	4809      	ldr	r0, [pc, #36]	; (80006c0 <update7SEG+0x100>)
 800069a:	f001 f8d4 	bl	8001846 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, ON_7SEG); // turn on the fourth SEG
 800069e:	2201      	movs	r2, #1
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	4807      	ldr	r0, [pc, #28]	; (80006c0 <update7SEG+0x100>)
 80006a4:	f001 f8cf 	bl	8001846 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <update7SEG+0x104>)
 80006aa:	78db      	ldrb	r3, [r3, #3]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f80b 	bl	80006c8 <display7SEG>
			break;
 80006b2:	e000      	b.n	80006b6 <update7SEG+0xf6>
		default:
			break;
 80006b4:	bf00      	nop
	}
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40010800 	.word	0x40010800
 80006c4:	200000f4 	.word	0x200000f4

080006c8 <display7SEG>:
void display7SEG(int num) {
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	GPIOB->BRR= 0xFF;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <display7SEG+0x24>)
 80006d2:	22ff      	movs	r2, #255	; 0xff
 80006d4:	615a      	str	r2, [r3, #20]
	GPIOB->BSRR = led7seg[num];
 80006d6:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <display7SEG+0x28>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	4b03      	ldr	r3, [pc, #12]	; (80006ec <display7SEG+0x24>)
 80006e0:	611a      	str	r2, [r3, #16]
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	40010c00 	.word	0x40010c00
 80006f0:	20000034 	.word	0x20000034

080006f4 <displayMode>:

void displayMode() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	update_buffer();
 80006f8:	f7ff fef0 	bl	80004dc <update_buffer>
	if (index_led >= 4) index_led = 0;
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <displayMode+0x2c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b03      	cmp	r3, #3
 8000702:	dd02      	ble.n	800070a <displayMode+0x16>
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <displayMode+0x2c>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
	update7SEG(index_led++);
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <displayMode+0x2c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	4903      	ldr	r1, [pc, #12]	; (8000720 <displayMode+0x2c>)
 8000712:	600a      	str	r2, [r1, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff53 	bl	80005c0 <update7SEG>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000d0 	.word	0x200000d0

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000728:	f000 fd8c 	bl	8001244 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072c:	f000 f822 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000730:	f000 f8d2 	bl	80008d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000734:	f000 f85a 	bl	80007ec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000738:	f000 f8a4 	bl	8000884 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <main+0x48>)
 800073e:	f001 fd1d 	bl	800217c <HAL_TIM_Base_Start_IT>
  //led7SEG_init();
  GPIOA->BRR=0xFF;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <main+0x4c>)
 8000744:	22ff      	movs	r2, #255	; 0xff
 8000746:	615a      	str	r2, [r3, #20]
  led_init();
 8000748:	f7ff ff0c 	bl	8000564 <led_init>
  traffic_init();
 800074c:	f7ff ff16 	bl	800057c <traffic_init>
  setTimer1(2);
 8000750:	2002      	movs	r0, #2
 8000752:	f000 f94b 	bl	80009ec <setTimer1>
  setTimer2(100);
 8000756:	2064      	movs	r0, #100	; 0x64
 8000758:	f000 f95c 	bl	8000a14 <setTimer2>
  setTimer3(100);
 800075c:	2064      	movs	r0, #100	; 0x64
 800075e:	f000 f96d 	bl	8000a3c <setTimer3>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // display mode

	  traffic_light_processing();
 8000762:	f000 fcf9 	bl	8001158 <traffic_light_processing>
	  fsm_for_input_processing();
 8000766:	f7ff fd17 	bl	8000198 <fsm_for_input_processing>
	  traffic_light_processing();
 800076a:	e7fa      	b.n	8000762 <main+0x3e>
 800076c:	20000170 	.word	0x20000170
 8000770:	40010800 	.word	0x40010800

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b090      	sub	sp, #64	; 0x40
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0318 	add.w	r3, r7, #24
 800077e:	2228      	movs	r2, #40	; 0x28
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fa70 	bl	8002c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000796:	2302      	movs	r3, #2
 8000798:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079a:	2301      	movs	r3, #1
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079e:	2310      	movs	r3, #16
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 f87c 	bl	80018a8 <HAL_RCC_OscConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007b6:	f000 f8fd 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	230f      	movs	r3, #15
 80007bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fae8 	bl	8001da8 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007de:	f000 f8e9 	bl	80009b4 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3740      	adds	r7, #64	; 0x40
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	463b      	mov	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_TIM2_Init+0x94>)
 800080a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_TIM2_Init+0x94>)
 8000812:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000816:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_TIM2_Init+0x94>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_TIM2_Init+0x94>)
 8000820:	2209      	movs	r2, #9
 8000822:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_TIM2_Init+0x94>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_TIM2_Init+0x94>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000830:	4813      	ldr	r0, [pc, #76]	; (8000880 <MX_TIM2_Init+0x94>)
 8000832:	f001 fc53 	bl	80020dc <HAL_TIM_Base_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800083c:	f000 f8ba 	bl	80009b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <MX_TIM2_Init+0x94>)
 800084e:	f001 fde9 	bl	8002424 <HAL_TIM_ConfigClockSource>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000858:	f000 f8ac 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_TIM2_Init+0x94>)
 800086a:	f001 ffb1 	bl	80027d0 <HAL_TIMEx_MasterConfigSynchronization>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000874:	f000 f89e 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000170 	.word	0x20000170

08000884 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART1_UART_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_USART1_UART_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_USART1_UART_Init+0x4c>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART1_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART1_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART1_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART1_UART_Init+0x4c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART1_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART1_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART1_UART_Init+0x4c>)
 80008bc:	f001 fff2 	bl	80028a4 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008c6:	f000 f875 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000012c 	.word	0x2000012c
 80008d4:	40013800 	.word	0x40013800

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <MX_GPIO_Init+0xd0>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a2d      	ldr	r2, [pc, #180]	; (80009a8 <MX_GPIO_Init+0xd0>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <MX_GPIO_Init+0xd0>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000904:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <MX_GPIO_Init+0xd0>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a27      	ldr	r2, [pc, #156]	; (80009a8 <MX_GPIO_Init+0xd0>)
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <MX_GPIO_Init+0xd0>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0308 	and.w	r3, r3, #8
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	21f0      	movs	r1, #240	; 0xf0
 8000920:	4822      	ldr	r0, [pc, #136]	; (80009ac <MX_GPIO_Init+0xd4>)
 8000922:	f000 ff90 	bl	8001846 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_Pin|D4_Pin|D5_Pin|D6_Pin
 8000926:	2200      	movs	r2, #0
 8000928:	f643 71f8 	movw	r1, #16376	; 0x3ff8
 800092c:	4820      	ldr	r0, [pc, #128]	; (80009b0 <MX_GPIO_Init+0xd8>)
 800092e:	f000 ff8a 	bl	8001846 <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |GPIO_PIN_7|D1_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000932:	23f0      	movs	r3, #240	; 0xf0
 8000934:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2302      	movs	r3, #2
 8000940:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	4619      	mov	r1, r3
 8000948:	4818      	ldr	r0, [pc, #96]	; (80009ac <MX_GPIO_Init+0xd4>)
 800094a:	f000 fdeb 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin;
 800094e:	2307      	movs	r3, #7
 8000950:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000956:	2301      	movs	r3, #1
 8000958:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	4619      	mov	r1, r3
 8000960:	4813      	ldr	r0, [pc, #76]	; (80009b0 <MX_GPIO_Init+0xd8>)
 8000962:	f000 fddf 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D4_Pin D5_Pin D6_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           PB7 D1_Pin D2_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D4_Pin|D5_Pin|D6_Pin
 8000966:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 800096a:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |GPIO_PIN_7|D1_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2302      	movs	r3, #2
 8000976:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_GPIO_Init+0xd8>)
 8000980:	f000 fdd0 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin CONFIRM_Pin RESET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|CONFIRM_Pin|RESET_Pin;
 8000984:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000988:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098e:	2301      	movs	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4619      	mov	r1, r3
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_GPIO_Init+0xd4>)
 800099a:	f000 fdc3 	bl	8001524 <HAL_GPIO_Init>

}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800
 80009b0:	40010c00 	.word	0x40010c00

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <_write>:
#include "output_display.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *ptr, int len)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	f04f 33ff 	mov.w	r3, #4294967295
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	4804      	ldr	r0, [pc, #16]	; (80009e8 <_write+0x28>)
 80009d8:	f001 ffb1 	bl	800293e <HAL_UART_Transmit>
	return len;
 80009dc:	687b      	ldr	r3, [r7, #4]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000012c 	.word	0x2000012c

080009ec <setTimer1>:
int timer4_counter = 0;
int timer5_counter = 0;

int tick = 50;

void setTimer1(int duration) {
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
//	if (duration != tick) {
//		duration = tick;
//	}
	timer1_counter = duration ;
 80009f4:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <setTimer1+0x20>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <setTimer1+0x24>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	2000010c 	.word	0x2000010c
 8000a10:	200000f8 	.word	0x200000f8

08000a14 <setTimer2>:
void setTimer2(int duration) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
//	if (duration != DURATION_LED_BLINKING_2HZ) {
//		duration = DURATION_LED_BLINKING_2HZ;
//	}
	timer2_counter = duration;
 8000a1c:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <setTimer2+0x20>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <setTimer2+0x24>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000110 	.word	0x20000110
 8000a38:	200000fc 	.word	0x200000fc

08000a3c <setTimer3>:
void setTimer3(int duration) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8000a44:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <setTimer3+0x20>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <setTimer3+0x24>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000114 	.word	0x20000114
 8000a60:	20000100 	.word	0x20000100

08000a64 <timerRun>:
	}
	timer5_counter = duration;
	timer5_flag = 0;
}

void timerRun() {
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <timerRun+0xac>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	dd0b      	ble.n	8000a88 <timerRun+0x24>
		timer1_counter--;
 8000a70:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <timerRun+0xac>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	4a26      	ldr	r2, [pc, #152]	; (8000b10 <timerRun+0xac>)
 8000a78:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000a7a:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <timerRun+0xac>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	dc02      	bgt.n	8000a88 <timerRun+0x24>
			timer1_flag = 1;
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <timerRun+0xb0>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000a88:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <timerRun+0xb4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	dd0b      	ble.n	8000aa8 <timerRun+0x44>
		timer2_counter--;
 8000a90:	4b21      	ldr	r3, [pc, #132]	; (8000b18 <timerRun+0xb4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	4a20      	ldr	r2, [pc, #128]	; (8000b18 <timerRun+0xb4>)
 8000a98:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000a9a:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <timerRun+0xb4>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	dc02      	bgt.n	8000aa8 <timerRun+0x44>
			timer2_flag = 1;
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <timerRun+0xb8>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <timerRun+0xbc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	dd0b      	ble.n	8000ac8 <timerRun+0x64>
		timer3_counter--;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <timerRun+0xbc>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	4a1a      	ldr	r2, [pc, #104]	; (8000b20 <timerRun+0xbc>)
 8000ab8:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <timerRun+0xbc>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	dc02      	bgt.n	8000ac8 <timerRun+0x64>
			timer3_flag = 1;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <timerRun+0xc0>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <timerRun+0xc4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	dd0b      	ble.n	8000ae8 <timerRun+0x84>
		timer4_counter--;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <timerRun+0xc4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <timerRun+0xc4>)
 8000ad8:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <timerRun+0xc4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	dc02      	bgt.n	8000ae8 <timerRun+0x84>
			timer4_flag = 1;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <timerRun+0xc8>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <timerRun+0xcc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	dd0b      	ble.n	8000b08 <timerRun+0xa4>
		timer5_counter--;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <timerRun+0xcc>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <timerRun+0xcc>)
 8000af8:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <timerRun+0xcc>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	dc02      	bgt.n	8000b08 <timerRun+0xa4>
			timer5_flag = 1;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <timerRun+0xd0>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	2000010c 	.word	0x2000010c
 8000b14:	200000f8 	.word	0x200000f8
 8000b18:	20000110 	.word	0x20000110
 8000b1c:	200000fc 	.word	0x200000fc
 8000b20:	20000114 	.word	0x20000114
 8000b24:	20000100 	.word	0x20000100
 8000b28:	20000118 	.word	0x20000118
 8000b2c:	20000104 	.word	0x20000104
 8000b30:	2000011c 	.word	0x2000011c
 8000b34:	20000108 	.word	0x20000108

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_MspInit+0x5c>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <HAL_MspInit+0x5c>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6193      	str	r3, [r2, #24]
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_MspInit+0x5c>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_MspInit+0x5c>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_MspInit+0x5c>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	61d3      	str	r3, [r2, #28]
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_MspInit+0x5c>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_MspInit+0x60>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_MspInit+0x60>)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010000 	.word	0x40010000

08000b9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bac:	d113      	bne.n	8000bd6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_TIM_Base_MspInit+0x44>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_TIM_Base_MspInit+0x44>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	61d3      	str	r3, [r2, #28]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_TIM_Base_MspInit+0x44>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	201c      	movs	r0, #28
 8000bcc:	f000 fc73 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bd0:	201c      	movs	r0, #28
 8000bd2:	f000 fc8c 	bl	80014ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <HAL_UART_MspInit+0x8c>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d131      	bne.n	8000c68 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	6193      	str	r3, [r2, #24]
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_UART_MspInit+0x90>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	480b      	ldr	r0, [pc, #44]	; (8000c78 <HAL_UART_MspInit+0x94>)
 8000c4a:	f000 fc6b 	bl	8001524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_UART_MspInit+0x94>)
 8000c64:	f000 fc5e 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40013800 	.word	0x40013800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010800 	.word	0x40010800

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr

08000cbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc2:	f000 fb05 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <TIM2_IRQHandler+0x10>)
 8000cd2:	f001 fa9f 	bl	8002214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000170 	.word	0x20000170

08000ce0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e00a      	b.n	8000d08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cf2:	f3af 8000 	nop.w
 8000cf6:	4601      	mov	r1, r0
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	b2ca      	uxtb	r2, r1
 8000d00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697a      	ldr	r2, [r7, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dbf0      	blt.n	8000cf2 <_read+0x12>
	}

return len;
 8000d10:	687b      	ldr	r3, [r7, #4]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
	return -1;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d40:	605a      	str	r2, [r3, #4]
	return 0;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <_isatty>:

int _isatty(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b085      	sub	sp, #20
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
	return 0;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
	...

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f001 ff32 	bl	8002c14 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20002800 	.word	0x20002800
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	20000120 	.word	0x20000120
 8000de4:	200001d0 	.word	0x200001d0

08000de8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "software_timer.h"
#include "led7seg.h"
#include "global.h"

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e04:	d103      	bne.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000e06:	f7ff faad 	bl	8000364 <button_reading>
		displayMode();
 8000e0a:	f7ff fc73 	bl	80006f4 <displayMode>
	}
	timerRun();
 8000e0e:	f7ff fe29 	bl	8000a64 <timerRun>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <updateTempTime>:
#include "input_processing.h"
#include "global.h"
#include "led7seg.h"
#include "software_timer.h"

void updateTempTime() {
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	switch(status) {
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <updateTempTime+0x94>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d83a      	bhi.n	8000ea0 <updateTempTime+0x84>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <updateTempTime+0x14>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000ea1 	.word	0x08000ea1
 8000e34:	08000ea1 	.word	0x08000ea1
 8000e38:	08000ea1 	.word	0x08000ea1
 8000e3c:	08000ea1 	.word	0x08000ea1
 8000e40:	08000e4d 	.word	0x08000e4d
 8000e44:	08000e69 	.word	0x08000e69
 8000e48:	08000e85 	.word	0x08000e85
		case NORMAL_MODE:
			break;
		case MAN_RED_MODE:
			//light_time = man_red_time;
			if (temp_value >= 99) temp_value = 0;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <updateTempTime+0x98>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b62      	cmp	r3, #98	; 0x62
 8000e52:	dd03      	ble.n	8000e5c <updateTempTime+0x40>
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <updateTempTime+0x98>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 8000e5a:	e021      	b.n	8000ea0 <updateTempTime+0x84>
			else temp_value++;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <updateTempTime+0x98>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	3301      	adds	r3, #1
 8000e62:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <updateTempTime+0x98>)
 8000e64:	6013      	str	r3, [r2, #0]
			break;
 8000e66:	e01b      	b.n	8000ea0 <updateTempTime+0x84>
		case MAN_AMBER_MODE:
			//temp_value = temp_value;
			if (temp_value >= 99) temp_value = 0;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <updateTempTime+0x98>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b62      	cmp	r3, #98	; 0x62
 8000e6e:	dd03      	ble.n	8000e78 <updateTempTime+0x5c>
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <updateTempTime+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 8000e76:	e013      	b.n	8000ea0 <updateTempTime+0x84>
			else temp_value++;
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <updateTempTime+0x98>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <updateTempTime+0x98>)
 8000e80:	6013      	str	r3, [r2, #0]
			break;
 8000e82:	e00d      	b.n	8000ea0 <updateTempTime+0x84>
		case MAN_GREEN_MODE:
			//light_time = man_green_time;
			if (temp_value >= 99) temp_value = 0;
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <updateTempTime+0x98>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b62      	cmp	r3, #98	; 0x62
 8000e8a:	dd03      	ble.n	8000e94 <updateTempTime+0x78>
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <updateTempTime+0x98>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 8000e92:	e004      	b.n	8000e9e <updateTempTime+0x82>
			else temp_value++;
 8000e94:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <updateTempTime+0x98>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <updateTempTime+0x98>)
 8000e9c:	6013      	str	r3, [r2, #0]
			break;
 8000e9e:	bf00      	nop
	}
	light_time = temp_value;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <updateTempTime+0x98>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <updateTempTime+0x9c>)
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	20000014 	.word	0x20000014
 8000eb4:	200000cc 	.word	0x200000cc
 8000eb8:	2000000c 	.word	0x2000000c

08000ebc <confirmAdjustedTime>:

void confirmAdjustedTime() {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	printf("Confirmed adjust time!\r\n");
 8000ec0:	481c      	ldr	r0, [pc, #112]	; (8000f34 <confirmAdjustedTime+0x78>)
 8000ec2:	f001 ff47 	bl	8002d54 <puts>
	switch(status) {
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <confirmAdjustedTime+0x7c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	2b06      	cmp	r3, #6
 8000ece:	d82c      	bhi.n	8000f2a <confirmAdjustedTime+0x6e>
 8000ed0:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <confirmAdjustedTime+0x1c>)
 8000ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed6:	bf00      	nop
 8000ed8:	08000f2b 	.word	0x08000f2b
 8000edc:	08000f2b 	.word	0x08000f2b
 8000ee0:	08000f2b 	.word	0x08000f2b
 8000ee4:	08000f2b 	.word	0x08000f2b
 8000ee8:	08000ef5 	.word	0x08000ef5
 8000eec:	08000f07 	.word	0x08000f07
 8000ef0:	08000f19 	.word	0x08000f19
		case NORMAL_MODE:
			//temp_value = light_time;
			break;
		case MAN_RED_MODE:
			man_red_time = temp_value;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <confirmAdjustedTime+0x80>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <confirmAdjustedTime+0x84>)
 8000efa:	6013      	str	r3, [r2, #0]
			light_time = man_red_time;
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <confirmAdjustedTime+0x84>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <confirmAdjustedTime+0x88>)
 8000f02:	6013      	str	r3, [r2, #0]
			break;
 8000f04:	e012      	b.n	8000f2c <confirmAdjustedTime+0x70>
		case MAN_AMBER_MODE:
			man_amber_time = temp_value;
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <confirmAdjustedTime+0x80>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <confirmAdjustedTime+0x8c>)
 8000f0c:	6013      	str	r3, [r2, #0]
			light_time = man_amber_time;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <confirmAdjustedTime+0x8c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <confirmAdjustedTime+0x88>)
 8000f14:	6013      	str	r3, [r2, #0]
			break;
 8000f16:	e009      	b.n	8000f2c <confirmAdjustedTime+0x70>
		case MAN_GREEN_MODE:
			man_green_time = temp_value;
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <confirmAdjustedTime+0x80>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <confirmAdjustedTime+0x90>)
 8000f1e:	6013      	str	r3, [r2, #0]
			light_time = man_green_time;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <confirmAdjustedTime+0x90>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <confirmAdjustedTime+0x88>)
 8000f26:	6013      	str	r3, [r2, #0]
			break;
 8000f28:	e000      	b.n	8000f2c <confirmAdjustedTime+0x70>
		default:
			break;
 8000f2a:	bf00      	nop
	}
	traffic_init();
 8000f2c:	f7ff fb26 	bl	800057c <traffic_init>
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	08003614 	.word	0x08003614
 8000f38:	20000014 	.word	0x20000014
 8000f3c:	200000cc 	.word	0x200000cc
 8000f40:	20000000 	.word	0x20000000
 8000f44:	2000000c 	.word	0x2000000c
 8000f48:	20000004 	.word	0x20000004
 8000f4c:	20000008 	.word	0x20000008

08000f50 <normal_running_traffic_light>:

void normal_running_traffic_light() {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	switch(led_status) {
 8000f54:	4b78      	ldr	r3, [pc, #480]	; (8001138 <normal_running_traffic_light+0x1e8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3b14      	subs	r3, #20
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	f200 80e0 	bhi.w	8001120 <normal_running_traffic_light+0x1d0>
 8000f60:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <normal_running_traffic_light+0x18>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000f79 	.word	0x08000f79
 8000f6c:	08000ff5 	.word	0x08000ff5
 8000f70:	0800105d 	.word	0x0800105d
 8000f74:	080010bb 	.word	0x080010bb
		case RED_GREEN:
			if (timer3_flag == 1) {
 8000f78:	4b70      	ldr	r3, [pc, #448]	; (800113c <normal_running_traffic_light+0x1ec>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	f040 80d1 	bne.w	8001124 <normal_running_traffic_light+0x1d4>
				led_init();
 8000f82:	f7ff faef 	bl	8000564 <led_init>
				HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8c:	486c      	ldr	r0, [pc, #432]	; (8001140 <normal_running_traffic_light+0x1f0>)
 8000f8e:	f000 fc5a 	bl	8001846 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f98:	4869      	ldr	r0, [pc, #420]	; (8001140 <normal_running_traffic_light+0x1f0>)
 8000f9a:	f000 fc54 	bl	8001846 <HAL_GPIO_WritePin>

				light_time--;
 8000f9e:	4b69      	ldr	r3, [pc, #420]	; (8001144 <normal_running_traffic_light+0x1f4>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	4a67      	ldr	r2, [pc, #412]	; (8001144 <normal_running_traffic_light+0x1f4>)
 8000fa6:	6013      	str	r3, [r2, #0]
				light_time1--;
 8000fa8:	4b67      	ldr	r3, [pc, #412]	; (8001148 <normal_running_traffic_light+0x1f8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	4a66      	ldr	r2, [pc, #408]	; (8001148 <normal_running_traffic_light+0x1f8>)
 8000fb0:	6013      	str	r3, [r2, #0]
				if (light_time == 0 || light_time1 == 0) {
 8000fb2:	4b64      	ldr	r3, [pc, #400]	; (8001144 <normal_running_traffic_light+0x1f4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <normal_running_traffic_light+0x72>
 8000fba:	4b63      	ldr	r3, [pc, #396]	; (8001148 <normal_running_traffic_light+0x1f8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d114      	bne.n	8000fec <normal_running_traffic_light+0x9c>
					led_status = RED_AMBER;
 8000fc2:	4b5d      	ldr	r3, [pc, #372]	; (8001138 <normal_running_traffic_light+0x1e8>)
 8000fc4:	2215      	movs	r2, #21
 8000fc6:	601a      	str	r2, [r3, #0]
					light_time = man_amber_time; // Road 2
 8000fc8:	4b60      	ldr	r3, [pc, #384]	; (800114c <normal_running_traffic_light+0x1fc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a5d      	ldr	r2, [pc, #372]	; (8001144 <normal_running_traffic_light+0x1f4>)
 8000fce:	6013      	str	r3, [r2, #0]
					led_init();
 8000fd0:	f7ff fac8 	bl	8000564 <led_init>
					//light_time1 = man_red_time; // Road 1
					HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fda:	4859      	ldr	r0, [pc, #356]	; (8001140 <normal_running_traffic_light+0x1f0>)
 8000fdc:	f000 fc33 	bl	8001846 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D5_Pin, 0); // On ROAD 2, turn on the AMBER light. 
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe6:	4856      	ldr	r0, [pc, #344]	; (8001140 <normal_running_traffic_light+0x1f0>)
 8000fe8:	f000 fc2d 	bl	8001846 <HAL_GPIO_WritePin>
				}
				setTimer3(100);
 8000fec:	2064      	movs	r0, #100	; 0x64
 8000fee:	f7ff fd25 	bl	8000a3c <setTimer3>
			}
			break;
 8000ff2:	e097      	b.n	8001124 <normal_running_traffic_light+0x1d4>
		case RED_AMBER:
				if (timer3_flag == 1) {
 8000ff4:	4b51      	ldr	r3, [pc, #324]	; (800113c <normal_running_traffic_light+0x1ec>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	f040 8095 	bne.w	8001128 <normal_running_traffic_light+0x1d8>
					light_time--;
 8000ffe:	4b51      	ldr	r3, [pc, #324]	; (8001144 <normal_running_traffic_light+0x1f4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3b01      	subs	r3, #1
 8001004:	4a4f      	ldr	r2, [pc, #316]	; (8001144 <normal_running_traffic_light+0x1f4>)
 8001006:	6013      	str	r3, [r2, #0]
					light_time1--;
 8001008:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <normal_running_traffic_light+0x1f8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	4a4e      	ldr	r2, [pc, #312]	; (8001148 <normal_running_traffic_light+0x1f8>)
 8001010:	6013      	str	r3, [r2, #0]
					if (!light_time || !light_time1) {
 8001012:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <normal_running_traffic_light+0x1f4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <normal_running_traffic_light+0xd2>
 800101a:	4b4b      	ldr	r3, [pc, #300]	; (8001148 <normal_running_traffic_light+0x1f8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d118      	bne.n	8001054 <normal_running_traffic_light+0x104>
						led_status = GREEN_RED;
 8001022:	4b45      	ldr	r3, [pc, #276]	; (8001138 <normal_running_traffic_light+0x1e8>)
 8001024:	2216      	movs	r2, #22
 8001026:	601a      	str	r2, [r3, #0]
						light_time = man_red_time; // Road 2
 8001028:	4b49      	ldr	r3, [pc, #292]	; (8001150 <normal_running_traffic_light+0x200>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a45      	ldr	r2, [pc, #276]	; (8001144 <normal_running_traffic_light+0x1f4>)
 800102e:	6013      	str	r3, [r2, #0]
						light_time1 = man_green_time; // Road 1
 8001030:	4b48      	ldr	r3, [pc, #288]	; (8001154 <normal_running_traffic_light+0x204>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a44      	ldr	r2, [pc, #272]	; (8001148 <normal_running_traffic_light+0x1f8>)
 8001036:	6013      	str	r3, [r2, #0]

						led_init();
 8001038:	f7ff fa94 	bl	8000564 <led_init>
						HAL_GPIO_WritePin(GPIOB, D4_Pin, 0); // On ROAD 1, turn on the RED light. 
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001042:	483f      	ldr	r0, [pc, #252]	; (8001140 <normal_running_traffic_light+0x1f0>)
 8001044:	f000 fbff 	bl	8001846 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, D3_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800104e:	483c      	ldr	r0, [pc, #240]	; (8001140 <normal_running_traffic_light+0x1f0>)
 8001050:	f000 fbf9 	bl	8001846 <HAL_GPIO_WritePin>
					}
					setTimer3(100);
 8001054:	2064      	movs	r0, #100	; 0x64
 8001056:	f7ff fcf1 	bl	8000a3c <setTimer3>
				}

			break;
 800105a:	e065      	b.n	8001128 <normal_running_traffic_light+0x1d8>
		case GREEN_RED:
			if (timer3_flag == 1) {
 800105c:	4b37      	ldr	r3, [pc, #220]	; (800113c <normal_running_traffic_light+0x1ec>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d163      	bne.n	800112c <normal_running_traffic_light+0x1dc>

				light_time--;
 8001064:	4b37      	ldr	r3, [pc, #220]	; (8001144 <normal_running_traffic_light+0x1f4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3b01      	subs	r3, #1
 800106a:	4a36      	ldr	r2, [pc, #216]	; (8001144 <normal_running_traffic_light+0x1f4>)
 800106c:	6013      	str	r3, [r2, #0]
				light_time1--;
 800106e:	4b36      	ldr	r3, [pc, #216]	; (8001148 <normal_running_traffic_light+0x1f8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	4a34      	ldr	r2, [pc, #208]	; (8001148 <normal_running_traffic_light+0x1f8>)
 8001076:	6013      	str	r3, [r2, #0]
				if (!light_time || !light_time1) {
 8001078:	4b32      	ldr	r3, [pc, #200]	; (8001144 <normal_running_traffic_light+0x1f4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <normal_running_traffic_light+0x138>
 8001080:	4b31      	ldr	r3, [pc, #196]	; (8001148 <normal_running_traffic_light+0x1f8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d114      	bne.n	80010b2 <normal_running_traffic_light+0x162>
					led_status = AMBER_RED;
 8001088:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <normal_running_traffic_light+0x1e8>)
 800108a:	2217      	movs	r2, #23
 800108c:	601a      	str	r2, [r3, #0]
					light_time1 = man_amber_time; // Road 1
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <normal_running_traffic_light+0x1fc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a2d      	ldr	r2, [pc, #180]	; (8001148 <normal_running_traffic_light+0x1f8>)
 8001094:	6013      	str	r3, [r2, #0]
					led_init();
 8001096:	f7ff fa65 	bl	8000564 <led_init>
					HAL_GPIO_WritePin(GPIOB, D2_Pin, 0); // On ROAD 1, turn on the RED light. 
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a0:	4827      	ldr	r0, [pc, #156]	; (8001140 <normal_running_traffic_light+0x1f0>)
 80010a2:	f000 fbd0 	bl	8001846 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D4_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ac:	4824      	ldr	r0, [pc, #144]	; (8001140 <normal_running_traffic_light+0x1f0>)
 80010ae:	f000 fbca 	bl	8001846 <HAL_GPIO_WritePin>
				}
				setTimer3(100);
 80010b2:	2064      	movs	r0, #100	; 0x64
 80010b4:	f7ff fcc2 	bl	8000a3c <setTimer3>
			}

			break;
 80010b8:	e038      	b.n	800112c <normal_running_traffic_light+0x1dc>
		case AMBER_RED:
			if (timer3_flag == 1) {
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <normal_running_traffic_light+0x1ec>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d136      	bne.n	8001130 <normal_running_traffic_light+0x1e0>
				light_time--;
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <normal_running_traffic_light+0x1f4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <normal_running_traffic_light+0x1f4>)
 80010ca:	6013      	str	r3, [r2, #0]
					light_time1--;
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <normal_running_traffic_light+0x1f8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <normal_running_traffic_light+0x1f8>)
 80010d4:	6013      	str	r3, [r2, #0]
				if (!light_time || !light_time1) {
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <normal_running_traffic_light+0x1f4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <normal_running_traffic_light+0x196>
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <normal_running_traffic_light+0x1f8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d118      	bne.n	8001118 <normal_running_traffic_light+0x1c8>
					led_status = RED_GREEN;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <normal_running_traffic_light+0x1e8>)
 80010e8:	2214      	movs	r2, #20
 80010ea:	601a      	str	r2, [r3, #0]
					light_time = man_green_time; // Road 2
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <normal_running_traffic_light+0x204>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <normal_running_traffic_light+0x1f4>)
 80010f2:	6013      	str	r3, [r2, #0]
					light_time1 = man_red_time; // Road 1
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <normal_running_traffic_light+0x200>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a13      	ldr	r2, [pc, #76]	; (8001148 <normal_running_traffic_light+0x1f8>)
 80010fa:	6013      	str	r3, [r2, #0]
					led_init();
 80010fc:	f7ff fa32 	bl	8000564 <led_init>
					HAL_GPIO_WritePin(GPIOB, D1_Pin, 0); // On ROAD 1, turn on the RED light. 
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <normal_running_traffic_light+0x1f0>)
 8001108:	f000 fb9d 	bl	8001846 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, D6_Pin, 0); // On ROAD 2, turn on the GREEN light. 
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001112:	480b      	ldr	r0, [pc, #44]	; (8001140 <normal_running_traffic_light+0x1f0>)
 8001114:	f000 fb97 	bl	8001846 <HAL_GPIO_WritePin>
				}
				setTimer3(100);
 8001118:	2064      	movs	r0, #100	; 0x64
 800111a:	f7ff fc8f 	bl	8000a3c <setTimer3>
			}
			break;
 800111e:	e007      	b.n	8001130 <normal_running_traffic_light+0x1e0>
		default:
			break;
 8001120:	bf00      	nop
 8001122:	e006      	b.n	8001132 <normal_running_traffic_light+0x1e2>
			break;
 8001124:	bf00      	nop
 8001126:	e004      	b.n	8001132 <normal_running_traffic_light+0x1e2>
			break;
 8001128:	bf00      	nop
 800112a:	e002      	b.n	8001132 <normal_running_traffic_light+0x1e2>
			break;
 800112c:	bf00      	nop
 800112e:	e000      	b.n	8001132 <normal_running_traffic_light+0x1e2>
			break;
 8001130:	bf00      	nop
	}
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000018 	.word	0x20000018
 800113c:	20000100 	.word	0x20000100
 8001140:	40010c00 	.word	0x40010c00
 8001144:	2000000c 	.word	0x2000000c
 8001148:	20000010 	.word	0x20000010
 800114c:	20000004 	.word	0x20000004
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008

08001158 <traffic_light_processing>:

void traffic_light_processing() {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	switch(status) {
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <traffic_light_processing+0x94>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3b01      	subs	r3, #1
 8001162:	2b06      	cmp	r3, #6
 8001164:	d83f      	bhi.n	80011e6 <traffic_light_processing+0x8e>
 8001166:	a201      	add	r2, pc, #4	; (adr r2, 800116c <traffic_light_processing+0x14>)
 8001168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116c:	08001189 	.word	0x08001189
 8001170:	0800118f 	.word	0x0800118f
 8001174:	080011a9 	.word	0x080011a9
 8001178:	080011c3 	.word	0x080011c3
 800117c:	0800118f 	.word	0x0800118f
 8001180:	080011a9 	.word	0x080011a9
 8001184:	080011c3 	.word	0x080011c3
		case NORMAL_MODE:
			normal_running_traffic_light();
 8001188:	f7ff fee2 	bl	8000f50 <normal_running_traffic_light>
			break;
 800118c:	e02b      	b.n	80011e6 <traffic_light_processing+0x8e>
		case RED_MODE: case MAN_RED_MODE:
			if (timer1_flag == 1) {
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <traffic_light_processing+0x98>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d122      	bne.n	80011dc <traffic_light_processing+0x84>
				// Toggle RED
				HAL_GPIO_TogglePin(GPIOB, D4_Pin | D1_Pin);
 8001196:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800119a:	4816      	ldr	r0, [pc, #88]	; (80011f4 <traffic_light_processing+0x9c>)
 800119c:	f000 fb6b 	bl	8001876 <HAL_GPIO_TogglePin>
				setTimer1(50);
 80011a0:	2032      	movs	r0, #50	; 0x32
 80011a2:	f7ff fc23 	bl	80009ec <setTimer1>
			}
			break;
 80011a6:	e019      	b.n	80011dc <traffic_light_processing+0x84>
		case AMBER_MODE: case MAN_AMBER_MODE:
			if (timer1_flag == 1) {
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <traffic_light_processing+0x98>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d117      	bne.n	80011e0 <traffic_light_processing+0x88>
				// Toggle AMBER
				HAL_GPIO_TogglePin(GPIOB, D2_Pin | D5_Pin);
 80011b0:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80011b4:	480f      	ldr	r0, [pc, #60]	; (80011f4 <traffic_light_processing+0x9c>)
 80011b6:	f000 fb5e 	bl	8001876 <HAL_GPIO_TogglePin>
				setTimer1(50);
 80011ba:	2032      	movs	r0, #50	; 0x32
 80011bc:	f7ff fc16 	bl	80009ec <setTimer1>
			}
			break;
 80011c0:	e00e      	b.n	80011e0 <traffic_light_processing+0x88>
		case GREEN_MODE: case MAN_GREEN_MODE:
			if (timer1_flag == 1) {
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <traffic_light_processing+0x98>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d10c      	bne.n	80011e4 <traffic_light_processing+0x8c>
				// Toggle GREEN
				HAL_GPIO_TogglePin(GPIOB, D3_Pin | D6_Pin);
 80011ca:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80011ce:	4809      	ldr	r0, [pc, #36]	; (80011f4 <traffic_light_processing+0x9c>)
 80011d0:	f000 fb51 	bl	8001876 <HAL_GPIO_TogglePin>
				setTimer1(50);
 80011d4:	2032      	movs	r0, #50	; 0x32
 80011d6:	f7ff fc09 	bl	80009ec <setTimer1>
			}
			break;
 80011da:	e003      	b.n	80011e4 <traffic_light_processing+0x8c>
			break;
 80011dc:	bf00      	nop
 80011de:	e002      	b.n	80011e6 <traffic_light_processing+0x8e>
			break;
 80011e0:	bf00      	nop
 80011e2:	e000      	b.n	80011e6 <traffic_light_processing+0x8e>
			break;
 80011e4:	bf00      	nop
	}
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000014 	.word	0x20000014
 80011f0:	200000f8 	.word	0x200000f8
 80011f4:	40010c00 	.word	0x40010c00

080011f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011fa:	490d      	ldr	r1, [pc, #52]	; (8001230 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001210:	4c0a      	ldr	r4, [pc, #40]	; (800123c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800121e:	f7ff fde3 	bl	8000de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001222:	f001 fcfd 	bl	8002c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001226:	f7ff fa7d 	bl	8000724 <main>
  bx lr
 800122a:	4770      	bx	lr
  ldr r0, =_sdata
 800122c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001230:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001234:	080036c0 	.word	0x080036c0
  ldr r2, =_sbss
 8001238:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 800123c:	200001cc 	.word	0x200001cc

08001240 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <ADC1_2_IRQHandler>
	...

08001244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_Init+0x28>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_Init+0x28>)
 800124e:	f043 0310 	orr.w	r3, r3, #16
 8001252:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 f923 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125a:	200f      	movs	r0, #15
 800125c:	f000 f808 	bl	8001270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001260:	f7ff fc6a 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40022000 	.word	0x40022000

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x54>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x58>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	fbb3 f3f1 	udiv	r3, r3, r1
 800128a:	fbb2 f3f3 	udiv	r3, r2, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f93b 	bl	800150a <HAL_SYSTICK_Config>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e00e      	b.n	80012bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d80a      	bhi.n	80012ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f000 f903 	bl	80014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <HAL_InitTick+0x5c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000040 	.word	0x20000040
 80012c8:	20000048 	.word	0x20000048
 80012cc:	20000044 	.word	0x20000044

080012d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_IncTick+0x1c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_IncTick+0x20>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <HAL_IncTick+0x20>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000048 	.word	0x20000048
 80012f0:	200001b8 	.word	0x200001b8

080012f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b02      	ldr	r3, [pc, #8]	; (8001304 <HAL_GetTick+0x10>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	200001b8 	.word	0x200001b8

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4906      	ldr	r1, [pc, #24]	; (80013a0 <__NVIC_EnableIRQ+0x34>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f7ff ff90 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff2d 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff42 	bl	8001350 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff90 	bl	80013f8 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5f 	bl	80013a4 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff35 	bl	800136c <__NVIC_EnableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffa2 	bl	800145c <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b08b      	sub	sp, #44	; 0x2c
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001536:	e148      	b.n	80017ca <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001538:	2201      	movs	r2, #1
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	429a      	cmp	r2, r3
 8001552:	f040 8137 	bne.w	80017c4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4aa3      	ldr	r2, [pc, #652]	; (80017e8 <HAL_GPIO_Init+0x2c4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d05e      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 8001560:	4aa1      	ldr	r2, [pc, #644]	; (80017e8 <HAL_GPIO_Init+0x2c4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d875      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 8001566:	4aa1      	ldr	r2, [pc, #644]	; (80017ec <HAL_GPIO_Init+0x2c8>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d058      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 800156c:	4a9f      	ldr	r2, [pc, #636]	; (80017ec <HAL_GPIO_Init+0x2c8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d86f      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 8001572:	4a9f      	ldr	r2, [pc, #636]	; (80017f0 <HAL_GPIO_Init+0x2cc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d052      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 8001578:	4a9d      	ldr	r2, [pc, #628]	; (80017f0 <HAL_GPIO_Init+0x2cc>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d869      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 800157e:	4a9d      	ldr	r2, [pc, #628]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d04c      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 8001584:	4a9b      	ldr	r2, [pc, #620]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d863      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 800158a:	4a9b      	ldr	r2, [pc, #620]	; (80017f8 <HAL_GPIO_Init+0x2d4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d046      	beq.n	800161e <HAL_GPIO_Init+0xfa>
 8001590:	4a99      	ldr	r2, [pc, #612]	; (80017f8 <HAL_GPIO_Init+0x2d4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d85d      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 8001596:	2b12      	cmp	r3, #18
 8001598:	d82a      	bhi.n	80015f0 <HAL_GPIO_Init+0xcc>
 800159a:	2b12      	cmp	r3, #18
 800159c:	d859      	bhi.n	8001652 <HAL_GPIO_Init+0x12e>
 800159e:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <HAL_GPIO_Init+0x80>)
 80015a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a4:	0800161f 	.word	0x0800161f
 80015a8:	080015f9 	.word	0x080015f9
 80015ac:	0800160b 	.word	0x0800160b
 80015b0:	0800164d 	.word	0x0800164d
 80015b4:	08001653 	.word	0x08001653
 80015b8:	08001653 	.word	0x08001653
 80015bc:	08001653 	.word	0x08001653
 80015c0:	08001653 	.word	0x08001653
 80015c4:	08001653 	.word	0x08001653
 80015c8:	08001653 	.word	0x08001653
 80015cc:	08001653 	.word	0x08001653
 80015d0:	08001653 	.word	0x08001653
 80015d4:	08001653 	.word	0x08001653
 80015d8:	08001653 	.word	0x08001653
 80015dc:	08001653 	.word	0x08001653
 80015e0:	08001653 	.word	0x08001653
 80015e4:	08001653 	.word	0x08001653
 80015e8:	08001601 	.word	0x08001601
 80015ec:	08001615 	.word	0x08001615
 80015f0:	4a82      	ldr	r2, [pc, #520]	; (80017fc <HAL_GPIO_Init+0x2d8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015f6:	e02c      	b.n	8001652 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	623b      	str	r3, [r7, #32]
          break;
 80015fe:	e029      	b.n	8001654 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	3304      	adds	r3, #4
 8001606:	623b      	str	r3, [r7, #32]
          break;
 8001608:	e024      	b.n	8001654 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	3308      	adds	r3, #8
 8001610:	623b      	str	r3, [r7, #32]
          break;
 8001612:	e01f      	b.n	8001654 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	330c      	adds	r3, #12
 800161a:	623b      	str	r3, [r7, #32]
          break;
 800161c:	e01a      	b.n	8001654 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d102      	bne.n	800162c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001626:	2304      	movs	r3, #4
 8001628:	623b      	str	r3, [r7, #32]
          break;
 800162a:	e013      	b.n	8001654 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d105      	bne.n	8001640 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001634:	2308      	movs	r3, #8
 8001636:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	611a      	str	r2, [r3, #16]
          break;
 800163e:	e009      	b.n	8001654 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001640:	2308      	movs	r3, #8
 8001642:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	615a      	str	r2, [r3, #20]
          break;
 800164a:	e003      	b.n	8001654 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
          break;
 8001650:	e000      	b.n	8001654 <HAL_GPIO_Init+0x130>
          break;
 8001652:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2bff      	cmp	r3, #255	; 0xff
 8001658:	d801      	bhi.n	800165e <HAL_GPIO_Init+0x13a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	e001      	b.n	8001662 <HAL_GPIO_Init+0x13e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3304      	adds	r3, #4
 8001662:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2bff      	cmp	r3, #255	; 0xff
 8001668:	d802      	bhi.n	8001670 <HAL_GPIO_Init+0x14c>
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	e002      	b.n	8001676 <HAL_GPIO_Init+0x152>
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	3b08      	subs	r3, #8
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	210f      	movs	r1, #15
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	401a      	ands	r2, r3
 8001688:	6a39      	ldr	r1, [r7, #32]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	431a      	orrs	r2, r3
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8090 	beq.w	80017c4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016a4:	4b56      	ldr	r3, [pc, #344]	; (8001800 <HAL_GPIO_Init+0x2dc>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a55      	ldr	r2, [pc, #340]	; (8001800 <HAL_GPIO_Init+0x2dc>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_GPIO_Init+0x2dc>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016bc:	4a51      	ldr	r2, [pc, #324]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a49      	ldr	r2, [pc, #292]	; (8001808 <HAL_GPIO_Init+0x2e4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d00d      	beq.n	8001704 <HAL_GPIO_Init+0x1e0>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a48      	ldr	r2, [pc, #288]	; (800180c <HAL_GPIO_Init+0x2e8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d007      	beq.n	8001700 <HAL_GPIO_Init+0x1dc>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a47      	ldr	r2, [pc, #284]	; (8001810 <HAL_GPIO_Init+0x2ec>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d101      	bne.n	80016fc <HAL_GPIO_Init+0x1d8>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e004      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 80016fc:	2303      	movs	r3, #3
 80016fe:	e002      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_GPIO_Init+0x1e2>
 8001704:	2300      	movs	r3, #0
 8001706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001708:	f002 0203 	and.w	r2, r2, #3
 800170c:	0092      	lsls	r2, r2, #2
 800170e:	4093      	lsls	r3, r2
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001716:	493b      	ldr	r1, [pc, #236]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001730:	4b38      	ldr	r3, [pc, #224]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4937      	ldr	r1, [pc, #220]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800173e:	4b35      	ldr	r3, [pc, #212]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	43db      	mvns	r3, r3
 8001746:	4933      	ldr	r1, [pc, #204]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001748:	4013      	ands	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001758:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	492d      	ldr	r1, [pc, #180]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	43db      	mvns	r3, r3
 800176e:	4929      	ldr	r1, [pc, #164]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001770:	4013      	ands	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4923      	ldr	r1, [pc, #140]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	608b      	str	r3, [r1, #8]
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	43db      	mvns	r3, r3
 8001796:	491f      	ldr	r1, [pc, #124]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001798:	4013      	ands	r3, r2
 800179a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	4919      	ldr	r1, [pc, #100]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	60cb      	str	r3, [r1, #12]
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	43db      	mvns	r3, r3
 80017be:	4915      	ldr	r1, [pc, #84]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	3301      	adds	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	fa22 f303 	lsr.w	r3, r2, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f47f aeaf 	bne.w	8001538 <HAL_GPIO_Init+0x14>
  }
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	372c      	adds	r7, #44	; 0x2c
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	10320000 	.word	0x10320000
 80017ec:	10310000 	.word	0x10310000
 80017f0:	10220000 	.word	0x10220000
 80017f4:	10210000 	.word	0x10210000
 80017f8:	10120000 	.word	0x10120000
 80017fc:	10110000 	.word	0x10110000
 8001800:	40021000 	.word	0x40021000
 8001804:	40010000 	.word	0x40010000
 8001808:	40010800 	.word	0x40010800
 800180c:	40010c00 	.word	0x40010c00
 8001810:	40011000 	.word	0x40011000
 8001814:	40010400 	.word	0x40010400

08001818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	887b      	ldrh	r3, [r7, #2]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e001      	b.n	800183a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	460b      	mov	r3, r1
 8001850:	807b      	strh	r3, [r7, #2]
 8001852:	4613      	mov	r3, r2
 8001854:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001856:	787b      	ldrb	r3, [r7, #1]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185c:	887a      	ldrh	r2, [r7, #2]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001862:	e003      	b.n	800186c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	041a      	lsls	r2, r3, #16
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	611a      	str	r2, [r3, #16]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001876:	b480      	push	{r7}
 8001878:	b085      	sub	sp, #20
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001888:	887a      	ldrh	r2, [r7, #2]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	041a      	lsls	r2, r3, #16
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43d9      	mvns	r1, r3
 8001894:	887b      	ldrh	r3, [r7, #2]
 8001896:	400b      	ands	r3, r1
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e26c      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 8087 	beq.w	80019d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018c8:	4b92      	ldr	r3, [pc, #584]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d00c      	beq.n	80018ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018d4:	4b8f      	ldr	r3, [pc, #572]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d112      	bne.n	8001906 <HAL_RCC_OscConfig+0x5e>
 80018e0:	4b8c      	ldr	r3, [pc, #560]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	d10b      	bne.n	8001906 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ee:	4b89      	ldr	r3, [pc, #548]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d06c      	beq.n	80019d4 <HAL_RCC_OscConfig+0x12c>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d168      	bne.n	80019d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e246      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190e:	d106      	bne.n	800191e <HAL_RCC_OscConfig+0x76>
 8001910:	4b80      	ldr	r3, [pc, #512]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a7f      	ldr	r2, [pc, #508]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	e02e      	b.n	800197c <HAL_RCC_OscConfig+0xd4>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x98>
 8001926:	4b7b      	ldr	r3, [pc, #492]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a7a      	ldr	r2, [pc, #488]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 800192c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b78      	ldr	r3, [pc, #480]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a77      	ldr	r2, [pc, #476]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e01d      	b.n	800197c <HAL_RCC_OscConfig+0xd4>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0xbc>
 800194a:	4b72      	ldr	r3, [pc, #456]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a71      	ldr	r2, [pc, #452]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b6f      	ldr	r3, [pc, #444]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a6e      	ldr	r2, [pc, #440]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e00b      	b.n	800197c <HAL_RCC_OscConfig+0xd4>
 8001964:	4b6b      	ldr	r3, [pc, #428]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a6a      	ldr	r2, [pc, #424]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 800196a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b68      	ldr	r3, [pc, #416]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a67      	ldr	r2, [pc, #412]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d013      	beq.n	80019ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fcb6 	bl	80012f4 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff fcb2 	bl	80012f4 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e1fa      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	4b5d      	ldr	r3, [pc, #372]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0xe4>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fca2 	bl	80012f4 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b4:	f7ff fc9e 	bl	80012f4 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e1e6      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c6:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x10c>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d063      	beq.n	8001aaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019e2:	4b4c      	ldr	r3, [pc, #304]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ee:	4b49      	ldr	r3, [pc, #292]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d11c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x18c>
 80019fa:	4b46      	ldr	r3, [pc, #280]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d116      	bne.n	8001a34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	4b43      	ldr	r3, [pc, #268]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_RCC_OscConfig+0x176>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d001      	beq.n	8001a1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e1ba      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4939      	ldr	r1, [pc, #228]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	e03a      	b.n	8001aaa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d020      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a3c:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7ff fc57 	bl	80012f4 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fc53 	bl	80012f4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e19b      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a68:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4927      	ldr	r1, [pc, #156]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
 8001a7c:	e015      	b.n	8001aaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7e:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fc36 	bl	80012f4 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8c:	f7ff fc32 	bl	80012f4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e17a      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d03a      	beq.n	8001b2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d019      	beq.n	8001af2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <HAL_RCC_OscConfig+0x274>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fc16 	bl	80012f4 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001acc:	f7ff fc12 	bl	80012f4 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e15a      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aea:	2001      	movs	r0, #1
 8001aec:	f000 fad8 	bl	80020a0 <RCC_Delay>
 8001af0:	e01c      	b.n	8001b2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_RCC_OscConfig+0x274>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af8:	f7ff fbfc 	bl	80012f4 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afe:	e00f      	b.n	8001b20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff fbf8 	bl	80012f4 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d908      	bls.n	8001b20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e140      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000
 8001b18:	42420000 	.word	0x42420000
 8001b1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b20:	4b9e      	ldr	r3, [pc, #632]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e9      	bne.n	8001b00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80a6 	beq.w	8001c86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3e:	4b97      	ldr	r3, [pc, #604]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10d      	bne.n	8001b66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	4b94      	ldr	r3, [pc, #592]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	4a93      	ldr	r2, [pc, #588]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b54:	61d3      	str	r3, [r2, #28]
 8001b56:	4b91      	ldr	r3, [pc, #580]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b62:	2301      	movs	r3, #1
 8001b64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b66:	4b8e      	ldr	r3, [pc, #568]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d118      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b72:	4b8b      	ldr	r3, [pc, #556]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a8a      	ldr	r2, [pc, #552]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fbb9 	bl	80012f4 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b86:	f7ff fbb5 	bl	80012f4 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b64      	cmp	r3, #100	; 0x64
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e0fd      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b98:	4b81      	ldr	r3, [pc, #516]	; (8001da0 <HAL_RCC_OscConfig+0x4f8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_OscConfig+0x312>
 8001bac:	4b7b      	ldr	r3, [pc, #492]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a7a      	ldr	r2, [pc, #488]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6213      	str	r3, [r2, #32]
 8001bb8:	e02d      	b.n	8001c16 <HAL_RCC_OscConfig+0x36e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x334>
 8001bc2:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4a75      	ldr	r2, [pc, #468]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	6213      	str	r3, [r2, #32]
 8001bce:	4b73      	ldr	r3, [pc, #460]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a72      	ldr	r2, [pc, #456]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	f023 0304 	bic.w	r3, r3, #4
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	e01c      	b.n	8001c16 <HAL_RCC_OscConfig+0x36e>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b05      	cmp	r3, #5
 8001be2:	d10c      	bne.n	8001bfe <HAL_RCC_OscConfig+0x356>
 8001be4:	4b6d      	ldr	r3, [pc, #436]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4a6c      	ldr	r2, [pc, #432]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	6213      	str	r3, [r2, #32]
 8001bf0:	4b6a      	ldr	r3, [pc, #424]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a69      	ldr	r2, [pc, #420]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6213      	str	r3, [r2, #32]
 8001bfc:	e00b      	b.n	8001c16 <HAL_RCC_OscConfig+0x36e>
 8001bfe:	4b67      	ldr	r3, [pc, #412]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	4a66      	ldr	r2, [pc, #408]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6213      	str	r3, [r2, #32]
 8001c0a:	4b64      	ldr	r3, [pc, #400]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4a63      	ldr	r2, [pc, #396]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	f023 0304 	bic.w	r3, r3, #4
 8001c14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d015      	beq.n	8001c4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fb69 	bl	80012f4 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff fb65 	bl	80012f4 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e0ab      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3c:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0ee      	beq.n	8001c26 <HAL_RCC_OscConfig+0x37e>
 8001c48:	e014      	b.n	8001c74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fb53 	bl	80012f4 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7ff fb4f 	bl	80012f4 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e095      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c68:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1ee      	bne.n	8001c52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d105      	bne.n	8001c86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7a:	4b48      	ldr	r3, [pc, #288]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8081 	beq.w	8001d92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c90:	4b42      	ldr	r3, [pc, #264]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d061      	beq.n	8001d60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d146      	bne.n	8001d32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca4:	4b3f      	ldr	r3, [pc, #252]	; (8001da4 <HAL_RCC_OscConfig+0x4fc>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff fb23 	bl	80012f4 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7ff fb1f 	bl	80012f4 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e067      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc4:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f0      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd8:	d108      	bne.n	8001cec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cda:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	492d      	ldr	r1, [pc, #180]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cec:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a19      	ldr	r1, [r3, #32]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	4927      	ldr	r1, [pc, #156]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d04:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <HAL_RCC_OscConfig+0x4fc>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7ff faf3 	bl	80012f4 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d12:	f7ff faef 	bl	80012f4 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e037      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d24:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x46a>
 8001d30:	e02f      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <HAL_RCC_OscConfig+0x4fc>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fadc 	bl	80012f4 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff fad8 	bl	80012f4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e020      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x498>
 8001d5e:	e018      	b.n	8001d92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e013      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40007000 	.word	0x40007000
 8001da4:	42420060 	.word	0x42420060

08001da8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0d0      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b6a      	ldr	r3, [pc, #424]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d910      	bls.n	8001dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b67      	ldr	r3, [pc, #412]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 0207 	bic.w	r2, r3, #7
 8001dd2:	4965      	ldr	r1, [pc, #404]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	4b63      	ldr	r3, [pc, #396]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0b8      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d020      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e04:	4b59      	ldr	r3, [pc, #356]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e1c:	4b53      	ldr	r3, [pc, #332]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4a52      	ldr	r2, [pc, #328]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e28:	4b50      	ldr	r3, [pc, #320]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	494d      	ldr	r1, [pc, #308]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d040      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4e:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d115      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e07f      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e66:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e073      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e06b      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e86:	4b39      	ldr	r3, [pc, #228]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f023 0203 	bic.w	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4936      	ldr	r1, [pc, #216]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e98:	f7ff fa2c 	bl	80012f4 <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea0:	f7ff fa28 	bl	80012f4 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e053      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 020c 	and.w	r2, r3, #12
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d1eb      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d210      	bcs.n	8001ef8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0207 	bic.w	r2, r3, #7
 8001ede:	4922      	ldr	r1, [pc, #136]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e032      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4916      	ldr	r1, [pc, #88]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d009      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	490e      	ldr	r1, [pc, #56]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f36:	f000 f821 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	490a      	ldr	r1, [pc, #40]	; (8001f70 <HAL_RCC_ClockConfig+0x1c8>)
 8001f48:	5ccb      	ldrb	r3, [r1, r3]
 8001f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4e:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <HAL_RCC_ClockConfig+0x1cc>)
 8001f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_RCC_ClockConfig+0x1d0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f98a 	bl	8001270 <HAL_InitTick>

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40022000 	.word	0x40022000
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	0800363c 	.word	0x0800363c
 8001f74:	20000040 	.word	0x20000040
 8001f78:	20000044 	.word	0x20000044

08001f7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f7c:	b490      	push	{r4, r7}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f82:	4b2a      	ldr	r3, [pc, #168]	; (800202c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f84:	1d3c      	adds	r4, r7, #4
 8001f86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f8c:	f240 2301 	movw	r3, #513	; 0x201
 8001f90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fa6:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d002      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x40>
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d003      	beq.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x46>
 8001fba:	e02d      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fbe:	623b      	str	r3, [r7, #32]
      break;
 8001fc0:	e02d      	b.n	800201e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	0c9b      	lsrs	r3, r3, #18
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fce:	4413      	add	r3, r2
 8001fd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fd4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	0c5b      	lsrs	r3, r3, #17
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fee:	4413      	add	r3, r2
 8001ff0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ff4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffa:	fb02 f203 	mul.w	r2, r2, r3
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	fbb2 f3f3 	udiv	r3, r2, r3
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	e004      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <HAL_RCC_GetSysClockFreq+0xbc>)
 800200c:	fb02 f303 	mul.w	r3, r2, r3
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	623b      	str	r3, [r7, #32]
      break;
 8002016:	e002      	b.n	800201e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_RCC_GetSysClockFreq+0xb8>)
 800201a:	623b      	str	r3, [r7, #32]
      break;
 800201c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800201e:	6a3b      	ldr	r3, [r7, #32]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3728      	adds	r7, #40	; 0x28
 8002024:	46bd      	mov	sp, r7
 8002026:	bc90      	pop	{r4, r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	0800362c 	.word	0x0800362c
 8002030:	40021000 	.word	0x40021000
 8002034:	007a1200 	.word	0x007a1200
 8002038:	003d0900 	.word	0x003d0900

0800203c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002040:	4b02      	ldr	r3, [pc, #8]	; (800204c <HAL_RCC_GetHCLKFreq+0x10>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr
 800204c:	20000040 	.word	0x20000040

08002050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002054:	f7ff fff2 	bl	800203c <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4903      	ldr	r1, [pc, #12]	; (8002074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	0800364c 	.word	0x0800364c

08002078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800207c:	f7ff ffde 	bl	800203c <HAL_RCC_GetHCLKFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	0adb      	lsrs	r3, r3, #11
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4903      	ldr	r1, [pc, #12]	; (800209c <HAL_RCC_GetPCLK2Freq+0x24>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	0800364c 	.word	0x0800364c

080020a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <RCC_Delay+0x34>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <RCC_Delay+0x38>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0a5b      	lsrs	r3, r3, #9
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020bc:	bf00      	nop
  }
  while (Delay --);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1e5a      	subs	r2, r3, #1
 80020c2:	60fa      	str	r2, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f9      	bne.n	80020bc <RCC_Delay+0x1c>
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	20000040 	.word	0x20000040
 80020d8:	10624dd3 	.word	0x10624dd3

080020dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e041      	b.n	8002172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fd4a 	bl	8000b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3304      	adds	r3, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f000 fa6a 	bl	80025f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d001      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e035      	b.n	8002200 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a16      	ldr	r2, [pc, #88]	; (800220c <HAL_TIM_Base_Start_IT+0x90>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d009      	beq.n	80021ca <HAL_TIM_Base_Start_IT+0x4e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021be:	d004      	beq.n	80021ca <HAL_TIM_Base_Start_IT+0x4e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a12      	ldr	r2, [pc, #72]	; (8002210 <HAL_TIM_Base_Start_IT+0x94>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d111      	bne.n	80021ee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b06      	cmp	r3, #6
 80021da:	d010      	beq.n	80021fe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ec:	e007      	b.n	80021fe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0201 	orr.w	r2, r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40012c00 	.word	0x40012c00
 8002210:	40000400 	.word	0x40000400

08002214 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b02      	cmp	r3, #2
 8002228:	d122      	bne.n	8002270 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b02      	cmp	r3, #2
 8002236:	d11b      	bne.n	8002270 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0202 	mvn.w	r2, #2
 8002240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f9b1 	bl	80025be <HAL_TIM_IC_CaptureCallback>
 800225c:	e005      	b.n	800226a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f9a4 	bl	80025ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f9b3 	bl	80025d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b04      	cmp	r3, #4
 800227c:	d122      	bne.n	80022c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b04      	cmp	r3, #4
 800228a:	d11b      	bne.n	80022c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0204 	mvn.w	r2, #4
 8002294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2202      	movs	r2, #2
 800229a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f987 	bl	80025be <HAL_TIM_IC_CaptureCallback>
 80022b0:	e005      	b.n	80022be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f97a 	bl	80025ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f989 	bl	80025d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d122      	bne.n	8002318 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d11b      	bne.n	8002318 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0208 	mvn.w	r2, #8
 80022e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2204      	movs	r2, #4
 80022ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f95d 	bl	80025be <HAL_TIM_IC_CaptureCallback>
 8002304:	e005      	b.n	8002312 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f950 	bl	80025ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f95f 	bl	80025d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b10      	cmp	r3, #16
 8002324:	d122      	bne.n	800236c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b10      	cmp	r3, #16
 8002332:	d11b      	bne.n	800236c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f06f 0210 	mvn.w	r2, #16
 800233c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2208      	movs	r2, #8
 8002342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f933 	bl	80025be <HAL_TIM_IC_CaptureCallback>
 8002358:	e005      	b.n	8002366 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f926 	bl	80025ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f935 	bl	80025d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d10e      	bne.n	8002398 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d107      	bne.n	8002398 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0201 	mvn.w	r2, #1
 8002390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe fd2e 	bl	8000df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a2:	2b80      	cmp	r3, #128	; 0x80
 80023a4:	d10e      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b0:	2b80      	cmp	r3, #128	; 0x80
 80023b2:	d107      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fa67 	bl	8002892 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ce:	2b40      	cmp	r3, #64	; 0x40
 80023d0:	d10e      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	d107      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f8f9 	bl	80025e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d10e      	bne.n	800241c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b20      	cmp	r3, #32
 800240a:	d107      	bne.n	800241c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0220 	mvn.w	r2, #32
 8002414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fa32 	bl	8002880 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_TIM_ConfigClockSource+0x18>
 8002438:	2302      	movs	r3, #2
 800243a:	e0b3      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x180>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800245a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002462:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002474:	d03e      	beq.n	80024f4 <HAL_TIM_ConfigClockSource+0xd0>
 8002476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800247a:	f200 8087 	bhi.w	800258c <HAL_TIM_ConfigClockSource+0x168>
 800247e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002482:	f000 8085 	beq.w	8002590 <HAL_TIM_ConfigClockSource+0x16c>
 8002486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248a:	d87f      	bhi.n	800258c <HAL_TIM_ConfigClockSource+0x168>
 800248c:	2b70      	cmp	r3, #112	; 0x70
 800248e:	d01a      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0xa2>
 8002490:	2b70      	cmp	r3, #112	; 0x70
 8002492:	d87b      	bhi.n	800258c <HAL_TIM_ConfigClockSource+0x168>
 8002494:	2b60      	cmp	r3, #96	; 0x60
 8002496:	d050      	beq.n	800253a <HAL_TIM_ConfigClockSource+0x116>
 8002498:	2b60      	cmp	r3, #96	; 0x60
 800249a:	d877      	bhi.n	800258c <HAL_TIM_ConfigClockSource+0x168>
 800249c:	2b50      	cmp	r3, #80	; 0x50
 800249e:	d03c      	beq.n	800251a <HAL_TIM_ConfigClockSource+0xf6>
 80024a0:	2b50      	cmp	r3, #80	; 0x50
 80024a2:	d873      	bhi.n	800258c <HAL_TIM_ConfigClockSource+0x168>
 80024a4:	2b40      	cmp	r3, #64	; 0x40
 80024a6:	d058      	beq.n	800255a <HAL_TIM_ConfigClockSource+0x136>
 80024a8:	2b40      	cmp	r3, #64	; 0x40
 80024aa:	d86f      	bhi.n	800258c <HAL_TIM_ConfigClockSource+0x168>
 80024ac:	2b30      	cmp	r3, #48	; 0x30
 80024ae:	d064      	beq.n	800257a <HAL_TIM_ConfigClockSource+0x156>
 80024b0:	2b30      	cmp	r3, #48	; 0x30
 80024b2:	d86b      	bhi.n	800258c <HAL_TIM_ConfigClockSource+0x168>
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d060      	beq.n	800257a <HAL_TIM_ConfigClockSource+0x156>
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d867      	bhi.n	800258c <HAL_TIM_ConfigClockSource+0x168>
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d05c      	beq.n	800257a <HAL_TIM_ConfigClockSource+0x156>
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d05a      	beq.n	800257a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80024c4:	e062      	b.n	800258c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6899      	ldr	r1, [r3, #8]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f000 f95c 	bl	8002792 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	609a      	str	r2, [r3, #8]
      break;
 80024f2:	e04e      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	6899      	ldr	r1, [r3, #8]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f000 f945 	bl	8002792 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002516:	609a      	str	r2, [r3, #8]
      break;
 8002518:	e03b      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6859      	ldr	r1, [r3, #4]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	461a      	mov	r2, r3
 8002528:	f000 f8bc 	bl	80026a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2150      	movs	r1, #80	; 0x50
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f913 	bl	800275e <TIM_ITRx_SetConfig>
      break;
 8002538:	e02b      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6859      	ldr	r1, [r3, #4]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	461a      	mov	r2, r3
 8002548:	f000 f8da 	bl	8002700 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2160      	movs	r1, #96	; 0x60
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f903 	bl	800275e <TIM_ITRx_SetConfig>
      break;
 8002558:	e01b      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6859      	ldr	r1, [r3, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	461a      	mov	r2, r3
 8002568:	f000 f89c 	bl	80026a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2140      	movs	r1, #64	; 0x40
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f8f3 	bl	800275e <TIM_ITRx_SetConfig>
      break;
 8002578:	e00b      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4619      	mov	r1, r3
 8002584:	4610      	mov	r0, r2
 8002586:	f000 f8ea 	bl	800275e <TIM_ITRx_SetConfig>
        break;
 800258a:	e002      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800258c:	bf00      	nop
 800258e:	e000      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002590:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a25      	ldr	r2, [pc, #148]	; (800269c <TIM_Base_SetConfig+0xa8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <TIM_Base_SetConfig+0x28>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002612:	d003      	beq.n	800261c <TIM_Base_SetConfig+0x28>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a22      	ldr	r2, [pc, #136]	; (80026a0 <TIM_Base_SetConfig+0xac>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d108      	bne.n	800262e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a1a      	ldr	r2, [pc, #104]	; (800269c <TIM_Base_SetConfig+0xa8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <TIM_Base_SetConfig+0x52>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263c:	d003      	beq.n	8002646 <TIM_Base_SetConfig+0x52>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a17      	ldr	r2, [pc, #92]	; (80026a0 <TIM_Base_SetConfig+0xac>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d108      	bne.n	8002658 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a07      	ldr	r2, [pc, #28]	; (800269c <TIM_Base_SetConfig+0xa8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d103      	bne.n	800268c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	615a      	str	r2, [r3, #20]
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	40012c00 	.word	0x40012c00
 80026a0:	40000400 	.word	0x40000400

080026a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	f023 0201 	bic.w	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f023 030a 	bic.w	r3, r3, #10
 80026e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	621a      	str	r2, [r3, #32]
}
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f023 0210 	bic.w	r2, r3, #16
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800272a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	031b      	lsls	r3, r3, #12
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800273c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	621a      	str	r2, [r3, #32]
}
 8002754:	bf00      	nop
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800275e:	b480      	push	{r7}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002774:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	f043 0307 	orr.w	r3, r3, #7
 8002780:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	609a      	str	r2, [r3, #8]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002792:	b480      	push	{r7}
 8002794:	b087      	sub	sp, #28
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	021a      	lsls	r2, r3, #8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	609a      	str	r2, [r3, #8]
}
 80027c6:	bf00      	nop
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e041      	b.n	800286c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a14      	ldr	r2, [pc, #80]	; (8002878 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d009      	beq.n	8002840 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002834:	d004      	beq.n	8002840 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a10      	ldr	r2, [pc, #64]	; (800287c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d10c      	bne.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002846:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	4313      	orrs	r3, r2
 8002850:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40012c00 	.word	0x40012c00
 800287c:	40000400 	.word	0x40000400

08002880 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e03f      	b.n	8002936 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe f98a 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2224      	movs	r2, #36	; 0x24
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f905 	bl	8002af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800290c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800291c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b08a      	sub	sp, #40	; 0x28
 8002942:	af02      	add	r7, sp, #8
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b20      	cmp	r3, #32
 800295c:	d17c      	bne.n	8002a58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <HAL_UART_Transmit+0x2c>
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e075      	b.n	8002a5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_UART_Transmit+0x3e>
 8002978:	2302      	movs	r3, #2
 800297a:	e06e      	b.n	8002a5a <HAL_UART_Transmit+0x11c>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2221      	movs	r2, #33	; 0x21
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002992:	f7fe fcaf 	bl	80012f4 <HAL_GetTick>
 8002996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	88fa      	ldrh	r2, [r7, #6]
 800299c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	88fa      	ldrh	r2, [r7, #6]
 80029a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ac:	d108      	bne.n	80029c0 <HAL_UART_Transmit+0x82>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d104      	bne.n	80029c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	e003      	b.n	80029c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029d0:	e02a      	b.n	8002a28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2200      	movs	r2, #0
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f840 	bl	8002a62 <UART_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e036      	b.n	8002a5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	3302      	adds	r3, #2
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	e007      	b.n	8002a1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	3301      	adds	r3, #1
 8002a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1cf      	bne.n	80029d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2140      	movs	r1, #64	; 0x40
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f810 	bl	8002a62 <UART_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e006      	b.n	8002a5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a72:	e02c      	b.n	8002ace <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7a:	d028      	beq.n	8002ace <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a82:	f7fe fc37 	bl	80012f4 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d21d      	bcs.n	8002ace <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002aa0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0201 	bic.w	r2, r2, #1
 8002ab0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e00f      	b.n	8002aee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	bf0c      	ite	eq
 8002ade:	2301      	moveq	r3, #1
 8002ae0:	2300      	movne	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d0c3      	beq.n	8002a74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b32:	f023 030c 	bic.w	r3, r3, #12
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2c      	ldr	r2, [pc, #176]	; (8002c0c <UART_SetConfig+0x114>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d103      	bne.n	8002b68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b60:	f7ff fa8a 	bl	8002078 <HAL_RCC_GetPCLK2Freq>
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	e002      	b.n	8002b6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b68:	f7ff fa72 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8002b6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	009a      	lsls	r2, r3, #2
 8002b78:	441a      	add	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <UART_SetConfig+0x118>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	0119      	lsls	r1, r3, #4
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	009a      	lsls	r2, r3, #2
 8002b98:	441a      	add	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <UART_SetConfig+0x118>)
 8002ba6:	fba3 0302 	umull	r0, r3, r3, r2
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	2064      	movs	r0, #100	; 0x64
 8002bae:	fb00 f303 	mul.w	r3, r0, r3
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	3332      	adds	r3, #50	; 0x32
 8002bb8:	4a15      	ldr	r2, [pc, #84]	; (8002c10 <UART_SetConfig+0x118>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc4:	4419      	add	r1, r3
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	009a      	lsls	r2, r3, #2
 8002bd0:	441a      	add	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <UART_SetConfig+0x118>)
 8002bde:	fba3 0302 	umull	r0, r3, r3, r2
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2064      	movs	r0, #100	; 0x64
 8002be6:	fb00 f303 	mul.w	r3, r0, r3
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	3332      	adds	r3, #50	; 0x32
 8002bf0:	4a07      	ldr	r2, [pc, #28]	; (8002c10 <UART_SetConfig+0x118>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	f003 020f 	and.w	r2, r3, #15
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	440a      	add	r2, r1
 8002c02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40013800 	.word	0x40013800
 8002c10:	51eb851f 	.word	0x51eb851f

08002c14 <__errno>:
 8002c14:	4b01      	ldr	r3, [pc, #4]	; (8002c1c <__errno+0x8>)
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	2000004c 	.word	0x2000004c

08002c20 <__libc_init_array>:
 8002c20:	b570      	push	{r4, r5, r6, lr}
 8002c22:	2600      	movs	r6, #0
 8002c24:	4d0c      	ldr	r5, [pc, #48]	; (8002c58 <__libc_init_array+0x38>)
 8002c26:	4c0d      	ldr	r4, [pc, #52]	; (8002c5c <__libc_init_array+0x3c>)
 8002c28:	1b64      	subs	r4, r4, r5
 8002c2a:	10a4      	asrs	r4, r4, #2
 8002c2c:	42a6      	cmp	r6, r4
 8002c2e:	d109      	bne.n	8002c44 <__libc_init_array+0x24>
 8002c30:	f000 fce4 	bl	80035fc <_init>
 8002c34:	2600      	movs	r6, #0
 8002c36:	4d0a      	ldr	r5, [pc, #40]	; (8002c60 <__libc_init_array+0x40>)
 8002c38:	4c0a      	ldr	r4, [pc, #40]	; (8002c64 <__libc_init_array+0x44>)
 8002c3a:	1b64      	subs	r4, r4, r5
 8002c3c:	10a4      	asrs	r4, r4, #2
 8002c3e:	42a6      	cmp	r6, r4
 8002c40:	d105      	bne.n	8002c4e <__libc_init_array+0x2e>
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c48:	4798      	blx	r3
 8002c4a:	3601      	adds	r6, #1
 8002c4c:	e7ee      	b.n	8002c2c <__libc_init_array+0xc>
 8002c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c52:	4798      	blx	r3
 8002c54:	3601      	adds	r6, #1
 8002c56:	e7f2      	b.n	8002c3e <__libc_init_array+0x1e>
 8002c58:	080036b8 	.word	0x080036b8
 8002c5c:	080036b8 	.word	0x080036b8
 8002c60:	080036b8 	.word	0x080036b8
 8002c64:	080036bc 	.word	0x080036bc

08002c68 <memset>:
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4402      	add	r2, r0
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d100      	bne.n	8002c72 <memset+0xa>
 8002c70:	4770      	bx	lr
 8002c72:	f803 1b01 	strb.w	r1, [r3], #1
 8002c76:	e7f9      	b.n	8002c6c <memset+0x4>

08002c78 <_puts_r>:
 8002c78:	b570      	push	{r4, r5, r6, lr}
 8002c7a:	460e      	mov	r6, r1
 8002c7c:	4605      	mov	r5, r0
 8002c7e:	b118      	cbz	r0, 8002c88 <_puts_r+0x10>
 8002c80:	6983      	ldr	r3, [r0, #24]
 8002c82:	b90b      	cbnz	r3, 8002c88 <_puts_r+0x10>
 8002c84:	f000 fa48 	bl	8003118 <__sinit>
 8002c88:	69ab      	ldr	r3, [r5, #24]
 8002c8a:	68ac      	ldr	r4, [r5, #8]
 8002c8c:	b913      	cbnz	r3, 8002c94 <_puts_r+0x1c>
 8002c8e:	4628      	mov	r0, r5
 8002c90:	f000 fa42 	bl	8003118 <__sinit>
 8002c94:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <_puts_r+0xd0>)
 8002c96:	429c      	cmp	r4, r3
 8002c98:	d120      	bne.n	8002cdc <_puts_r+0x64>
 8002c9a:	686c      	ldr	r4, [r5, #4]
 8002c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c9e:	07db      	lsls	r3, r3, #31
 8002ca0:	d405      	bmi.n	8002cae <_puts_r+0x36>
 8002ca2:	89a3      	ldrh	r3, [r4, #12]
 8002ca4:	0598      	lsls	r0, r3, #22
 8002ca6:	d402      	bmi.n	8002cae <_puts_r+0x36>
 8002ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002caa:	f000 fad3 	bl	8003254 <__retarget_lock_acquire_recursive>
 8002cae:	89a3      	ldrh	r3, [r4, #12]
 8002cb0:	0719      	lsls	r1, r3, #28
 8002cb2:	d51d      	bpl.n	8002cf0 <_puts_r+0x78>
 8002cb4:	6923      	ldr	r3, [r4, #16]
 8002cb6:	b1db      	cbz	r3, 8002cf0 <_puts_r+0x78>
 8002cb8:	3e01      	subs	r6, #1
 8002cba:	68a3      	ldr	r3, [r4, #8]
 8002cbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	60a3      	str	r3, [r4, #8]
 8002cc4:	bb39      	cbnz	r1, 8002d16 <_puts_r+0x9e>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	da38      	bge.n	8002d3c <_puts_r+0xc4>
 8002cca:	4622      	mov	r2, r4
 8002ccc:	210a      	movs	r1, #10
 8002cce:	4628      	mov	r0, r5
 8002cd0:	f000 f848 	bl	8002d64 <__swbuf_r>
 8002cd4:	3001      	adds	r0, #1
 8002cd6:	d011      	beq.n	8002cfc <_puts_r+0x84>
 8002cd8:	250a      	movs	r5, #10
 8002cda:	e011      	b.n	8002d00 <_puts_r+0x88>
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <_puts_r+0xd4>)
 8002cde:	429c      	cmp	r4, r3
 8002ce0:	d101      	bne.n	8002ce6 <_puts_r+0x6e>
 8002ce2:	68ac      	ldr	r4, [r5, #8]
 8002ce4:	e7da      	b.n	8002c9c <_puts_r+0x24>
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <_puts_r+0xd8>)
 8002ce8:	429c      	cmp	r4, r3
 8002cea:	bf08      	it	eq
 8002cec:	68ec      	ldreq	r4, [r5, #12]
 8002cee:	e7d5      	b.n	8002c9c <_puts_r+0x24>
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	f000 f888 	bl	8002e08 <__swsetup_r>
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	d0dd      	beq.n	8002cb8 <_puts_r+0x40>
 8002cfc:	f04f 35ff 	mov.w	r5, #4294967295
 8002d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d02:	07da      	lsls	r2, r3, #31
 8002d04:	d405      	bmi.n	8002d12 <_puts_r+0x9a>
 8002d06:	89a3      	ldrh	r3, [r4, #12]
 8002d08:	059b      	lsls	r3, r3, #22
 8002d0a:	d402      	bmi.n	8002d12 <_puts_r+0x9a>
 8002d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d0e:	f000 faa2 	bl	8003256 <__retarget_lock_release_recursive>
 8002d12:	4628      	mov	r0, r5
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	da04      	bge.n	8002d24 <_puts_r+0xac>
 8002d1a:	69a2      	ldr	r2, [r4, #24]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	dc06      	bgt.n	8002d2e <_puts_r+0xb6>
 8002d20:	290a      	cmp	r1, #10
 8002d22:	d004      	beq.n	8002d2e <_puts_r+0xb6>
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	6022      	str	r2, [r4, #0]
 8002d2a:	7019      	strb	r1, [r3, #0]
 8002d2c:	e7c5      	b.n	8002cba <_puts_r+0x42>
 8002d2e:	4622      	mov	r2, r4
 8002d30:	4628      	mov	r0, r5
 8002d32:	f000 f817 	bl	8002d64 <__swbuf_r>
 8002d36:	3001      	adds	r0, #1
 8002d38:	d1bf      	bne.n	8002cba <_puts_r+0x42>
 8002d3a:	e7df      	b.n	8002cfc <_puts_r+0x84>
 8002d3c:	250a      	movs	r5, #10
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	6022      	str	r2, [r4, #0]
 8002d44:	701d      	strb	r5, [r3, #0]
 8002d46:	e7db      	b.n	8002d00 <_puts_r+0x88>
 8002d48:	08003678 	.word	0x08003678
 8002d4c:	08003698 	.word	0x08003698
 8002d50:	08003658 	.word	0x08003658

08002d54 <puts>:
 8002d54:	4b02      	ldr	r3, [pc, #8]	; (8002d60 <puts+0xc>)
 8002d56:	4601      	mov	r1, r0
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	f7ff bf8d 	b.w	8002c78 <_puts_r>
 8002d5e:	bf00      	nop
 8002d60:	2000004c 	.word	0x2000004c

08002d64 <__swbuf_r>:
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d66:	460e      	mov	r6, r1
 8002d68:	4614      	mov	r4, r2
 8002d6a:	4605      	mov	r5, r0
 8002d6c:	b118      	cbz	r0, 8002d76 <__swbuf_r+0x12>
 8002d6e:	6983      	ldr	r3, [r0, #24]
 8002d70:	b90b      	cbnz	r3, 8002d76 <__swbuf_r+0x12>
 8002d72:	f000 f9d1 	bl	8003118 <__sinit>
 8002d76:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <__swbuf_r+0x98>)
 8002d78:	429c      	cmp	r4, r3
 8002d7a:	d12b      	bne.n	8002dd4 <__swbuf_r+0x70>
 8002d7c:	686c      	ldr	r4, [r5, #4]
 8002d7e:	69a3      	ldr	r3, [r4, #24]
 8002d80:	60a3      	str	r3, [r4, #8]
 8002d82:	89a3      	ldrh	r3, [r4, #12]
 8002d84:	071a      	lsls	r2, r3, #28
 8002d86:	d52f      	bpl.n	8002de8 <__swbuf_r+0x84>
 8002d88:	6923      	ldr	r3, [r4, #16]
 8002d8a:	b36b      	cbz	r3, 8002de8 <__swbuf_r+0x84>
 8002d8c:	6923      	ldr	r3, [r4, #16]
 8002d8e:	6820      	ldr	r0, [r4, #0]
 8002d90:	b2f6      	uxtb	r6, r6
 8002d92:	1ac0      	subs	r0, r0, r3
 8002d94:	6963      	ldr	r3, [r4, #20]
 8002d96:	4637      	mov	r7, r6
 8002d98:	4283      	cmp	r3, r0
 8002d9a:	dc04      	bgt.n	8002da6 <__swbuf_r+0x42>
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	4628      	mov	r0, r5
 8002da0:	f000 f926 	bl	8002ff0 <_fflush_r>
 8002da4:	bb30      	cbnz	r0, 8002df4 <__swbuf_r+0x90>
 8002da6:	68a3      	ldr	r3, [r4, #8]
 8002da8:	3001      	adds	r0, #1
 8002daa:	3b01      	subs	r3, #1
 8002dac:	60a3      	str	r3, [r4, #8]
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	6022      	str	r2, [r4, #0]
 8002db4:	701e      	strb	r6, [r3, #0]
 8002db6:	6963      	ldr	r3, [r4, #20]
 8002db8:	4283      	cmp	r3, r0
 8002dba:	d004      	beq.n	8002dc6 <__swbuf_r+0x62>
 8002dbc:	89a3      	ldrh	r3, [r4, #12]
 8002dbe:	07db      	lsls	r3, r3, #31
 8002dc0:	d506      	bpl.n	8002dd0 <__swbuf_r+0x6c>
 8002dc2:	2e0a      	cmp	r6, #10
 8002dc4:	d104      	bne.n	8002dd0 <__swbuf_r+0x6c>
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	4628      	mov	r0, r5
 8002dca:	f000 f911 	bl	8002ff0 <_fflush_r>
 8002dce:	b988      	cbnz	r0, 8002df4 <__swbuf_r+0x90>
 8002dd0:	4638      	mov	r0, r7
 8002dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <__swbuf_r+0x9c>)
 8002dd6:	429c      	cmp	r4, r3
 8002dd8:	d101      	bne.n	8002dde <__swbuf_r+0x7a>
 8002dda:	68ac      	ldr	r4, [r5, #8]
 8002ddc:	e7cf      	b.n	8002d7e <__swbuf_r+0x1a>
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <__swbuf_r+0xa0>)
 8002de0:	429c      	cmp	r4, r3
 8002de2:	bf08      	it	eq
 8002de4:	68ec      	ldreq	r4, [r5, #12]
 8002de6:	e7ca      	b.n	8002d7e <__swbuf_r+0x1a>
 8002de8:	4621      	mov	r1, r4
 8002dea:	4628      	mov	r0, r5
 8002dec:	f000 f80c 	bl	8002e08 <__swsetup_r>
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d0cb      	beq.n	8002d8c <__swbuf_r+0x28>
 8002df4:	f04f 37ff 	mov.w	r7, #4294967295
 8002df8:	e7ea      	b.n	8002dd0 <__swbuf_r+0x6c>
 8002dfa:	bf00      	nop
 8002dfc:	08003678 	.word	0x08003678
 8002e00:	08003698 	.word	0x08003698
 8002e04:	08003658 	.word	0x08003658

08002e08 <__swsetup_r>:
 8002e08:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <__swsetup_r+0xcc>)
 8002e0a:	b570      	push	{r4, r5, r6, lr}
 8002e0c:	681d      	ldr	r5, [r3, #0]
 8002e0e:	4606      	mov	r6, r0
 8002e10:	460c      	mov	r4, r1
 8002e12:	b125      	cbz	r5, 8002e1e <__swsetup_r+0x16>
 8002e14:	69ab      	ldr	r3, [r5, #24]
 8002e16:	b913      	cbnz	r3, 8002e1e <__swsetup_r+0x16>
 8002e18:	4628      	mov	r0, r5
 8002e1a:	f000 f97d 	bl	8003118 <__sinit>
 8002e1e:	4b2e      	ldr	r3, [pc, #184]	; (8002ed8 <__swsetup_r+0xd0>)
 8002e20:	429c      	cmp	r4, r3
 8002e22:	d10f      	bne.n	8002e44 <__swsetup_r+0x3c>
 8002e24:	686c      	ldr	r4, [r5, #4]
 8002e26:	89a3      	ldrh	r3, [r4, #12]
 8002e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e2c:	0719      	lsls	r1, r3, #28
 8002e2e:	d42c      	bmi.n	8002e8a <__swsetup_r+0x82>
 8002e30:	06dd      	lsls	r5, r3, #27
 8002e32:	d411      	bmi.n	8002e58 <__swsetup_r+0x50>
 8002e34:	2309      	movs	r3, #9
 8002e36:	6033      	str	r3, [r6, #0]
 8002e38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e40:	81a3      	strh	r3, [r4, #12]
 8002e42:	e03e      	b.n	8002ec2 <__swsetup_r+0xba>
 8002e44:	4b25      	ldr	r3, [pc, #148]	; (8002edc <__swsetup_r+0xd4>)
 8002e46:	429c      	cmp	r4, r3
 8002e48:	d101      	bne.n	8002e4e <__swsetup_r+0x46>
 8002e4a:	68ac      	ldr	r4, [r5, #8]
 8002e4c:	e7eb      	b.n	8002e26 <__swsetup_r+0x1e>
 8002e4e:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <__swsetup_r+0xd8>)
 8002e50:	429c      	cmp	r4, r3
 8002e52:	bf08      	it	eq
 8002e54:	68ec      	ldreq	r4, [r5, #12]
 8002e56:	e7e6      	b.n	8002e26 <__swsetup_r+0x1e>
 8002e58:	0758      	lsls	r0, r3, #29
 8002e5a:	d512      	bpl.n	8002e82 <__swsetup_r+0x7a>
 8002e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e5e:	b141      	cbz	r1, 8002e72 <__swsetup_r+0x6a>
 8002e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e64:	4299      	cmp	r1, r3
 8002e66:	d002      	beq.n	8002e6e <__swsetup_r+0x66>
 8002e68:	4630      	mov	r0, r6
 8002e6a:	f000 fa59 	bl	8003320 <_free_r>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	6363      	str	r3, [r4, #52]	; 0x34
 8002e72:	89a3      	ldrh	r3, [r4, #12]
 8002e74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e78:	81a3      	strh	r3, [r4, #12]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	6063      	str	r3, [r4, #4]
 8002e7e:	6923      	ldr	r3, [r4, #16]
 8002e80:	6023      	str	r3, [r4, #0]
 8002e82:	89a3      	ldrh	r3, [r4, #12]
 8002e84:	f043 0308 	orr.w	r3, r3, #8
 8002e88:	81a3      	strh	r3, [r4, #12]
 8002e8a:	6923      	ldr	r3, [r4, #16]
 8002e8c:	b94b      	cbnz	r3, 8002ea2 <__swsetup_r+0x9a>
 8002e8e:	89a3      	ldrh	r3, [r4, #12]
 8002e90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e98:	d003      	beq.n	8002ea2 <__swsetup_r+0x9a>
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	f000 f9ff 	bl	80032a0 <__smakebuf_r>
 8002ea2:	89a0      	ldrh	r0, [r4, #12]
 8002ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ea8:	f010 0301 	ands.w	r3, r0, #1
 8002eac:	d00a      	beq.n	8002ec4 <__swsetup_r+0xbc>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60a3      	str	r3, [r4, #8]
 8002eb2:	6963      	ldr	r3, [r4, #20]
 8002eb4:	425b      	negs	r3, r3
 8002eb6:	61a3      	str	r3, [r4, #24]
 8002eb8:	6923      	ldr	r3, [r4, #16]
 8002eba:	b943      	cbnz	r3, 8002ece <__swsetup_r+0xc6>
 8002ebc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ec0:	d1ba      	bne.n	8002e38 <__swsetup_r+0x30>
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
 8002ec4:	0781      	lsls	r1, r0, #30
 8002ec6:	bf58      	it	pl
 8002ec8:	6963      	ldrpl	r3, [r4, #20]
 8002eca:	60a3      	str	r3, [r4, #8]
 8002ecc:	e7f4      	b.n	8002eb8 <__swsetup_r+0xb0>
 8002ece:	2000      	movs	r0, #0
 8002ed0:	e7f7      	b.n	8002ec2 <__swsetup_r+0xba>
 8002ed2:	bf00      	nop
 8002ed4:	2000004c 	.word	0x2000004c
 8002ed8:	08003678 	.word	0x08003678
 8002edc:	08003698 	.word	0x08003698
 8002ee0:	08003658 	.word	0x08003658

08002ee4 <__sflush_r>:
 8002ee4:	898a      	ldrh	r2, [r1, #12]
 8002ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eea:	4605      	mov	r5, r0
 8002eec:	0710      	lsls	r0, r2, #28
 8002eee:	460c      	mov	r4, r1
 8002ef0:	d458      	bmi.n	8002fa4 <__sflush_r+0xc0>
 8002ef2:	684b      	ldr	r3, [r1, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	dc05      	bgt.n	8002f04 <__sflush_r+0x20>
 8002ef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	dc02      	bgt.n	8002f04 <__sflush_r+0x20>
 8002efe:	2000      	movs	r0, #0
 8002f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f06:	2e00      	cmp	r6, #0
 8002f08:	d0f9      	beq.n	8002efe <__sflush_r+0x1a>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f10:	682f      	ldr	r7, [r5, #0]
 8002f12:	602b      	str	r3, [r5, #0]
 8002f14:	d032      	beq.n	8002f7c <__sflush_r+0x98>
 8002f16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f18:	89a3      	ldrh	r3, [r4, #12]
 8002f1a:	075a      	lsls	r2, r3, #29
 8002f1c:	d505      	bpl.n	8002f2a <__sflush_r+0x46>
 8002f1e:	6863      	ldr	r3, [r4, #4]
 8002f20:	1ac0      	subs	r0, r0, r3
 8002f22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f24:	b10b      	cbz	r3, 8002f2a <__sflush_r+0x46>
 8002f26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f28:	1ac0      	subs	r0, r0, r3
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f30:	4628      	mov	r0, r5
 8002f32:	6a21      	ldr	r1, [r4, #32]
 8002f34:	47b0      	blx	r6
 8002f36:	1c43      	adds	r3, r0, #1
 8002f38:	89a3      	ldrh	r3, [r4, #12]
 8002f3a:	d106      	bne.n	8002f4a <__sflush_r+0x66>
 8002f3c:	6829      	ldr	r1, [r5, #0]
 8002f3e:	291d      	cmp	r1, #29
 8002f40:	d82c      	bhi.n	8002f9c <__sflush_r+0xb8>
 8002f42:	4a2a      	ldr	r2, [pc, #168]	; (8002fec <__sflush_r+0x108>)
 8002f44:	40ca      	lsrs	r2, r1
 8002f46:	07d6      	lsls	r6, r2, #31
 8002f48:	d528      	bpl.n	8002f9c <__sflush_r+0xb8>
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	6062      	str	r2, [r4, #4]
 8002f4e:	6922      	ldr	r2, [r4, #16]
 8002f50:	04d9      	lsls	r1, r3, #19
 8002f52:	6022      	str	r2, [r4, #0]
 8002f54:	d504      	bpl.n	8002f60 <__sflush_r+0x7c>
 8002f56:	1c42      	adds	r2, r0, #1
 8002f58:	d101      	bne.n	8002f5e <__sflush_r+0x7a>
 8002f5a:	682b      	ldr	r3, [r5, #0]
 8002f5c:	b903      	cbnz	r3, 8002f60 <__sflush_r+0x7c>
 8002f5e:	6560      	str	r0, [r4, #84]	; 0x54
 8002f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f62:	602f      	str	r7, [r5, #0]
 8002f64:	2900      	cmp	r1, #0
 8002f66:	d0ca      	beq.n	8002efe <__sflush_r+0x1a>
 8002f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f6c:	4299      	cmp	r1, r3
 8002f6e:	d002      	beq.n	8002f76 <__sflush_r+0x92>
 8002f70:	4628      	mov	r0, r5
 8002f72:	f000 f9d5 	bl	8003320 <_free_r>
 8002f76:	2000      	movs	r0, #0
 8002f78:	6360      	str	r0, [r4, #52]	; 0x34
 8002f7a:	e7c1      	b.n	8002f00 <__sflush_r+0x1c>
 8002f7c:	6a21      	ldr	r1, [r4, #32]
 8002f7e:	2301      	movs	r3, #1
 8002f80:	4628      	mov	r0, r5
 8002f82:	47b0      	blx	r6
 8002f84:	1c41      	adds	r1, r0, #1
 8002f86:	d1c7      	bne.n	8002f18 <__sflush_r+0x34>
 8002f88:	682b      	ldr	r3, [r5, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0c4      	beq.n	8002f18 <__sflush_r+0x34>
 8002f8e:	2b1d      	cmp	r3, #29
 8002f90:	d001      	beq.n	8002f96 <__sflush_r+0xb2>
 8002f92:	2b16      	cmp	r3, #22
 8002f94:	d101      	bne.n	8002f9a <__sflush_r+0xb6>
 8002f96:	602f      	str	r7, [r5, #0]
 8002f98:	e7b1      	b.n	8002efe <__sflush_r+0x1a>
 8002f9a:	89a3      	ldrh	r3, [r4, #12]
 8002f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa0:	81a3      	strh	r3, [r4, #12]
 8002fa2:	e7ad      	b.n	8002f00 <__sflush_r+0x1c>
 8002fa4:	690f      	ldr	r7, [r1, #16]
 8002fa6:	2f00      	cmp	r7, #0
 8002fa8:	d0a9      	beq.n	8002efe <__sflush_r+0x1a>
 8002faa:	0793      	lsls	r3, r2, #30
 8002fac:	bf18      	it	ne
 8002fae:	2300      	movne	r3, #0
 8002fb0:	680e      	ldr	r6, [r1, #0]
 8002fb2:	bf08      	it	eq
 8002fb4:	694b      	ldreq	r3, [r1, #20]
 8002fb6:	eba6 0807 	sub.w	r8, r6, r7
 8002fba:	600f      	str	r7, [r1, #0]
 8002fbc:	608b      	str	r3, [r1, #8]
 8002fbe:	f1b8 0f00 	cmp.w	r8, #0
 8002fc2:	dd9c      	ble.n	8002efe <__sflush_r+0x1a>
 8002fc4:	4643      	mov	r3, r8
 8002fc6:	463a      	mov	r2, r7
 8002fc8:	4628      	mov	r0, r5
 8002fca:	6a21      	ldr	r1, [r4, #32]
 8002fcc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fce:	47b0      	blx	r6
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	dc06      	bgt.n	8002fe2 <__sflush_r+0xfe>
 8002fd4:	89a3      	ldrh	r3, [r4, #12]
 8002fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fde:	81a3      	strh	r3, [r4, #12]
 8002fe0:	e78e      	b.n	8002f00 <__sflush_r+0x1c>
 8002fe2:	4407      	add	r7, r0
 8002fe4:	eba8 0800 	sub.w	r8, r8, r0
 8002fe8:	e7e9      	b.n	8002fbe <__sflush_r+0xda>
 8002fea:	bf00      	nop
 8002fec:	20400001 	.word	0x20400001

08002ff0 <_fflush_r>:
 8002ff0:	b538      	push	{r3, r4, r5, lr}
 8002ff2:	690b      	ldr	r3, [r1, #16]
 8002ff4:	4605      	mov	r5, r0
 8002ff6:	460c      	mov	r4, r1
 8002ff8:	b913      	cbnz	r3, 8003000 <_fflush_r+0x10>
 8002ffa:	2500      	movs	r5, #0
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	bd38      	pop	{r3, r4, r5, pc}
 8003000:	b118      	cbz	r0, 800300a <_fflush_r+0x1a>
 8003002:	6983      	ldr	r3, [r0, #24]
 8003004:	b90b      	cbnz	r3, 800300a <_fflush_r+0x1a>
 8003006:	f000 f887 	bl	8003118 <__sinit>
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <_fflush_r+0x6c>)
 800300c:	429c      	cmp	r4, r3
 800300e:	d11b      	bne.n	8003048 <_fflush_r+0x58>
 8003010:	686c      	ldr	r4, [r5, #4]
 8003012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0ef      	beq.n	8002ffa <_fflush_r+0xa>
 800301a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800301c:	07d0      	lsls	r0, r2, #31
 800301e:	d404      	bmi.n	800302a <_fflush_r+0x3a>
 8003020:	0599      	lsls	r1, r3, #22
 8003022:	d402      	bmi.n	800302a <_fflush_r+0x3a>
 8003024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003026:	f000 f915 	bl	8003254 <__retarget_lock_acquire_recursive>
 800302a:	4628      	mov	r0, r5
 800302c:	4621      	mov	r1, r4
 800302e:	f7ff ff59 	bl	8002ee4 <__sflush_r>
 8003032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003034:	4605      	mov	r5, r0
 8003036:	07da      	lsls	r2, r3, #31
 8003038:	d4e0      	bmi.n	8002ffc <_fflush_r+0xc>
 800303a:	89a3      	ldrh	r3, [r4, #12]
 800303c:	059b      	lsls	r3, r3, #22
 800303e:	d4dd      	bmi.n	8002ffc <_fflush_r+0xc>
 8003040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003042:	f000 f908 	bl	8003256 <__retarget_lock_release_recursive>
 8003046:	e7d9      	b.n	8002ffc <_fflush_r+0xc>
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <_fflush_r+0x70>)
 800304a:	429c      	cmp	r4, r3
 800304c:	d101      	bne.n	8003052 <_fflush_r+0x62>
 800304e:	68ac      	ldr	r4, [r5, #8]
 8003050:	e7df      	b.n	8003012 <_fflush_r+0x22>
 8003052:	4b04      	ldr	r3, [pc, #16]	; (8003064 <_fflush_r+0x74>)
 8003054:	429c      	cmp	r4, r3
 8003056:	bf08      	it	eq
 8003058:	68ec      	ldreq	r4, [r5, #12]
 800305a:	e7da      	b.n	8003012 <_fflush_r+0x22>
 800305c:	08003678 	.word	0x08003678
 8003060:	08003698 	.word	0x08003698
 8003064:	08003658 	.word	0x08003658

08003068 <std>:
 8003068:	2300      	movs	r3, #0
 800306a:	b510      	push	{r4, lr}
 800306c:	4604      	mov	r4, r0
 800306e:	e9c0 3300 	strd	r3, r3, [r0]
 8003072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003076:	6083      	str	r3, [r0, #8]
 8003078:	8181      	strh	r1, [r0, #12]
 800307a:	6643      	str	r3, [r0, #100]	; 0x64
 800307c:	81c2      	strh	r2, [r0, #14]
 800307e:	6183      	str	r3, [r0, #24]
 8003080:	4619      	mov	r1, r3
 8003082:	2208      	movs	r2, #8
 8003084:	305c      	adds	r0, #92	; 0x5c
 8003086:	f7ff fdef 	bl	8002c68 <memset>
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <std+0x38>)
 800308c:	6224      	str	r4, [r4, #32]
 800308e:	6263      	str	r3, [r4, #36]	; 0x24
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <std+0x3c>)
 8003092:	62a3      	str	r3, [r4, #40]	; 0x28
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <std+0x40>)
 8003096:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <std+0x44>)
 800309a:	6323      	str	r3, [r4, #48]	; 0x30
 800309c:	bd10      	pop	{r4, pc}
 800309e:	bf00      	nop
 80030a0:	0800348d 	.word	0x0800348d
 80030a4:	080034af 	.word	0x080034af
 80030a8:	080034e7 	.word	0x080034e7
 80030ac:	0800350b 	.word	0x0800350b

080030b0 <_cleanup_r>:
 80030b0:	4901      	ldr	r1, [pc, #4]	; (80030b8 <_cleanup_r+0x8>)
 80030b2:	f000 b8af 	b.w	8003214 <_fwalk_reent>
 80030b6:	bf00      	nop
 80030b8:	08002ff1 	.word	0x08002ff1

080030bc <__sfmoreglue>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	2568      	movs	r5, #104	; 0x68
 80030c0:	1e4a      	subs	r2, r1, #1
 80030c2:	4355      	muls	r5, r2
 80030c4:	460e      	mov	r6, r1
 80030c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030ca:	f000 f975 	bl	80033b8 <_malloc_r>
 80030ce:	4604      	mov	r4, r0
 80030d0:	b140      	cbz	r0, 80030e4 <__sfmoreglue+0x28>
 80030d2:	2100      	movs	r1, #0
 80030d4:	e9c0 1600 	strd	r1, r6, [r0]
 80030d8:	300c      	adds	r0, #12
 80030da:	60a0      	str	r0, [r4, #8]
 80030dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030e0:	f7ff fdc2 	bl	8002c68 <memset>
 80030e4:	4620      	mov	r0, r4
 80030e6:	bd70      	pop	{r4, r5, r6, pc}

080030e8 <__sfp_lock_acquire>:
 80030e8:	4801      	ldr	r0, [pc, #4]	; (80030f0 <__sfp_lock_acquire+0x8>)
 80030ea:	f000 b8b3 	b.w	8003254 <__retarget_lock_acquire_recursive>
 80030ee:	bf00      	nop
 80030f0:	200001c4 	.word	0x200001c4

080030f4 <__sfp_lock_release>:
 80030f4:	4801      	ldr	r0, [pc, #4]	; (80030fc <__sfp_lock_release+0x8>)
 80030f6:	f000 b8ae 	b.w	8003256 <__retarget_lock_release_recursive>
 80030fa:	bf00      	nop
 80030fc:	200001c4 	.word	0x200001c4

08003100 <__sinit_lock_acquire>:
 8003100:	4801      	ldr	r0, [pc, #4]	; (8003108 <__sinit_lock_acquire+0x8>)
 8003102:	f000 b8a7 	b.w	8003254 <__retarget_lock_acquire_recursive>
 8003106:	bf00      	nop
 8003108:	200001bf 	.word	0x200001bf

0800310c <__sinit_lock_release>:
 800310c:	4801      	ldr	r0, [pc, #4]	; (8003114 <__sinit_lock_release+0x8>)
 800310e:	f000 b8a2 	b.w	8003256 <__retarget_lock_release_recursive>
 8003112:	bf00      	nop
 8003114:	200001bf 	.word	0x200001bf

08003118 <__sinit>:
 8003118:	b510      	push	{r4, lr}
 800311a:	4604      	mov	r4, r0
 800311c:	f7ff fff0 	bl	8003100 <__sinit_lock_acquire>
 8003120:	69a3      	ldr	r3, [r4, #24]
 8003122:	b11b      	cbz	r3, 800312c <__sinit+0x14>
 8003124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003128:	f7ff bff0 	b.w	800310c <__sinit_lock_release>
 800312c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003130:	6523      	str	r3, [r4, #80]	; 0x50
 8003132:	4b13      	ldr	r3, [pc, #76]	; (8003180 <__sinit+0x68>)
 8003134:	4a13      	ldr	r2, [pc, #76]	; (8003184 <__sinit+0x6c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	62a2      	str	r2, [r4, #40]	; 0x28
 800313a:	42a3      	cmp	r3, r4
 800313c:	bf08      	it	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	4620      	mov	r0, r4
 8003142:	bf08      	it	eq
 8003144:	61a3      	streq	r3, [r4, #24]
 8003146:	f000 f81f 	bl	8003188 <__sfp>
 800314a:	6060      	str	r0, [r4, #4]
 800314c:	4620      	mov	r0, r4
 800314e:	f000 f81b 	bl	8003188 <__sfp>
 8003152:	60a0      	str	r0, [r4, #8]
 8003154:	4620      	mov	r0, r4
 8003156:	f000 f817 	bl	8003188 <__sfp>
 800315a:	2200      	movs	r2, #0
 800315c:	2104      	movs	r1, #4
 800315e:	60e0      	str	r0, [r4, #12]
 8003160:	6860      	ldr	r0, [r4, #4]
 8003162:	f7ff ff81 	bl	8003068 <std>
 8003166:	2201      	movs	r2, #1
 8003168:	2109      	movs	r1, #9
 800316a:	68a0      	ldr	r0, [r4, #8]
 800316c:	f7ff ff7c 	bl	8003068 <std>
 8003170:	2202      	movs	r2, #2
 8003172:	2112      	movs	r1, #18
 8003174:	68e0      	ldr	r0, [r4, #12]
 8003176:	f7ff ff77 	bl	8003068 <std>
 800317a:	2301      	movs	r3, #1
 800317c:	61a3      	str	r3, [r4, #24]
 800317e:	e7d1      	b.n	8003124 <__sinit+0xc>
 8003180:	08003654 	.word	0x08003654
 8003184:	080030b1 	.word	0x080030b1

08003188 <__sfp>:
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	4607      	mov	r7, r0
 800318c:	f7ff ffac 	bl	80030e8 <__sfp_lock_acquire>
 8003190:	4b1e      	ldr	r3, [pc, #120]	; (800320c <__sfp+0x84>)
 8003192:	681e      	ldr	r6, [r3, #0]
 8003194:	69b3      	ldr	r3, [r6, #24]
 8003196:	b913      	cbnz	r3, 800319e <__sfp+0x16>
 8003198:	4630      	mov	r0, r6
 800319a:	f7ff ffbd 	bl	8003118 <__sinit>
 800319e:	3648      	adds	r6, #72	; 0x48
 80031a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031a4:	3b01      	subs	r3, #1
 80031a6:	d503      	bpl.n	80031b0 <__sfp+0x28>
 80031a8:	6833      	ldr	r3, [r6, #0]
 80031aa:	b30b      	cbz	r3, 80031f0 <__sfp+0x68>
 80031ac:	6836      	ldr	r6, [r6, #0]
 80031ae:	e7f7      	b.n	80031a0 <__sfp+0x18>
 80031b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031b4:	b9d5      	cbnz	r5, 80031ec <__sfp+0x64>
 80031b6:	4b16      	ldr	r3, [pc, #88]	; (8003210 <__sfp+0x88>)
 80031b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031bc:	60e3      	str	r3, [r4, #12]
 80031be:	6665      	str	r5, [r4, #100]	; 0x64
 80031c0:	f000 f847 	bl	8003252 <__retarget_lock_init_recursive>
 80031c4:	f7ff ff96 	bl	80030f4 <__sfp_lock_release>
 80031c8:	2208      	movs	r2, #8
 80031ca:	4629      	mov	r1, r5
 80031cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031d4:	6025      	str	r5, [r4, #0]
 80031d6:	61a5      	str	r5, [r4, #24]
 80031d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031dc:	f7ff fd44 	bl	8002c68 <memset>
 80031e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031e8:	4620      	mov	r0, r4
 80031ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ec:	3468      	adds	r4, #104	; 0x68
 80031ee:	e7d9      	b.n	80031a4 <__sfp+0x1c>
 80031f0:	2104      	movs	r1, #4
 80031f2:	4638      	mov	r0, r7
 80031f4:	f7ff ff62 	bl	80030bc <__sfmoreglue>
 80031f8:	4604      	mov	r4, r0
 80031fa:	6030      	str	r0, [r6, #0]
 80031fc:	2800      	cmp	r0, #0
 80031fe:	d1d5      	bne.n	80031ac <__sfp+0x24>
 8003200:	f7ff ff78 	bl	80030f4 <__sfp_lock_release>
 8003204:	230c      	movs	r3, #12
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	e7ee      	b.n	80031e8 <__sfp+0x60>
 800320a:	bf00      	nop
 800320c:	08003654 	.word	0x08003654
 8003210:	ffff0001 	.word	0xffff0001

08003214 <_fwalk_reent>:
 8003214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003218:	4606      	mov	r6, r0
 800321a:	4688      	mov	r8, r1
 800321c:	2700      	movs	r7, #0
 800321e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003222:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003226:	f1b9 0901 	subs.w	r9, r9, #1
 800322a:	d505      	bpl.n	8003238 <_fwalk_reent+0x24>
 800322c:	6824      	ldr	r4, [r4, #0]
 800322e:	2c00      	cmp	r4, #0
 8003230:	d1f7      	bne.n	8003222 <_fwalk_reent+0xe>
 8003232:	4638      	mov	r0, r7
 8003234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003238:	89ab      	ldrh	r3, [r5, #12]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d907      	bls.n	800324e <_fwalk_reent+0x3a>
 800323e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003242:	3301      	adds	r3, #1
 8003244:	d003      	beq.n	800324e <_fwalk_reent+0x3a>
 8003246:	4629      	mov	r1, r5
 8003248:	4630      	mov	r0, r6
 800324a:	47c0      	blx	r8
 800324c:	4307      	orrs	r7, r0
 800324e:	3568      	adds	r5, #104	; 0x68
 8003250:	e7e9      	b.n	8003226 <_fwalk_reent+0x12>

08003252 <__retarget_lock_init_recursive>:
 8003252:	4770      	bx	lr

08003254 <__retarget_lock_acquire_recursive>:
 8003254:	4770      	bx	lr

08003256 <__retarget_lock_release_recursive>:
 8003256:	4770      	bx	lr

08003258 <__swhatbuf_r>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	460e      	mov	r6, r1
 800325c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003260:	4614      	mov	r4, r2
 8003262:	2900      	cmp	r1, #0
 8003264:	461d      	mov	r5, r3
 8003266:	b096      	sub	sp, #88	; 0x58
 8003268:	da07      	bge.n	800327a <__swhatbuf_r+0x22>
 800326a:	2300      	movs	r3, #0
 800326c:	602b      	str	r3, [r5, #0]
 800326e:	89b3      	ldrh	r3, [r6, #12]
 8003270:	061a      	lsls	r2, r3, #24
 8003272:	d410      	bmi.n	8003296 <__swhatbuf_r+0x3e>
 8003274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003278:	e00e      	b.n	8003298 <__swhatbuf_r+0x40>
 800327a:	466a      	mov	r2, sp
 800327c:	f000 f96c 	bl	8003558 <_fstat_r>
 8003280:	2800      	cmp	r0, #0
 8003282:	dbf2      	blt.n	800326a <__swhatbuf_r+0x12>
 8003284:	9a01      	ldr	r2, [sp, #4]
 8003286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800328a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800328e:	425a      	negs	r2, r3
 8003290:	415a      	adcs	r2, r3
 8003292:	602a      	str	r2, [r5, #0]
 8003294:	e7ee      	b.n	8003274 <__swhatbuf_r+0x1c>
 8003296:	2340      	movs	r3, #64	; 0x40
 8003298:	2000      	movs	r0, #0
 800329a:	6023      	str	r3, [r4, #0]
 800329c:	b016      	add	sp, #88	; 0x58
 800329e:	bd70      	pop	{r4, r5, r6, pc}

080032a0 <__smakebuf_r>:
 80032a0:	898b      	ldrh	r3, [r1, #12]
 80032a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032a4:	079d      	lsls	r5, r3, #30
 80032a6:	4606      	mov	r6, r0
 80032a8:	460c      	mov	r4, r1
 80032aa:	d507      	bpl.n	80032bc <__smakebuf_r+0x1c>
 80032ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	6123      	str	r3, [r4, #16]
 80032b4:	2301      	movs	r3, #1
 80032b6:	6163      	str	r3, [r4, #20]
 80032b8:	b002      	add	sp, #8
 80032ba:	bd70      	pop	{r4, r5, r6, pc}
 80032bc:	466a      	mov	r2, sp
 80032be:	ab01      	add	r3, sp, #4
 80032c0:	f7ff ffca 	bl	8003258 <__swhatbuf_r>
 80032c4:	9900      	ldr	r1, [sp, #0]
 80032c6:	4605      	mov	r5, r0
 80032c8:	4630      	mov	r0, r6
 80032ca:	f000 f875 	bl	80033b8 <_malloc_r>
 80032ce:	b948      	cbnz	r0, 80032e4 <__smakebuf_r+0x44>
 80032d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032d4:	059a      	lsls	r2, r3, #22
 80032d6:	d4ef      	bmi.n	80032b8 <__smakebuf_r+0x18>
 80032d8:	f023 0303 	bic.w	r3, r3, #3
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	81a3      	strh	r3, [r4, #12]
 80032e2:	e7e3      	b.n	80032ac <__smakebuf_r+0xc>
 80032e4:	4b0d      	ldr	r3, [pc, #52]	; (800331c <__smakebuf_r+0x7c>)
 80032e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80032e8:	89a3      	ldrh	r3, [r4, #12]
 80032ea:	6020      	str	r0, [r4, #0]
 80032ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f0:	81a3      	strh	r3, [r4, #12]
 80032f2:	9b00      	ldr	r3, [sp, #0]
 80032f4:	6120      	str	r0, [r4, #16]
 80032f6:	6163      	str	r3, [r4, #20]
 80032f8:	9b01      	ldr	r3, [sp, #4]
 80032fa:	b15b      	cbz	r3, 8003314 <__smakebuf_r+0x74>
 80032fc:	4630      	mov	r0, r6
 80032fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003302:	f000 f93b 	bl	800357c <_isatty_r>
 8003306:	b128      	cbz	r0, 8003314 <__smakebuf_r+0x74>
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	f023 0303 	bic.w	r3, r3, #3
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	81a3      	strh	r3, [r4, #12]
 8003314:	89a0      	ldrh	r0, [r4, #12]
 8003316:	4305      	orrs	r5, r0
 8003318:	81a5      	strh	r5, [r4, #12]
 800331a:	e7cd      	b.n	80032b8 <__smakebuf_r+0x18>
 800331c:	080030b1 	.word	0x080030b1

08003320 <_free_r>:
 8003320:	b538      	push	{r3, r4, r5, lr}
 8003322:	4605      	mov	r5, r0
 8003324:	2900      	cmp	r1, #0
 8003326:	d043      	beq.n	80033b0 <_free_r+0x90>
 8003328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800332c:	1f0c      	subs	r4, r1, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	bfb8      	it	lt
 8003332:	18e4      	addlt	r4, r4, r3
 8003334:	f000 f944 	bl	80035c0 <__malloc_lock>
 8003338:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <_free_r+0x94>)
 800333a:	6813      	ldr	r3, [r2, #0]
 800333c:	4610      	mov	r0, r2
 800333e:	b933      	cbnz	r3, 800334e <_free_r+0x2e>
 8003340:	6063      	str	r3, [r4, #4]
 8003342:	6014      	str	r4, [r2, #0]
 8003344:	4628      	mov	r0, r5
 8003346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800334a:	f000 b93f 	b.w	80035cc <__malloc_unlock>
 800334e:	42a3      	cmp	r3, r4
 8003350:	d90a      	bls.n	8003368 <_free_r+0x48>
 8003352:	6821      	ldr	r1, [r4, #0]
 8003354:	1862      	adds	r2, r4, r1
 8003356:	4293      	cmp	r3, r2
 8003358:	bf01      	itttt	eq
 800335a:	681a      	ldreq	r2, [r3, #0]
 800335c:	685b      	ldreq	r3, [r3, #4]
 800335e:	1852      	addeq	r2, r2, r1
 8003360:	6022      	streq	r2, [r4, #0]
 8003362:	6063      	str	r3, [r4, #4]
 8003364:	6004      	str	r4, [r0, #0]
 8003366:	e7ed      	b.n	8003344 <_free_r+0x24>
 8003368:	461a      	mov	r2, r3
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	b10b      	cbz	r3, 8003372 <_free_r+0x52>
 800336e:	42a3      	cmp	r3, r4
 8003370:	d9fa      	bls.n	8003368 <_free_r+0x48>
 8003372:	6811      	ldr	r1, [r2, #0]
 8003374:	1850      	adds	r0, r2, r1
 8003376:	42a0      	cmp	r0, r4
 8003378:	d10b      	bne.n	8003392 <_free_r+0x72>
 800337a:	6820      	ldr	r0, [r4, #0]
 800337c:	4401      	add	r1, r0
 800337e:	1850      	adds	r0, r2, r1
 8003380:	4283      	cmp	r3, r0
 8003382:	6011      	str	r1, [r2, #0]
 8003384:	d1de      	bne.n	8003344 <_free_r+0x24>
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4401      	add	r1, r0
 800338c:	6011      	str	r1, [r2, #0]
 800338e:	6053      	str	r3, [r2, #4]
 8003390:	e7d8      	b.n	8003344 <_free_r+0x24>
 8003392:	d902      	bls.n	800339a <_free_r+0x7a>
 8003394:	230c      	movs	r3, #12
 8003396:	602b      	str	r3, [r5, #0]
 8003398:	e7d4      	b.n	8003344 <_free_r+0x24>
 800339a:	6820      	ldr	r0, [r4, #0]
 800339c:	1821      	adds	r1, r4, r0
 800339e:	428b      	cmp	r3, r1
 80033a0:	bf01      	itttt	eq
 80033a2:	6819      	ldreq	r1, [r3, #0]
 80033a4:	685b      	ldreq	r3, [r3, #4]
 80033a6:	1809      	addeq	r1, r1, r0
 80033a8:	6021      	streq	r1, [r4, #0]
 80033aa:	6063      	str	r3, [r4, #4]
 80033ac:	6054      	str	r4, [r2, #4]
 80033ae:	e7c9      	b.n	8003344 <_free_r+0x24>
 80033b0:	bd38      	pop	{r3, r4, r5, pc}
 80033b2:	bf00      	nop
 80033b4:	20000124 	.word	0x20000124

080033b8 <_malloc_r>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	1ccd      	adds	r5, r1, #3
 80033bc:	f025 0503 	bic.w	r5, r5, #3
 80033c0:	3508      	adds	r5, #8
 80033c2:	2d0c      	cmp	r5, #12
 80033c4:	bf38      	it	cc
 80033c6:	250c      	movcc	r5, #12
 80033c8:	2d00      	cmp	r5, #0
 80033ca:	4606      	mov	r6, r0
 80033cc:	db01      	blt.n	80033d2 <_malloc_r+0x1a>
 80033ce:	42a9      	cmp	r1, r5
 80033d0:	d903      	bls.n	80033da <_malloc_r+0x22>
 80033d2:	230c      	movs	r3, #12
 80033d4:	6033      	str	r3, [r6, #0]
 80033d6:	2000      	movs	r0, #0
 80033d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033da:	f000 f8f1 	bl	80035c0 <__malloc_lock>
 80033de:	4921      	ldr	r1, [pc, #132]	; (8003464 <_malloc_r+0xac>)
 80033e0:	680a      	ldr	r2, [r1, #0]
 80033e2:	4614      	mov	r4, r2
 80033e4:	b99c      	cbnz	r4, 800340e <_malloc_r+0x56>
 80033e6:	4f20      	ldr	r7, [pc, #128]	; (8003468 <_malloc_r+0xb0>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	b923      	cbnz	r3, 80033f6 <_malloc_r+0x3e>
 80033ec:	4621      	mov	r1, r4
 80033ee:	4630      	mov	r0, r6
 80033f0:	f000 f83c 	bl	800346c <_sbrk_r>
 80033f4:	6038      	str	r0, [r7, #0]
 80033f6:	4629      	mov	r1, r5
 80033f8:	4630      	mov	r0, r6
 80033fa:	f000 f837 	bl	800346c <_sbrk_r>
 80033fe:	1c43      	adds	r3, r0, #1
 8003400:	d123      	bne.n	800344a <_malloc_r+0x92>
 8003402:	230c      	movs	r3, #12
 8003404:	4630      	mov	r0, r6
 8003406:	6033      	str	r3, [r6, #0]
 8003408:	f000 f8e0 	bl	80035cc <__malloc_unlock>
 800340c:	e7e3      	b.n	80033d6 <_malloc_r+0x1e>
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	1b5b      	subs	r3, r3, r5
 8003412:	d417      	bmi.n	8003444 <_malloc_r+0x8c>
 8003414:	2b0b      	cmp	r3, #11
 8003416:	d903      	bls.n	8003420 <_malloc_r+0x68>
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	441c      	add	r4, r3
 800341c:	6025      	str	r5, [r4, #0]
 800341e:	e004      	b.n	800342a <_malloc_r+0x72>
 8003420:	6863      	ldr	r3, [r4, #4]
 8003422:	42a2      	cmp	r2, r4
 8003424:	bf0c      	ite	eq
 8003426:	600b      	streq	r3, [r1, #0]
 8003428:	6053      	strne	r3, [r2, #4]
 800342a:	4630      	mov	r0, r6
 800342c:	f000 f8ce 	bl	80035cc <__malloc_unlock>
 8003430:	f104 000b 	add.w	r0, r4, #11
 8003434:	1d23      	adds	r3, r4, #4
 8003436:	f020 0007 	bic.w	r0, r0, #7
 800343a:	1ac2      	subs	r2, r0, r3
 800343c:	d0cc      	beq.n	80033d8 <_malloc_r+0x20>
 800343e:	1a1b      	subs	r3, r3, r0
 8003440:	50a3      	str	r3, [r4, r2]
 8003442:	e7c9      	b.n	80033d8 <_malloc_r+0x20>
 8003444:	4622      	mov	r2, r4
 8003446:	6864      	ldr	r4, [r4, #4]
 8003448:	e7cc      	b.n	80033e4 <_malloc_r+0x2c>
 800344a:	1cc4      	adds	r4, r0, #3
 800344c:	f024 0403 	bic.w	r4, r4, #3
 8003450:	42a0      	cmp	r0, r4
 8003452:	d0e3      	beq.n	800341c <_malloc_r+0x64>
 8003454:	1a21      	subs	r1, r4, r0
 8003456:	4630      	mov	r0, r6
 8003458:	f000 f808 	bl	800346c <_sbrk_r>
 800345c:	3001      	adds	r0, #1
 800345e:	d1dd      	bne.n	800341c <_malloc_r+0x64>
 8003460:	e7cf      	b.n	8003402 <_malloc_r+0x4a>
 8003462:	bf00      	nop
 8003464:	20000124 	.word	0x20000124
 8003468:	20000128 	.word	0x20000128

0800346c <_sbrk_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	2300      	movs	r3, #0
 8003470:	4d05      	ldr	r5, [pc, #20]	; (8003488 <_sbrk_r+0x1c>)
 8003472:	4604      	mov	r4, r0
 8003474:	4608      	mov	r0, r1
 8003476:	602b      	str	r3, [r5, #0]
 8003478:	f7fd fc80 	bl	8000d7c <_sbrk>
 800347c:	1c43      	adds	r3, r0, #1
 800347e:	d102      	bne.n	8003486 <_sbrk_r+0x1a>
 8003480:	682b      	ldr	r3, [r5, #0]
 8003482:	b103      	cbz	r3, 8003486 <_sbrk_r+0x1a>
 8003484:	6023      	str	r3, [r4, #0]
 8003486:	bd38      	pop	{r3, r4, r5, pc}
 8003488:	200001c8 	.word	0x200001c8

0800348c <__sread>:
 800348c:	b510      	push	{r4, lr}
 800348e:	460c      	mov	r4, r1
 8003490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003494:	f000 f8a0 	bl	80035d8 <_read_r>
 8003498:	2800      	cmp	r0, #0
 800349a:	bfab      	itete	ge
 800349c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800349e:	89a3      	ldrhlt	r3, [r4, #12]
 80034a0:	181b      	addge	r3, r3, r0
 80034a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034a6:	bfac      	ite	ge
 80034a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80034aa:	81a3      	strhlt	r3, [r4, #12]
 80034ac:	bd10      	pop	{r4, pc}

080034ae <__swrite>:
 80034ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034b2:	461f      	mov	r7, r3
 80034b4:	898b      	ldrh	r3, [r1, #12]
 80034b6:	4605      	mov	r5, r0
 80034b8:	05db      	lsls	r3, r3, #23
 80034ba:	460c      	mov	r4, r1
 80034bc:	4616      	mov	r6, r2
 80034be:	d505      	bpl.n	80034cc <__swrite+0x1e>
 80034c0:	2302      	movs	r3, #2
 80034c2:	2200      	movs	r2, #0
 80034c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034c8:	f000 f868 	bl	800359c <_lseek_r>
 80034cc:	89a3      	ldrh	r3, [r4, #12]
 80034ce:	4632      	mov	r2, r6
 80034d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034d4:	81a3      	strh	r3, [r4, #12]
 80034d6:	4628      	mov	r0, r5
 80034d8:	463b      	mov	r3, r7
 80034da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034e2:	f000 b817 	b.w	8003514 <_write_r>

080034e6 <__sseek>:
 80034e6:	b510      	push	{r4, lr}
 80034e8:	460c      	mov	r4, r1
 80034ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ee:	f000 f855 	bl	800359c <_lseek_r>
 80034f2:	1c43      	adds	r3, r0, #1
 80034f4:	89a3      	ldrh	r3, [r4, #12]
 80034f6:	bf15      	itete	ne
 80034f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80034fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003502:	81a3      	strheq	r3, [r4, #12]
 8003504:	bf18      	it	ne
 8003506:	81a3      	strhne	r3, [r4, #12]
 8003508:	bd10      	pop	{r4, pc}

0800350a <__sclose>:
 800350a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800350e:	f000 b813 	b.w	8003538 <_close_r>
	...

08003514 <_write_r>:
 8003514:	b538      	push	{r3, r4, r5, lr}
 8003516:	4604      	mov	r4, r0
 8003518:	4608      	mov	r0, r1
 800351a:	4611      	mov	r1, r2
 800351c:	2200      	movs	r2, #0
 800351e:	4d05      	ldr	r5, [pc, #20]	; (8003534 <_write_r+0x20>)
 8003520:	602a      	str	r2, [r5, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	f7fd fa4c 	bl	80009c0 <_write>
 8003528:	1c43      	adds	r3, r0, #1
 800352a:	d102      	bne.n	8003532 <_write_r+0x1e>
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	b103      	cbz	r3, 8003532 <_write_r+0x1e>
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	bd38      	pop	{r3, r4, r5, pc}
 8003534:	200001c8 	.word	0x200001c8

08003538 <_close_r>:
 8003538:	b538      	push	{r3, r4, r5, lr}
 800353a:	2300      	movs	r3, #0
 800353c:	4d05      	ldr	r5, [pc, #20]	; (8003554 <_close_r+0x1c>)
 800353e:	4604      	mov	r4, r0
 8003540:	4608      	mov	r0, r1
 8003542:	602b      	str	r3, [r5, #0]
 8003544:	f7fd fbe9 	bl	8000d1a <_close>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d102      	bne.n	8003552 <_close_r+0x1a>
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	b103      	cbz	r3, 8003552 <_close_r+0x1a>
 8003550:	6023      	str	r3, [r4, #0]
 8003552:	bd38      	pop	{r3, r4, r5, pc}
 8003554:	200001c8 	.word	0x200001c8

08003558 <_fstat_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	2300      	movs	r3, #0
 800355c:	4d06      	ldr	r5, [pc, #24]	; (8003578 <_fstat_r+0x20>)
 800355e:	4604      	mov	r4, r0
 8003560:	4608      	mov	r0, r1
 8003562:	4611      	mov	r1, r2
 8003564:	602b      	str	r3, [r5, #0]
 8003566:	f7fd fbe3 	bl	8000d30 <_fstat>
 800356a:	1c43      	adds	r3, r0, #1
 800356c:	d102      	bne.n	8003574 <_fstat_r+0x1c>
 800356e:	682b      	ldr	r3, [r5, #0]
 8003570:	b103      	cbz	r3, 8003574 <_fstat_r+0x1c>
 8003572:	6023      	str	r3, [r4, #0]
 8003574:	bd38      	pop	{r3, r4, r5, pc}
 8003576:	bf00      	nop
 8003578:	200001c8 	.word	0x200001c8

0800357c <_isatty_r>:
 800357c:	b538      	push	{r3, r4, r5, lr}
 800357e:	2300      	movs	r3, #0
 8003580:	4d05      	ldr	r5, [pc, #20]	; (8003598 <_isatty_r+0x1c>)
 8003582:	4604      	mov	r4, r0
 8003584:	4608      	mov	r0, r1
 8003586:	602b      	str	r3, [r5, #0]
 8003588:	f7fd fbe1 	bl	8000d4e <_isatty>
 800358c:	1c43      	adds	r3, r0, #1
 800358e:	d102      	bne.n	8003596 <_isatty_r+0x1a>
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	b103      	cbz	r3, 8003596 <_isatty_r+0x1a>
 8003594:	6023      	str	r3, [r4, #0]
 8003596:	bd38      	pop	{r3, r4, r5, pc}
 8003598:	200001c8 	.word	0x200001c8

0800359c <_lseek_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	4604      	mov	r4, r0
 80035a0:	4608      	mov	r0, r1
 80035a2:	4611      	mov	r1, r2
 80035a4:	2200      	movs	r2, #0
 80035a6:	4d05      	ldr	r5, [pc, #20]	; (80035bc <_lseek_r+0x20>)
 80035a8:	602a      	str	r2, [r5, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f7fd fbd9 	bl	8000d62 <_lseek>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	d102      	bne.n	80035ba <_lseek_r+0x1e>
 80035b4:	682b      	ldr	r3, [r5, #0]
 80035b6:	b103      	cbz	r3, 80035ba <_lseek_r+0x1e>
 80035b8:	6023      	str	r3, [r4, #0]
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	200001c8 	.word	0x200001c8

080035c0 <__malloc_lock>:
 80035c0:	4801      	ldr	r0, [pc, #4]	; (80035c8 <__malloc_lock+0x8>)
 80035c2:	f7ff be47 	b.w	8003254 <__retarget_lock_acquire_recursive>
 80035c6:	bf00      	nop
 80035c8:	200001c0 	.word	0x200001c0

080035cc <__malloc_unlock>:
 80035cc:	4801      	ldr	r0, [pc, #4]	; (80035d4 <__malloc_unlock+0x8>)
 80035ce:	f7ff be42 	b.w	8003256 <__retarget_lock_release_recursive>
 80035d2:	bf00      	nop
 80035d4:	200001c0 	.word	0x200001c0

080035d8 <_read_r>:
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	4604      	mov	r4, r0
 80035dc:	4608      	mov	r0, r1
 80035de:	4611      	mov	r1, r2
 80035e0:	2200      	movs	r2, #0
 80035e2:	4d05      	ldr	r5, [pc, #20]	; (80035f8 <_read_r+0x20>)
 80035e4:	602a      	str	r2, [r5, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f7fd fb7a 	bl	8000ce0 <_read>
 80035ec:	1c43      	adds	r3, r0, #1
 80035ee:	d102      	bne.n	80035f6 <_read_r+0x1e>
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	b103      	cbz	r3, 80035f6 <_read_r+0x1e>
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	bd38      	pop	{r3, r4, r5, pc}
 80035f8:	200001c8 	.word	0x200001c8

080035fc <_init>:
 80035fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fe:	bf00      	nop
 8003600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003602:	bc08      	pop	{r3}
 8003604:	469e      	mov	lr, r3
 8003606:	4770      	bx	lr

08003608 <_fini>:
 8003608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360a:	bf00      	nop
 800360c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360e:	bc08      	pop	{r3}
 8003610:	469e      	mov	lr, r3
 8003612:	4770      	bx	lr
