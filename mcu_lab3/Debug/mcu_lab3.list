
mcu_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080037d4  080037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038ac  080038ac  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  080038ac  080038ac  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038ac  080038ac  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038ac  080038ac  000138ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080038b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000009c  08003950  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003950  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcd5  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a9  00000000  00000000  0002dd9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00030248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00030f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018faf  00000000  00000000  00031bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e83e  00000000  00000000  0004ab67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f80  00000000  00000000  000593a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3325  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc0  00000000  00000000  000e3378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000009c 	.word	0x2000009c
 8000128:	00000000 	.word	0x00000000
 800012c:	080037bc 	.word	0x080037bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a0 	.word	0x200000a0
 8000148:	080037bc 	.word	0x080037bc

0800014c <subKeyProcess>:

int TimeOutForKeyPress =  100;
int status_LED1 = 0;
int button1_flag = 0;

void subKeyProcess(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <subKeyProcess+0x14>)
 8000152:	2201      	movs	r2, #1
 8000154:	601a      	str	r2, [r3, #0]
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	200000b8 	.word	0x200000b8

08000164 <getKeyInput>:
void getKeyInput(){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 8000168:	4b1f      	ldr	r3, [pc, #124]	; (80001e8 <getKeyInput+0x84>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a1f      	ldr	r2, [pc, #124]	; (80001ec <getKeyInput+0x88>)
 800016e:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 8000170:	4b1f      	ldr	r3, [pc, #124]	; (80001f0 <getKeyInput+0x8c>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4a1c      	ldr	r2, [pc, #112]	; (80001e8 <getKeyInput+0x84>)
 8000176:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(GPIOA, MODE_Pin);
 8000178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800017c:	481d      	ldr	r0, [pc, #116]	; (80001f4 <getKeyInput+0x90>)
 800017e:	f001 f9a5 	bl	80014cc <HAL_GPIO_ReadPin>
 8000182:	4603      	mov	r3, r0
 8000184:	461a      	mov	r2, r3
 8000186:	4b1a      	ldr	r3, [pc, #104]	; (80001f0 <getKeyInput+0x8c>)
 8000188:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 800018a:	4b17      	ldr	r3, [pc, #92]	; (80001e8 <getKeyInput+0x84>)
 800018c:	681a      	ldr	r2, [r3, #0]
 800018e:	4b18      	ldr	r3, [pc, #96]	; (80001f0 <getKeyInput+0x8c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	429a      	cmp	r2, r3
 8000194:	d125      	bne.n	80001e2 <getKeyInput+0x7e>
 8000196:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <getKeyInput+0x84>)
 8000198:	681a      	ldr	r2, [r3, #0]
 800019a:	4b14      	ldr	r3, [pc, #80]	; (80001ec <getKeyInput+0x88>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d11f      	bne.n	80001e2 <getKeyInput+0x7e>
    if (KeyReg2 != KeyReg3){
 80001a2:	4b12      	ldr	r3, [pc, #72]	; (80001ec <getKeyInput+0x88>)
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <getKeyInput+0x94>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d00d      	beq.n	80001ca <getKeyInput+0x66>
      KeyReg3 = KeyReg2;
 80001ae:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <getKeyInput+0x88>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a11      	ldr	r2, [pc, #68]	; (80001f8 <getKeyInput+0x94>)
 80001b4:	6013      	str	r3, [r2, #0]

      if (KeyReg3 == PRESSED_STATE){
 80001b6:	4b10      	ldr	r3, [pc, #64]	; (80001f8 <getKeyInput+0x94>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d111      	bne.n	80001e2 <getKeyInput+0x7e>
        TimeOutForKeyPress = 100;
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <getKeyInput+0x98>)
 80001c0:	2264      	movs	r2, #100	; 0x64
 80001c2:	601a      	str	r2, [r3, #0]
        subKeyProcess();
 80001c4:	f7ff ffc2 	bl	800014c <subKeyProcess>
        if (TimeOutForKeyPress == 0){
          KeyReg3 = NORMAL_STATE;
        }
    }
  }
}
 80001c8:	e00b      	b.n	80001e2 <getKeyInput+0x7e>
       TimeOutForKeyPress --;
 80001ca:	4b0c      	ldr	r3, [pc, #48]	; (80001fc <getKeyInput+0x98>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	3b01      	subs	r3, #1
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <getKeyInput+0x98>)
 80001d2:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80001d4:	4b09      	ldr	r3, [pc, #36]	; (80001fc <getKeyInput+0x98>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d102      	bne.n	80001e2 <getKeyInput+0x7e>
          KeyReg3 = NORMAL_STATE;
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <getKeyInput+0x94>)
 80001de:	2201      	movs	r2, #1
 80001e0:	601a      	str	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000004 	.word	0x20000004
 80001ec:	20000008 	.word	0x20000008
 80001f0:	20000000 	.word	0x20000000
 80001f4:	40010800 	.word	0x40010800
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	20000010 	.word	0x20000010

08000200 <WhichButtonIsPressed>:
//
//		}
//	}
//}

int WhichButtonIsPressed() {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return button_mode_is_pressed;
 8000204:	2000      	movs	r0, #0
 8000206:	f000 f90f 	bl	8000428 <is_button_pressed>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <WhichButtonIsPressed+0x14>
 8000210:	2302      	movs	r3, #2
 8000212:	e018      	b.n	8000246 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(1)) return button_add_is_pressed;
 8000214:	2001      	movs	r0, #1
 8000216:	f000 f907 	bl	8000428 <is_button_pressed>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <WhichButtonIsPressed+0x24>
 8000220:	2303      	movs	r3, #3
 8000222:	e010      	b.n	8000246 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(2)) return button_confirm_is_pressed;
 8000224:	2002      	movs	r0, #2
 8000226:	f000 f8ff 	bl	8000428 <is_button_pressed>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <WhichButtonIsPressed+0x34>
 8000230:	2304      	movs	r3, #4
 8000232:	e008      	b.n	8000246 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(3)) return button_reset_is_pressed;
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f8f7 	bl	8000428 <is_button_pressed>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <WhichButtonIsPressed+0x44>
 8000240:	2305      	movs	r3, #5
 8000242:	e000      	b.n	8000246 <WhichButtonIsPressed+0x46>

	return 0; // none of these button is pressed
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <fsm_for_input_processing>:

void fsm_for_input_processing() {
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	switch(buttonState) {
 8000250:	4b33      	ldr	r3, [pc, #204]	; (8000320 <fsm_for_input_processing+0xd4>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d051      	beq.n	80002fc <fsm_for_input_processing+0xb0>
 8000258:	2b02      	cmp	r3, #2
 800025a:	dc59      	bgt.n	8000310 <fsm_for_input_processing+0xc4>
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <fsm_for_input_processing+0x1a>
 8000260:	2b01      	cmp	r3, #1
 8000262:	d037      	beq.n	80002d4 <fsm_for_input_processing+0x88>
				buttonState = BUTTON_RELEASED;
			}
			// TODO
			break;
		default:
			break;
 8000264:	e054      	b.n	8000310 <fsm_for_input_processing+0xc4>
			if (WhichButtonIsPressed()) {
 8000266:	f7ff ffcb 	bl	8000200 <WhichButtonIsPressed>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d02d      	beq.n	80002cc <fsm_for_input_processing+0x80>
				buttonState = BUTTON_PRESSED;
 8000270:	4b2b      	ldr	r3, [pc, #172]	; (8000320 <fsm_for_input_processing+0xd4>)
 8000272:	2201      	movs	r2, #1
 8000274:	701a      	strb	r2, [r3, #0]
				switch(WhichButtonIsPressed()) {
 8000276:	f7ff ffc3 	bl	8000200 <WhichButtonIsPressed>
 800027a:	4603      	mov	r3, r0
 800027c:	3b02      	subs	r3, #2
 800027e:	2b03      	cmp	r3, #3
 8000280:	d820      	bhi.n	80002c4 <fsm_for_input_processing+0x78>
 8000282:	a201      	add	r2, pc, #4	; (adr r2, 8000288 <fsm_for_input_processing+0x3c>)
 8000284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000288:	08000299 	.word	0x08000299
 800028c:	080002d1 	.word	0x080002d1
 8000290:	080002d1 	.word	0x080002d1
 8000294:	080002d1 	.word	0x080002d1
						if (status >= 3) status = -1;
 8000298:	4b22      	ldr	r3, [pc, #136]	; (8000324 <fsm_for_input_processing+0xd8>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b02      	cmp	r3, #2
 800029e:	dd03      	ble.n	80002a8 <fsm_for_input_processing+0x5c>
 80002a0:	4b20      	ldr	r3, [pc, #128]	; (8000324 <fsm_for_input_processing+0xd8>)
 80002a2:	f04f 32ff 	mov.w	r2, #4294967295
 80002a6:	601a      	str	r2, [r3, #0]
						display7SEG(++status);
 80002a8:	4b1e      	ldr	r3, [pc, #120]	; (8000324 <fsm_for_input_processing+0xd8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3301      	adds	r3, #1
 80002ae:	4a1d      	ldr	r2, [pc, #116]	; (8000324 <fsm_for_input_processing+0xd8>)
 80002b0:	6013      	str	r3, [r2, #0]
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <fsm_for_input_processing+0xd8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f8f2 	bl	80004a0 <display7SEG>
						buttonState = BUTTON_PRESSED;
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <fsm_for_input_processing+0xd4>)
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
						break;
 80002c2:	e006      	b.n	80002d2 <fsm_for_input_processing+0x86>
					default: buttonState = BUTTON_RELEASED;
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <fsm_for_input_processing+0xd4>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
			break;
 80002ca:	e026      	b.n	800031a <fsm_for_input_processing+0xce>
			}
 80002cc:	bf00      	nop
 80002ce:	e024      	b.n	800031a <fsm_for_input_processing+0xce>
						break;
 80002d0:	bf00      	nop
			break;
 80002d2:	e022      	b.n	800031a <fsm_for_input_processing+0xce>
			if (!is_button_pressed(0)) {
 80002d4:	2000      	movs	r0, #0
 80002d6:	f000 f8a7 	bl	8000428 <is_button_pressed>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d103      	bne.n	80002e8 <fsm_for_input_processing+0x9c>
				buttonState = BUTTON_RELEASED;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <fsm_for_input_processing+0xd4>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
			break;
 80002e6:	e015      	b.n	8000314 <fsm_for_input_processing+0xc8>
				if (is_button_pressed_1s(0)) {
 80002e8:	2000      	movs	r0, #0
 80002ea:	f000 f8bf 	bl	800046c <is_button_pressed_1s>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d00f      	beq.n	8000314 <fsm_for_input_processing+0xc8>
					buttonState = BUTTON_PRESS_MORE_THAN_1S;
 80002f4:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <fsm_for_input_processing+0xd4>)
 80002f6:	2202      	movs	r2, #2
 80002f8:	701a      	strb	r2, [r3, #0]
			break;
 80002fa:	e00b      	b.n	8000314 <fsm_for_input_processing+0xc8>
			if (!is_button_pressed(0)) {
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 f893 	bl	8000428 <is_button_pressed>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d107      	bne.n	8000318 <fsm_for_input_processing+0xcc>
				buttonState = BUTTON_RELEASED;
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <fsm_for_input_processing+0xd4>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
			break;
 800030e:	e003      	b.n	8000318 <fsm_for_input_processing+0xcc>
			break;
 8000310:	bf00      	nop
 8000312:	e002      	b.n	800031a <fsm_for_input_processing+0xce>
			break;
 8000314:	bf00      	nop
 8000316:	e000      	b.n	800031a <fsm_for_input_processing+0xce>
			break;
 8000318:	bf00      	nop
	}
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	200000c0 	.word	0x200000c0
 8000324:	200000bc 	.word	0x200000bc

08000328 <button_reading>:
//				counterForButtonPress1s[i] = 0;
//				flagForButtonPress1s[i] = 0;
//		}
//	}
//}
void button_reading(void) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	e061      	b.n	80003f8 <button_reading+0xd0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000334:	4a34      	ldr	r2, [pc, #208]	; (8000408 <button_reading+0xe0>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4413      	add	r3, r2
 800033a:	7819      	ldrb	r1, [r3, #0]
 800033c:	4a33      	ldr	r2, [pc, #204]	; (800040c <button_reading+0xe4>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4413      	add	r3, r2
 8000342:	460a      	mov	r2, r1
 8000344:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000346:	4a32      	ldr	r2, [pc, #200]	; (8000410 <button_reading+0xe8>)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034e:	4931      	ldr	r1, [pc, #196]	; (8000414 <button_reading+0xec>)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000356:	4619      	mov	r1, r3
 8000358:	4610      	mov	r0, r2
 800035a:	f001 f8b7 	bl	80014cc <HAL_GPIO_ReadPin>
 800035e:	4603      	mov	r3, r0
 8000360:	4619      	mov	r1, r3
 8000362:	4a29      	ldr	r2, [pc, #164]	; (8000408 <button_reading+0xe0>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	460a      	mov	r2, r1
 800036a:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 800036c:	4a26      	ldr	r2, [pc, #152]	; (8000408 <button_reading+0xe0>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	781a      	ldrb	r2, [r3, #0]
 8000374:	4925      	ldr	r1, [pc, #148]	; (800040c <button_reading+0xe4>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	440b      	add	r3, r1
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	429a      	cmp	r2, r3
 800037e:	d138      	bne.n	80003f2 <button_reading+0xca>
			//valid input, can read now
			buttonBufferPrev[i] = buttonBuffer[i];
 8000380:	4a25      	ldr	r2, [pc, #148]	; (8000418 <button_reading+0xf0>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4413      	add	r3, r2
 8000386:	7819      	ldrb	r1, [r3, #0]
 8000388:	4a24      	ldr	r2, [pc, #144]	; (800041c <button_reading+0xf4>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	460a      	mov	r2, r1
 8000390:	701a      	strb	r2, [r3, #0]
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000392:	4a1d      	ldr	r2, [pc, #116]	; (8000408 <button_reading+0xe0>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4413      	add	r3, r2
 8000398:	7819      	ldrb	r1, [r3, #0]
 800039a:	4a1f      	ldr	r2, [pc, #124]	; (8000418 <button_reading+0xf0>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4413      	add	r3, r2
 80003a0:	460a      	mov	r2, r1
 80003a2:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80003a4:	4a1c      	ldr	r2, [pc, #112]	; (8000418 <button_reading+0xf0>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4413      	add	r3, r2
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d116      	bne.n	80003de <button_reading+0xb6>
				//toggle pin to validate
				//HAL_GPIO_TogglePin(BRESP_GPIO_Port, BRESP_Pin);
				//if a button is pressed , we start counting
				if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80003b0:	4a1b      	ldr	r2, [pc, #108]	; (8000420 <button_reading+0xf8>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003b8:	2b63      	cmp	r3, #99	; 0x63
 80003ba:	d80a      	bhi.n	80003d2 <button_reading+0xaa>
					counterForButtonPress1s[i]++;
 80003bc:	4a18      	ldr	r2, [pc, #96]	; (8000420 <button_reading+0xf8>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b299      	uxth	r1, r3
 80003c8:	4a15      	ldr	r2, [pc, #84]	; (8000420 <button_reading+0xf8>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80003d0:	e00f      	b.n	80003f2 <button_reading+0xca>
				}

				else {
					//the flag is turned on when 1 second has passed
					//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 80003d2:	4a14      	ldr	r2, [pc, #80]	; (8000424 <button_reading+0xfc>)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4413      	add	r3, r2
 80003d8:	2201      	movs	r2, #1
 80003da:	701a      	strb	r2, [r3, #0]
 80003dc:	e009      	b.n	80003f2 <button_reading+0xca>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 80003de:	4a10      	ldr	r2, [pc, #64]	; (8000420 <button_reading+0xf8>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2100      	movs	r1, #0
 80003e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 80003e8:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <button_reading+0xfc>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4413      	add	r3, r2
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3301      	adds	r3, #1
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2b03      	cmp	r3, #3
 80003fc:	dd9a      	ble.n	8000334 <button_reading+0xc>
			}
		}
	}
}
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	200000cc 	.word	0x200000cc
 800040c:	200000d0 	.word	0x200000d0
 8000410:	20000014 	.word	0x20000014
 8000414:	20000024 	.word	0x20000024
 8000418:	200000c4 	.word	0x200000c4
 800041c:	200000c8 	.word	0x200000c8
 8000420:	200000d8 	.word	0x200000d8
 8000424:	200000d4 	.word	0x200000d4

08000428 <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b03      	cmp	r3, #3
 8000436:	d901      	bls.n	800043c <is_button_pressed+0x14>
 8000438:	2300      	movs	r3, #0
 800043a:	e00d      	b.n	8000458 <is_button_pressed+0x30>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	4a09      	ldr	r2, [pc, #36]	; (8000464 <is_button_pressed+0x3c>)
 8000440:	5cd3      	ldrb	r3, [r2, r3]
			&& buttonBufferPrev[index] == BUTTON_IS_RELEASED);
 8000442:	2b00      	cmp	r3, #0
 8000444:	d106      	bne.n	8000454 <is_button_pressed+0x2c>
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	4a07      	ldr	r2, [pc, #28]	; (8000468 <is_button_pressed+0x40>)
 800044a:	5cd3      	ldrb	r3, [r2, r3]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d101      	bne.n	8000454 <is_button_pressed+0x2c>
 8000450:	2301      	movs	r3, #1
 8000452:	e000      	b.n	8000456 <is_button_pressed+0x2e>
 8000454:	2300      	movs	r3, #0
 8000456:	b2db      	uxtb	r3, r3
}
 8000458:	4618      	mov	r0, r3
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	200000c4 	.word	0x200000c4
 8000468:	200000c8 	.word	0x200000c8

0800046c <is_button_pressed_1s>:

// Check for button is pressed more than a second or not
unsigned char is_button_pressed_1s (unsigned char index ) {
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS ) return 0xff ;
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b03      	cmp	r3, #3
 800047a:	d901      	bls.n	8000480 <is_button_pressed_1s+0x14>
 800047c:	23ff      	movs	r3, #255	; 0xff
 800047e:	e007      	b.n	8000490 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	4a06      	ldr	r2, [pc, #24]	; (800049c <is_button_pressed_1s+0x30>)
 8000484:	5cd3      	ldrb	r3, [r2, r3]
 8000486:	2b01      	cmp	r3, #1
 8000488:	bf0c      	ite	eq
 800048a:	2301      	moveq	r3, #1
 800048c:	2300      	movne	r3, #0
 800048e:	b2db      	uxtb	r3, r3
}
 8000490:	4618      	mov	r0, r3
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	200000d4 	.word	0x200000d4

080004a0 <display7SEG>:
//		default:
//			break;
//	}
//}

void display7SEG(int num) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2b09      	cmp	r3, #9
 80004ac:	f200 8180 	bhi.w	80007b0 <display7SEG+0x310>
 80004b0:	a201      	add	r2, pc, #4	; (adr r2, 80004b8 <display7SEG+0x18>)
 80004b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b6:	bf00      	nop
 80004b8:	080004e1 	.word	0x080004e1
 80004bc:	08000529 	.word	0x08000529
 80004c0:	08000571 	.word	0x08000571
 80004c4:	080005b9 	.word	0x080005b9
 80004c8:	08000601 	.word	0x08000601
 80004cc:	08000649 	.word	0x08000649
 80004d0:	08000691 	.word	0x08000691
 80004d4:	080006d9 	.word	0x080006d9
 80004d8:	08000721 	.word	0x08000721
 80004dc:	08000769 	.word	0x08000769
  switch(num) {
	  case 0 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2101      	movs	r1, #1
 80004e4:	48c6      	ldr	r0, [pc, #792]	; (8000800 <display7SEG+0x360>)
 80004e6:	f001 f808 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2102      	movs	r1, #2
 80004ee:	48c4      	ldr	r0, [pc, #784]	; (8000800 <display7SEG+0x360>)
 80004f0:	f001 f803 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2104      	movs	r1, #4
 80004f8:	48c1      	ldr	r0, [pc, #772]	; (8000800 <display7SEG+0x360>)
 80004fa:	f000 fffe 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2108      	movs	r1, #8
 8000502:	48bf      	ldr	r0, [pc, #764]	; (8000800 <display7SEG+0x360>)
 8000504:	f000 fff9 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2110      	movs	r1, #16
 800050c:	48bc      	ldr	r0, [pc, #752]	; (8000800 <display7SEG+0x360>)
 800050e:	f000 fff4 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2120      	movs	r1, #32
 8000516:	48ba      	ldr	r0, [pc, #744]	; (8000800 <display7SEG+0x360>)
 8000518:	f000 ffef 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	2140      	movs	r1, #64	; 0x40
 8000520:	48b7      	ldr	r0, [pc, #732]	; (8000800 <display7SEG+0x360>)
 8000522:	f000 ffea 	bl	80014fa <HAL_GPIO_WritePin>
		  break;
 8000526:	e167      	b.n	80007f8 <display7SEG+0x358>
	  }

	  case 1 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	2101      	movs	r1, #1
 800052c:	48b4      	ldr	r0, [pc, #720]	; (8000800 <display7SEG+0x360>)
 800052e:	f000 ffe4 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000532:	2200      	movs	r2, #0
 8000534:	2102      	movs	r1, #2
 8000536:	48b2      	ldr	r0, [pc, #712]	; (8000800 <display7SEG+0x360>)
 8000538:	f000 ffdf 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2104      	movs	r1, #4
 8000540:	48af      	ldr	r0, [pc, #700]	; (8000800 <display7SEG+0x360>)
 8000542:	f000 ffda 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 8000546:	2201      	movs	r2, #1
 8000548:	2108      	movs	r1, #8
 800054a:	48ad      	ldr	r0, [pc, #692]	; (8000800 <display7SEG+0x360>)
 800054c:	f000 ffd5 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	48aa      	ldr	r0, [pc, #680]	; (8000800 <display7SEG+0x360>)
 8000556:	f000 ffd0 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 800055a:	2201      	movs	r2, #1
 800055c:	2120      	movs	r1, #32
 800055e:	48a8      	ldr	r0, [pc, #672]	; (8000800 <display7SEG+0x360>)
 8000560:	f000 ffcb 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	48a5      	ldr	r0, [pc, #660]	; (8000800 <display7SEG+0x360>)
 800056a:	f000 ffc6 	bl	80014fa <HAL_GPIO_WritePin>
		  break;
 800056e:	e143      	b.n	80007f8 <display7SEG+0x358>
	  }

	  case 2 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000570:	2200      	movs	r2, #0
 8000572:	2101      	movs	r1, #1
 8000574:	48a2      	ldr	r0, [pc, #648]	; (8000800 <display7SEG+0x360>)
 8000576:	f000 ffc0 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2102      	movs	r1, #2
 800057e:	48a0      	ldr	r0, [pc, #640]	; (8000800 <display7SEG+0x360>)
 8000580:	f000 ffbb 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 1);
 8000584:	2201      	movs	r2, #1
 8000586:	2104      	movs	r1, #4
 8000588:	489d      	ldr	r0, [pc, #628]	; (8000800 <display7SEG+0x360>)
 800058a:	f000 ffb6 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	489b      	ldr	r0, [pc, #620]	; (8000800 <display7SEG+0x360>)
 8000594:	f000 ffb1 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2110      	movs	r1, #16
 800059c:	4898      	ldr	r0, [pc, #608]	; (8000800 <display7SEG+0x360>)
 800059e:	f000 ffac 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2120      	movs	r1, #32
 80005a6:	4896      	ldr	r0, [pc, #600]	; (8000800 <display7SEG+0x360>)
 80005a8:	f000 ffa7 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	4893      	ldr	r0, [pc, #588]	; (8000800 <display7SEG+0x360>)
 80005b2:	f000 ffa2 	bl	80014fa <HAL_GPIO_WritePin>
		  break;
 80005b6:	e11f      	b.n	80007f8 <display7SEG+0x358>
	  }
	  case 3 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2101      	movs	r1, #1
 80005bc:	4890      	ldr	r0, [pc, #576]	; (8000800 <display7SEG+0x360>)
 80005be:	f000 ff9c 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2102      	movs	r1, #2
 80005c6:	488e      	ldr	r0, [pc, #568]	; (8000800 <display7SEG+0x360>)
 80005c8:	f000 ff97 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2104      	movs	r1, #4
 80005d0:	488b      	ldr	r0, [pc, #556]	; (8000800 <display7SEG+0x360>)
 80005d2:	f000 ff92 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2108      	movs	r1, #8
 80005da:	4889      	ldr	r0, [pc, #548]	; (8000800 <display7SEG+0x360>)
 80005dc:	f000 ff8d 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2110      	movs	r1, #16
 80005e4:	4886      	ldr	r0, [pc, #536]	; (8000800 <display7SEG+0x360>)
 80005e6:	f000 ff88 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2120      	movs	r1, #32
 80005ee:	4884      	ldr	r0, [pc, #528]	; (8000800 <display7SEG+0x360>)
 80005f0:	f000 ff83 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2140      	movs	r1, #64	; 0x40
 80005f8:	4881      	ldr	r0, [pc, #516]	; (8000800 <display7SEG+0x360>)
 80005fa:	f000 ff7e 	bl	80014fa <HAL_GPIO_WritePin>
		  break;
 80005fe:	e0fb      	b.n	80007f8 <display7SEG+0x358>
	  }
	  case 4 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	2101      	movs	r1, #1
 8000604:	487e      	ldr	r0, [pc, #504]	; (8000800 <display7SEG+0x360>)
 8000606:	f000 ff78 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2102      	movs	r1, #2
 800060e:	487c      	ldr	r0, [pc, #496]	; (8000800 <display7SEG+0x360>)
 8000610:	f000 ff73 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2104      	movs	r1, #4
 8000618:	4879      	ldr	r0, [pc, #484]	; (8000800 <display7SEG+0x360>)
 800061a:	f000 ff6e 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	2108      	movs	r1, #8
 8000622:	4877      	ldr	r0, [pc, #476]	; (8000800 <display7SEG+0x360>)
 8000624:	f000 ff69 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000628:	2201      	movs	r2, #1
 800062a:	2110      	movs	r1, #16
 800062c:	4874      	ldr	r0, [pc, #464]	; (8000800 <display7SEG+0x360>)
 800062e:	f000 ff64 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2120      	movs	r1, #32
 8000636:	4872      	ldr	r0, [pc, #456]	; (8000800 <display7SEG+0x360>)
 8000638:	f000 ff5f 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	2140      	movs	r1, #64	; 0x40
 8000640:	486f      	ldr	r0, [pc, #444]	; (8000800 <display7SEG+0x360>)
 8000642:	f000 ff5a 	bl	80014fa <HAL_GPIO_WritePin>
		  break;
 8000646:	e0d7      	b.n	80007f8 <display7SEG+0x358>
	  }
	  case 5 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2101      	movs	r1, #1
 800064c:	486c      	ldr	r0, [pc, #432]	; (8000800 <display7SEG+0x360>)
 800064e:	f000 ff54 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);
 8000652:	2201      	movs	r2, #1
 8000654:	2102      	movs	r1, #2
 8000656:	486a      	ldr	r0, [pc, #424]	; (8000800 <display7SEG+0x360>)
 8000658:	f000 ff4f 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2104      	movs	r1, #4
 8000660:	4867      	ldr	r0, [pc, #412]	; (8000800 <display7SEG+0x360>)
 8000662:	f000 ff4a 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2108      	movs	r1, #8
 800066a:	4865      	ldr	r0, [pc, #404]	; (8000800 <display7SEG+0x360>)
 800066c:	f000 ff45 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	2110      	movs	r1, #16
 8000674:	4862      	ldr	r0, [pc, #392]	; (8000800 <display7SEG+0x360>)
 8000676:	f000 ff40 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2120      	movs	r1, #32
 800067e:	4860      	ldr	r0, [pc, #384]	; (8000800 <display7SEG+0x360>)
 8000680:	f000 ff3b 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2140      	movs	r1, #64	; 0x40
 8000688:	485d      	ldr	r0, [pc, #372]	; (8000800 <display7SEG+0x360>)
 800068a:	f000 ff36 	bl	80014fa <HAL_GPIO_WritePin>
		  break;
 800068e:	e0b3      	b.n	80007f8 <display7SEG+0x358>
	  }
	  case 6 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2101      	movs	r1, #1
 8000694:	485a      	ldr	r0, [pc, #360]	; (8000800 <display7SEG+0x360>)
 8000696:	f000 ff30 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	2102      	movs	r1, #2
 800069e:	4858      	ldr	r0, [pc, #352]	; (8000800 <display7SEG+0x360>)
 80006a0:	f000 ff2b 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2104      	movs	r1, #4
 80006a8:	4855      	ldr	r0, [pc, #340]	; (8000800 <display7SEG+0x360>)
 80006aa:	f000 ff26 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2108      	movs	r1, #8
 80006b2:	4853      	ldr	r0, [pc, #332]	; (8000800 <display7SEG+0x360>)
 80006b4:	f000 ff21 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2110      	movs	r1, #16
 80006bc:	4850      	ldr	r0, [pc, #320]	; (8000800 <display7SEG+0x360>)
 80006be:	f000 ff1c 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2120      	movs	r1, #32
 80006c6:	484e      	ldr	r0, [pc, #312]	; (8000800 <display7SEG+0x360>)
 80006c8:	f000 ff17 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2140      	movs	r1, #64	; 0x40
 80006d0:	484b      	ldr	r0, [pc, #300]	; (8000800 <display7SEG+0x360>)
 80006d2:	f000 ff12 	bl	80014fa <HAL_GPIO_WritePin>
		  break;
 80006d6:	e08f      	b.n	80007f8 <display7SEG+0x358>
	  }
	  case 7 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2101      	movs	r1, #1
 80006dc:	4848      	ldr	r0, [pc, #288]	; (8000800 <display7SEG+0x360>)
 80006de:	f000 ff0c 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2102      	movs	r1, #2
 80006e6:	4846      	ldr	r0, [pc, #280]	; (8000800 <display7SEG+0x360>)
 80006e8:	f000 ff07 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2104      	movs	r1, #4
 80006f0:	4843      	ldr	r0, [pc, #268]	; (8000800 <display7SEG+0x360>)
 80006f2:	f000 ff02 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2108      	movs	r1, #8
 80006fa:	4841      	ldr	r0, [pc, #260]	; (8000800 <display7SEG+0x360>)
 80006fc:	f000 fefd 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	2110      	movs	r1, #16
 8000704:	483e      	ldr	r0, [pc, #248]	; (8000800 <display7SEG+0x360>)
 8000706:	f000 fef8 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 800070a:	2201      	movs	r2, #1
 800070c:	2120      	movs	r1, #32
 800070e:	483c      	ldr	r0, [pc, #240]	; (8000800 <display7SEG+0x360>)
 8000710:	f000 fef3 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	4839      	ldr	r0, [pc, #228]	; (8000800 <display7SEG+0x360>)
 800071a:	f000 feee 	bl	80014fa <HAL_GPIO_WritePin>
		  break;
 800071e:	e06b      	b.n	80007f8 <display7SEG+0x358>
	  }
	  case 8 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2101      	movs	r1, #1
 8000724:	4836      	ldr	r0, [pc, #216]	; (8000800 <display7SEG+0x360>)
 8000726:	f000 fee8 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2102      	movs	r1, #2
 800072e:	4834      	ldr	r0, [pc, #208]	; (8000800 <display7SEG+0x360>)
 8000730:	f000 fee3 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2104      	movs	r1, #4
 8000738:	4831      	ldr	r0, [pc, #196]	; (8000800 <display7SEG+0x360>)
 800073a:	f000 fede 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2108      	movs	r1, #8
 8000742:	482f      	ldr	r0, [pc, #188]	; (8000800 <display7SEG+0x360>)
 8000744:	f000 fed9 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2110      	movs	r1, #16
 800074c:	482c      	ldr	r0, [pc, #176]	; (8000800 <display7SEG+0x360>)
 800074e:	f000 fed4 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	482a      	ldr	r0, [pc, #168]	; (8000800 <display7SEG+0x360>)
 8000758:	f000 fecf 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	4827      	ldr	r0, [pc, #156]	; (8000800 <display7SEG+0x360>)
 8000762:	f000 feca 	bl	80014fa <HAL_GPIO_WritePin>
		  break;
 8000766:	e047      	b.n	80007f8 <display7SEG+0x358>
	  }
	  case 9 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2101      	movs	r1, #1
 800076c:	4824      	ldr	r0, [pc, #144]	; (8000800 <display7SEG+0x360>)
 800076e:	f000 fec4 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2102      	movs	r1, #2
 8000776:	4822      	ldr	r0, [pc, #136]	; (8000800 <display7SEG+0x360>)
 8000778:	f000 febf 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	2104      	movs	r1, #4
 8000780:	481f      	ldr	r0, [pc, #124]	; (8000800 <display7SEG+0x360>)
 8000782:	f000 feba 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2108      	movs	r1, #8
 800078a:	481d      	ldr	r0, [pc, #116]	; (8000800 <display7SEG+0x360>)
 800078c:	f000 feb5 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2110      	movs	r1, #16
 8000794:	481a      	ldr	r0, [pc, #104]	; (8000800 <display7SEG+0x360>)
 8000796:	f000 feb0 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2120      	movs	r1, #32
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <display7SEG+0x360>)
 80007a0:	f000 feab 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2140      	movs	r1, #64	; 0x40
 80007a8:	4815      	ldr	r0, [pc, #84]	; (8000800 <display7SEG+0x360>)
 80007aa:	f000 fea6 	bl	80014fa <HAL_GPIO_WritePin>
		  break;
 80007ae:	e023      	b.n	80007f8 <display7SEG+0x358>
	  }

	  default : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2101      	movs	r1, #1
 80007b4:	4812      	ldr	r0, [pc, #72]	; (8000800 <display7SEG+0x360>)
 80007b6:	f000 fea0 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2102      	movs	r1, #2
 80007be:	4810      	ldr	r0, [pc, #64]	; (8000800 <display7SEG+0x360>)
 80007c0:	f000 fe9b 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 1);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2104      	movs	r1, #4
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <display7SEG+0x360>)
 80007ca:	f000 fe96 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2108      	movs	r1, #8
 80007d2:	480b      	ldr	r0, [pc, #44]	; (8000800 <display7SEG+0x360>)
 80007d4:	f000 fe91 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 80007d8:	2201      	movs	r2, #1
 80007da:	2110      	movs	r1, #16
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <display7SEG+0x360>)
 80007de:	f000 fe8c 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2120      	movs	r1, #32
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <display7SEG+0x360>)
 80007e8:	f000 fe87 	bl	80014fa <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2140      	movs	r1, #64	; 0x40
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <display7SEG+0x360>)
 80007f2:	f000 fe82 	bl	80014fa <HAL_GPIO_WritePin>
		  break;
 80007f6:	bf00      	nop
	  }
  }
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40010c00 	.word	0x40010c00

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f000 fb76 	bl	8000ef8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f822 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f000 f8d2 	bl	80009b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000814:	f000 f85a 	bl	80008cc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000818:	f000 f8a4 	bl	8000964 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 800081c:	480a      	ldr	r0, [pc, #40]	; (8000848 <main+0x44>)
 800081e:	f001 faef 	bl	8001e00 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_for_input_processing();
 8000822:	f7ff fd13 	bl	800024c <fsm_for_input_processing>
	  display7SEG(status);
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <main+0x48>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fe38 	bl	80004a0 <display7SEG>

	  if (WhichButtonIsPressed()) {
 8000830:	f7ff fce6 	bl	8000200 <WhichButtonIsPressed>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f3      	beq.n	8000822 <main+0x1e>
		  printf("Current mode is: %d\r\n", status);
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <main+0x48>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4619      	mov	r1, r3
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <main+0x4c>)
 8000842:	f002 f85b 	bl	80028fc <iprintf>
	  fsm_for_input_processing();
 8000846:	e7ec      	b.n	8000822 <main+0x1e>
 8000848:	20000160 	.word	0x20000160
 800084c:	200000bc 	.word	0x200000bc
 8000850:	080037d4 	.word	0x080037d4

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b090      	sub	sp, #64	; 0x40
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0318 	add.w	r3, r7, #24
 800085e:	2228      	movs	r2, #40	; 0x28
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f002 f842 	bl	80028ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087a:	2301      	movs	r3, #1
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087e:	2310      	movs	r3, #16
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000882:	2300      	movs	r3, #0
 8000884:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	4618      	mov	r0, r3
 800088c:	f000 fe4e 	bl	800152c <HAL_RCC_OscConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000896:	f000 f8fd 	bl	8000a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089a:	230f      	movs	r3, #15
 800089c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 f8ba 	bl	8001a2c <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80008be:	f000 f8e9 	bl	8000a94 <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3740      	adds	r7, #64	; 0x40
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	463b      	mov	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_TIM2_Init+0x94>)
 80008ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_TIM2_Init+0x94>)
 80008f2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80008f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_TIM2_Init+0x94>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_TIM2_Init+0x94>)
 8000900:	2209      	movs	r2, #9
 8000902:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000904:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_TIM2_Init+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_TIM2_Init+0x94>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000910:	4813      	ldr	r0, [pc, #76]	; (8000960 <MX_TIM2_Init+0x94>)
 8000912:	f001 fa25 	bl	8001d60 <HAL_TIM_Base_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800091c:	f000 f8ba 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	4619      	mov	r1, r3
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_TIM2_Init+0x94>)
 800092e:	f001 fbbb 	bl	80020a8 <HAL_TIM_ConfigClockSource>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000938:	f000 f8ac 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_TIM2_Init+0x94>)
 800094a:	f001 fd83 	bl	8002454 <HAL_TIMEx_MasterConfigSynchronization>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000954:	f000 f89e 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000160 	.word	0x20000160

08000964 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_USART1_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USART1_UART_Init+0x4c>)
 800099c:	f001 fdc4 	bl	8002528 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f000 f875 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000011c 	.word	0x2000011c
 80009b4:	40013800 	.word	0x40013800

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009ea:	f043 0308 	orr.w	r3, r3, #8
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <MX_GPIO_Init+0xd0>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0308 	and.w	r3, r3, #8
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	21f0      	movs	r1, #240	; 0xf0
 8000a00:	4822      	ldr	r0, [pc, #136]	; (8000a8c <MX_GPIO_Init+0xd4>)
 8000a02:	f000 fd7a 	bl	80014fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|SEG3_Pin
 8000a06:	2200      	movs	r2, #0
 8000a08:	f641 71f8 	movw	r1, #8184	; 0x1ff8
 8000a0c:	4820      	ldr	r0, [pc, #128]	; (8000a90 <MX_GPIO_Init+0xd8>)
 8000a0e:	f000 fd74 	bl	80014fa <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|D1_Pin
                          |D2_Pin|D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8000a12:	23f0      	movs	r3, #240	; 0xf0
 8000a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	4818      	ldr	r0, [pc, #96]	; (8000a8c <MX_GPIO_Init+0xd4>)
 8000a2a:	f000 fbd5 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin;
 8000a2e:	2307      	movs	r3, #7
 8000a30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4813      	ldr	r0, [pc, #76]	; (8000a90 <MX_GPIO_Init+0xd8>)
 8000a42:	f000 fbc9 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin D1_Pin
                           D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|SEG3_Pin
 8000a46:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 8000a4a:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|D1_Pin
                          |D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2302      	movs	r3, #2
 8000a56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_GPIO_Init+0xd8>)
 8000a60:	f000 fbba 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin CONFIRM_Pin RESET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|CONFIRM_Pin|RESET_Pin;
 8000a64:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	4619      	mov	r1, r3
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_GPIO_Init+0xd4>)
 8000a7a:	f000 fbad 	bl	80011d8 <HAL_GPIO_Init>

}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40010800 	.word	0x40010800
 8000a90:	40010c00 	.word	0x40010c00

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <_write>:
#include "output_display.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *ptr, int len)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <_write+0x28>)
 8000ab8:	f001 fd83 	bl	80025c2 <HAL_UART_Transmit>
	return len;
 8000abc:	687b      	ldr	r3, [r7, #4]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000011c 	.word	0x2000011c

08000acc <timerRun>:
		duration = DURATION_LED_BLINKING_2HZ;
	}
	timer5_counter = duration;
	timer5_flag = 0;
}
void timerRun() {
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000ad0:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <timerRun+0xcc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	dd0b      	ble.n	8000af0 <timerRun+0x24>
		timer1_counter--;
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <timerRun+0xcc>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	4a2e      	ldr	r2, [pc, #184]	; (8000b98 <timerRun+0xcc>)
 8000ae0:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <timerRun+0xcc>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	dc02      	bgt.n	8000af0 <timerRun+0x24>
			timer1_flag = 1;
 8000aea:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <timerRun+0xd0>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000af0:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <timerRun+0xd4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	dd0b      	ble.n	8000b10 <timerRun+0x44>
		timer2_counter--;
 8000af8:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <timerRun+0xd4>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	4a28      	ldr	r2, [pc, #160]	; (8000ba0 <timerRun+0xd4>)
 8000b00:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000b02:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <timerRun+0xd4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	dc02      	bgt.n	8000b10 <timerRun+0x44>
			timer2_flag = 1;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <timerRun+0xd8>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000b10:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <timerRun+0xdc>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	dd0b      	ble.n	8000b30 <timerRun+0x64>
		timer3_counter--;
 8000b18:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <timerRun+0xdc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	4a22      	ldr	r2, [pc, #136]	; (8000ba8 <timerRun+0xdc>)
 8000b20:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <timerRun+0xdc>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	dc02      	bgt.n	8000b30 <timerRun+0x64>
			timer3_flag = 1;
 8000b2a:	4b20      	ldr	r3, [pc, #128]	; (8000bac <timerRun+0xe0>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8000b30:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <timerRun+0xe4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	dd0b      	ble.n	8000b50 <timerRun+0x84>
		timer4_counter--;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <timerRun+0xe4>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	4a1c      	ldr	r2, [pc, #112]	; (8000bb0 <timerRun+0xe4>)
 8000b40:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8000b42:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <timerRun+0xe4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	dc02      	bgt.n	8000b50 <timerRun+0x84>
			timer4_flag = 1;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <timerRun+0xe8>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <timerRun+0xec>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	dd0b      	ble.n	8000b70 <timerRun+0xa4>
		timer5_counter--;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <timerRun+0xec>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <timerRun+0xec>)
 8000b60:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <timerRun+0xec>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	dc02      	bgt.n	8000b70 <timerRun+0xa4>
			timer5_flag = 1;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <timerRun+0xf0>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer0_mode_debounce_counter > 0) {
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <timerRun+0xf4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	dd0b      	ble.n	8000b90 <timerRun+0xc4>
		timer0_mode_debounce_counter--;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <timerRun+0xf4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <timerRun+0xf4>)
 8000b80:	6013      	str	r3, [r2, #0]
		if (timer0_mode_debounce_counter <= 0) {
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <timerRun+0xf4>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	dc02      	bgt.n	8000b90 <timerRun+0xc4>
			timer0_mode_debounce_flag = 1;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <timerRun+0xf8>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	200000f4 	.word	0x200000f4
 8000b9c:	200000e0 	.word	0x200000e0
 8000ba0:	200000f8 	.word	0x200000f8
 8000ba4:	200000e4 	.word	0x200000e4
 8000ba8:	200000fc 	.word	0x200000fc
 8000bac:	200000e8 	.word	0x200000e8
 8000bb0:	20000100 	.word	0x20000100
 8000bb4:	200000ec 	.word	0x200000ec
 8000bb8:	20000104 	.word	0x20000104
 8000bbc:	200000f0 	.word	0x200000f0
 8000bc0:	2000010c 	.word	0x2000010c
 8000bc4:	20000108 	.word	0x20000108

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6193      	str	r3, [r2, #24]
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x5c>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	61d3      	str	r3, [r2, #28]
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_MspInit+0x60>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_MspInit+0x60>)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010000 	.word	0x40010000

08000c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c3c:	d113      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_TIM_Base_MspInit+0x44>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <HAL_TIM_Base_MspInit+0x44>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	61d3      	str	r3, [r2, #28]
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_TIM_Base_MspInit+0x44>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	201c      	movs	r0, #28
 8000c5c:	f000 fa85 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c60:	201c      	movs	r0, #28
 8000c62:	f000 fa9e 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <HAL_UART_MspInit+0x8c>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d131      	bne.n	8000cf8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <HAL_UART_MspInit+0x90>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a1a      	ldr	r2, [pc, #104]	; (8000d04 <HAL_UART_MspInit+0x90>)
 8000c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_UART_MspInit+0x90>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_UART_MspInit+0x90>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <HAL_UART_MspInit+0x90>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_UART_MspInit+0x90>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <HAL_UART_MspInit+0x94>)
 8000cda:	f000 fa7d 	bl	80011d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_UART_MspInit+0x94>)
 8000cf4:	f000 fa70 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40013800 	.word	0x40013800
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010800 	.word	0x40010800

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d52:	f000 f917 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <TIM2_IRQHandler+0x10>)
 8000d62:	f001 f899 	bl	8001e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000160 	.word	0x20000160

08000d70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e00a      	b.n	8000d98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d82:	f3af 8000 	nop.w
 8000d86:	4601      	mov	r1, r0
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	60ba      	str	r2, [r7, #8]
 8000d8e:	b2ca      	uxtb	r2, r1
 8000d90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dbf0      	blt.n	8000d82 <_read+0x12>
	}

return len;
 8000da0:	687b      	ldr	r3, [r7, #4]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_close>:
	}
	return len;
}

int _close(int file)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	return -1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dd0:	605a      	str	r2, [r3, #4]
	return 0;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <_isatty>:

int _isatty(int file)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
	return 1;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr

08000df2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b085      	sub	sp, #20
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
	return 0;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
	...

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f001 fd2c 	bl	8002898 <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20002800 	.word	0x20002800
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	20000110 	.word	0x20000110
 8000e74:	200001c0 	.word	0x200001c0

08000e78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <HAL_TIM_PeriodElapsedCallback>:
#include "main.h"
#include "input_processing.h"
#include "input_reading.h"
#include "software_timer.h"
#include "button.h"
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e94:	d105      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		button_reading();
 8000e96:	f7ff fa47 	bl	8000328 <button_reading>
		timerRun();
 8000e9a:	f7ff fe17 	bl	8000acc <timerRun>
		getKeyInput();
 8000e9e:	f7ff f961 	bl	8000164 <getKeyInput>
	}
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eae:	490d      	ldr	r1, [pc, #52]	; (8000ee4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	; (8000ef0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ed2:	f7ff ffd1 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f001 fce5 	bl	80028a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eda:	f7ff fc93 	bl	8000804 <main>
  bx lr
 8000ede:	4770      	bx	lr
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000ee8:	080038b4 	.word	0x080038b4
  ldr r2, =_sbss
 8000eec:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000ef0:	200001bc 	.word	0x200001bc

08000ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_2_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x28>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x28>)
 8000f02:	f043 0310 	orr.w	r3, r3, #16
 8000f06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f923 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	200f      	movs	r0, #15
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff fe58 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40022000 	.word	0x40022000

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f93b 	bl	80011be <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 f903 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	2000002c 	.word	0x2000002c
 8000f7c:	20000034 	.word	0x20000034
 8000f80:	20000030 	.word	0x20000030

08000f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_IncTick+0x1c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a03      	ldr	r2, [pc, #12]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000034 	.word	0x20000034
 8000fa4:	200001a8 	.word	0x200001a8

08000fa8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <HAL_GetTick+0x10>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	200001a8 	.word	0x200001a8

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4906      	ldr	r1, [pc, #24]	; (8001054 <__NVIC_EnableIRQ+0x34>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff90 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff2d 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff42 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff90 	bl	80010ac <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5f 	bl	8001058 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff35 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b08b      	sub	sp, #44	; 0x2c
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	e148      	b.n	800147e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011ec:	2201      	movs	r2, #1
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 8137 	bne.w	8001478 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4aa3      	ldr	r2, [pc, #652]	; (800149c <HAL_GPIO_Init+0x2c4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d05e      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001214:	4aa1      	ldr	r2, [pc, #644]	; (800149c <HAL_GPIO_Init+0x2c4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d875      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800121a:	4aa1      	ldr	r2, [pc, #644]	; (80014a0 <HAL_GPIO_Init+0x2c8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d058      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001220:	4a9f      	ldr	r2, [pc, #636]	; (80014a0 <HAL_GPIO_Init+0x2c8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d86f      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001226:	4a9f      	ldr	r2, [pc, #636]	; (80014a4 <HAL_GPIO_Init+0x2cc>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d052      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 800122c:	4a9d      	ldr	r2, [pc, #628]	; (80014a4 <HAL_GPIO_Init+0x2cc>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d869      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001232:	4a9d      	ldr	r2, [pc, #628]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d04c      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001238:	4a9b      	ldr	r2, [pc, #620]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d863      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800123e:	4a9b      	ldr	r2, [pc, #620]	; (80014ac <HAL_GPIO_Init+0x2d4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d046      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001244:	4a99      	ldr	r2, [pc, #612]	; (80014ac <HAL_GPIO_Init+0x2d4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d85d      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800124a:	2b12      	cmp	r3, #18
 800124c:	d82a      	bhi.n	80012a4 <HAL_GPIO_Init+0xcc>
 800124e:	2b12      	cmp	r3, #18
 8001250:	d859      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <HAL_GPIO_Init+0x80>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	080012d3 	.word	0x080012d3
 800125c:	080012ad 	.word	0x080012ad
 8001260:	080012bf 	.word	0x080012bf
 8001264:	08001301 	.word	0x08001301
 8001268:	08001307 	.word	0x08001307
 800126c:	08001307 	.word	0x08001307
 8001270:	08001307 	.word	0x08001307
 8001274:	08001307 	.word	0x08001307
 8001278:	08001307 	.word	0x08001307
 800127c:	08001307 	.word	0x08001307
 8001280:	08001307 	.word	0x08001307
 8001284:	08001307 	.word	0x08001307
 8001288:	08001307 	.word	0x08001307
 800128c:	08001307 	.word	0x08001307
 8001290:	08001307 	.word	0x08001307
 8001294:	08001307 	.word	0x08001307
 8001298:	08001307 	.word	0x08001307
 800129c:	080012b5 	.word	0x080012b5
 80012a0:	080012c9 	.word	0x080012c9
 80012a4:	4a82      	ldr	r2, [pc, #520]	; (80014b0 <HAL_GPIO_Init+0x2d8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012aa:	e02c      	b.n	8001306 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	623b      	str	r3, [r7, #32]
          break;
 80012b2:	e029      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	3304      	adds	r3, #4
 80012ba:	623b      	str	r3, [r7, #32]
          break;
 80012bc:	e024      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	3308      	adds	r3, #8
 80012c4:	623b      	str	r3, [r7, #32]
          break;
 80012c6:	e01f      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	330c      	adds	r3, #12
 80012ce:	623b      	str	r3, [r7, #32]
          break;
 80012d0:	e01a      	b.n	8001308 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012da:	2304      	movs	r3, #4
 80012dc:	623b      	str	r3, [r7, #32]
          break;
 80012de:	e013      	b.n	8001308 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e8:	2308      	movs	r3, #8
 80012ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	611a      	str	r2, [r3, #16]
          break;
 80012f2:	e009      	b.n	8001308 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f4:	2308      	movs	r3, #8
 80012f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	615a      	str	r2, [r3, #20]
          break;
 80012fe:	e003      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x130>
          break;
 8001306:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2bff      	cmp	r3, #255	; 0xff
 800130c:	d801      	bhi.n	8001312 <HAL_GPIO_Init+0x13a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	e001      	b.n	8001316 <HAL_GPIO_Init+0x13e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3304      	adds	r3, #4
 8001316:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2bff      	cmp	r3, #255	; 0xff
 800131c:	d802      	bhi.n	8001324 <HAL_GPIO_Init+0x14c>
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	e002      	b.n	800132a <HAL_GPIO_Init+0x152>
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	3b08      	subs	r3, #8
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	210f      	movs	r1, #15
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	401a      	ands	r2, r3
 800133c:	6a39      	ldr	r1, [r7, #32]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8090 	beq.w	8001478 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001358:	4b56      	ldr	r3, [pc, #344]	; (80014b4 <HAL_GPIO_Init+0x2dc>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a55      	ldr	r2, [pc, #340]	; (80014b4 <HAL_GPIO_Init+0x2dc>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b53      	ldr	r3, [pc, #332]	; (80014b4 <HAL_GPIO_Init+0x2dc>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001370:	4a51      	ldr	r2, [pc, #324]	; (80014b8 <HAL_GPIO_Init+0x2e0>)
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	220f      	movs	r2, #15
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a49      	ldr	r2, [pc, #292]	; (80014bc <HAL_GPIO_Init+0x2e4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d00d      	beq.n	80013b8 <HAL_GPIO_Init+0x1e0>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a48      	ldr	r2, [pc, #288]	; (80014c0 <HAL_GPIO_Init+0x2e8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d007      	beq.n	80013b4 <HAL_GPIO_Init+0x1dc>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a47      	ldr	r2, [pc, #284]	; (80014c4 <HAL_GPIO_Init+0x2ec>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d101      	bne.n	80013b0 <HAL_GPIO_Init+0x1d8>
 80013ac:	2302      	movs	r3, #2
 80013ae:	e004      	b.n	80013ba <HAL_GPIO_Init+0x1e2>
 80013b0:	2303      	movs	r3, #3
 80013b2:	e002      	b.n	80013ba <HAL_GPIO_Init+0x1e2>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <HAL_GPIO_Init+0x1e2>
 80013b8:	2300      	movs	r3, #0
 80013ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013bc:	f002 0203 	and.w	r2, r2, #3
 80013c0:	0092      	lsls	r2, r2, #2
 80013c2:	4093      	lsls	r3, r2
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013ca:	493b      	ldr	r1, [pc, #236]	; (80014b8 <HAL_GPIO_Init+0x2e0>)
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d006      	beq.n	80013f2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013e4:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4937      	ldr	r1, [pc, #220]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013f2:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	4933      	ldr	r1, [pc, #204]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d006      	beq.n	800141a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	492d      	ldr	r1, [pc, #180]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800141a:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	43db      	mvns	r3, r3
 8001422:	4929      	ldr	r1, [pc, #164]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 8001424:	4013      	ands	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d006      	beq.n	8001442 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	4923      	ldr	r1, [pc, #140]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	608b      	str	r3, [r1, #8]
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001442:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	43db      	mvns	r3, r3
 800144a:	491f      	ldr	r1, [pc, #124]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 800144c:	4013      	ands	r3, r2
 800144e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	4919      	ldr	r1, [pc, #100]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	60cb      	str	r3, [r1, #12]
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	43db      	mvns	r3, r3
 8001472:	4915      	ldr	r1, [pc, #84]	; (80014c8 <HAL_GPIO_Init+0x2f0>)
 8001474:	4013      	ands	r3, r2
 8001476:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	3301      	adds	r3, #1
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	fa22 f303 	lsr.w	r3, r2, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	f47f aeaf 	bne.w	80011ec <HAL_GPIO_Init+0x14>
  }
}
 800148e:	bf00      	nop
 8001490:	bf00      	nop
 8001492:	372c      	adds	r7, #44	; 0x2c
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	10320000 	.word	0x10320000
 80014a0:	10310000 	.word	0x10310000
 80014a4:	10220000 	.word	0x10220000
 80014a8:	10210000 	.word	0x10210000
 80014ac:	10120000 	.word	0x10120000
 80014b0:	10110000 	.word	0x10110000
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010000 	.word	0x40010000
 80014bc:	40010800 	.word	0x40010800
 80014c0:	40010c00 	.word	0x40010c00
 80014c4:	40011000 	.word	0x40011000
 80014c8:	40010400 	.word	0x40010400

080014cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	e001      	b.n	80014ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	807b      	strh	r3, [r7, #2]
 8001506:	4613      	mov	r3, r2
 8001508:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800150a:	787b      	ldrb	r3, [r7, #1]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001510:	887a      	ldrh	r2, [r7, #2]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001516:	e003      	b.n	8001520 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	041a      	lsls	r2, r3, #16
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	611a      	str	r2, [r3, #16]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
	...

0800152c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e26c      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8087 	beq.w	800165a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800154c:	4b92      	ldr	r3, [pc, #584]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b04      	cmp	r3, #4
 8001556:	d00c      	beq.n	8001572 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001558:	4b8f      	ldr	r3, [pc, #572]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b08      	cmp	r3, #8
 8001562:	d112      	bne.n	800158a <HAL_RCC_OscConfig+0x5e>
 8001564:	4b8c      	ldr	r3, [pc, #560]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001570:	d10b      	bne.n	800158a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001572:	4b89      	ldr	r3, [pc, #548]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d06c      	beq.n	8001658 <HAL_RCC_OscConfig+0x12c>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d168      	bne.n	8001658 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e246      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x76>
 8001594:	4b80      	ldr	r3, [pc, #512]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a7f      	ldr	r2, [pc, #508]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 800159a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	e02e      	b.n	8001600 <HAL_RCC_OscConfig+0xd4>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x98>
 80015aa:	4b7b      	ldr	r3, [pc, #492]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a7a      	ldr	r2, [pc, #488]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b78      	ldr	r3, [pc, #480]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a77      	ldr	r2, [pc, #476]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e01d      	b.n	8001600 <HAL_RCC_OscConfig+0xd4>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0xbc>
 80015ce:	4b72      	ldr	r3, [pc, #456]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a71      	ldr	r2, [pc, #452]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a6e      	ldr	r2, [pc, #440]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e00b      	b.n	8001600 <HAL_RCC_OscConfig+0xd4>
 80015e8:	4b6b      	ldr	r3, [pc, #428]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a6a      	ldr	r2, [pc, #424]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b68      	ldr	r3, [pc, #416]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a67      	ldr	r2, [pc, #412]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d013      	beq.n	8001630 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fcce 	bl	8000fa8 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fcca 	bl	8000fa8 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1fa      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	4b5d      	ldr	r3, [pc, #372]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0xe4>
 800162e:	e014      	b.n	800165a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fcba 	bl	8000fa8 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fcb6 	bl	8000fa8 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e1e6      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164a:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x10c>
 8001656:	e000      	b.n	800165a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d063      	beq.n	800172e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001666:	4b4c      	ldr	r3, [pc, #304]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00b      	beq.n	800168a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001672:	4b49      	ldr	r3, [pc, #292]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b08      	cmp	r3, #8
 800167c:	d11c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x18c>
 800167e:	4b46      	ldr	r3, [pc, #280]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d116      	bne.n	80016b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168a:	4b43      	ldr	r3, [pc, #268]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <HAL_RCC_OscConfig+0x176>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d001      	beq.n	80016a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e1ba      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a2:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4939      	ldr	r1, [pc, #228]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b6:	e03a      	b.n	800172e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d020      	beq.n	8001702 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c0:	4b36      	ldr	r3, [pc, #216]	; (800179c <HAL_RCC_OscConfig+0x270>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff fc6f 	bl	8000fa8 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ce:	f7ff fc6b 	bl	8000fa8 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e19b      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e0:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ec:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4927      	ldr	r1, [pc, #156]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
 8001700:	e015      	b.n	800172e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001702:	4b26      	ldr	r3, [pc, #152]	; (800179c <HAL_RCC_OscConfig+0x270>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fc4e 	bl	8000fa8 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001710:	f7ff fc4a 	bl	8000fa8 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e17a      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001722:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d03a      	beq.n	80017b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d019      	beq.n	8001776 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 8001744:	2201      	movs	r2, #1
 8001746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001748:	f7ff fc2e 	bl	8000fa8 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001750:	f7ff fc2a 	bl	8000fa8 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e15a      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <HAL_RCC_OscConfig+0x26c>)
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800176e:	2001      	movs	r0, #1
 8001770:	f000 fad8 	bl	8001d24 <RCC_Delay>
 8001774:	e01c      	b.n	80017b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_RCC_OscConfig+0x274>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177c:	f7ff fc14 	bl	8000fa8 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001782:	e00f      	b.n	80017a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fc10 	bl	8000fa8 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d908      	bls.n	80017a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e140      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	42420000 	.word	0x42420000
 80017a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a4:	4b9e      	ldr	r3, [pc, #632]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1e9      	bne.n	8001784 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80a6 	beq.w	800190a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c2:	4b97      	ldr	r3, [pc, #604]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10d      	bne.n	80017ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b94      	ldr	r3, [pc, #592]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4a93      	ldr	r2, [pc, #588]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d8:	61d3      	str	r3, [r2, #28]
 80017da:	4b91      	ldr	r3, [pc, #580]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e6:	2301      	movs	r3, #1
 80017e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ea:	4b8e      	ldr	r3, [pc, #568]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d118      	bne.n	8001828 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f6:	4b8b      	ldr	r3, [pc, #556]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a8a      	ldr	r2, [pc, #552]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 80017fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001802:	f7ff fbd1 	bl	8000fa8 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180a:	f7ff fbcd 	bl	8000fa8 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b64      	cmp	r3, #100	; 0x64
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e0fd      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	4b81      	ldr	r3, [pc, #516]	; (8001a24 <HAL_RCC_OscConfig+0x4f8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d106      	bne.n	800183e <HAL_RCC_OscConfig+0x312>
 8001830:	4b7b      	ldr	r3, [pc, #492]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4a7a      	ldr	r2, [pc, #488]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6213      	str	r3, [r2, #32]
 800183c:	e02d      	b.n	800189a <HAL_RCC_OscConfig+0x36e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0x334>
 8001846:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4a75      	ldr	r2, [pc, #468]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	6213      	str	r3, [r2, #32]
 8001852:	4b73      	ldr	r3, [pc, #460]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a72      	ldr	r2, [pc, #456]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	f023 0304 	bic.w	r3, r3, #4
 800185c:	6213      	str	r3, [r2, #32]
 800185e:	e01c      	b.n	800189a <HAL_RCC_OscConfig+0x36e>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b05      	cmp	r3, #5
 8001866:	d10c      	bne.n	8001882 <HAL_RCC_OscConfig+0x356>
 8001868:	4b6d      	ldr	r3, [pc, #436]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4a6c      	ldr	r2, [pc, #432]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	6213      	str	r3, [r2, #32]
 8001874:	4b6a      	ldr	r3, [pc, #424]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	4a69      	ldr	r2, [pc, #420]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6213      	str	r3, [r2, #32]
 8001880:	e00b      	b.n	800189a <HAL_RCC_OscConfig+0x36e>
 8001882:	4b67      	ldr	r3, [pc, #412]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	4a66      	ldr	r2, [pc, #408]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	6213      	str	r3, [r2, #32]
 800188e:	4b64      	ldr	r3, [pc, #400]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4a63      	ldr	r2, [pc, #396]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001894:	f023 0304 	bic.w	r3, r3, #4
 8001898:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d015      	beq.n	80018ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a2:	f7ff fb81 	bl	8000fa8 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018aa:	f7ff fb7d 	bl	8000fa8 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e0ab      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c0:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0ee      	beq.n	80018aa <HAL_RCC_OscConfig+0x37e>
 80018cc:	e014      	b.n	80018f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ce:	f7ff fb6b 	bl	8000fa8 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7ff fb67 	bl	8000fa8 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e095      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ec:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1ee      	bne.n	80018d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d105      	bne.n	800190a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fe:	4b48      	ldr	r3, [pc, #288]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a47      	ldr	r2, [pc, #284]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001908:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 8081 	beq.w	8001a16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001914:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b08      	cmp	r3, #8
 800191e:	d061      	beq.n	80019e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d146      	bne.n	80019b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001928:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <HAL_RCC_OscConfig+0x4fc>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7ff fb3b 	bl	8000fa8 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001936:	f7ff fb37 	bl	8000fa8 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e067      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001948:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f0      	bne.n	8001936 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195c:	d108      	bne.n	8001970 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800195e:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	492d      	ldr	r1, [pc, #180]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001970:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a19      	ldr	r1, [r3, #32]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	430b      	orrs	r3, r1
 8001982:	4927      	ldr	r1, [pc, #156]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001988:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <HAL_RCC_OscConfig+0x4fc>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7ff fb0b 	bl	8000fa8 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001996:	f7ff fb07 	bl	8000fa8 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e037      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x46a>
 80019b4:	e02f      	b.n	8001a16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <HAL_RCC_OscConfig+0x4fc>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff faf4 	bl	8000fa8 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff faf0 	bl	8000fa8 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e020      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x498>
 80019e2:	e018      	b.n	8001a16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e013      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_OscConfig+0x4f4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40007000 	.word	0x40007000
 8001a28:	42420060 	.word	0x42420060

08001a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0d0      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a40:	4b6a      	ldr	r3, [pc, #424]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d910      	bls.n	8001a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b67      	ldr	r3, [pc, #412]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 0207 	bic.w	r2, r3, #7
 8001a56:	4965      	ldr	r1, [pc, #404]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b63      	ldr	r3, [pc, #396]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0b8      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d020      	beq.n	8001abe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a88:	4b59      	ldr	r3, [pc, #356]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa0:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a52      	ldr	r2, [pc, #328]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aac:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	494d      	ldr	r1, [pc, #308]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d040      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d115      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e07f      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e073      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e06b      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0a:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f023 0203 	bic.w	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4936      	ldr	r1, [pc, #216]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b1c:	f7ff fa44 	bl	8000fa8 <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7ff fa40 	bl	8000fa8 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e053      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 020c 	and.w	r2, r3, #12
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d1eb      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d210      	bcs.n	8001b7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 0207 	bic.w	r2, r3, #7
 8001b62:	4922      	ldr	r1, [pc, #136]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e032      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4916      	ldr	r1, [pc, #88]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d009      	beq.n	8001bba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	490e      	ldr	r1, [pc, #56]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bba:	f000 f821 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	490a      	ldr	r1, [pc, #40]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bcc:	5ccb      	ldrb	r3, [r1, r3]
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	4a09      	ldr	r2, [pc, #36]	; (8001bf8 <HAL_RCC_ClockConfig+0x1cc>)
 8001bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_RCC_ClockConfig+0x1d0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff f9a2 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	080037fc 	.word	0x080037fc
 8001bf8:	2000002c 	.word	0x2000002c
 8001bfc:	20000030 	.word	0x20000030

08001c00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c00:	b490      	push	{r4, r7}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c06:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c08:	1d3c      	adds	r4, r7, #4
 8001c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c10:	f240 2301 	movw	r3, #513	; 0x201
 8001c14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d002      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x40>
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d003      	beq.n	8001c46 <HAL_RCC_GetSysClockFreq+0x46>
 8001c3e:	e02d      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c42:	623b      	str	r3, [r7, #32]
      break;
 8001c44:	e02d      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	0c9b      	lsrs	r3, r3, #18
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c52:	4413      	add	r3, r2
 8001c54:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c58:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d013      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	0c5b      	lsrs	r3, r3, #17
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c72:	4413      	add	r3, r2
 8001c74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c7e:	fb02 f203 	mul.w	r2, r2, r3
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8a:	e004      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	623b      	str	r3, [r7, #32]
      break;
 8001c9a:	e002      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c9e:	623b      	str	r3, [r7, #32]
      break;
 8001ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3728      	adds	r7, #40	; 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc90      	pop	{r4, r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	080037ec 	.word	0x080037ec
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	007a1200 	.word	0x007a1200
 8001cbc:	003d0900 	.word	0x003d0900

08001cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	; (8001cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	2000002c 	.word	0x2000002c

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cd8:	f7ff fff2 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4903      	ldr	r1, [pc, #12]	; (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	0800380c 	.word	0x0800380c

08001cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d00:	f7ff ffde 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	0adb      	lsrs	r3, r3, #11
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4903      	ldr	r1, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	0800380c 	.word	0x0800380c

08001d24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <RCC_Delay+0x34>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <RCC_Delay+0x38>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	0a5b      	lsrs	r3, r3, #9
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d40:	bf00      	nop
  }
  while (Delay --);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1e5a      	subs	r2, r3, #1
 8001d46:	60fa      	str	r2, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f9      	bne.n	8001d40 <RCC_Delay+0x1c>
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	2000002c 	.word	0x2000002c
 8001d5c:	10624dd3 	.word	0x10624dd3

08001d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e041      	b.n	8001df6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe ff50 	bl	8000c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	f000 fa6a 	bl	8002278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d001      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e035      	b.n	8001e84 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <HAL_TIM_Base_Start_IT+0x90>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_TIM_Base_Start_IT+0x4e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e42:	d004      	beq.n	8001e4e <HAL_TIM_Base_Start_IT+0x4e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <HAL_TIM_Base_Start_IT+0x94>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d111      	bne.n	8001e72 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d010      	beq.n	8001e82 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e70:	e007      	b.n	8001e82 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40012c00 	.word	0x40012c00
 8001e94:	40000400 	.word	0x40000400

08001e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d122      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d11b      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0202 	mvn.w	r2, #2
 8001ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f9b1 	bl	8002242 <HAL_TIM_IC_CaptureCallback>
 8001ee0:	e005      	b.n	8001eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f9a4 	bl	8002230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f9b3 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d122      	bne.n	8001f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d11b      	bne.n	8001f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0204 	mvn.w	r2, #4
 8001f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f987 	bl	8002242 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f97a 	bl	8002230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f989 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d122      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d11b      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0208 	mvn.w	r2, #8
 8001f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2204      	movs	r2, #4
 8001f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f95d 	bl	8002242 <HAL_TIM_IC_CaptureCallback>
 8001f88:	e005      	b.n	8001f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f950 	bl	8002230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f95f 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d122      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d11b      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0210 	mvn.w	r2, #16
 8001fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f933 	bl	8002242 <HAL_TIM_IC_CaptureCallback>
 8001fdc:	e005      	b.n	8001fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f926 	bl	8002230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f935 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d10e      	bne.n	800201c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d107      	bne.n	800201c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0201 	mvn.w	r2, #1
 8002014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe ff34 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002026:	2b80      	cmp	r3, #128	; 0x80
 8002028:	d10e      	bne.n	8002048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002034:	2b80      	cmp	r3, #128	; 0x80
 8002036:	d107      	bne.n	8002048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fa67 	bl	8002516 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002052:	2b40      	cmp	r3, #64	; 0x40
 8002054:	d10e      	bne.n	8002074 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d107      	bne.n	8002074 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800206c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f8f9 	bl	8002266 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b20      	cmp	r3, #32
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b20      	cmp	r3, #32
 800208e:	d107      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0220 	mvn.w	r2, #32
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa32 	bl	8002504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_TIM_ConfigClockSource+0x18>
 80020bc:	2302      	movs	r3, #2
 80020be:	e0b3      	b.n	8002228 <HAL_TIM_ConfigClockSource+0x180>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f8:	d03e      	beq.n	8002178 <HAL_TIM_ConfigClockSource+0xd0>
 80020fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020fe:	f200 8087 	bhi.w	8002210 <HAL_TIM_ConfigClockSource+0x168>
 8002102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002106:	f000 8085 	beq.w	8002214 <HAL_TIM_ConfigClockSource+0x16c>
 800210a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800210e:	d87f      	bhi.n	8002210 <HAL_TIM_ConfigClockSource+0x168>
 8002110:	2b70      	cmp	r3, #112	; 0x70
 8002112:	d01a      	beq.n	800214a <HAL_TIM_ConfigClockSource+0xa2>
 8002114:	2b70      	cmp	r3, #112	; 0x70
 8002116:	d87b      	bhi.n	8002210 <HAL_TIM_ConfigClockSource+0x168>
 8002118:	2b60      	cmp	r3, #96	; 0x60
 800211a:	d050      	beq.n	80021be <HAL_TIM_ConfigClockSource+0x116>
 800211c:	2b60      	cmp	r3, #96	; 0x60
 800211e:	d877      	bhi.n	8002210 <HAL_TIM_ConfigClockSource+0x168>
 8002120:	2b50      	cmp	r3, #80	; 0x50
 8002122:	d03c      	beq.n	800219e <HAL_TIM_ConfigClockSource+0xf6>
 8002124:	2b50      	cmp	r3, #80	; 0x50
 8002126:	d873      	bhi.n	8002210 <HAL_TIM_ConfigClockSource+0x168>
 8002128:	2b40      	cmp	r3, #64	; 0x40
 800212a:	d058      	beq.n	80021de <HAL_TIM_ConfigClockSource+0x136>
 800212c:	2b40      	cmp	r3, #64	; 0x40
 800212e:	d86f      	bhi.n	8002210 <HAL_TIM_ConfigClockSource+0x168>
 8002130:	2b30      	cmp	r3, #48	; 0x30
 8002132:	d064      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x156>
 8002134:	2b30      	cmp	r3, #48	; 0x30
 8002136:	d86b      	bhi.n	8002210 <HAL_TIM_ConfigClockSource+0x168>
 8002138:	2b20      	cmp	r3, #32
 800213a:	d060      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x156>
 800213c:	2b20      	cmp	r3, #32
 800213e:	d867      	bhi.n	8002210 <HAL_TIM_ConfigClockSource+0x168>
 8002140:	2b00      	cmp	r3, #0
 8002142:	d05c      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x156>
 8002144:	2b10      	cmp	r3, #16
 8002146:	d05a      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002148:	e062      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6899      	ldr	r1, [r3, #8]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f000 f95c 	bl	8002416 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800216c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	609a      	str	r2, [r3, #8]
      break;
 8002176:	e04e      	b.n	8002216 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f000 f945 	bl	8002416 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800219a:	609a      	str	r2, [r3, #8]
      break;
 800219c:	e03b      	b.n	8002216 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6859      	ldr	r1, [r3, #4]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	461a      	mov	r2, r3
 80021ac:	f000 f8bc 	bl	8002328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2150      	movs	r1, #80	; 0x50
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f913 	bl	80023e2 <TIM_ITRx_SetConfig>
      break;
 80021bc:	e02b      	b.n	8002216 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6859      	ldr	r1, [r3, #4]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	461a      	mov	r2, r3
 80021cc:	f000 f8da 	bl	8002384 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2160      	movs	r1, #96	; 0x60
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f903 	bl	80023e2 <TIM_ITRx_SetConfig>
      break;
 80021dc:	e01b      	b.n	8002216 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6859      	ldr	r1, [r3, #4]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	461a      	mov	r2, r3
 80021ec:	f000 f89c 	bl	8002328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2140      	movs	r1, #64	; 0x40
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f8f3 	bl	80023e2 <TIM_ITRx_SetConfig>
      break;
 80021fc:	e00b      	b.n	8002216 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4619      	mov	r1, r3
 8002208:	4610      	mov	r0, r2
 800220a:	f000 f8ea 	bl	80023e2 <TIM_ITRx_SetConfig>
        break;
 800220e:	e002      	b.n	8002216 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002210:	bf00      	nop
 8002212:	e000      	b.n	8002216 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002214:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a25      	ldr	r2, [pc, #148]	; (8002320 <TIM_Base_SetConfig+0xa8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d007      	beq.n	80022a0 <TIM_Base_SetConfig+0x28>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002296:	d003      	beq.n	80022a0 <TIM_Base_SetConfig+0x28>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a22      	ldr	r2, [pc, #136]	; (8002324 <TIM_Base_SetConfig+0xac>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d108      	bne.n	80022b2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <TIM_Base_SetConfig+0xa8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d007      	beq.n	80022ca <TIM_Base_SetConfig+0x52>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c0:	d003      	beq.n	80022ca <TIM_Base_SetConfig+0x52>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a17      	ldr	r2, [pc, #92]	; (8002324 <TIM_Base_SetConfig+0xac>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d108      	bne.n	80022dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a07      	ldr	r2, [pc, #28]	; (8002320 <TIM_Base_SetConfig+0xa8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d103      	bne.n	8002310 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	615a      	str	r2, [r3, #20]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40012c00 	.word	0x40012c00
 8002324:	40000400 	.word	0x40000400

08002328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f023 0201 	bic.w	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f023 030a 	bic.w	r3, r3, #10
 8002364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	621a      	str	r2, [r3, #32]
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f023 0210 	bic.w	r2, r3, #16
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	031b      	lsls	r3, r3, #12
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	621a      	str	r2, [r3, #32]
}
 80023d8:	bf00      	nop
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	f043 0307 	orr.w	r3, r3, #7
 8002404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	609a      	str	r2, [r3, #8]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002416:	b480      	push	{r7}
 8002418:	b087      	sub	sp, #28
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002430:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	021a      	lsls	r2, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	431a      	orrs	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	4313      	orrs	r3, r2
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	609a      	str	r2, [r3, #8]
}
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002468:	2302      	movs	r3, #2
 800246a:	e041      	b.n	80024f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a14      	ldr	r2, [pc, #80]	; (80024fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d009      	beq.n	80024c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d004      	beq.n	80024c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a10      	ldr	r2, [pc, #64]	; (8002500 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d10c      	bne.n	80024de <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	40000400 	.word	0x40000400

08002504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e03f      	b.n	80025ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe fb90 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2224      	movs	r2, #36	; 0x24
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800256a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f905 	bl	800277c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b08a      	sub	sp, #40	; 0x28
 80025c6:	af02      	add	r7, sp, #8
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	4613      	mov	r3, r2
 80025d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d17c      	bne.n	80026dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <HAL_UART_Transmit+0x2c>
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e075      	b.n	80026de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_UART_Transmit+0x3e>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e06e      	b.n	80026de <HAL_UART_Transmit+0x11c>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2221      	movs	r2, #33	; 0x21
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002616:	f7fe fcc7 	bl	8000fa8 <HAL_GetTick>
 800261a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	88fa      	ldrh	r2, [r7, #6]
 8002620:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	88fa      	ldrh	r2, [r7, #6]
 8002626:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002630:	d108      	bne.n	8002644 <HAL_UART_Transmit+0x82>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d104      	bne.n	8002644 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	e003      	b.n	800264c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002648:	2300      	movs	r3, #0
 800264a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002654:	e02a      	b.n	80026ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2200      	movs	r2, #0
 800265e:	2180      	movs	r1, #128	; 0x80
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f840 	bl	80026e6 <UART_WaitOnFlagUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e036      	b.n	80026de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10b      	bne.n	800268e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002684:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	3302      	adds	r3, #2
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	e007      	b.n	800269e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	3301      	adds	r3, #1
 800269c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1cf      	bne.n	8002656 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2200      	movs	r2, #0
 80026be:	2140      	movs	r1, #64	; 0x40
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f810 	bl	80026e6 <UART_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e006      	b.n	80026de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	e000      	b.n	80026de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026dc:	2302      	movs	r3, #2
  }
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	4613      	mov	r3, r2
 80026f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f6:	e02c      	b.n	8002752 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fe:	d028      	beq.n	8002752 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <UART_WaitOnFlagUntilTimeout+0x30>
 8002706:	f7fe fc4f 	bl	8000fa8 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	429a      	cmp	r2, r3
 8002714:	d21d      	bcs.n	8002752 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002724:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e00f      	b.n	8002772 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4013      	ands	r3, r2
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	429a      	cmp	r2, r3
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	429a      	cmp	r2, r3
 800276e:	d0c3      	beq.n	80026f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027b6:	f023 030c 	bic.w	r3, r3, #12
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a2c      	ldr	r2, [pc, #176]	; (8002890 <UART_SetConfig+0x114>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d103      	bne.n	80027ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027e4:	f7ff fa8a 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	e002      	b.n	80027f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027ec:	f7ff fa72 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 80027f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	441a      	add	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	4a22      	ldr	r2, [pc, #136]	; (8002894 <UART_SetConfig+0x118>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	0119      	lsls	r1, r3, #4
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	009a      	lsls	r2, r3, #2
 800281c:	441a      	add	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	fbb2 f2f3 	udiv	r2, r2, r3
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <UART_SetConfig+0x118>)
 800282a:	fba3 0302 	umull	r0, r3, r3, r2
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	2064      	movs	r0, #100	; 0x64
 8002832:	fb00 f303 	mul.w	r3, r0, r3
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	3332      	adds	r3, #50	; 0x32
 800283c:	4a15      	ldr	r2, [pc, #84]	; (8002894 <UART_SetConfig+0x118>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002848:	4419      	add	r1, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	009a      	lsls	r2, r3, #2
 8002854:	441a      	add	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <UART_SetConfig+0x118>)
 8002862:	fba3 0302 	umull	r0, r3, r3, r2
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2064      	movs	r0, #100	; 0x64
 800286a:	fb00 f303 	mul.w	r3, r0, r3
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	3332      	adds	r3, #50	; 0x32
 8002874:	4a07      	ldr	r2, [pc, #28]	; (8002894 <UART_SetConfig+0x118>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	f003 020f 	and.w	r2, r3, #15
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	440a      	add	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40013800 	.word	0x40013800
 8002894:	51eb851f 	.word	0x51eb851f

08002898 <__errno>:
 8002898:	4b01      	ldr	r3, [pc, #4]	; (80028a0 <__errno+0x8>)
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000038 	.word	0x20000038

080028a4 <__libc_init_array>:
 80028a4:	b570      	push	{r4, r5, r6, lr}
 80028a6:	2600      	movs	r6, #0
 80028a8:	4d0c      	ldr	r5, [pc, #48]	; (80028dc <__libc_init_array+0x38>)
 80028aa:	4c0d      	ldr	r4, [pc, #52]	; (80028e0 <__libc_init_array+0x3c>)
 80028ac:	1b64      	subs	r4, r4, r5
 80028ae:	10a4      	asrs	r4, r4, #2
 80028b0:	42a6      	cmp	r6, r4
 80028b2:	d109      	bne.n	80028c8 <__libc_init_array+0x24>
 80028b4:	f000 ff82 	bl	80037bc <_init>
 80028b8:	2600      	movs	r6, #0
 80028ba:	4d0a      	ldr	r5, [pc, #40]	; (80028e4 <__libc_init_array+0x40>)
 80028bc:	4c0a      	ldr	r4, [pc, #40]	; (80028e8 <__libc_init_array+0x44>)
 80028be:	1b64      	subs	r4, r4, r5
 80028c0:	10a4      	asrs	r4, r4, #2
 80028c2:	42a6      	cmp	r6, r4
 80028c4:	d105      	bne.n	80028d2 <__libc_init_array+0x2e>
 80028c6:	bd70      	pop	{r4, r5, r6, pc}
 80028c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028cc:	4798      	blx	r3
 80028ce:	3601      	adds	r6, #1
 80028d0:	e7ee      	b.n	80028b0 <__libc_init_array+0xc>
 80028d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d6:	4798      	blx	r3
 80028d8:	3601      	adds	r6, #1
 80028da:	e7f2      	b.n	80028c2 <__libc_init_array+0x1e>
 80028dc:	080038ac 	.word	0x080038ac
 80028e0:	080038ac 	.word	0x080038ac
 80028e4:	080038ac 	.word	0x080038ac
 80028e8:	080038b0 	.word	0x080038b0

080028ec <memset>:
 80028ec:	4603      	mov	r3, r0
 80028ee:	4402      	add	r2, r0
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d100      	bne.n	80028f6 <memset+0xa>
 80028f4:	4770      	bx	lr
 80028f6:	f803 1b01 	strb.w	r1, [r3], #1
 80028fa:	e7f9      	b.n	80028f0 <memset+0x4>

080028fc <iprintf>:
 80028fc:	b40f      	push	{r0, r1, r2, r3}
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <iprintf+0x2c>)
 8002900:	b513      	push	{r0, r1, r4, lr}
 8002902:	681c      	ldr	r4, [r3, #0]
 8002904:	b124      	cbz	r4, 8002910 <iprintf+0x14>
 8002906:	69a3      	ldr	r3, [r4, #24]
 8002908:	b913      	cbnz	r3, 8002910 <iprintf+0x14>
 800290a:	4620      	mov	r0, r4
 800290c:	f000 f866 	bl	80029dc <__sinit>
 8002910:	ab05      	add	r3, sp, #20
 8002912:	4620      	mov	r0, r4
 8002914:	9a04      	ldr	r2, [sp, #16]
 8002916:	68a1      	ldr	r1, [r4, #8]
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	f000 f981 	bl	8002c20 <_vfiprintf_r>
 800291e:	b002      	add	sp, #8
 8002920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002924:	b004      	add	sp, #16
 8002926:	4770      	bx	lr
 8002928:	20000038 	.word	0x20000038

0800292c <std>:
 800292c:	2300      	movs	r3, #0
 800292e:	b510      	push	{r4, lr}
 8002930:	4604      	mov	r4, r0
 8002932:	e9c0 3300 	strd	r3, r3, [r0]
 8002936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800293a:	6083      	str	r3, [r0, #8]
 800293c:	8181      	strh	r1, [r0, #12]
 800293e:	6643      	str	r3, [r0, #100]	; 0x64
 8002940:	81c2      	strh	r2, [r0, #14]
 8002942:	6183      	str	r3, [r0, #24]
 8002944:	4619      	mov	r1, r3
 8002946:	2208      	movs	r2, #8
 8002948:	305c      	adds	r0, #92	; 0x5c
 800294a:	f7ff ffcf 	bl	80028ec <memset>
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <std+0x38>)
 8002950:	6224      	str	r4, [r4, #32]
 8002952:	6263      	str	r3, [r4, #36]	; 0x24
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <std+0x3c>)
 8002956:	62a3      	str	r3, [r4, #40]	; 0x28
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <std+0x40>)
 800295a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <std+0x44>)
 800295e:	6323      	str	r3, [r4, #48]	; 0x30
 8002960:	bd10      	pop	{r4, pc}
 8002962:	bf00      	nop
 8002964:	080031cd 	.word	0x080031cd
 8002968:	080031ef 	.word	0x080031ef
 800296c:	08003227 	.word	0x08003227
 8002970:	0800324b 	.word	0x0800324b

08002974 <_cleanup_r>:
 8002974:	4901      	ldr	r1, [pc, #4]	; (800297c <_cleanup_r+0x8>)
 8002976:	f000 b8af 	b.w	8002ad8 <_fwalk_reent>
 800297a:	bf00      	nop
 800297c:	08003525 	.word	0x08003525

08002980 <__sfmoreglue>:
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	2568      	movs	r5, #104	; 0x68
 8002984:	1e4a      	subs	r2, r1, #1
 8002986:	4355      	muls	r5, r2
 8002988:	460e      	mov	r6, r1
 800298a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800298e:	f000 f8c5 	bl	8002b1c <_malloc_r>
 8002992:	4604      	mov	r4, r0
 8002994:	b140      	cbz	r0, 80029a8 <__sfmoreglue+0x28>
 8002996:	2100      	movs	r1, #0
 8002998:	e9c0 1600 	strd	r1, r6, [r0]
 800299c:	300c      	adds	r0, #12
 800299e:	60a0      	str	r0, [r4, #8]
 80029a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80029a4:	f7ff ffa2 	bl	80028ec <memset>
 80029a8:	4620      	mov	r0, r4
 80029aa:	bd70      	pop	{r4, r5, r6, pc}

080029ac <__sfp_lock_acquire>:
 80029ac:	4801      	ldr	r0, [pc, #4]	; (80029b4 <__sfp_lock_acquire+0x8>)
 80029ae:	f000 b8b3 	b.w	8002b18 <__retarget_lock_acquire_recursive>
 80029b2:	bf00      	nop
 80029b4:	200001b4 	.word	0x200001b4

080029b8 <__sfp_lock_release>:
 80029b8:	4801      	ldr	r0, [pc, #4]	; (80029c0 <__sfp_lock_release+0x8>)
 80029ba:	f000 b8ae 	b.w	8002b1a <__retarget_lock_release_recursive>
 80029be:	bf00      	nop
 80029c0:	200001b4 	.word	0x200001b4

080029c4 <__sinit_lock_acquire>:
 80029c4:	4801      	ldr	r0, [pc, #4]	; (80029cc <__sinit_lock_acquire+0x8>)
 80029c6:	f000 b8a7 	b.w	8002b18 <__retarget_lock_acquire_recursive>
 80029ca:	bf00      	nop
 80029cc:	200001af 	.word	0x200001af

080029d0 <__sinit_lock_release>:
 80029d0:	4801      	ldr	r0, [pc, #4]	; (80029d8 <__sinit_lock_release+0x8>)
 80029d2:	f000 b8a2 	b.w	8002b1a <__retarget_lock_release_recursive>
 80029d6:	bf00      	nop
 80029d8:	200001af 	.word	0x200001af

080029dc <__sinit>:
 80029dc:	b510      	push	{r4, lr}
 80029de:	4604      	mov	r4, r0
 80029e0:	f7ff fff0 	bl	80029c4 <__sinit_lock_acquire>
 80029e4:	69a3      	ldr	r3, [r4, #24]
 80029e6:	b11b      	cbz	r3, 80029f0 <__sinit+0x14>
 80029e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029ec:	f7ff bff0 	b.w	80029d0 <__sinit_lock_release>
 80029f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80029f4:	6523      	str	r3, [r4, #80]	; 0x50
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <__sinit+0x68>)
 80029f8:	4a13      	ldr	r2, [pc, #76]	; (8002a48 <__sinit+0x6c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80029fe:	42a3      	cmp	r3, r4
 8002a00:	bf08      	it	eq
 8002a02:	2301      	moveq	r3, #1
 8002a04:	4620      	mov	r0, r4
 8002a06:	bf08      	it	eq
 8002a08:	61a3      	streq	r3, [r4, #24]
 8002a0a:	f000 f81f 	bl	8002a4c <__sfp>
 8002a0e:	6060      	str	r0, [r4, #4]
 8002a10:	4620      	mov	r0, r4
 8002a12:	f000 f81b 	bl	8002a4c <__sfp>
 8002a16:	60a0      	str	r0, [r4, #8]
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f000 f817 	bl	8002a4c <__sfp>
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2104      	movs	r1, #4
 8002a22:	60e0      	str	r0, [r4, #12]
 8002a24:	6860      	ldr	r0, [r4, #4]
 8002a26:	f7ff ff81 	bl	800292c <std>
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	2109      	movs	r1, #9
 8002a2e:	68a0      	ldr	r0, [r4, #8]
 8002a30:	f7ff ff7c 	bl	800292c <std>
 8002a34:	2202      	movs	r2, #2
 8002a36:	2112      	movs	r1, #18
 8002a38:	68e0      	ldr	r0, [r4, #12]
 8002a3a:	f7ff ff77 	bl	800292c <std>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	61a3      	str	r3, [r4, #24]
 8002a42:	e7d1      	b.n	80029e8 <__sinit+0xc>
 8002a44:	08003814 	.word	0x08003814
 8002a48:	08002975 	.word	0x08002975

08002a4c <__sfp>:
 8002a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4e:	4607      	mov	r7, r0
 8002a50:	f7ff ffac 	bl	80029ac <__sfp_lock_acquire>
 8002a54:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <__sfp+0x84>)
 8002a56:	681e      	ldr	r6, [r3, #0]
 8002a58:	69b3      	ldr	r3, [r6, #24]
 8002a5a:	b913      	cbnz	r3, 8002a62 <__sfp+0x16>
 8002a5c:	4630      	mov	r0, r6
 8002a5e:	f7ff ffbd 	bl	80029dc <__sinit>
 8002a62:	3648      	adds	r6, #72	; 0x48
 8002a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	d503      	bpl.n	8002a74 <__sfp+0x28>
 8002a6c:	6833      	ldr	r3, [r6, #0]
 8002a6e:	b30b      	cbz	r3, 8002ab4 <__sfp+0x68>
 8002a70:	6836      	ldr	r6, [r6, #0]
 8002a72:	e7f7      	b.n	8002a64 <__sfp+0x18>
 8002a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a78:	b9d5      	cbnz	r5, 8002ab0 <__sfp+0x64>
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <__sfp+0x88>)
 8002a7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a80:	60e3      	str	r3, [r4, #12]
 8002a82:	6665      	str	r5, [r4, #100]	; 0x64
 8002a84:	f000 f847 	bl	8002b16 <__retarget_lock_init_recursive>
 8002a88:	f7ff ff96 	bl	80029b8 <__sfp_lock_release>
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	4629      	mov	r1, r5
 8002a90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002a94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002a98:	6025      	str	r5, [r4, #0]
 8002a9a:	61a5      	str	r5, [r4, #24]
 8002a9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002aa0:	f7ff ff24 	bl	80028ec <memset>
 8002aa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002aa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002aac:	4620      	mov	r0, r4
 8002aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ab0:	3468      	adds	r4, #104	; 0x68
 8002ab2:	e7d9      	b.n	8002a68 <__sfp+0x1c>
 8002ab4:	2104      	movs	r1, #4
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	f7ff ff62 	bl	8002980 <__sfmoreglue>
 8002abc:	4604      	mov	r4, r0
 8002abe:	6030      	str	r0, [r6, #0]
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	d1d5      	bne.n	8002a70 <__sfp+0x24>
 8002ac4:	f7ff ff78 	bl	80029b8 <__sfp_lock_release>
 8002ac8:	230c      	movs	r3, #12
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	e7ee      	b.n	8002aac <__sfp+0x60>
 8002ace:	bf00      	nop
 8002ad0:	08003814 	.word	0x08003814
 8002ad4:	ffff0001 	.word	0xffff0001

08002ad8 <_fwalk_reent>:
 8002ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002adc:	4606      	mov	r6, r0
 8002ade:	4688      	mov	r8, r1
 8002ae0:	2700      	movs	r7, #0
 8002ae2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002ae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002aea:	f1b9 0901 	subs.w	r9, r9, #1
 8002aee:	d505      	bpl.n	8002afc <_fwalk_reent+0x24>
 8002af0:	6824      	ldr	r4, [r4, #0]
 8002af2:	2c00      	cmp	r4, #0
 8002af4:	d1f7      	bne.n	8002ae6 <_fwalk_reent+0xe>
 8002af6:	4638      	mov	r0, r7
 8002af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002afc:	89ab      	ldrh	r3, [r5, #12]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d907      	bls.n	8002b12 <_fwalk_reent+0x3a>
 8002b02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b06:	3301      	adds	r3, #1
 8002b08:	d003      	beq.n	8002b12 <_fwalk_reent+0x3a>
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	4630      	mov	r0, r6
 8002b0e:	47c0      	blx	r8
 8002b10:	4307      	orrs	r7, r0
 8002b12:	3568      	adds	r5, #104	; 0x68
 8002b14:	e7e9      	b.n	8002aea <_fwalk_reent+0x12>

08002b16 <__retarget_lock_init_recursive>:
 8002b16:	4770      	bx	lr

08002b18 <__retarget_lock_acquire_recursive>:
 8002b18:	4770      	bx	lr

08002b1a <__retarget_lock_release_recursive>:
 8002b1a:	4770      	bx	lr

08002b1c <_malloc_r>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	1ccd      	adds	r5, r1, #3
 8002b20:	f025 0503 	bic.w	r5, r5, #3
 8002b24:	3508      	adds	r5, #8
 8002b26:	2d0c      	cmp	r5, #12
 8002b28:	bf38      	it	cc
 8002b2a:	250c      	movcc	r5, #12
 8002b2c:	2d00      	cmp	r5, #0
 8002b2e:	4606      	mov	r6, r0
 8002b30:	db01      	blt.n	8002b36 <_malloc_r+0x1a>
 8002b32:	42a9      	cmp	r1, r5
 8002b34:	d903      	bls.n	8002b3e <_malloc_r+0x22>
 8002b36:	230c      	movs	r3, #12
 8002b38:	6033      	str	r3, [r6, #0]
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b3e:	f000 fdb1 	bl	80036a4 <__malloc_lock>
 8002b42:	4921      	ldr	r1, [pc, #132]	; (8002bc8 <_malloc_r+0xac>)
 8002b44:	680a      	ldr	r2, [r1, #0]
 8002b46:	4614      	mov	r4, r2
 8002b48:	b99c      	cbnz	r4, 8002b72 <_malloc_r+0x56>
 8002b4a:	4f20      	ldr	r7, [pc, #128]	; (8002bcc <_malloc_r+0xb0>)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	b923      	cbnz	r3, 8002b5a <_malloc_r+0x3e>
 8002b50:	4621      	mov	r1, r4
 8002b52:	4630      	mov	r0, r6
 8002b54:	f000 fb2a 	bl	80031ac <_sbrk_r>
 8002b58:	6038      	str	r0, [r7, #0]
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	4630      	mov	r0, r6
 8002b5e:	f000 fb25 	bl	80031ac <_sbrk_r>
 8002b62:	1c43      	adds	r3, r0, #1
 8002b64:	d123      	bne.n	8002bae <_malloc_r+0x92>
 8002b66:	230c      	movs	r3, #12
 8002b68:	4630      	mov	r0, r6
 8002b6a:	6033      	str	r3, [r6, #0]
 8002b6c:	f000 fda0 	bl	80036b0 <__malloc_unlock>
 8002b70:	e7e3      	b.n	8002b3a <_malloc_r+0x1e>
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	1b5b      	subs	r3, r3, r5
 8002b76:	d417      	bmi.n	8002ba8 <_malloc_r+0x8c>
 8002b78:	2b0b      	cmp	r3, #11
 8002b7a:	d903      	bls.n	8002b84 <_malloc_r+0x68>
 8002b7c:	6023      	str	r3, [r4, #0]
 8002b7e:	441c      	add	r4, r3
 8002b80:	6025      	str	r5, [r4, #0]
 8002b82:	e004      	b.n	8002b8e <_malloc_r+0x72>
 8002b84:	6863      	ldr	r3, [r4, #4]
 8002b86:	42a2      	cmp	r2, r4
 8002b88:	bf0c      	ite	eq
 8002b8a:	600b      	streq	r3, [r1, #0]
 8002b8c:	6053      	strne	r3, [r2, #4]
 8002b8e:	4630      	mov	r0, r6
 8002b90:	f000 fd8e 	bl	80036b0 <__malloc_unlock>
 8002b94:	f104 000b 	add.w	r0, r4, #11
 8002b98:	1d23      	adds	r3, r4, #4
 8002b9a:	f020 0007 	bic.w	r0, r0, #7
 8002b9e:	1ac2      	subs	r2, r0, r3
 8002ba0:	d0cc      	beq.n	8002b3c <_malloc_r+0x20>
 8002ba2:	1a1b      	subs	r3, r3, r0
 8002ba4:	50a3      	str	r3, [r4, r2]
 8002ba6:	e7c9      	b.n	8002b3c <_malloc_r+0x20>
 8002ba8:	4622      	mov	r2, r4
 8002baa:	6864      	ldr	r4, [r4, #4]
 8002bac:	e7cc      	b.n	8002b48 <_malloc_r+0x2c>
 8002bae:	1cc4      	adds	r4, r0, #3
 8002bb0:	f024 0403 	bic.w	r4, r4, #3
 8002bb4:	42a0      	cmp	r0, r4
 8002bb6:	d0e3      	beq.n	8002b80 <_malloc_r+0x64>
 8002bb8:	1a21      	subs	r1, r4, r0
 8002bba:	4630      	mov	r0, r6
 8002bbc:	f000 faf6 	bl	80031ac <_sbrk_r>
 8002bc0:	3001      	adds	r0, #1
 8002bc2:	d1dd      	bne.n	8002b80 <_malloc_r+0x64>
 8002bc4:	e7cf      	b.n	8002b66 <_malloc_r+0x4a>
 8002bc6:	bf00      	nop
 8002bc8:	20000114 	.word	0x20000114
 8002bcc:	20000118 	.word	0x20000118

08002bd0 <__sfputc_r>:
 8002bd0:	6893      	ldr	r3, [r2, #8]
 8002bd2:	b410      	push	{r4}
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	6093      	str	r3, [r2, #8]
 8002bda:	da07      	bge.n	8002bec <__sfputc_r+0x1c>
 8002bdc:	6994      	ldr	r4, [r2, #24]
 8002bde:	42a3      	cmp	r3, r4
 8002be0:	db01      	blt.n	8002be6 <__sfputc_r+0x16>
 8002be2:	290a      	cmp	r1, #10
 8002be4:	d102      	bne.n	8002bec <__sfputc_r+0x1c>
 8002be6:	bc10      	pop	{r4}
 8002be8:	f000 bb34 	b.w	8003254 <__swbuf_r>
 8002bec:	6813      	ldr	r3, [r2, #0]
 8002bee:	1c58      	adds	r0, r3, #1
 8002bf0:	6010      	str	r0, [r2, #0]
 8002bf2:	7019      	strb	r1, [r3, #0]
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	bc10      	pop	{r4}
 8002bf8:	4770      	bx	lr

08002bfa <__sfputs_r>:
 8002bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfc:	4606      	mov	r6, r0
 8002bfe:	460f      	mov	r7, r1
 8002c00:	4614      	mov	r4, r2
 8002c02:	18d5      	adds	r5, r2, r3
 8002c04:	42ac      	cmp	r4, r5
 8002c06:	d101      	bne.n	8002c0c <__sfputs_r+0x12>
 8002c08:	2000      	movs	r0, #0
 8002c0a:	e007      	b.n	8002c1c <__sfputs_r+0x22>
 8002c0c:	463a      	mov	r2, r7
 8002c0e:	4630      	mov	r0, r6
 8002c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c14:	f7ff ffdc 	bl	8002bd0 <__sfputc_r>
 8002c18:	1c43      	adds	r3, r0, #1
 8002c1a:	d1f3      	bne.n	8002c04 <__sfputs_r+0xa>
 8002c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c20 <_vfiprintf_r>:
 8002c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c24:	460d      	mov	r5, r1
 8002c26:	4614      	mov	r4, r2
 8002c28:	4698      	mov	r8, r3
 8002c2a:	4606      	mov	r6, r0
 8002c2c:	b09d      	sub	sp, #116	; 0x74
 8002c2e:	b118      	cbz	r0, 8002c38 <_vfiprintf_r+0x18>
 8002c30:	6983      	ldr	r3, [r0, #24]
 8002c32:	b90b      	cbnz	r3, 8002c38 <_vfiprintf_r+0x18>
 8002c34:	f7ff fed2 	bl	80029dc <__sinit>
 8002c38:	4b89      	ldr	r3, [pc, #548]	; (8002e60 <_vfiprintf_r+0x240>)
 8002c3a:	429d      	cmp	r5, r3
 8002c3c:	d11b      	bne.n	8002c76 <_vfiprintf_r+0x56>
 8002c3e:	6875      	ldr	r5, [r6, #4]
 8002c40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c42:	07d9      	lsls	r1, r3, #31
 8002c44:	d405      	bmi.n	8002c52 <_vfiprintf_r+0x32>
 8002c46:	89ab      	ldrh	r3, [r5, #12]
 8002c48:	059a      	lsls	r2, r3, #22
 8002c4a:	d402      	bmi.n	8002c52 <_vfiprintf_r+0x32>
 8002c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c4e:	f7ff ff63 	bl	8002b18 <__retarget_lock_acquire_recursive>
 8002c52:	89ab      	ldrh	r3, [r5, #12]
 8002c54:	071b      	lsls	r3, r3, #28
 8002c56:	d501      	bpl.n	8002c5c <_vfiprintf_r+0x3c>
 8002c58:	692b      	ldr	r3, [r5, #16]
 8002c5a:	b9eb      	cbnz	r3, 8002c98 <_vfiprintf_r+0x78>
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	4630      	mov	r0, r6
 8002c60:	f000 fb5c 	bl	800331c <__swsetup_r>
 8002c64:	b1c0      	cbz	r0, 8002c98 <_vfiprintf_r+0x78>
 8002c66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c68:	07dc      	lsls	r4, r3, #31
 8002c6a:	d50e      	bpl.n	8002c8a <_vfiprintf_r+0x6a>
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	b01d      	add	sp, #116	; 0x74
 8002c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c76:	4b7b      	ldr	r3, [pc, #492]	; (8002e64 <_vfiprintf_r+0x244>)
 8002c78:	429d      	cmp	r5, r3
 8002c7a:	d101      	bne.n	8002c80 <_vfiprintf_r+0x60>
 8002c7c:	68b5      	ldr	r5, [r6, #8]
 8002c7e:	e7df      	b.n	8002c40 <_vfiprintf_r+0x20>
 8002c80:	4b79      	ldr	r3, [pc, #484]	; (8002e68 <_vfiprintf_r+0x248>)
 8002c82:	429d      	cmp	r5, r3
 8002c84:	bf08      	it	eq
 8002c86:	68f5      	ldreq	r5, [r6, #12]
 8002c88:	e7da      	b.n	8002c40 <_vfiprintf_r+0x20>
 8002c8a:	89ab      	ldrh	r3, [r5, #12]
 8002c8c:	0598      	lsls	r0, r3, #22
 8002c8e:	d4ed      	bmi.n	8002c6c <_vfiprintf_r+0x4c>
 8002c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c92:	f7ff ff42 	bl	8002b1a <__retarget_lock_release_recursive>
 8002c96:	e7e9      	b.n	8002c6c <_vfiprintf_r+0x4c>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ca2:	2330      	movs	r3, #48	; 0x30
 8002ca4:	f04f 0901 	mov.w	r9, #1
 8002ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002e6c <_vfiprintf_r+0x24c>
 8002cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	469a      	mov	sl, r3
 8002cb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cbc:	b10a      	cbz	r2, 8002cc2 <_vfiprintf_r+0xa2>
 8002cbe:	2a25      	cmp	r2, #37	; 0x25
 8002cc0:	d1f9      	bne.n	8002cb6 <_vfiprintf_r+0x96>
 8002cc2:	ebba 0b04 	subs.w	fp, sl, r4
 8002cc6:	d00b      	beq.n	8002ce0 <_vfiprintf_r+0xc0>
 8002cc8:	465b      	mov	r3, fp
 8002cca:	4622      	mov	r2, r4
 8002ccc:	4629      	mov	r1, r5
 8002cce:	4630      	mov	r0, r6
 8002cd0:	f7ff ff93 	bl	8002bfa <__sfputs_r>
 8002cd4:	3001      	adds	r0, #1
 8002cd6:	f000 80aa 	beq.w	8002e2e <_vfiprintf_r+0x20e>
 8002cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cdc:	445a      	add	r2, fp
 8002cde:	9209      	str	r2, [sp, #36]	; 0x24
 8002ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80a2 	beq.w	8002e2e <_vfiprintf_r+0x20e>
 8002cea:	2300      	movs	r3, #0
 8002cec:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cf4:	f10a 0a01 	add.w	sl, sl, #1
 8002cf8:	9304      	str	r3, [sp, #16]
 8002cfa:	9307      	str	r3, [sp, #28]
 8002cfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d00:	931a      	str	r3, [sp, #104]	; 0x68
 8002d02:	4654      	mov	r4, sl
 8002d04:	2205      	movs	r2, #5
 8002d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d0a:	4858      	ldr	r0, [pc, #352]	; (8002e6c <_vfiprintf_r+0x24c>)
 8002d0c:	f000 fcbc 	bl	8003688 <memchr>
 8002d10:	9a04      	ldr	r2, [sp, #16]
 8002d12:	b9d8      	cbnz	r0, 8002d4c <_vfiprintf_r+0x12c>
 8002d14:	06d1      	lsls	r1, r2, #27
 8002d16:	bf44      	itt	mi
 8002d18:	2320      	movmi	r3, #32
 8002d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d1e:	0713      	lsls	r3, r2, #28
 8002d20:	bf44      	itt	mi
 8002d22:	232b      	movmi	r3, #43	; 0x2b
 8002d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d28:	f89a 3000 	ldrb.w	r3, [sl]
 8002d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d2e:	d015      	beq.n	8002d5c <_vfiprintf_r+0x13c>
 8002d30:	4654      	mov	r4, sl
 8002d32:	2000      	movs	r0, #0
 8002d34:	f04f 0c0a 	mov.w	ip, #10
 8002d38:	9a07      	ldr	r2, [sp, #28]
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d40:	3b30      	subs	r3, #48	; 0x30
 8002d42:	2b09      	cmp	r3, #9
 8002d44:	d94e      	bls.n	8002de4 <_vfiprintf_r+0x1c4>
 8002d46:	b1b0      	cbz	r0, 8002d76 <_vfiprintf_r+0x156>
 8002d48:	9207      	str	r2, [sp, #28]
 8002d4a:	e014      	b.n	8002d76 <_vfiprintf_r+0x156>
 8002d4c:	eba0 0308 	sub.w	r3, r0, r8
 8002d50:	fa09 f303 	lsl.w	r3, r9, r3
 8002d54:	4313      	orrs	r3, r2
 8002d56:	46a2      	mov	sl, r4
 8002d58:	9304      	str	r3, [sp, #16]
 8002d5a:	e7d2      	b.n	8002d02 <_vfiprintf_r+0xe2>
 8002d5c:	9b03      	ldr	r3, [sp, #12]
 8002d5e:	1d19      	adds	r1, r3, #4
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	9103      	str	r1, [sp, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bfbb      	ittet	lt
 8002d68:	425b      	neglt	r3, r3
 8002d6a:	f042 0202 	orrlt.w	r2, r2, #2
 8002d6e:	9307      	strge	r3, [sp, #28]
 8002d70:	9307      	strlt	r3, [sp, #28]
 8002d72:	bfb8      	it	lt
 8002d74:	9204      	strlt	r2, [sp, #16]
 8002d76:	7823      	ldrb	r3, [r4, #0]
 8002d78:	2b2e      	cmp	r3, #46	; 0x2e
 8002d7a:	d10c      	bne.n	8002d96 <_vfiprintf_r+0x176>
 8002d7c:	7863      	ldrb	r3, [r4, #1]
 8002d7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d80:	d135      	bne.n	8002dee <_vfiprintf_r+0x1ce>
 8002d82:	9b03      	ldr	r3, [sp, #12]
 8002d84:	3402      	adds	r4, #2
 8002d86:	1d1a      	adds	r2, r3, #4
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	9203      	str	r2, [sp, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bfb8      	it	lt
 8002d90:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d94:	9305      	str	r3, [sp, #20]
 8002d96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002e7c <_vfiprintf_r+0x25c>
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	4650      	mov	r0, sl
 8002d9e:	7821      	ldrb	r1, [r4, #0]
 8002da0:	f000 fc72 	bl	8003688 <memchr>
 8002da4:	b140      	cbz	r0, 8002db8 <_vfiprintf_r+0x198>
 8002da6:	2340      	movs	r3, #64	; 0x40
 8002da8:	eba0 000a 	sub.w	r0, r0, sl
 8002dac:	fa03 f000 	lsl.w	r0, r3, r0
 8002db0:	9b04      	ldr	r3, [sp, #16]
 8002db2:	3401      	adds	r4, #1
 8002db4:	4303      	orrs	r3, r0
 8002db6:	9304      	str	r3, [sp, #16]
 8002db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dbc:	2206      	movs	r2, #6
 8002dbe:	482c      	ldr	r0, [pc, #176]	; (8002e70 <_vfiprintf_r+0x250>)
 8002dc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dc4:	f000 fc60 	bl	8003688 <memchr>
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d03f      	beq.n	8002e4c <_vfiprintf_r+0x22c>
 8002dcc:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <_vfiprintf_r+0x254>)
 8002dce:	bb1b      	cbnz	r3, 8002e18 <_vfiprintf_r+0x1f8>
 8002dd0:	9b03      	ldr	r3, [sp, #12]
 8002dd2:	3307      	adds	r3, #7
 8002dd4:	f023 0307 	bic.w	r3, r3, #7
 8002dd8:	3308      	adds	r3, #8
 8002dda:	9303      	str	r3, [sp, #12]
 8002ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dde:	443b      	add	r3, r7
 8002de0:	9309      	str	r3, [sp, #36]	; 0x24
 8002de2:	e767      	b.n	8002cb4 <_vfiprintf_r+0x94>
 8002de4:	460c      	mov	r4, r1
 8002de6:	2001      	movs	r0, #1
 8002de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dec:	e7a5      	b.n	8002d3a <_vfiprintf_r+0x11a>
 8002dee:	2300      	movs	r3, #0
 8002df0:	f04f 0c0a 	mov.w	ip, #10
 8002df4:	4619      	mov	r1, r3
 8002df6:	3401      	adds	r4, #1
 8002df8:	9305      	str	r3, [sp, #20]
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e00:	3a30      	subs	r2, #48	; 0x30
 8002e02:	2a09      	cmp	r2, #9
 8002e04:	d903      	bls.n	8002e0e <_vfiprintf_r+0x1ee>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0c5      	beq.n	8002d96 <_vfiprintf_r+0x176>
 8002e0a:	9105      	str	r1, [sp, #20]
 8002e0c:	e7c3      	b.n	8002d96 <_vfiprintf_r+0x176>
 8002e0e:	4604      	mov	r4, r0
 8002e10:	2301      	movs	r3, #1
 8002e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e16:	e7f0      	b.n	8002dfa <_vfiprintf_r+0x1da>
 8002e18:	ab03      	add	r3, sp, #12
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	462a      	mov	r2, r5
 8002e1e:	4630      	mov	r0, r6
 8002e20:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <_vfiprintf_r+0x258>)
 8002e22:	a904      	add	r1, sp, #16
 8002e24:	f3af 8000 	nop.w
 8002e28:	4607      	mov	r7, r0
 8002e2a:	1c78      	adds	r0, r7, #1
 8002e2c:	d1d6      	bne.n	8002ddc <_vfiprintf_r+0x1bc>
 8002e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e30:	07d9      	lsls	r1, r3, #31
 8002e32:	d405      	bmi.n	8002e40 <_vfiprintf_r+0x220>
 8002e34:	89ab      	ldrh	r3, [r5, #12]
 8002e36:	059a      	lsls	r2, r3, #22
 8002e38:	d402      	bmi.n	8002e40 <_vfiprintf_r+0x220>
 8002e3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e3c:	f7ff fe6d 	bl	8002b1a <__retarget_lock_release_recursive>
 8002e40:	89ab      	ldrh	r3, [r5, #12]
 8002e42:	065b      	lsls	r3, r3, #25
 8002e44:	f53f af12 	bmi.w	8002c6c <_vfiprintf_r+0x4c>
 8002e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e4a:	e711      	b.n	8002c70 <_vfiprintf_r+0x50>
 8002e4c:	ab03      	add	r3, sp, #12
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	462a      	mov	r2, r5
 8002e52:	4630      	mov	r0, r6
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <_vfiprintf_r+0x258>)
 8002e56:	a904      	add	r1, sp, #16
 8002e58:	f000 f882 	bl	8002f60 <_printf_i>
 8002e5c:	e7e4      	b.n	8002e28 <_vfiprintf_r+0x208>
 8002e5e:	bf00      	nop
 8002e60:	08003838 	.word	0x08003838
 8002e64:	08003858 	.word	0x08003858
 8002e68:	08003818 	.word	0x08003818
 8002e6c:	08003878 	.word	0x08003878
 8002e70:	08003882 	.word	0x08003882
 8002e74:	00000000 	.word	0x00000000
 8002e78:	08002bfb 	.word	0x08002bfb
 8002e7c:	0800387e 	.word	0x0800387e

08002e80 <_printf_common>:
 8002e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e84:	4616      	mov	r6, r2
 8002e86:	4699      	mov	r9, r3
 8002e88:	688a      	ldr	r2, [r1, #8]
 8002e8a:	690b      	ldr	r3, [r1, #16]
 8002e8c:	4607      	mov	r7, r0
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	bfb8      	it	lt
 8002e92:	4613      	movlt	r3, r2
 8002e94:	6033      	str	r3, [r6, #0]
 8002e96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ea0:	b10a      	cbz	r2, 8002ea6 <_printf_common+0x26>
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	6033      	str	r3, [r6, #0]
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	0699      	lsls	r1, r3, #26
 8002eaa:	bf42      	ittt	mi
 8002eac:	6833      	ldrmi	r3, [r6, #0]
 8002eae:	3302      	addmi	r3, #2
 8002eb0:	6033      	strmi	r3, [r6, #0]
 8002eb2:	6825      	ldr	r5, [r4, #0]
 8002eb4:	f015 0506 	ands.w	r5, r5, #6
 8002eb8:	d106      	bne.n	8002ec8 <_printf_common+0x48>
 8002eba:	f104 0a19 	add.w	sl, r4, #25
 8002ebe:	68e3      	ldr	r3, [r4, #12]
 8002ec0:	6832      	ldr	r2, [r6, #0]
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	42ab      	cmp	r3, r5
 8002ec6:	dc28      	bgt.n	8002f1a <_printf_common+0x9a>
 8002ec8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ecc:	1e13      	subs	r3, r2, #0
 8002ece:	6822      	ldr	r2, [r4, #0]
 8002ed0:	bf18      	it	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	0692      	lsls	r2, r2, #26
 8002ed6:	d42d      	bmi.n	8002f34 <_printf_common+0xb4>
 8002ed8:	4649      	mov	r1, r9
 8002eda:	4638      	mov	r0, r7
 8002edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ee0:	47c0      	blx	r8
 8002ee2:	3001      	adds	r0, #1
 8002ee4:	d020      	beq.n	8002f28 <_printf_common+0xa8>
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	68e5      	ldr	r5, [r4, #12]
 8002eea:	f003 0306 	and.w	r3, r3, #6
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	bf18      	it	ne
 8002ef2:	2500      	movne	r5, #0
 8002ef4:	6832      	ldr	r2, [r6, #0]
 8002ef6:	f04f 0600 	mov.w	r6, #0
 8002efa:	68a3      	ldr	r3, [r4, #8]
 8002efc:	bf08      	it	eq
 8002efe:	1aad      	subeq	r5, r5, r2
 8002f00:	6922      	ldr	r2, [r4, #16]
 8002f02:	bf08      	it	eq
 8002f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	bfc4      	itt	gt
 8002f0c:	1a9b      	subgt	r3, r3, r2
 8002f0e:	18ed      	addgt	r5, r5, r3
 8002f10:	341a      	adds	r4, #26
 8002f12:	42b5      	cmp	r5, r6
 8002f14:	d11a      	bne.n	8002f4c <_printf_common+0xcc>
 8002f16:	2000      	movs	r0, #0
 8002f18:	e008      	b.n	8002f2c <_printf_common+0xac>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	4652      	mov	r2, sl
 8002f1e:	4649      	mov	r1, r9
 8002f20:	4638      	mov	r0, r7
 8002f22:	47c0      	blx	r8
 8002f24:	3001      	adds	r0, #1
 8002f26:	d103      	bne.n	8002f30 <_printf_common+0xb0>
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f30:	3501      	adds	r5, #1
 8002f32:	e7c4      	b.n	8002ebe <_printf_common+0x3e>
 8002f34:	2030      	movs	r0, #48	; 0x30
 8002f36:	18e1      	adds	r1, r4, r3
 8002f38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f42:	4422      	add	r2, r4
 8002f44:	3302      	adds	r3, #2
 8002f46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f4a:	e7c5      	b.n	8002ed8 <_printf_common+0x58>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	4622      	mov	r2, r4
 8002f50:	4649      	mov	r1, r9
 8002f52:	4638      	mov	r0, r7
 8002f54:	47c0      	blx	r8
 8002f56:	3001      	adds	r0, #1
 8002f58:	d0e6      	beq.n	8002f28 <_printf_common+0xa8>
 8002f5a:	3601      	adds	r6, #1
 8002f5c:	e7d9      	b.n	8002f12 <_printf_common+0x92>
	...

08002f60 <_printf_i>:
 8002f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f64:	460c      	mov	r4, r1
 8002f66:	7e27      	ldrb	r7, [r4, #24]
 8002f68:	4691      	mov	r9, r2
 8002f6a:	2f78      	cmp	r7, #120	; 0x78
 8002f6c:	4680      	mov	r8, r0
 8002f6e:	469a      	mov	sl, r3
 8002f70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f76:	d807      	bhi.n	8002f88 <_printf_i+0x28>
 8002f78:	2f62      	cmp	r7, #98	; 0x62
 8002f7a:	d80a      	bhi.n	8002f92 <_printf_i+0x32>
 8002f7c:	2f00      	cmp	r7, #0
 8002f7e:	f000 80d9 	beq.w	8003134 <_printf_i+0x1d4>
 8002f82:	2f58      	cmp	r7, #88	; 0x58
 8002f84:	f000 80a4 	beq.w	80030d0 <_printf_i+0x170>
 8002f88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f90:	e03a      	b.n	8003008 <_printf_i+0xa8>
 8002f92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f96:	2b15      	cmp	r3, #21
 8002f98:	d8f6      	bhi.n	8002f88 <_printf_i+0x28>
 8002f9a:	a001      	add	r0, pc, #4	; (adr r0, 8002fa0 <_printf_i+0x40>)
 8002f9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002fa0:	08002ff9 	.word	0x08002ff9
 8002fa4:	0800300d 	.word	0x0800300d
 8002fa8:	08002f89 	.word	0x08002f89
 8002fac:	08002f89 	.word	0x08002f89
 8002fb0:	08002f89 	.word	0x08002f89
 8002fb4:	08002f89 	.word	0x08002f89
 8002fb8:	0800300d 	.word	0x0800300d
 8002fbc:	08002f89 	.word	0x08002f89
 8002fc0:	08002f89 	.word	0x08002f89
 8002fc4:	08002f89 	.word	0x08002f89
 8002fc8:	08002f89 	.word	0x08002f89
 8002fcc:	0800311b 	.word	0x0800311b
 8002fd0:	0800303d 	.word	0x0800303d
 8002fd4:	080030fd 	.word	0x080030fd
 8002fd8:	08002f89 	.word	0x08002f89
 8002fdc:	08002f89 	.word	0x08002f89
 8002fe0:	0800313d 	.word	0x0800313d
 8002fe4:	08002f89 	.word	0x08002f89
 8002fe8:	0800303d 	.word	0x0800303d
 8002fec:	08002f89 	.word	0x08002f89
 8002ff0:	08002f89 	.word	0x08002f89
 8002ff4:	08003105 	.word	0x08003105
 8002ff8:	680b      	ldr	r3, [r1, #0]
 8002ffa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ffe:	1d1a      	adds	r2, r3, #4
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	600a      	str	r2, [r1, #0]
 8003004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003008:	2301      	movs	r3, #1
 800300a:	e0a4      	b.n	8003156 <_printf_i+0x1f6>
 800300c:	6825      	ldr	r5, [r4, #0]
 800300e:	6808      	ldr	r0, [r1, #0]
 8003010:	062e      	lsls	r6, r5, #24
 8003012:	f100 0304 	add.w	r3, r0, #4
 8003016:	d50a      	bpl.n	800302e <_printf_i+0xce>
 8003018:	6805      	ldr	r5, [r0, #0]
 800301a:	600b      	str	r3, [r1, #0]
 800301c:	2d00      	cmp	r5, #0
 800301e:	da03      	bge.n	8003028 <_printf_i+0xc8>
 8003020:	232d      	movs	r3, #45	; 0x2d
 8003022:	426d      	negs	r5, r5
 8003024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003028:	230a      	movs	r3, #10
 800302a:	485e      	ldr	r0, [pc, #376]	; (80031a4 <_printf_i+0x244>)
 800302c:	e019      	b.n	8003062 <_printf_i+0x102>
 800302e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003032:	6805      	ldr	r5, [r0, #0]
 8003034:	600b      	str	r3, [r1, #0]
 8003036:	bf18      	it	ne
 8003038:	b22d      	sxthne	r5, r5
 800303a:	e7ef      	b.n	800301c <_printf_i+0xbc>
 800303c:	680b      	ldr	r3, [r1, #0]
 800303e:	6825      	ldr	r5, [r4, #0]
 8003040:	1d18      	adds	r0, r3, #4
 8003042:	6008      	str	r0, [r1, #0]
 8003044:	0628      	lsls	r0, r5, #24
 8003046:	d501      	bpl.n	800304c <_printf_i+0xec>
 8003048:	681d      	ldr	r5, [r3, #0]
 800304a:	e002      	b.n	8003052 <_printf_i+0xf2>
 800304c:	0669      	lsls	r1, r5, #25
 800304e:	d5fb      	bpl.n	8003048 <_printf_i+0xe8>
 8003050:	881d      	ldrh	r5, [r3, #0]
 8003052:	2f6f      	cmp	r7, #111	; 0x6f
 8003054:	bf0c      	ite	eq
 8003056:	2308      	moveq	r3, #8
 8003058:	230a      	movne	r3, #10
 800305a:	4852      	ldr	r0, [pc, #328]	; (80031a4 <_printf_i+0x244>)
 800305c:	2100      	movs	r1, #0
 800305e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003062:	6866      	ldr	r6, [r4, #4]
 8003064:	2e00      	cmp	r6, #0
 8003066:	bfa8      	it	ge
 8003068:	6821      	ldrge	r1, [r4, #0]
 800306a:	60a6      	str	r6, [r4, #8]
 800306c:	bfa4      	itt	ge
 800306e:	f021 0104 	bicge.w	r1, r1, #4
 8003072:	6021      	strge	r1, [r4, #0]
 8003074:	b90d      	cbnz	r5, 800307a <_printf_i+0x11a>
 8003076:	2e00      	cmp	r6, #0
 8003078:	d04d      	beq.n	8003116 <_printf_i+0x1b6>
 800307a:	4616      	mov	r6, r2
 800307c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003080:	fb03 5711 	mls	r7, r3, r1, r5
 8003084:	5dc7      	ldrb	r7, [r0, r7]
 8003086:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800308a:	462f      	mov	r7, r5
 800308c:	42bb      	cmp	r3, r7
 800308e:	460d      	mov	r5, r1
 8003090:	d9f4      	bls.n	800307c <_printf_i+0x11c>
 8003092:	2b08      	cmp	r3, #8
 8003094:	d10b      	bne.n	80030ae <_printf_i+0x14e>
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	07df      	lsls	r7, r3, #31
 800309a:	d508      	bpl.n	80030ae <_printf_i+0x14e>
 800309c:	6923      	ldr	r3, [r4, #16]
 800309e:	6861      	ldr	r1, [r4, #4]
 80030a0:	4299      	cmp	r1, r3
 80030a2:	bfde      	ittt	le
 80030a4:	2330      	movle	r3, #48	; 0x30
 80030a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030ae:	1b92      	subs	r2, r2, r6
 80030b0:	6122      	str	r2, [r4, #16]
 80030b2:	464b      	mov	r3, r9
 80030b4:	4621      	mov	r1, r4
 80030b6:	4640      	mov	r0, r8
 80030b8:	f8cd a000 	str.w	sl, [sp]
 80030bc:	aa03      	add	r2, sp, #12
 80030be:	f7ff fedf 	bl	8002e80 <_printf_common>
 80030c2:	3001      	adds	r0, #1
 80030c4:	d14c      	bne.n	8003160 <_printf_i+0x200>
 80030c6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ca:	b004      	add	sp, #16
 80030cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d0:	4834      	ldr	r0, [pc, #208]	; (80031a4 <_printf_i+0x244>)
 80030d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80030d6:	680e      	ldr	r6, [r1, #0]
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	f856 5b04 	ldr.w	r5, [r6], #4
 80030de:	061f      	lsls	r7, r3, #24
 80030e0:	600e      	str	r6, [r1, #0]
 80030e2:	d514      	bpl.n	800310e <_printf_i+0x1ae>
 80030e4:	07d9      	lsls	r1, r3, #31
 80030e6:	bf44      	itt	mi
 80030e8:	f043 0320 	orrmi.w	r3, r3, #32
 80030ec:	6023      	strmi	r3, [r4, #0]
 80030ee:	b91d      	cbnz	r5, 80030f8 <_printf_i+0x198>
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	f023 0320 	bic.w	r3, r3, #32
 80030f6:	6023      	str	r3, [r4, #0]
 80030f8:	2310      	movs	r3, #16
 80030fa:	e7af      	b.n	800305c <_printf_i+0xfc>
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	f043 0320 	orr.w	r3, r3, #32
 8003102:	6023      	str	r3, [r4, #0]
 8003104:	2378      	movs	r3, #120	; 0x78
 8003106:	4828      	ldr	r0, [pc, #160]	; (80031a8 <_printf_i+0x248>)
 8003108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800310c:	e7e3      	b.n	80030d6 <_printf_i+0x176>
 800310e:	065e      	lsls	r6, r3, #25
 8003110:	bf48      	it	mi
 8003112:	b2ad      	uxthmi	r5, r5
 8003114:	e7e6      	b.n	80030e4 <_printf_i+0x184>
 8003116:	4616      	mov	r6, r2
 8003118:	e7bb      	b.n	8003092 <_printf_i+0x132>
 800311a:	680b      	ldr	r3, [r1, #0]
 800311c:	6826      	ldr	r6, [r4, #0]
 800311e:	1d1d      	adds	r5, r3, #4
 8003120:	6960      	ldr	r0, [r4, #20]
 8003122:	600d      	str	r5, [r1, #0]
 8003124:	0635      	lsls	r5, r6, #24
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	d501      	bpl.n	800312e <_printf_i+0x1ce>
 800312a:	6018      	str	r0, [r3, #0]
 800312c:	e002      	b.n	8003134 <_printf_i+0x1d4>
 800312e:	0671      	lsls	r1, r6, #25
 8003130:	d5fb      	bpl.n	800312a <_printf_i+0x1ca>
 8003132:	8018      	strh	r0, [r3, #0]
 8003134:	2300      	movs	r3, #0
 8003136:	4616      	mov	r6, r2
 8003138:	6123      	str	r3, [r4, #16]
 800313a:	e7ba      	b.n	80030b2 <_printf_i+0x152>
 800313c:	680b      	ldr	r3, [r1, #0]
 800313e:	1d1a      	adds	r2, r3, #4
 8003140:	600a      	str	r2, [r1, #0]
 8003142:	681e      	ldr	r6, [r3, #0]
 8003144:	2100      	movs	r1, #0
 8003146:	4630      	mov	r0, r6
 8003148:	6862      	ldr	r2, [r4, #4]
 800314a:	f000 fa9d 	bl	8003688 <memchr>
 800314e:	b108      	cbz	r0, 8003154 <_printf_i+0x1f4>
 8003150:	1b80      	subs	r0, r0, r6
 8003152:	6060      	str	r0, [r4, #4]
 8003154:	6863      	ldr	r3, [r4, #4]
 8003156:	6123      	str	r3, [r4, #16]
 8003158:	2300      	movs	r3, #0
 800315a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800315e:	e7a8      	b.n	80030b2 <_printf_i+0x152>
 8003160:	4632      	mov	r2, r6
 8003162:	4649      	mov	r1, r9
 8003164:	4640      	mov	r0, r8
 8003166:	6923      	ldr	r3, [r4, #16]
 8003168:	47d0      	blx	sl
 800316a:	3001      	adds	r0, #1
 800316c:	d0ab      	beq.n	80030c6 <_printf_i+0x166>
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	079b      	lsls	r3, r3, #30
 8003172:	d413      	bmi.n	800319c <_printf_i+0x23c>
 8003174:	68e0      	ldr	r0, [r4, #12]
 8003176:	9b03      	ldr	r3, [sp, #12]
 8003178:	4298      	cmp	r0, r3
 800317a:	bfb8      	it	lt
 800317c:	4618      	movlt	r0, r3
 800317e:	e7a4      	b.n	80030ca <_printf_i+0x16a>
 8003180:	2301      	movs	r3, #1
 8003182:	4632      	mov	r2, r6
 8003184:	4649      	mov	r1, r9
 8003186:	4640      	mov	r0, r8
 8003188:	47d0      	blx	sl
 800318a:	3001      	adds	r0, #1
 800318c:	d09b      	beq.n	80030c6 <_printf_i+0x166>
 800318e:	3501      	adds	r5, #1
 8003190:	68e3      	ldr	r3, [r4, #12]
 8003192:	9903      	ldr	r1, [sp, #12]
 8003194:	1a5b      	subs	r3, r3, r1
 8003196:	42ab      	cmp	r3, r5
 8003198:	dcf2      	bgt.n	8003180 <_printf_i+0x220>
 800319a:	e7eb      	b.n	8003174 <_printf_i+0x214>
 800319c:	2500      	movs	r5, #0
 800319e:	f104 0619 	add.w	r6, r4, #25
 80031a2:	e7f5      	b.n	8003190 <_printf_i+0x230>
 80031a4:	08003889 	.word	0x08003889
 80031a8:	0800389a 	.word	0x0800389a

080031ac <_sbrk_r>:
 80031ac:	b538      	push	{r3, r4, r5, lr}
 80031ae:	2300      	movs	r3, #0
 80031b0:	4d05      	ldr	r5, [pc, #20]	; (80031c8 <_sbrk_r+0x1c>)
 80031b2:	4604      	mov	r4, r0
 80031b4:	4608      	mov	r0, r1
 80031b6:	602b      	str	r3, [r5, #0]
 80031b8:	f7fd fe28 	bl	8000e0c <_sbrk>
 80031bc:	1c43      	adds	r3, r0, #1
 80031be:	d102      	bne.n	80031c6 <_sbrk_r+0x1a>
 80031c0:	682b      	ldr	r3, [r5, #0]
 80031c2:	b103      	cbz	r3, 80031c6 <_sbrk_r+0x1a>
 80031c4:	6023      	str	r3, [r4, #0]
 80031c6:	bd38      	pop	{r3, r4, r5, pc}
 80031c8:	200001b8 	.word	0x200001b8

080031cc <__sread>:
 80031cc:	b510      	push	{r4, lr}
 80031ce:	460c      	mov	r4, r1
 80031d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031d4:	f000 fabe 	bl	8003754 <_read_r>
 80031d8:	2800      	cmp	r0, #0
 80031da:	bfab      	itete	ge
 80031dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80031de:	89a3      	ldrhlt	r3, [r4, #12]
 80031e0:	181b      	addge	r3, r3, r0
 80031e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80031e6:	bfac      	ite	ge
 80031e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80031ea:	81a3      	strhlt	r3, [r4, #12]
 80031ec:	bd10      	pop	{r4, pc}

080031ee <__swrite>:
 80031ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f2:	461f      	mov	r7, r3
 80031f4:	898b      	ldrh	r3, [r1, #12]
 80031f6:	4605      	mov	r5, r0
 80031f8:	05db      	lsls	r3, r3, #23
 80031fa:	460c      	mov	r4, r1
 80031fc:	4616      	mov	r6, r2
 80031fe:	d505      	bpl.n	800320c <__swrite+0x1e>
 8003200:	2302      	movs	r3, #2
 8003202:	2200      	movs	r2, #0
 8003204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003208:	f000 f9c8 	bl	800359c <_lseek_r>
 800320c:	89a3      	ldrh	r3, [r4, #12]
 800320e:	4632      	mov	r2, r6
 8003210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003214:	81a3      	strh	r3, [r4, #12]
 8003216:	4628      	mov	r0, r5
 8003218:	463b      	mov	r3, r7
 800321a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800321e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003222:	f000 b869 	b.w	80032f8 <_write_r>

08003226 <__sseek>:
 8003226:	b510      	push	{r4, lr}
 8003228:	460c      	mov	r4, r1
 800322a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800322e:	f000 f9b5 	bl	800359c <_lseek_r>
 8003232:	1c43      	adds	r3, r0, #1
 8003234:	89a3      	ldrh	r3, [r4, #12]
 8003236:	bf15      	itete	ne
 8003238:	6560      	strne	r0, [r4, #84]	; 0x54
 800323a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800323e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003242:	81a3      	strheq	r3, [r4, #12]
 8003244:	bf18      	it	ne
 8003246:	81a3      	strhne	r3, [r4, #12]
 8003248:	bd10      	pop	{r4, pc}

0800324a <__sclose>:
 800324a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800324e:	f000 b8d3 	b.w	80033f8 <_close_r>
	...

08003254 <__swbuf_r>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	460e      	mov	r6, r1
 8003258:	4614      	mov	r4, r2
 800325a:	4605      	mov	r5, r0
 800325c:	b118      	cbz	r0, 8003266 <__swbuf_r+0x12>
 800325e:	6983      	ldr	r3, [r0, #24]
 8003260:	b90b      	cbnz	r3, 8003266 <__swbuf_r+0x12>
 8003262:	f7ff fbbb 	bl	80029dc <__sinit>
 8003266:	4b21      	ldr	r3, [pc, #132]	; (80032ec <__swbuf_r+0x98>)
 8003268:	429c      	cmp	r4, r3
 800326a:	d12b      	bne.n	80032c4 <__swbuf_r+0x70>
 800326c:	686c      	ldr	r4, [r5, #4]
 800326e:	69a3      	ldr	r3, [r4, #24]
 8003270:	60a3      	str	r3, [r4, #8]
 8003272:	89a3      	ldrh	r3, [r4, #12]
 8003274:	071a      	lsls	r2, r3, #28
 8003276:	d52f      	bpl.n	80032d8 <__swbuf_r+0x84>
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	b36b      	cbz	r3, 80032d8 <__swbuf_r+0x84>
 800327c:	6923      	ldr	r3, [r4, #16]
 800327e:	6820      	ldr	r0, [r4, #0]
 8003280:	b2f6      	uxtb	r6, r6
 8003282:	1ac0      	subs	r0, r0, r3
 8003284:	6963      	ldr	r3, [r4, #20]
 8003286:	4637      	mov	r7, r6
 8003288:	4283      	cmp	r3, r0
 800328a:	dc04      	bgt.n	8003296 <__swbuf_r+0x42>
 800328c:	4621      	mov	r1, r4
 800328e:	4628      	mov	r0, r5
 8003290:	f000 f948 	bl	8003524 <_fflush_r>
 8003294:	bb30      	cbnz	r0, 80032e4 <__swbuf_r+0x90>
 8003296:	68a3      	ldr	r3, [r4, #8]
 8003298:	3001      	adds	r0, #1
 800329a:	3b01      	subs	r3, #1
 800329c:	60a3      	str	r3, [r4, #8]
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	6022      	str	r2, [r4, #0]
 80032a4:	701e      	strb	r6, [r3, #0]
 80032a6:	6963      	ldr	r3, [r4, #20]
 80032a8:	4283      	cmp	r3, r0
 80032aa:	d004      	beq.n	80032b6 <__swbuf_r+0x62>
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	07db      	lsls	r3, r3, #31
 80032b0:	d506      	bpl.n	80032c0 <__swbuf_r+0x6c>
 80032b2:	2e0a      	cmp	r6, #10
 80032b4:	d104      	bne.n	80032c0 <__swbuf_r+0x6c>
 80032b6:	4621      	mov	r1, r4
 80032b8:	4628      	mov	r0, r5
 80032ba:	f000 f933 	bl	8003524 <_fflush_r>
 80032be:	b988      	cbnz	r0, 80032e4 <__swbuf_r+0x90>
 80032c0:	4638      	mov	r0, r7
 80032c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <__swbuf_r+0x9c>)
 80032c6:	429c      	cmp	r4, r3
 80032c8:	d101      	bne.n	80032ce <__swbuf_r+0x7a>
 80032ca:	68ac      	ldr	r4, [r5, #8]
 80032cc:	e7cf      	b.n	800326e <__swbuf_r+0x1a>
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <__swbuf_r+0xa0>)
 80032d0:	429c      	cmp	r4, r3
 80032d2:	bf08      	it	eq
 80032d4:	68ec      	ldreq	r4, [r5, #12]
 80032d6:	e7ca      	b.n	800326e <__swbuf_r+0x1a>
 80032d8:	4621      	mov	r1, r4
 80032da:	4628      	mov	r0, r5
 80032dc:	f000 f81e 	bl	800331c <__swsetup_r>
 80032e0:	2800      	cmp	r0, #0
 80032e2:	d0cb      	beq.n	800327c <__swbuf_r+0x28>
 80032e4:	f04f 37ff 	mov.w	r7, #4294967295
 80032e8:	e7ea      	b.n	80032c0 <__swbuf_r+0x6c>
 80032ea:	bf00      	nop
 80032ec:	08003838 	.word	0x08003838
 80032f0:	08003858 	.word	0x08003858
 80032f4:	08003818 	.word	0x08003818

080032f8 <_write_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	4604      	mov	r4, r0
 80032fc:	4608      	mov	r0, r1
 80032fe:	4611      	mov	r1, r2
 8003300:	2200      	movs	r2, #0
 8003302:	4d05      	ldr	r5, [pc, #20]	; (8003318 <_write_r+0x20>)
 8003304:	602a      	str	r2, [r5, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	f7fd fbca 	bl	8000aa0 <_write>
 800330c:	1c43      	adds	r3, r0, #1
 800330e:	d102      	bne.n	8003316 <_write_r+0x1e>
 8003310:	682b      	ldr	r3, [r5, #0]
 8003312:	b103      	cbz	r3, 8003316 <_write_r+0x1e>
 8003314:	6023      	str	r3, [r4, #0]
 8003316:	bd38      	pop	{r3, r4, r5, pc}
 8003318:	200001b8 	.word	0x200001b8

0800331c <__swsetup_r>:
 800331c:	4b32      	ldr	r3, [pc, #200]	; (80033e8 <__swsetup_r+0xcc>)
 800331e:	b570      	push	{r4, r5, r6, lr}
 8003320:	681d      	ldr	r5, [r3, #0]
 8003322:	4606      	mov	r6, r0
 8003324:	460c      	mov	r4, r1
 8003326:	b125      	cbz	r5, 8003332 <__swsetup_r+0x16>
 8003328:	69ab      	ldr	r3, [r5, #24]
 800332a:	b913      	cbnz	r3, 8003332 <__swsetup_r+0x16>
 800332c:	4628      	mov	r0, r5
 800332e:	f7ff fb55 	bl	80029dc <__sinit>
 8003332:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <__swsetup_r+0xd0>)
 8003334:	429c      	cmp	r4, r3
 8003336:	d10f      	bne.n	8003358 <__swsetup_r+0x3c>
 8003338:	686c      	ldr	r4, [r5, #4]
 800333a:	89a3      	ldrh	r3, [r4, #12]
 800333c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003340:	0719      	lsls	r1, r3, #28
 8003342:	d42c      	bmi.n	800339e <__swsetup_r+0x82>
 8003344:	06dd      	lsls	r5, r3, #27
 8003346:	d411      	bmi.n	800336c <__swsetup_r+0x50>
 8003348:	2309      	movs	r3, #9
 800334a:	6033      	str	r3, [r6, #0]
 800334c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003350:	f04f 30ff 	mov.w	r0, #4294967295
 8003354:	81a3      	strh	r3, [r4, #12]
 8003356:	e03e      	b.n	80033d6 <__swsetup_r+0xba>
 8003358:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <__swsetup_r+0xd4>)
 800335a:	429c      	cmp	r4, r3
 800335c:	d101      	bne.n	8003362 <__swsetup_r+0x46>
 800335e:	68ac      	ldr	r4, [r5, #8]
 8003360:	e7eb      	b.n	800333a <__swsetup_r+0x1e>
 8003362:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <__swsetup_r+0xd8>)
 8003364:	429c      	cmp	r4, r3
 8003366:	bf08      	it	eq
 8003368:	68ec      	ldreq	r4, [r5, #12]
 800336a:	e7e6      	b.n	800333a <__swsetup_r+0x1e>
 800336c:	0758      	lsls	r0, r3, #29
 800336e:	d512      	bpl.n	8003396 <__swsetup_r+0x7a>
 8003370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003372:	b141      	cbz	r1, 8003386 <__swsetup_r+0x6a>
 8003374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003378:	4299      	cmp	r1, r3
 800337a:	d002      	beq.n	8003382 <__swsetup_r+0x66>
 800337c:	4630      	mov	r0, r6
 800337e:	f000 f99d 	bl	80036bc <_free_r>
 8003382:	2300      	movs	r3, #0
 8003384:	6363      	str	r3, [r4, #52]	; 0x34
 8003386:	89a3      	ldrh	r3, [r4, #12]
 8003388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800338c:	81a3      	strh	r3, [r4, #12]
 800338e:	2300      	movs	r3, #0
 8003390:	6063      	str	r3, [r4, #4]
 8003392:	6923      	ldr	r3, [r4, #16]
 8003394:	6023      	str	r3, [r4, #0]
 8003396:	89a3      	ldrh	r3, [r4, #12]
 8003398:	f043 0308 	orr.w	r3, r3, #8
 800339c:	81a3      	strh	r3, [r4, #12]
 800339e:	6923      	ldr	r3, [r4, #16]
 80033a0:	b94b      	cbnz	r3, 80033b6 <__swsetup_r+0x9a>
 80033a2:	89a3      	ldrh	r3, [r4, #12]
 80033a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80033a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ac:	d003      	beq.n	80033b6 <__swsetup_r+0x9a>
 80033ae:	4621      	mov	r1, r4
 80033b0:	4630      	mov	r0, r6
 80033b2:	f000 f929 	bl	8003608 <__smakebuf_r>
 80033b6:	89a0      	ldrh	r0, [r4, #12]
 80033b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033bc:	f010 0301 	ands.w	r3, r0, #1
 80033c0:	d00a      	beq.n	80033d8 <__swsetup_r+0xbc>
 80033c2:	2300      	movs	r3, #0
 80033c4:	60a3      	str	r3, [r4, #8]
 80033c6:	6963      	ldr	r3, [r4, #20]
 80033c8:	425b      	negs	r3, r3
 80033ca:	61a3      	str	r3, [r4, #24]
 80033cc:	6923      	ldr	r3, [r4, #16]
 80033ce:	b943      	cbnz	r3, 80033e2 <__swsetup_r+0xc6>
 80033d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80033d4:	d1ba      	bne.n	800334c <__swsetup_r+0x30>
 80033d6:	bd70      	pop	{r4, r5, r6, pc}
 80033d8:	0781      	lsls	r1, r0, #30
 80033da:	bf58      	it	pl
 80033dc:	6963      	ldrpl	r3, [r4, #20]
 80033de:	60a3      	str	r3, [r4, #8]
 80033e0:	e7f4      	b.n	80033cc <__swsetup_r+0xb0>
 80033e2:	2000      	movs	r0, #0
 80033e4:	e7f7      	b.n	80033d6 <__swsetup_r+0xba>
 80033e6:	bf00      	nop
 80033e8:	20000038 	.word	0x20000038
 80033ec:	08003838 	.word	0x08003838
 80033f0:	08003858 	.word	0x08003858
 80033f4:	08003818 	.word	0x08003818

080033f8 <_close_r>:
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	2300      	movs	r3, #0
 80033fc:	4d05      	ldr	r5, [pc, #20]	; (8003414 <_close_r+0x1c>)
 80033fe:	4604      	mov	r4, r0
 8003400:	4608      	mov	r0, r1
 8003402:	602b      	str	r3, [r5, #0]
 8003404:	f7fd fcd1 	bl	8000daa <_close>
 8003408:	1c43      	adds	r3, r0, #1
 800340a:	d102      	bne.n	8003412 <_close_r+0x1a>
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	b103      	cbz	r3, 8003412 <_close_r+0x1a>
 8003410:	6023      	str	r3, [r4, #0]
 8003412:	bd38      	pop	{r3, r4, r5, pc}
 8003414:	200001b8 	.word	0x200001b8

08003418 <__sflush_r>:
 8003418:	898a      	ldrh	r2, [r1, #12]
 800341a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800341e:	4605      	mov	r5, r0
 8003420:	0710      	lsls	r0, r2, #28
 8003422:	460c      	mov	r4, r1
 8003424:	d458      	bmi.n	80034d8 <__sflush_r+0xc0>
 8003426:	684b      	ldr	r3, [r1, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	dc05      	bgt.n	8003438 <__sflush_r+0x20>
 800342c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	dc02      	bgt.n	8003438 <__sflush_r+0x20>
 8003432:	2000      	movs	r0, #0
 8003434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800343a:	2e00      	cmp	r6, #0
 800343c:	d0f9      	beq.n	8003432 <__sflush_r+0x1a>
 800343e:	2300      	movs	r3, #0
 8003440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003444:	682f      	ldr	r7, [r5, #0]
 8003446:	602b      	str	r3, [r5, #0]
 8003448:	d032      	beq.n	80034b0 <__sflush_r+0x98>
 800344a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800344c:	89a3      	ldrh	r3, [r4, #12]
 800344e:	075a      	lsls	r2, r3, #29
 8003450:	d505      	bpl.n	800345e <__sflush_r+0x46>
 8003452:	6863      	ldr	r3, [r4, #4]
 8003454:	1ac0      	subs	r0, r0, r3
 8003456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003458:	b10b      	cbz	r3, 800345e <__sflush_r+0x46>
 800345a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800345c:	1ac0      	subs	r0, r0, r3
 800345e:	2300      	movs	r3, #0
 8003460:	4602      	mov	r2, r0
 8003462:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003464:	4628      	mov	r0, r5
 8003466:	6a21      	ldr	r1, [r4, #32]
 8003468:	47b0      	blx	r6
 800346a:	1c43      	adds	r3, r0, #1
 800346c:	89a3      	ldrh	r3, [r4, #12]
 800346e:	d106      	bne.n	800347e <__sflush_r+0x66>
 8003470:	6829      	ldr	r1, [r5, #0]
 8003472:	291d      	cmp	r1, #29
 8003474:	d82c      	bhi.n	80034d0 <__sflush_r+0xb8>
 8003476:	4a2a      	ldr	r2, [pc, #168]	; (8003520 <__sflush_r+0x108>)
 8003478:	40ca      	lsrs	r2, r1
 800347a:	07d6      	lsls	r6, r2, #31
 800347c:	d528      	bpl.n	80034d0 <__sflush_r+0xb8>
 800347e:	2200      	movs	r2, #0
 8003480:	6062      	str	r2, [r4, #4]
 8003482:	6922      	ldr	r2, [r4, #16]
 8003484:	04d9      	lsls	r1, r3, #19
 8003486:	6022      	str	r2, [r4, #0]
 8003488:	d504      	bpl.n	8003494 <__sflush_r+0x7c>
 800348a:	1c42      	adds	r2, r0, #1
 800348c:	d101      	bne.n	8003492 <__sflush_r+0x7a>
 800348e:	682b      	ldr	r3, [r5, #0]
 8003490:	b903      	cbnz	r3, 8003494 <__sflush_r+0x7c>
 8003492:	6560      	str	r0, [r4, #84]	; 0x54
 8003494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003496:	602f      	str	r7, [r5, #0]
 8003498:	2900      	cmp	r1, #0
 800349a:	d0ca      	beq.n	8003432 <__sflush_r+0x1a>
 800349c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034a0:	4299      	cmp	r1, r3
 80034a2:	d002      	beq.n	80034aa <__sflush_r+0x92>
 80034a4:	4628      	mov	r0, r5
 80034a6:	f000 f909 	bl	80036bc <_free_r>
 80034aa:	2000      	movs	r0, #0
 80034ac:	6360      	str	r0, [r4, #52]	; 0x34
 80034ae:	e7c1      	b.n	8003434 <__sflush_r+0x1c>
 80034b0:	6a21      	ldr	r1, [r4, #32]
 80034b2:	2301      	movs	r3, #1
 80034b4:	4628      	mov	r0, r5
 80034b6:	47b0      	blx	r6
 80034b8:	1c41      	adds	r1, r0, #1
 80034ba:	d1c7      	bne.n	800344c <__sflush_r+0x34>
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0c4      	beq.n	800344c <__sflush_r+0x34>
 80034c2:	2b1d      	cmp	r3, #29
 80034c4:	d001      	beq.n	80034ca <__sflush_r+0xb2>
 80034c6:	2b16      	cmp	r3, #22
 80034c8:	d101      	bne.n	80034ce <__sflush_r+0xb6>
 80034ca:	602f      	str	r7, [r5, #0]
 80034cc:	e7b1      	b.n	8003432 <__sflush_r+0x1a>
 80034ce:	89a3      	ldrh	r3, [r4, #12]
 80034d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034d4:	81a3      	strh	r3, [r4, #12]
 80034d6:	e7ad      	b.n	8003434 <__sflush_r+0x1c>
 80034d8:	690f      	ldr	r7, [r1, #16]
 80034da:	2f00      	cmp	r7, #0
 80034dc:	d0a9      	beq.n	8003432 <__sflush_r+0x1a>
 80034de:	0793      	lsls	r3, r2, #30
 80034e0:	bf18      	it	ne
 80034e2:	2300      	movne	r3, #0
 80034e4:	680e      	ldr	r6, [r1, #0]
 80034e6:	bf08      	it	eq
 80034e8:	694b      	ldreq	r3, [r1, #20]
 80034ea:	eba6 0807 	sub.w	r8, r6, r7
 80034ee:	600f      	str	r7, [r1, #0]
 80034f0:	608b      	str	r3, [r1, #8]
 80034f2:	f1b8 0f00 	cmp.w	r8, #0
 80034f6:	dd9c      	ble.n	8003432 <__sflush_r+0x1a>
 80034f8:	4643      	mov	r3, r8
 80034fa:	463a      	mov	r2, r7
 80034fc:	4628      	mov	r0, r5
 80034fe:	6a21      	ldr	r1, [r4, #32]
 8003500:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003502:	47b0      	blx	r6
 8003504:	2800      	cmp	r0, #0
 8003506:	dc06      	bgt.n	8003516 <__sflush_r+0xfe>
 8003508:	89a3      	ldrh	r3, [r4, #12]
 800350a:	f04f 30ff 	mov.w	r0, #4294967295
 800350e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003512:	81a3      	strh	r3, [r4, #12]
 8003514:	e78e      	b.n	8003434 <__sflush_r+0x1c>
 8003516:	4407      	add	r7, r0
 8003518:	eba8 0800 	sub.w	r8, r8, r0
 800351c:	e7e9      	b.n	80034f2 <__sflush_r+0xda>
 800351e:	bf00      	nop
 8003520:	20400001 	.word	0x20400001

08003524 <_fflush_r>:
 8003524:	b538      	push	{r3, r4, r5, lr}
 8003526:	690b      	ldr	r3, [r1, #16]
 8003528:	4605      	mov	r5, r0
 800352a:	460c      	mov	r4, r1
 800352c:	b913      	cbnz	r3, 8003534 <_fflush_r+0x10>
 800352e:	2500      	movs	r5, #0
 8003530:	4628      	mov	r0, r5
 8003532:	bd38      	pop	{r3, r4, r5, pc}
 8003534:	b118      	cbz	r0, 800353e <_fflush_r+0x1a>
 8003536:	6983      	ldr	r3, [r0, #24]
 8003538:	b90b      	cbnz	r3, 800353e <_fflush_r+0x1a>
 800353a:	f7ff fa4f 	bl	80029dc <__sinit>
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <_fflush_r+0x6c>)
 8003540:	429c      	cmp	r4, r3
 8003542:	d11b      	bne.n	800357c <_fflush_r+0x58>
 8003544:	686c      	ldr	r4, [r5, #4]
 8003546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0ef      	beq.n	800352e <_fflush_r+0xa>
 800354e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003550:	07d0      	lsls	r0, r2, #31
 8003552:	d404      	bmi.n	800355e <_fflush_r+0x3a>
 8003554:	0599      	lsls	r1, r3, #22
 8003556:	d402      	bmi.n	800355e <_fflush_r+0x3a>
 8003558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800355a:	f7ff fadd 	bl	8002b18 <__retarget_lock_acquire_recursive>
 800355e:	4628      	mov	r0, r5
 8003560:	4621      	mov	r1, r4
 8003562:	f7ff ff59 	bl	8003418 <__sflush_r>
 8003566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003568:	4605      	mov	r5, r0
 800356a:	07da      	lsls	r2, r3, #31
 800356c:	d4e0      	bmi.n	8003530 <_fflush_r+0xc>
 800356e:	89a3      	ldrh	r3, [r4, #12]
 8003570:	059b      	lsls	r3, r3, #22
 8003572:	d4dd      	bmi.n	8003530 <_fflush_r+0xc>
 8003574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003576:	f7ff fad0 	bl	8002b1a <__retarget_lock_release_recursive>
 800357a:	e7d9      	b.n	8003530 <_fflush_r+0xc>
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <_fflush_r+0x70>)
 800357e:	429c      	cmp	r4, r3
 8003580:	d101      	bne.n	8003586 <_fflush_r+0x62>
 8003582:	68ac      	ldr	r4, [r5, #8]
 8003584:	e7df      	b.n	8003546 <_fflush_r+0x22>
 8003586:	4b04      	ldr	r3, [pc, #16]	; (8003598 <_fflush_r+0x74>)
 8003588:	429c      	cmp	r4, r3
 800358a:	bf08      	it	eq
 800358c:	68ec      	ldreq	r4, [r5, #12]
 800358e:	e7da      	b.n	8003546 <_fflush_r+0x22>
 8003590:	08003838 	.word	0x08003838
 8003594:	08003858 	.word	0x08003858
 8003598:	08003818 	.word	0x08003818

0800359c <_lseek_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	4604      	mov	r4, r0
 80035a0:	4608      	mov	r0, r1
 80035a2:	4611      	mov	r1, r2
 80035a4:	2200      	movs	r2, #0
 80035a6:	4d05      	ldr	r5, [pc, #20]	; (80035bc <_lseek_r+0x20>)
 80035a8:	602a      	str	r2, [r5, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f7fd fc21 	bl	8000df2 <_lseek>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	d102      	bne.n	80035ba <_lseek_r+0x1e>
 80035b4:	682b      	ldr	r3, [r5, #0]
 80035b6:	b103      	cbz	r3, 80035ba <_lseek_r+0x1e>
 80035b8:	6023      	str	r3, [r4, #0]
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	200001b8 	.word	0x200001b8

080035c0 <__swhatbuf_r>:
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	460e      	mov	r6, r1
 80035c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035c8:	4614      	mov	r4, r2
 80035ca:	2900      	cmp	r1, #0
 80035cc:	461d      	mov	r5, r3
 80035ce:	b096      	sub	sp, #88	; 0x58
 80035d0:	da07      	bge.n	80035e2 <__swhatbuf_r+0x22>
 80035d2:	2300      	movs	r3, #0
 80035d4:	602b      	str	r3, [r5, #0]
 80035d6:	89b3      	ldrh	r3, [r6, #12]
 80035d8:	061a      	lsls	r2, r3, #24
 80035da:	d410      	bmi.n	80035fe <__swhatbuf_r+0x3e>
 80035dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035e0:	e00e      	b.n	8003600 <__swhatbuf_r+0x40>
 80035e2:	466a      	mov	r2, sp
 80035e4:	f000 f8c8 	bl	8003778 <_fstat_r>
 80035e8:	2800      	cmp	r0, #0
 80035ea:	dbf2      	blt.n	80035d2 <__swhatbuf_r+0x12>
 80035ec:	9a01      	ldr	r2, [sp, #4]
 80035ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80035f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80035f6:	425a      	negs	r2, r3
 80035f8:	415a      	adcs	r2, r3
 80035fa:	602a      	str	r2, [r5, #0]
 80035fc:	e7ee      	b.n	80035dc <__swhatbuf_r+0x1c>
 80035fe:	2340      	movs	r3, #64	; 0x40
 8003600:	2000      	movs	r0, #0
 8003602:	6023      	str	r3, [r4, #0]
 8003604:	b016      	add	sp, #88	; 0x58
 8003606:	bd70      	pop	{r4, r5, r6, pc}

08003608 <__smakebuf_r>:
 8003608:	898b      	ldrh	r3, [r1, #12]
 800360a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800360c:	079d      	lsls	r5, r3, #30
 800360e:	4606      	mov	r6, r0
 8003610:	460c      	mov	r4, r1
 8003612:	d507      	bpl.n	8003624 <__smakebuf_r+0x1c>
 8003614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003618:	6023      	str	r3, [r4, #0]
 800361a:	6123      	str	r3, [r4, #16]
 800361c:	2301      	movs	r3, #1
 800361e:	6163      	str	r3, [r4, #20]
 8003620:	b002      	add	sp, #8
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	466a      	mov	r2, sp
 8003626:	ab01      	add	r3, sp, #4
 8003628:	f7ff ffca 	bl	80035c0 <__swhatbuf_r>
 800362c:	9900      	ldr	r1, [sp, #0]
 800362e:	4605      	mov	r5, r0
 8003630:	4630      	mov	r0, r6
 8003632:	f7ff fa73 	bl	8002b1c <_malloc_r>
 8003636:	b948      	cbnz	r0, 800364c <__smakebuf_r+0x44>
 8003638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800363c:	059a      	lsls	r2, r3, #22
 800363e:	d4ef      	bmi.n	8003620 <__smakebuf_r+0x18>
 8003640:	f023 0303 	bic.w	r3, r3, #3
 8003644:	f043 0302 	orr.w	r3, r3, #2
 8003648:	81a3      	strh	r3, [r4, #12]
 800364a:	e7e3      	b.n	8003614 <__smakebuf_r+0xc>
 800364c:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <__smakebuf_r+0x7c>)
 800364e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003650:	89a3      	ldrh	r3, [r4, #12]
 8003652:	6020      	str	r0, [r4, #0]
 8003654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003658:	81a3      	strh	r3, [r4, #12]
 800365a:	9b00      	ldr	r3, [sp, #0]
 800365c:	6120      	str	r0, [r4, #16]
 800365e:	6163      	str	r3, [r4, #20]
 8003660:	9b01      	ldr	r3, [sp, #4]
 8003662:	b15b      	cbz	r3, 800367c <__smakebuf_r+0x74>
 8003664:	4630      	mov	r0, r6
 8003666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800366a:	f000 f897 	bl	800379c <_isatty_r>
 800366e:	b128      	cbz	r0, 800367c <__smakebuf_r+0x74>
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	81a3      	strh	r3, [r4, #12]
 800367c:	89a0      	ldrh	r0, [r4, #12]
 800367e:	4305      	orrs	r5, r0
 8003680:	81a5      	strh	r5, [r4, #12]
 8003682:	e7cd      	b.n	8003620 <__smakebuf_r+0x18>
 8003684:	08002975 	.word	0x08002975

08003688 <memchr>:
 8003688:	4603      	mov	r3, r0
 800368a:	b510      	push	{r4, lr}
 800368c:	b2c9      	uxtb	r1, r1
 800368e:	4402      	add	r2, r0
 8003690:	4293      	cmp	r3, r2
 8003692:	4618      	mov	r0, r3
 8003694:	d101      	bne.n	800369a <memchr+0x12>
 8003696:	2000      	movs	r0, #0
 8003698:	e003      	b.n	80036a2 <memchr+0x1a>
 800369a:	7804      	ldrb	r4, [r0, #0]
 800369c:	3301      	adds	r3, #1
 800369e:	428c      	cmp	r4, r1
 80036a0:	d1f6      	bne.n	8003690 <memchr+0x8>
 80036a2:	bd10      	pop	{r4, pc}

080036a4 <__malloc_lock>:
 80036a4:	4801      	ldr	r0, [pc, #4]	; (80036ac <__malloc_lock+0x8>)
 80036a6:	f7ff ba37 	b.w	8002b18 <__retarget_lock_acquire_recursive>
 80036aa:	bf00      	nop
 80036ac:	200001b0 	.word	0x200001b0

080036b0 <__malloc_unlock>:
 80036b0:	4801      	ldr	r0, [pc, #4]	; (80036b8 <__malloc_unlock+0x8>)
 80036b2:	f7ff ba32 	b.w	8002b1a <__retarget_lock_release_recursive>
 80036b6:	bf00      	nop
 80036b8:	200001b0 	.word	0x200001b0

080036bc <_free_r>:
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	4605      	mov	r5, r0
 80036c0:	2900      	cmp	r1, #0
 80036c2:	d043      	beq.n	800374c <_free_r+0x90>
 80036c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036c8:	1f0c      	subs	r4, r1, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bfb8      	it	lt
 80036ce:	18e4      	addlt	r4, r4, r3
 80036d0:	f7ff ffe8 	bl	80036a4 <__malloc_lock>
 80036d4:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <_free_r+0x94>)
 80036d6:	6813      	ldr	r3, [r2, #0]
 80036d8:	4610      	mov	r0, r2
 80036da:	b933      	cbnz	r3, 80036ea <_free_r+0x2e>
 80036dc:	6063      	str	r3, [r4, #4]
 80036de:	6014      	str	r4, [r2, #0]
 80036e0:	4628      	mov	r0, r5
 80036e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036e6:	f7ff bfe3 	b.w	80036b0 <__malloc_unlock>
 80036ea:	42a3      	cmp	r3, r4
 80036ec:	d90a      	bls.n	8003704 <_free_r+0x48>
 80036ee:	6821      	ldr	r1, [r4, #0]
 80036f0:	1862      	adds	r2, r4, r1
 80036f2:	4293      	cmp	r3, r2
 80036f4:	bf01      	itttt	eq
 80036f6:	681a      	ldreq	r2, [r3, #0]
 80036f8:	685b      	ldreq	r3, [r3, #4]
 80036fa:	1852      	addeq	r2, r2, r1
 80036fc:	6022      	streq	r2, [r4, #0]
 80036fe:	6063      	str	r3, [r4, #4]
 8003700:	6004      	str	r4, [r0, #0]
 8003702:	e7ed      	b.n	80036e0 <_free_r+0x24>
 8003704:	461a      	mov	r2, r3
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	b10b      	cbz	r3, 800370e <_free_r+0x52>
 800370a:	42a3      	cmp	r3, r4
 800370c:	d9fa      	bls.n	8003704 <_free_r+0x48>
 800370e:	6811      	ldr	r1, [r2, #0]
 8003710:	1850      	adds	r0, r2, r1
 8003712:	42a0      	cmp	r0, r4
 8003714:	d10b      	bne.n	800372e <_free_r+0x72>
 8003716:	6820      	ldr	r0, [r4, #0]
 8003718:	4401      	add	r1, r0
 800371a:	1850      	adds	r0, r2, r1
 800371c:	4283      	cmp	r3, r0
 800371e:	6011      	str	r1, [r2, #0]
 8003720:	d1de      	bne.n	80036e0 <_free_r+0x24>
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4401      	add	r1, r0
 8003728:	6011      	str	r1, [r2, #0]
 800372a:	6053      	str	r3, [r2, #4]
 800372c:	e7d8      	b.n	80036e0 <_free_r+0x24>
 800372e:	d902      	bls.n	8003736 <_free_r+0x7a>
 8003730:	230c      	movs	r3, #12
 8003732:	602b      	str	r3, [r5, #0]
 8003734:	e7d4      	b.n	80036e0 <_free_r+0x24>
 8003736:	6820      	ldr	r0, [r4, #0]
 8003738:	1821      	adds	r1, r4, r0
 800373a:	428b      	cmp	r3, r1
 800373c:	bf01      	itttt	eq
 800373e:	6819      	ldreq	r1, [r3, #0]
 8003740:	685b      	ldreq	r3, [r3, #4]
 8003742:	1809      	addeq	r1, r1, r0
 8003744:	6021      	streq	r1, [r4, #0]
 8003746:	6063      	str	r3, [r4, #4]
 8003748:	6054      	str	r4, [r2, #4]
 800374a:	e7c9      	b.n	80036e0 <_free_r+0x24>
 800374c:	bd38      	pop	{r3, r4, r5, pc}
 800374e:	bf00      	nop
 8003750:	20000114 	.word	0x20000114

08003754 <_read_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	4604      	mov	r4, r0
 8003758:	4608      	mov	r0, r1
 800375a:	4611      	mov	r1, r2
 800375c:	2200      	movs	r2, #0
 800375e:	4d05      	ldr	r5, [pc, #20]	; (8003774 <_read_r+0x20>)
 8003760:	602a      	str	r2, [r5, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	f7fd fb04 	bl	8000d70 <_read>
 8003768:	1c43      	adds	r3, r0, #1
 800376a:	d102      	bne.n	8003772 <_read_r+0x1e>
 800376c:	682b      	ldr	r3, [r5, #0]
 800376e:	b103      	cbz	r3, 8003772 <_read_r+0x1e>
 8003770:	6023      	str	r3, [r4, #0]
 8003772:	bd38      	pop	{r3, r4, r5, pc}
 8003774:	200001b8 	.word	0x200001b8

08003778 <_fstat_r>:
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	2300      	movs	r3, #0
 800377c:	4d06      	ldr	r5, [pc, #24]	; (8003798 <_fstat_r+0x20>)
 800377e:	4604      	mov	r4, r0
 8003780:	4608      	mov	r0, r1
 8003782:	4611      	mov	r1, r2
 8003784:	602b      	str	r3, [r5, #0]
 8003786:	f7fd fb1b 	bl	8000dc0 <_fstat>
 800378a:	1c43      	adds	r3, r0, #1
 800378c:	d102      	bne.n	8003794 <_fstat_r+0x1c>
 800378e:	682b      	ldr	r3, [r5, #0]
 8003790:	b103      	cbz	r3, 8003794 <_fstat_r+0x1c>
 8003792:	6023      	str	r3, [r4, #0]
 8003794:	bd38      	pop	{r3, r4, r5, pc}
 8003796:	bf00      	nop
 8003798:	200001b8 	.word	0x200001b8

0800379c <_isatty_r>:
 800379c:	b538      	push	{r3, r4, r5, lr}
 800379e:	2300      	movs	r3, #0
 80037a0:	4d05      	ldr	r5, [pc, #20]	; (80037b8 <_isatty_r+0x1c>)
 80037a2:	4604      	mov	r4, r0
 80037a4:	4608      	mov	r0, r1
 80037a6:	602b      	str	r3, [r5, #0]
 80037a8:	f7fd fb19 	bl	8000dde <_isatty>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d102      	bne.n	80037b6 <_isatty_r+0x1a>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	b103      	cbz	r3, 80037b6 <_isatty_r+0x1a>
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	200001b8 	.word	0x200001b8

080037bc <_init>:
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	bf00      	nop
 80037c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c2:	bc08      	pop	{r3}
 80037c4:	469e      	mov	lr, r3
 80037c6:	4770      	bx	lr

080037c8 <_fini>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	bf00      	nop
 80037cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ce:	bc08      	pop	{r3}
 80037d0:	469e      	mov	lr, r3
 80037d2:	4770      	bx	lr
