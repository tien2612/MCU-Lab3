
mcu_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08003708  08003708  00013708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e0  080037e0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  080037e0  080037e0  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037e0  080037e0  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080037e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200000a0  08003888  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003888  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df65  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254b  00000000  00000000  0002e02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00030580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019194  00000000  00000000  000312e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ef4b  00000000  00000000  0004a47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00089fbe  00000000  00000000  000593c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000e3385  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c38  00000000  00000000  000e33d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d20  00000000  00000000  000e4010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	080036f0 	.word	0x080036f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	080036f0 	.word	0x080036f0

0800014c <WhichButtonIsPressed>:
	BUTTON_PRESS_MORE_THAN_1S
};

enum ButtonState buttonState = BUTTON_RELEASED;

int WhichButtonIsPressed() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return button_mode_is_pressed;
 8000150:	2000      	movs	r0, #0
 8000152:	f000 f91d 	bl	8000390 <is_button_pressed>
 8000156:	4603      	mov	r3, r0
 8000158:	2b00      	cmp	r3, #0
 800015a:	d001      	beq.n	8000160 <WhichButtonIsPressed+0x14>
 800015c:	230a      	movs	r3, #10
 800015e:	e018      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(1)) return button_add_is_pressed;
 8000160:	2001      	movs	r0, #1
 8000162:	f000 f915 	bl	8000390 <is_button_pressed>
 8000166:	4603      	mov	r3, r0
 8000168:	2b00      	cmp	r3, #0
 800016a:	d001      	beq.n	8000170 <WhichButtonIsPressed+0x24>
 800016c:	230b      	movs	r3, #11
 800016e:	e010      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(2)) return button_confirm_is_pressed;
 8000170:	2002      	movs	r0, #2
 8000172:	f000 f90d 	bl	8000390 <is_button_pressed>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d001      	beq.n	8000180 <WhichButtonIsPressed+0x34>
 800017c:	230c      	movs	r3, #12
 800017e:	e008      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(3)) return button_reset_is_pressed;
 8000180:	2003      	movs	r0, #3
 8000182:	f000 f905 	bl	8000390 <is_button_pressed>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <WhichButtonIsPressed+0x44>
 800018c:	230d      	movs	r3, #13
 800018e:	e000      	b.n	8000192 <WhichButtonIsPressed+0x46>

	return 0; // none of these button is pressed
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}
	...

08000198 <fsm_for_input_processing>:
void fsm_for_input_processing() {
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	switch(buttonState) {
 800019c:	4b3a      	ldr	r3, [pc, #232]	; (8000288 <fsm_for_input_processing+0xf0>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b02      	cmp	r3, #2
 80001a2:	d05f      	beq.n	8000264 <fsm_for_input_processing+0xcc>
 80001a4:	2b02      	cmp	r3, #2
 80001a6:	dc67      	bgt.n	8000278 <fsm_for_input_processing+0xe0>
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d002      	beq.n	80001b2 <fsm_for_input_processing+0x1a>
 80001ac:	2b01      	cmp	r3, #1
 80001ae:	d045      	beq.n	800023c <fsm_for_input_processing+0xa4>
				buttonState = BUTTON_RELEASED;
			}
			// TODO
			break;
		default:
			break;
 80001b0:	e062      	b.n	8000278 <fsm_for_input_processing+0xe0>
			if (WhichButtonIsPressed()) {
 80001b2:	f7ff ffcb 	bl	800014c <WhichButtonIsPressed>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d03b      	beq.n	8000234 <fsm_for_input_processing+0x9c>
				buttonState = BUTTON_PRESSED;
 80001bc:	4b32      	ldr	r3, [pc, #200]	; (8000288 <fsm_for_input_processing+0xf0>)
 80001be:	2201      	movs	r2, #1
 80001c0:	701a      	strb	r2, [r3, #0]
				switch(WhichButtonIsPressed()) {
 80001c2:	f7ff ffc3 	bl	800014c <WhichButtonIsPressed>
 80001c6:	4603      	mov	r3, r0
 80001c8:	3b0a      	subs	r3, #10
 80001ca:	2b03      	cmp	r3, #3
 80001cc:	d82e      	bhi.n	800022c <fsm_for_input_processing+0x94>
 80001ce:	a201      	add	r2, pc, #4	; (adr r2, 80001d4 <fsm_for_input_processing+0x3c>)
 80001d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001d4:	080001e5 	.word	0x080001e5
 80001d8:	08000239 	.word	0x08000239
 80001dc:	08000239 	.word	0x08000239
 80001e0:	08000239 	.word	0x08000239
						switch(status) {
 80001e4:	4b29      	ldr	r3, [pc, #164]	; (800028c <fsm_for_input_processing+0xf4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	3b01      	subs	r3, #1
 80001ea:	2b03      	cmp	r3, #3
 80001ec:	d819      	bhi.n	8000222 <fsm_for_input_processing+0x8a>
 80001ee:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <fsm_for_input_processing+0x5c>)
 80001f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f4:	08000205 	.word	0x08000205
 80001f8:	0800020d 	.word	0x0800020d
 80001fc:	08000215 	.word	0x08000215
 8000200:	0800021d 	.word	0x0800021d
								status = RED_MODE;
 8000204:	4b21      	ldr	r3, [pc, #132]	; (800028c <fsm_for_input_processing+0xf4>)
 8000206:	2202      	movs	r2, #2
 8000208:	601a      	str	r2, [r3, #0]
								break;
 800020a:	e00b      	b.n	8000224 <fsm_for_input_processing+0x8c>
								status = AMBER_MODE;
 800020c:	4b1f      	ldr	r3, [pc, #124]	; (800028c <fsm_for_input_processing+0xf4>)
 800020e:	2203      	movs	r2, #3
 8000210:	601a      	str	r2, [r3, #0]
								break;
 8000212:	e007      	b.n	8000224 <fsm_for_input_processing+0x8c>
								status = GREEN_MODE;
 8000214:	4b1d      	ldr	r3, [pc, #116]	; (800028c <fsm_for_input_processing+0xf4>)
 8000216:	2204      	movs	r2, #4
 8000218:	601a      	str	r2, [r3, #0]
								break;
 800021a:	e003      	b.n	8000224 <fsm_for_input_processing+0x8c>
								status = NORMAL_MODE;
 800021c:	4b1b      	ldr	r3, [pc, #108]	; (800028c <fsm_for_input_processing+0xf4>)
 800021e:	2201      	movs	r2, #1
 8000220:	601a      	str	r2, [r3, #0]
								break;
 8000222:	bf00      	nop
						buttonState = BUTTON_PRESSED;
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <fsm_for_input_processing+0xf0>)
 8000226:	2201      	movs	r2, #1
 8000228:	701a      	strb	r2, [r3, #0]
						break;
 800022a:	e006      	b.n	800023a <fsm_for_input_processing+0xa2>
					default: buttonState = BUTTON_RELEASED;
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <fsm_for_input_processing+0xf0>)
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]
			break;
 8000232:	e026      	b.n	8000282 <fsm_for_input_processing+0xea>
			}
 8000234:	bf00      	nop
 8000236:	e024      	b.n	8000282 <fsm_for_input_processing+0xea>
						break;
 8000238:	bf00      	nop
			break;
 800023a:	e022      	b.n	8000282 <fsm_for_input_processing+0xea>
			if (!is_button_pressed(0)) {
 800023c:	2000      	movs	r0, #0
 800023e:	f000 f8a7 	bl	8000390 <is_button_pressed>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d103      	bne.n	8000250 <fsm_for_input_processing+0xb8>
				buttonState = BUTTON_RELEASED;
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <fsm_for_input_processing+0xf0>)
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
			break;
 800024e:	e015      	b.n	800027c <fsm_for_input_processing+0xe4>
				if (is_button_pressed_1s(0)) {
 8000250:	2000      	movs	r0, #0
 8000252:	f000 f8bf 	bl	80003d4 <is_button_pressed_1s>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d00f      	beq.n	800027c <fsm_for_input_processing+0xe4>
					buttonState = BUTTON_PRESS_MORE_THAN_1S;
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <fsm_for_input_processing+0xf0>)
 800025e:	2202      	movs	r2, #2
 8000260:	701a      	strb	r2, [r3, #0]
			break;
 8000262:	e00b      	b.n	800027c <fsm_for_input_processing+0xe4>
			if (!is_button_pressed(0)) {
 8000264:	2000      	movs	r0, #0
 8000266:	f000 f893 	bl	8000390 <is_button_pressed>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d107      	bne.n	8000280 <fsm_for_input_processing+0xe8>
				buttonState = BUTTON_RELEASED;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <fsm_for_input_processing+0xf0>)
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
			break;
 8000276:	e003      	b.n	8000280 <fsm_for_input_processing+0xe8>
			break;
 8000278:	bf00      	nop
 800027a:	e002      	b.n	8000282 <fsm_for_input_processing+0xea>
			break;
 800027c:	bf00      	nop
 800027e:	e000      	b.n	8000282 <fsm_for_input_processing+0xea>
			break;
 8000280:	bf00      	nop
	}
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	200000bc 	.word	0x200000bc
 800028c:	20000004 	.word	0x20000004

08000290 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e061      	b.n	8000360 <button_reading+0xd0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800029c:	4a34      	ldr	r2, [pc, #208]	; (8000370 <button_reading+0xe0>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4413      	add	r3, r2
 80002a2:	7819      	ldrb	r1, [r3, #0]
 80002a4:	4a33      	ldr	r2, [pc, #204]	; (8000374 <button_reading+0xe4>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4413      	add	r3, r2
 80002aa:	460a      	mov	r2, r1
 80002ac:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 80002ae:	4a32      	ldr	r2, [pc, #200]	; (8000378 <button_reading+0xe8>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b6:	4931      	ldr	r1, [pc, #196]	; (800037c <button_reading+0xec>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80002be:	4619      	mov	r1, r3
 80002c0:	4610      	mov	r0, r2
 80002c2:	f001 f885 	bl	80013d0 <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4619      	mov	r1, r3
 80002ca:	4a29      	ldr	r2, [pc, #164]	; (8000370 <button_reading+0xe0>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4413      	add	r3, r2
 80002d0:	460a      	mov	r2, r1
 80002d2:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 80002d4:	4a26      	ldr	r2, [pc, #152]	; (8000370 <button_reading+0xe0>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4413      	add	r3, r2
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	4925      	ldr	r1, [pc, #148]	; (8000374 <button_reading+0xe4>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	440b      	add	r3, r1
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d138      	bne.n	800035a <button_reading+0xca>
			//valid input, can read now
			buttonBufferPrev[i] = buttonBuffer[i];
 80002e8:	4a25      	ldr	r2, [pc, #148]	; (8000380 <button_reading+0xf0>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4413      	add	r3, r2
 80002ee:	7819      	ldrb	r1, [r3, #0]
 80002f0:	4a24      	ldr	r2, [pc, #144]	; (8000384 <button_reading+0xf4>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4413      	add	r3, r2
 80002f6:	460a      	mov	r2, r1
 80002f8:	701a      	strb	r2, [r3, #0]
			// chap nhan input
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80002fa:	4a1d      	ldr	r2, [pc, #116]	; (8000370 <button_reading+0xe0>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4413      	add	r3, r2
 8000300:	7819      	ldrb	r1, [r3, #0]
 8000302:	4a1f      	ldr	r2, [pc, #124]	; (8000380 <button_reading+0xf0>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4413      	add	r3, r2
 8000308:	460a      	mov	r2, r1
 800030a:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 800030c:	4a1c      	ldr	r2, [pc, #112]	; (8000380 <button_reading+0xf0>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4413      	add	r3, r2
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d116      	bne.n	8000346 <button_reading+0xb6>
				//toggle pin to validate
				//HAL_GPIO_TogglePin(BRESP_GPIO_Port, BRESP_Pin);
				//if a button is pressed , we start counting
				if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000318:	4a1b      	ldr	r2, [pc, #108]	; (8000388 <button_reading+0xf8>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000320:	2b63      	cmp	r3, #99	; 0x63
 8000322:	d80a      	bhi.n	800033a <button_reading+0xaa>
					counterForButtonPress1s[i]++;
 8000324:	4a18      	ldr	r2, [pc, #96]	; (8000388 <button_reading+0xf8>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800032c:	3301      	adds	r3, #1
 800032e:	b299      	uxth	r1, r3
 8000330:	4a15      	ldr	r2, [pc, #84]	; (8000388 <button_reading+0xf8>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000338:	e00f      	b.n	800035a <button_reading+0xca>
				}

				else {
					//the flag is turned on when 1 second has passed
					//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 800033a:	4a14      	ldr	r2, [pc, #80]	; (800038c <button_reading+0xfc>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4413      	add	r3, r2
 8000340:	2201      	movs	r2, #1
 8000342:	701a      	strb	r2, [r3, #0]
 8000344:	e009      	b.n	800035a <button_reading+0xca>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 8000346:	4a10      	ldr	r2, [pc, #64]	; (8000388 <button_reading+0xf8>)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2100      	movs	r1, #0
 800034c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000350:	4a0e      	ldr	r2, [pc, #56]	; (800038c <button_reading+0xfc>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4413      	add	r3, r2
 8000356:	2200      	movs	r2, #0
 8000358:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	3301      	adds	r3, #1
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2b03      	cmp	r3, #3
 8000364:	dd9a      	ble.n	800029c <button_reading+0xc>
			}
		}
	}
}
 8000366:	bf00      	nop
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	200000c8 	.word	0x200000c8
 8000374:	200000cc 	.word	0x200000cc
 8000378:	2000000c 	.word	0x2000000c
 800037c:	2000001c 	.word	0x2000001c
 8000380:	200000c0 	.word	0x200000c0
 8000384:	200000c4 	.word	0x200000c4
 8000388:	200000d4 	.word	0x200000d4
 800038c:	200000d0 	.word	0x200000d0

08000390 <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2b03      	cmp	r3, #3
 800039e:	d901      	bls.n	80003a4 <is_button_pressed+0x14>
 80003a0:	2300      	movs	r3, #0
 80003a2:	e00d      	b.n	80003c0 <is_button_pressed+0x30>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	4a09      	ldr	r2, [pc, #36]	; (80003cc <is_button_pressed+0x3c>)
 80003a8:	5cd3      	ldrb	r3, [r2, r3]
			&& buttonBufferPrev[index] == BUTTON_IS_RELEASED);
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d106      	bne.n	80003bc <is_button_pressed+0x2c>
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <is_button_pressed+0x40>)
 80003b2:	5cd3      	ldrb	r3, [r2, r3]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d101      	bne.n	80003bc <is_button_pressed+0x2c>
 80003b8:	2301      	movs	r3, #1
 80003ba:	e000      	b.n	80003be <is_button_pressed+0x2e>
 80003bc:	2300      	movs	r3, #0
 80003be:	b2db      	uxtb	r3, r3
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	200000c0 	.word	0x200000c0
 80003d0:	200000c4 	.word	0x200000c4

080003d4 <is_button_pressed_1s>:

// Check for button is pressed more than a second or not
unsigned char is_button_pressed_1s (unsigned char index ) {
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS ) return 0xff ;
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d901      	bls.n	80003e8 <is_button_pressed_1s+0x14>
 80003e4:	23ff      	movs	r3, #255	; 0xff
 80003e6:	e007      	b.n	80003f8 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	4a06      	ldr	r2, [pc, #24]	; (8000404 <is_button_pressed_1s+0x30>)
 80003ec:	5cd3      	ldrb	r3, [r2, r3]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	bf0c      	ite	eq
 80003f2:	2301      	moveq	r3, #1
 80003f4:	2300      	movne	r3, #0
 80003f6:	b2db      	uxtb	r3, r3
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	200000d0 	.word	0x200000d0

08000408 <update_buffer>:
#include "led7seg.h"
#include "global.h"
static uint8_t led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
static uint8_t led_buffer[4] = {0};

void update_buffer() {
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
	if (status > 10) {
 800040c:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <update_buffer+0xac>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2b0a      	cmp	r3, #10
 8000412:	dd1b      	ble.n	800044c <update_buffer+0x44>
		led_buffer[0] = status / 10;
 8000414:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <update_buffer+0xac>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a27      	ldr	r2, [pc, #156]	; (80004b8 <update_buffer+0xb0>)
 800041a:	fb82 1203 	smull	r1, r2, r2, r3
 800041e:	1092      	asrs	r2, r2, #2
 8000420:	17db      	asrs	r3, r3, #31
 8000422:	1ad3      	subs	r3, r2, r3
 8000424:	b2da      	uxtb	r2, r3
 8000426:	4b25      	ldr	r3, [pc, #148]	; (80004bc <update_buffer+0xb4>)
 8000428:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = status % 10;
 800042a:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <update_buffer+0xac>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <update_buffer+0xb0>)
 8000430:	fb83 1302 	smull	r1, r3, r3, r2
 8000434:	1099      	asrs	r1, r3, #2
 8000436:	17d3      	asrs	r3, r2, #31
 8000438:	1ac9      	subs	r1, r1, r3
 800043a:	460b      	mov	r3, r1
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	440b      	add	r3, r1
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	1ad1      	subs	r1, r2, r3
 8000444:	b2ca      	uxtb	r2, r1
 8000446:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <update_buffer+0xb4>)
 8000448:	705a      	strb	r2, [r3, #1]
 800044a:	e007      	b.n	800045c <update_buffer+0x54>
	} else {
		led_buffer[0] = 0;
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <update_buffer+0xb4>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = status;
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <update_buffer+0xac>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b18      	ldr	r3, [pc, #96]	; (80004bc <update_buffer+0xb4>)
 800045a:	705a      	strb	r2, [r3, #1]
	}

	if (light_time > 10) {
 800045c:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <update_buffer+0xb8>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b0a      	cmp	r3, #10
 8000462:	dd1b      	ble.n	800049c <update_buffer+0x94>
		led_buffer[2] = light_time / 10;
 8000464:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <update_buffer+0xb8>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a13      	ldr	r2, [pc, #76]	; (80004b8 <update_buffer+0xb0>)
 800046a:	fb82 1203 	smull	r1, r2, r2, r3
 800046e:	1092      	asrs	r2, r2, #2
 8000470:	17db      	asrs	r3, r3, #31
 8000472:	1ad3      	subs	r3, r2, r3
 8000474:	b2da      	uxtb	r2, r3
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <update_buffer+0xb4>)
 8000478:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time % 10;
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <update_buffer+0xb8>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <update_buffer+0xb0>)
 8000480:	fb83 1302 	smull	r1, r3, r3, r2
 8000484:	1099      	asrs	r1, r3, #2
 8000486:	17d3      	asrs	r3, r2, #31
 8000488:	1ac9      	subs	r1, r1, r3
 800048a:	460b      	mov	r3, r1
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	440b      	add	r3, r1
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	1ad1      	subs	r1, r2, r3
 8000494:	b2ca      	uxtb	r2, r1
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <update_buffer+0xb4>)
 8000498:	70da      	strb	r2, [r3, #3]
	} else {
		led_buffer[2] = 0;
		led_buffer[3] = light_time;
	}

}
 800049a:	e007      	b.n	80004ac <update_buffer+0xa4>
		led_buffer[2] = 0;
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <update_buffer+0xb4>)
 800049e:	2200      	movs	r2, #0
 80004a0:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time;
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <update_buffer+0xb8>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	b2da      	uxtb	r2, r3
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <update_buffer+0xb4>)
 80004aa:	70da      	strb	r2, [r3, #3]
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	20000004 	.word	0x20000004
 80004b8:	66666667 	.word	0x66666667
 80004bc:	200000dc 	.word	0x200000dc
 80004c0:	20000000 	.word	0x20000000

080004c4 <led_init>:

void led_init() {
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	GPIOB->BSRR = 0xFF00;
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <led_init+0x14>)
 80004ca:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80004ce:	611a      	str	r2, [r3, #16]
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	40010c00 	.word	0x40010c00

080004dc <update7SEG>:
void update7SEG(int index){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	d872      	bhi.n	80005d0 <update7SEG+0xf4>
 80004ea:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <update7SEG+0x14>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	08000501 	.word	0x08000501
 80004f4:	08000535 	.word	0x08000535
 80004f8:	08000569 	.word	0x08000569
 80004fc:	0800059d 	.word	0x0800059d
	switch(index) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, ON_7SEG); // turn on the first SEG
 8000500:	2201      	movs	r2, #1
 8000502:	2110      	movs	r1, #16
 8000504:	4835      	ldr	r0, [pc, #212]	; (80005dc <update7SEG+0x100>)
 8000506:	f000 ff7a 	bl	80013fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 800050a:	2200      	movs	r2, #0
 800050c:	2120      	movs	r1, #32
 800050e:	4833      	ldr	r0, [pc, #204]	; (80005dc <update7SEG+0x100>)
 8000510:	f000 ff75 	bl	80013fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 8000514:	2200      	movs	r2, #0
 8000516:	2140      	movs	r1, #64	; 0x40
 8000518:	4830      	ldr	r0, [pc, #192]	; (80005dc <update7SEG+0x100>)
 800051a:	f000 ff70 	bl	80013fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 800051e:	2200      	movs	r2, #0
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	482e      	ldr	r0, [pc, #184]	; (80005dc <update7SEG+0x100>)
 8000524:	f000 ff6b 	bl	80013fe <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000528:	4b2d      	ldr	r3, [pc, #180]	; (80005e0 <update7SEG+0x104>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 f859 	bl	80005e4 <display7SEG>
			break;
 8000532:	e04e      	b.n	80005d2 <update7SEG+0xf6>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 8000534:	2200      	movs	r2, #0
 8000536:	2110      	movs	r1, #16
 8000538:	4828      	ldr	r0, [pc, #160]	; (80005dc <update7SEG+0x100>)
 800053a:	f000 ff60 	bl	80013fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, ON_7SEG); // turn on the second SEG
 800053e:	2201      	movs	r2, #1
 8000540:	2120      	movs	r1, #32
 8000542:	4826      	ldr	r0, [pc, #152]	; (80005dc <update7SEG+0x100>)
 8000544:	f000 ff5b 	bl	80013fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 8000548:	2200      	movs	r2, #0
 800054a:	2140      	movs	r1, #64	; 0x40
 800054c:	4823      	ldr	r0, [pc, #140]	; (80005dc <update7SEG+0x100>)
 800054e:	f000 ff56 	bl	80013fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 8000552:	2200      	movs	r2, #0
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	4821      	ldr	r0, [pc, #132]	; (80005dc <update7SEG+0x100>)
 8000558:	f000 ff51 	bl	80013fe <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <update7SEG+0x104>)
 800055e:	785b      	ldrb	r3, [r3, #1]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f83f 	bl	80005e4 <display7SEG>
			break;
 8000566:	e034      	b.n	80005d2 <update7SEG+0xf6>
		case 2:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 8000568:	2200      	movs	r2, #0
 800056a:	2110      	movs	r1, #16
 800056c:	481b      	ldr	r0, [pc, #108]	; (80005dc <update7SEG+0x100>)
 800056e:	f000 ff46 	bl	80013fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 8000572:	2200      	movs	r2, #0
 8000574:	2120      	movs	r1, #32
 8000576:	4819      	ldr	r0, [pc, #100]	; (80005dc <update7SEG+0x100>)
 8000578:	f000 ff41 	bl	80013fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, ON_7SEG); // turn on the third SEG
 800057c:	2201      	movs	r2, #1
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	4816      	ldr	r0, [pc, #88]	; (80005dc <update7SEG+0x100>)
 8000582:	f000 ff3c 	bl	80013fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 8000586:	2200      	movs	r2, #0
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	4814      	ldr	r0, [pc, #80]	; (80005dc <update7SEG+0x100>)
 800058c:	f000 ff37 	bl	80013fe <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000590:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <update7SEG+0x104>)
 8000592:	789b      	ldrb	r3, [r3, #2]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f825 	bl	80005e4 <display7SEG>
			break;
 800059a:	e01a      	b.n	80005d2 <update7SEG+0xf6>
		case 3:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 800059c:	2200      	movs	r2, #0
 800059e:	2110      	movs	r1, #16
 80005a0:	480e      	ldr	r0, [pc, #56]	; (80005dc <update7SEG+0x100>)
 80005a2:	f000 ff2c 	bl	80013fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 80005a6:	2200      	movs	r2, #0
 80005a8:	2120      	movs	r1, #32
 80005aa:	480c      	ldr	r0, [pc, #48]	; (80005dc <update7SEG+0x100>)
 80005ac:	f000 ff27 	bl	80013fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 80005b0:	2200      	movs	r2, #0
 80005b2:	2140      	movs	r1, #64	; 0x40
 80005b4:	4809      	ldr	r0, [pc, #36]	; (80005dc <update7SEG+0x100>)
 80005b6:	f000 ff22 	bl	80013fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, ON_7SEG); // turn on the fourth SEG
 80005ba:	2201      	movs	r2, #1
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	4807      	ldr	r0, [pc, #28]	; (80005dc <update7SEG+0x100>)
 80005c0:	f000 ff1d 	bl	80013fe <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <update7SEG+0x104>)
 80005c6:	78db      	ldrb	r3, [r3, #3]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f80b 	bl	80005e4 <display7SEG>
			break;
 80005ce:	e000      	b.n	80005d2 <update7SEG+0xf6>
		default:
			break;
 80005d0:	bf00      	nop
	}
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40010800 	.word	0x40010800
 80005e0:	200000dc 	.word	0x200000dc

080005e4 <display7SEG>:
void display7SEG(int num) {
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	GPIOB->BRR= 0xFF;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <display7SEG+0x24>)
 80005ee:	22ff      	movs	r2, #255	; 0xff
 80005f0:	615a      	str	r2, [r3, #20]
	GPIOB->BSRR = led7seg[num];
 80005f2:	4a06      	ldr	r2, [pc, #24]	; (800060c <display7SEG+0x28>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4413      	add	r3, r2
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	4b03      	ldr	r3, [pc, #12]	; (8000608 <display7SEG+0x24>)
 80005fc:	611a      	str	r2, [r3, #16]
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40010c00 	.word	0x40010c00
 800060c:	20000024 	.word	0x20000024

08000610 <displayMode>:

void displayMode() {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	update_buffer();
 8000614:	f7ff fef8 	bl	8000408 <update_buffer>
	if (index_led >= 4) index_led = 0;
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <displayMode+0x2c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b03      	cmp	r3, #3
 800061e:	dd02      	ble.n	8000626 <displayMode+0x16>
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <displayMode+0x2c>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
	update7SEG(index_led++);
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <displayMode+0x2c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	4903      	ldr	r1, [pc, #12]	; (800063c <displayMode+0x2c>)
 800062e:	600a      	str	r2, [r1, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff53 	bl	80004dc <update7SEG>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000008 	.word	0x20000008

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fbda 	bl	8000dfc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f832 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f8e2 	bl	8000814 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000650:	f000 f86a 	bl	8000728 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000654:	f000 f8b4 	bl	80007c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 8000658:	4810      	ldr	r0, [pc, #64]	; (800069c <main+0x5c>)
 800065a:	f001 fb6b 	bl	8001d34 <HAL_TIM_Base_Start_IT>
  //led7SEG_init();
  GPIOA->BRR=0xFF;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <main+0x60>)
 8000660:	22ff      	movs	r2, #255	; 0xff
 8000662:	615a      	str	r2, [r3, #20]
  led_init();
 8000664:	f7ff ff2e 	bl	80004c4 <led_init>
  setTimer1(2);
 8000668:	2002      	movs	r0, #2
 800066a:	f000 f95d 	bl	8000928 <setTimer1>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // display mode
	  if (timer1_flag == 1) {
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <main+0x64>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d104      	bne.n	8000680 <main+0x40>
		traffic_light_processing();
 8000676:	f000 fb5b 	bl	8000d30 <traffic_light_processing>
		setTimer1(50);
 800067a:	2032      	movs	r0, #50	; 0x32
 800067c:	f000 f954 	bl	8000928 <setTimer1>
	 }

	  fsm_for_input_processing();
 8000680:	f7ff fd8a 	bl	8000198 <fsm_for_input_processing>
	  if (WhichButtonIsPressed()) {
 8000684:	f7ff fd62 	bl	800014c <WhichButtonIsPressed>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0ef      	beq.n	800066e <main+0x2e>
		  printf("Current mode is: %d\r\n", status);
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <main+0x68>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <main+0x6c>)
 8000696:	f002 f8cb 	bl	8002830 <iprintf>
	  if (timer1_flag == 1) {
 800069a:	e7e8      	b.n	800066e <main+0x2e>
 800069c:	20000160 	.word	0x20000160
 80006a0:	40010800 	.word	0x40010800
 80006a4:	200000e0 	.word	0x200000e0
 80006a8:	20000004 	.word	0x20000004
 80006ac:	08003708 	.word	0x08003708

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b090      	sub	sp, #64	; 0x40
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0318 	add.w	r3, r7, #24
 80006ba:	2228      	movs	r2, #40	; 0x28
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 f8ae 	bl	8002820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d2:	2302      	movs	r3, #2
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006da:	2310      	movs	r3, #16
 80006dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006de:	2300      	movs	r3, #0
 80006e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0318 	add.w	r3, r7, #24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 feba 	bl	8001460 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006f2:	f000 f8fd 	bl	80008f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f001 f926 	bl	8001960 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800071a:	f000 f8e9 	bl	80008f0 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3740      	adds	r7, #64	; 0x40
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_TIM2_Init+0x94>)
 8000746:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_TIM2_Init+0x94>)
 800074e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000752:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_TIM2_Init+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_TIM2_Init+0x94>)
 800075c:	2209      	movs	r2, #9
 800075e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_TIM2_Init+0x94>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_TIM2_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <MX_TIM2_Init+0x94>)
 800076e:	f001 fa91 	bl	8001c94 <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000778:	f000 f8ba 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_TIM2_Init+0x94>)
 800078a:	f001 fc27 	bl	8001fdc <HAL_TIM_ConfigClockSource>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000794:	f000 f8ac 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_TIM2_Init+0x94>)
 80007a6:	f001 fdef 	bl	8002388 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007b0:	f000 f89e 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000160 	.word	0x20000160

080007c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_USART1_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007f8:	f001 fe30 	bl	800245c <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 f875 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000011c 	.word	0x2000011c
 8000810:	40013800 	.word	0x40013800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <MX_GPIO_Init+0xd0>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a2d      	ldr	r2, [pc, #180]	; (80008e4 <MX_GPIO_Init+0xd0>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <MX_GPIO_Init+0xd0>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <MX_GPIO_Init+0xd0>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a27      	ldr	r2, [pc, #156]	; (80008e4 <MX_GPIO_Init+0xd0>)
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <MX_GPIO_Init+0xd0>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	21f0      	movs	r1, #240	; 0xf0
 800085c:	4822      	ldr	r0, [pc, #136]	; (80008e8 <MX_GPIO_Init+0xd4>)
 800085e:	f000 fdce 	bl	80013fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_Pin|D4_Pin|D5_Pin|D6_Pin
 8000862:	2200      	movs	r2, #0
 8000864:	f643 71f8 	movw	r1, #16376	; 0x3ff8
 8000868:	4820      	ldr	r0, [pc, #128]	; (80008ec <MX_GPIO_Init+0xd8>)
 800086a:	f000 fdc8 	bl	80013fe <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |GPIO_PIN_7|D1_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 800086e:	23f0      	movs	r3, #240	; 0xf0
 8000870:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2302      	movs	r3, #2
 800087c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	4619      	mov	r1, r3
 8000884:	4818      	ldr	r0, [pc, #96]	; (80008e8 <MX_GPIO_Init+0xd4>)
 8000886:	f000 fc29 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin;
 800088a:	2307      	movs	r3, #7
 800088c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000892:	2301      	movs	r3, #1
 8000894:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4619      	mov	r1, r3
 800089c:	4813      	ldr	r0, [pc, #76]	; (80008ec <MX_GPIO_Init+0xd8>)
 800089e:	f000 fc1d 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D4_Pin D5_Pin D6_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           PB7 D1_Pin D2_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D4_Pin|D5_Pin|D6_Pin
 80008a2:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 80008a6:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |GPIO_PIN_7|D1_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2302      	movs	r3, #2
 80008b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	4619      	mov	r1, r3
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_GPIO_Init+0xd8>)
 80008bc:	f000 fc0e 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin CONFIRM_Pin RESET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|CONFIRM_Pin|RESET_Pin;
 80008c0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4619      	mov	r1, r3
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_GPIO_Init+0xd4>)
 80008d6:	f000 fc01 	bl	80010dc <HAL_GPIO_Init>

}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010800 	.word	0x40010800
 80008ec:	40010c00 	.word	0x40010c00

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <_write>:
#include "output_display.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *ptr, int len)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	b29a      	uxth	r2, r3
 800090c:	f04f 33ff 	mov.w	r3, #4294967295
 8000910:	68b9      	ldr	r1, [r7, #8]
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <_write+0x28>)
 8000914:	f001 fdef 	bl	80024f6 <HAL_UART_Transmit>
	return len;
 8000918:	687b      	ldr	r3, [r7, #4]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2000011c 	.word	0x2000011c

08000928 <setTimer1>:

void set_Timer_mode_debounce(int duration) {
	timer0_mode_debounce_counter = duration ;
	timer0_mode_debounce_flag = 0;
}
void setTimer1(int duration) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
//	if (duration != DURATION_LED_BLINKING_2HZ) {
//		duration = DURATION_LED_BLINKING_2HZ;
//	}
	timer1_counter = duration ;
 8000930:	4a05      	ldr	r2, [pc, #20]	; (8000948 <setTimer1+0x20>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <setTimer1+0x24>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	200000f4 	.word	0x200000f4
 800094c:	200000e0 	.word	0x200000e0

08000950 <timerRun>:
		duration = DURATION_LED_BLINKING_2HZ;
	}
	timer5_counter = duration;
	timer5_flag = 0;
}
void timerRun() {
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8000954:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <timerRun+0xcc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	dd0b      	ble.n	8000974 <timerRun+0x24>
		timer1_counter--;
 800095c:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <timerRun+0xcc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3b01      	subs	r3, #1
 8000962:	4a2e      	ldr	r2, [pc, #184]	; (8000a1c <timerRun+0xcc>)
 8000964:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <timerRun+0xcc>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	dc02      	bgt.n	8000974 <timerRun+0x24>
			timer1_flag = 1;
 800096e:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <timerRun+0xd0>)
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000974:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <timerRun+0xd4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	dd0b      	ble.n	8000994 <timerRun+0x44>
		timer2_counter--;
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <timerRun+0xd4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3b01      	subs	r3, #1
 8000982:	4a28      	ldr	r2, [pc, #160]	; (8000a24 <timerRun+0xd4>)
 8000984:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000986:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <timerRun+0xd4>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	dc02      	bgt.n	8000994 <timerRun+0x44>
			timer2_flag = 1;
 800098e:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <timerRun+0xd8>)
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000994:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <timerRun+0xdc>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	dd0b      	ble.n	80009b4 <timerRun+0x64>
		timer3_counter--;
 800099c:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <timerRun+0xdc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	4a22      	ldr	r2, [pc, #136]	; (8000a2c <timerRun+0xdc>)
 80009a4:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <timerRun+0xdc>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	dc02      	bgt.n	80009b4 <timerRun+0x64>
			timer3_flag = 1;
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <timerRun+0xe0>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <timerRun+0xe4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dd0b      	ble.n	80009d4 <timerRun+0x84>
		timer4_counter--;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <timerRun+0xe4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	3b01      	subs	r3, #1
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <timerRun+0xe4>)
 80009c4:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <timerRun+0xe4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	dc02      	bgt.n	80009d4 <timerRun+0x84>
			timer4_flag = 1;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <timerRun+0xe8>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <timerRun+0xec>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	dd0b      	ble.n	80009f4 <timerRun+0xa4>
		timer5_counter--;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <timerRun+0xec>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <timerRun+0xec>)
 80009e4:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <timerRun+0xec>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	dc02      	bgt.n	80009f4 <timerRun+0xa4>
			timer5_flag = 1;
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <timerRun+0xf0>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer0_mode_debounce_counter > 0) {
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <timerRun+0xf4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	dd0b      	ble.n	8000a14 <timerRun+0xc4>
		timer0_mode_debounce_counter--;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <timerRun+0xf4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <timerRun+0xf4>)
 8000a04:	6013      	str	r3, [r2, #0]
		if (timer0_mode_debounce_counter <= 0) {
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <timerRun+0xf4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	dc02      	bgt.n	8000a14 <timerRun+0xc4>
			timer0_mode_debounce_flag = 1;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <timerRun+0xf8>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	200000f4 	.word	0x200000f4
 8000a20:	200000e0 	.word	0x200000e0
 8000a24:	200000f8 	.word	0x200000f8
 8000a28:	200000e4 	.word	0x200000e4
 8000a2c:	200000fc 	.word	0x200000fc
 8000a30:	200000e8 	.word	0x200000e8
 8000a34:	20000100 	.word	0x20000100
 8000a38:	200000ec 	.word	0x200000ec
 8000a3c:	20000104 	.word	0x20000104
 8000a40:	200000f0 	.word	0x200000f0
 8000a44:	2000010c 	.word	0x2000010c
 8000a48:	20000108 	.word	0x20000108

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_MspInit+0x5c>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <HAL_MspInit+0x5c>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6193      	str	r3, [r2, #24]
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_MspInit+0x5c>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_MspInit+0x5c>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <HAL_MspInit+0x5c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	61d3      	str	r3, [r2, #28]
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <HAL_MspInit+0x5c>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_MspInit+0x60>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_MspInit+0x60>)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010000 	.word	0x40010000

08000ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ac0:	d113      	bne.n	8000aea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_TIM_Base_MspInit+0x44>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <HAL_TIM_Base_MspInit+0x44>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	61d3      	str	r3, [r2, #28]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_TIM_Base_MspInit+0x44>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	201c      	movs	r0, #28
 8000ae0:	f000 fac5 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ae4:	201c      	movs	r0, #28
 8000ae6:	f000 fade 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <HAL_UART_MspInit+0x8c>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d131      	bne.n	8000b7c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_UART_MspInit+0x90>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a1a      	ldr	r2, [pc, #104]	; (8000b88 <HAL_UART_MspInit+0x90>)
 8000b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_UART_MspInit+0x90>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_UART_MspInit+0x90>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <HAL_UART_MspInit+0x90>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_UART_MspInit+0x90>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480b      	ldr	r0, [pc, #44]	; (8000b8c <HAL_UART_MspInit+0x94>)
 8000b5e:	f000 fabd 	bl	80010dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4619      	mov	r1, r3
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <HAL_UART_MspInit+0x94>)
 8000b78:	f000 fab0 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3720      	adds	r7, #32
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40013800 	.word	0x40013800
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010800 	.word	0x40010800

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr

08000bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr

08000bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr

08000bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd6:	f000 f957 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <TIM2_IRQHandler+0x10>)
 8000be6:	f001 f8f1 	bl	8001dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000160 	.word	0x20000160

08000bf4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e00a      	b.n	8000c1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c06:	f3af 8000 	nop.w
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf0      	blt.n	8000c06 <_read+0x12>
	}

return len;
 8000c24:	687b      	ldr	r3, [r7, #4]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
	return -1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c54:	605a      	str	r2, [r3, #4]
	return 0;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <_isatty>:

int _isatty(int file)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
	return 1;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
	return 0;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
	...

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f001 fd84 	bl	80027cc <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <_sbrk+0x64>)
 8000ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20002800 	.word	0x20002800
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	20000110 	.word	0x20000110
 8000cf8:	200001c0 	.word	0x200001c0

08000cfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "software_timer.h"
#include "led7seg.h"
#include "global.h"

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d18:	d103      	bne.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000d1a:	f7ff fab9 	bl	8000290 <button_reading>
		displayMode();
 8000d1e:	f7ff fc77 	bl	8000610 <displayMode>
	}
	timerRun();
 8000d22:	f7ff fe15 	bl	8000950 <timerRun>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <traffic_light_processing>:
#include "traffic_light_processing.h"
#include "input_reading.h"
#include "input_processing.h"
#include "global.h"
#include "led7seg.h"
void traffic_light_processing() {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, D1_Pin|D2_Pin|D3_Pin|D4_Pin|D5_Pin|D6_Pin, 1);
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 8000d3a:	481b      	ldr	r0, [pc, #108]	; (8000da8 <traffic_light_processing+0x78>)
 8000d3c:	f000 fb5f 	bl	80013fe <HAL_GPIO_WritePin>
	switch(status) {
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <traffic_light_processing+0x7c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d82c      	bhi.n	8000da4 <traffic_light_processing+0x74>
 8000d4a:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <traffic_light_processing+0x20>)
 8000d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d50:	08000da3 	.word	0x08000da3
 8000d54:	08000d61 	.word	0x08000d61
 8000d58:	08000d77 	.word	0x08000d77
 8000d5c:	08000d8d 	.word	0x08000d8d
		case NORMAL_MODE:
			break;
		case RED_MODE:
			HAL_GPIO_TogglePin(GPIOB, D4_Pin);
 8000d60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d64:	4810      	ldr	r0, [pc, #64]	; (8000da8 <traffic_light_processing+0x78>)
 8000d66:	f000 fb62 	bl	800142e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, D1_Pin);
 8000d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d6e:	480e      	ldr	r0, [pc, #56]	; (8000da8 <traffic_light_processing+0x78>)
 8000d70:	f000 fb5d 	bl	800142e <HAL_GPIO_TogglePin>

			break;
 8000d74:	e016      	b.n	8000da4 <traffic_light_processing+0x74>
		case AMBER_MODE:

			HAL_GPIO_TogglePin(GPIOB, D2_Pin);
 8000d76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d7a:	480b      	ldr	r0, [pc, #44]	; (8000da8 <traffic_light_processing+0x78>)
 8000d7c:	f000 fb57 	bl	800142e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, D5_Pin);
 8000d80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d84:	4808      	ldr	r0, [pc, #32]	; (8000da8 <traffic_light_processing+0x78>)
 8000d86:	f000 fb52 	bl	800142e <HAL_GPIO_TogglePin>

			break;
 8000d8a:	e00b      	b.n	8000da4 <traffic_light_processing+0x74>
		case GREEN_MODE:
			HAL_GPIO_TogglePin(GPIOB, D3_Pin);
 8000d8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <traffic_light_processing+0x78>)
 8000d92:	f000 fb4c 	bl	800142e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, D6_Pin);
 8000d96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9a:	4803      	ldr	r0, [pc, #12]	; (8000da8 <traffic_light_processing+0x78>)
 8000d9c:	f000 fb47 	bl	800142e <HAL_GPIO_TogglePin>

			break;
 8000da0:	e000      	b.n	8000da4 <traffic_light_processing+0x74>
			break;
 8000da2:	bf00      	nop
	}
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	20000004 	.word	0x20000004

08000db0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dd6:	f7ff ff91 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f001 fcfd 	bl	80027d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dde:	f7ff fc2f 	bl	8000640 <main>
  bx lr
 8000de2:	4770      	bx	lr
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000dec:	080037e8 	.word	0x080037e8
  ldr r2, =_sbss
 8000df0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000df4:	200001bc 	.word	0x200001bc

08000df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_2_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_Init+0x28>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_Init+0x28>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 f923 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e12:	200f      	movs	r0, #15
 8000e14:	f000 f808 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e18:	f7ff fe18 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40022000 	.word	0x40022000

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x54>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x58>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f93b 	bl	80010c2 <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00e      	b.n	8000e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d80a      	bhi.n	8000e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f000 f903 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_InitTick+0x5c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000030 	.word	0x20000030
 8000e80:	20000038 	.word	0x20000038
 8000e84:	20000034 	.word	0x20000034

08000e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x1c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a03      	ldr	r2, [pc, #12]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	20000038 	.word	0x20000038
 8000ea8:	200001a8 	.word	0x200001a8

08000eac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <HAL_GetTick+0x10>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	200001a8 	.word	0x200001a8

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4906      	ldr	r1, [pc, #24]	; (8000f58 <__NVIC_EnableIRQ+0x34>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f7ff ff90 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff2d 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff42 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff90 	bl	8000fb0 <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5f 	bl	8000f5c <__NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff35 	bl	8000f24 <__NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffa2 	bl	8001014 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b08b      	sub	sp, #44	; 0x2c
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ee:	e148      	b.n	8001382 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010f0:	2201      	movs	r2, #1
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	429a      	cmp	r2, r3
 800110a:	f040 8137 	bne.w	800137c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4aa3      	ldr	r2, [pc, #652]	; (80013a0 <HAL_GPIO_Init+0x2c4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d05e      	beq.n	80011d6 <HAL_GPIO_Init+0xfa>
 8001118:	4aa1      	ldr	r2, [pc, #644]	; (80013a0 <HAL_GPIO_Init+0x2c4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d875      	bhi.n	800120a <HAL_GPIO_Init+0x12e>
 800111e:	4aa1      	ldr	r2, [pc, #644]	; (80013a4 <HAL_GPIO_Init+0x2c8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d058      	beq.n	80011d6 <HAL_GPIO_Init+0xfa>
 8001124:	4a9f      	ldr	r2, [pc, #636]	; (80013a4 <HAL_GPIO_Init+0x2c8>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d86f      	bhi.n	800120a <HAL_GPIO_Init+0x12e>
 800112a:	4a9f      	ldr	r2, [pc, #636]	; (80013a8 <HAL_GPIO_Init+0x2cc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d052      	beq.n	80011d6 <HAL_GPIO_Init+0xfa>
 8001130:	4a9d      	ldr	r2, [pc, #628]	; (80013a8 <HAL_GPIO_Init+0x2cc>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d869      	bhi.n	800120a <HAL_GPIO_Init+0x12e>
 8001136:	4a9d      	ldr	r2, [pc, #628]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d04c      	beq.n	80011d6 <HAL_GPIO_Init+0xfa>
 800113c:	4a9b      	ldr	r2, [pc, #620]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d863      	bhi.n	800120a <HAL_GPIO_Init+0x12e>
 8001142:	4a9b      	ldr	r2, [pc, #620]	; (80013b0 <HAL_GPIO_Init+0x2d4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d046      	beq.n	80011d6 <HAL_GPIO_Init+0xfa>
 8001148:	4a99      	ldr	r2, [pc, #612]	; (80013b0 <HAL_GPIO_Init+0x2d4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d85d      	bhi.n	800120a <HAL_GPIO_Init+0x12e>
 800114e:	2b12      	cmp	r3, #18
 8001150:	d82a      	bhi.n	80011a8 <HAL_GPIO_Init+0xcc>
 8001152:	2b12      	cmp	r3, #18
 8001154:	d859      	bhi.n	800120a <HAL_GPIO_Init+0x12e>
 8001156:	a201      	add	r2, pc, #4	; (adr r2, 800115c <HAL_GPIO_Init+0x80>)
 8001158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115c:	080011d7 	.word	0x080011d7
 8001160:	080011b1 	.word	0x080011b1
 8001164:	080011c3 	.word	0x080011c3
 8001168:	08001205 	.word	0x08001205
 800116c:	0800120b 	.word	0x0800120b
 8001170:	0800120b 	.word	0x0800120b
 8001174:	0800120b 	.word	0x0800120b
 8001178:	0800120b 	.word	0x0800120b
 800117c:	0800120b 	.word	0x0800120b
 8001180:	0800120b 	.word	0x0800120b
 8001184:	0800120b 	.word	0x0800120b
 8001188:	0800120b 	.word	0x0800120b
 800118c:	0800120b 	.word	0x0800120b
 8001190:	0800120b 	.word	0x0800120b
 8001194:	0800120b 	.word	0x0800120b
 8001198:	0800120b 	.word	0x0800120b
 800119c:	0800120b 	.word	0x0800120b
 80011a0:	080011b9 	.word	0x080011b9
 80011a4:	080011cd 	.word	0x080011cd
 80011a8:	4a82      	ldr	r2, [pc, #520]	; (80013b4 <HAL_GPIO_Init+0x2d8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d013      	beq.n	80011d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ae:	e02c      	b.n	800120a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	623b      	str	r3, [r7, #32]
          break;
 80011b6:	e029      	b.n	800120c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	3304      	adds	r3, #4
 80011be:	623b      	str	r3, [r7, #32]
          break;
 80011c0:	e024      	b.n	800120c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	3308      	adds	r3, #8
 80011c8:	623b      	str	r3, [r7, #32]
          break;
 80011ca:	e01f      	b.n	800120c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	330c      	adds	r3, #12
 80011d2:	623b      	str	r3, [r7, #32]
          break;
 80011d4:	e01a      	b.n	800120c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011de:	2304      	movs	r3, #4
 80011e0:	623b      	str	r3, [r7, #32]
          break;
 80011e2:	e013      	b.n	800120c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d105      	bne.n	80011f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011ec:	2308      	movs	r3, #8
 80011ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	611a      	str	r2, [r3, #16]
          break;
 80011f6:	e009      	b.n	800120c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f8:	2308      	movs	r3, #8
 80011fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69fa      	ldr	r2, [r7, #28]
 8001200:	615a      	str	r2, [r3, #20]
          break;
 8001202:	e003      	b.n	800120c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
          break;
 8001208:	e000      	b.n	800120c <HAL_GPIO_Init+0x130>
          break;
 800120a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2bff      	cmp	r3, #255	; 0xff
 8001210:	d801      	bhi.n	8001216 <HAL_GPIO_Init+0x13a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	e001      	b.n	800121a <HAL_GPIO_Init+0x13e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3304      	adds	r3, #4
 800121a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	2bff      	cmp	r3, #255	; 0xff
 8001220:	d802      	bhi.n	8001228 <HAL_GPIO_Init+0x14c>
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	e002      	b.n	800122e <HAL_GPIO_Init+0x152>
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	3b08      	subs	r3, #8
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	210f      	movs	r1, #15
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	401a      	ands	r2, r3
 8001240:	6a39      	ldr	r1, [r7, #32]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	431a      	orrs	r2, r3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8090 	beq.w	800137c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800125c:	4b56      	ldr	r3, [pc, #344]	; (80013b8 <HAL_GPIO_Init+0x2dc>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a55      	ldr	r2, [pc, #340]	; (80013b8 <HAL_GPIO_Init+0x2dc>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_GPIO_Init+0x2dc>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001274:	4a51      	ldr	r2, [pc, #324]	; (80013bc <HAL_GPIO_Init+0x2e0>)
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001280:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	220f      	movs	r2, #15
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	4013      	ands	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a49      	ldr	r2, [pc, #292]	; (80013c0 <HAL_GPIO_Init+0x2e4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d00d      	beq.n	80012bc <HAL_GPIO_Init+0x1e0>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a48      	ldr	r2, [pc, #288]	; (80013c4 <HAL_GPIO_Init+0x2e8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d007      	beq.n	80012b8 <HAL_GPIO_Init+0x1dc>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a47      	ldr	r2, [pc, #284]	; (80013c8 <HAL_GPIO_Init+0x2ec>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d101      	bne.n	80012b4 <HAL_GPIO_Init+0x1d8>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e004      	b.n	80012be <HAL_GPIO_Init+0x1e2>
 80012b4:	2303      	movs	r3, #3
 80012b6:	e002      	b.n	80012be <HAL_GPIO_Init+0x1e2>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <HAL_GPIO_Init+0x1e2>
 80012bc:	2300      	movs	r3, #0
 80012be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c0:	f002 0203 	and.w	r2, r2, #3
 80012c4:	0092      	lsls	r2, r2, #2
 80012c6:	4093      	lsls	r3, r2
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ce:	493b      	ldr	r1, [pc, #236]	; (80013bc <HAL_GPIO_Init+0x2e0>)
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	3302      	adds	r3, #2
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012e8:	4b38      	ldr	r3, [pc, #224]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4937      	ldr	r1, [pc, #220]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	600b      	str	r3, [r1, #0]
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012f6:	4b35      	ldr	r3, [pc, #212]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	4933      	ldr	r1, [pc, #204]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 8001300:	4013      	ands	r3, r2
 8001302:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	492d      	ldr	r1, [pc, #180]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	4929      	ldr	r1, [pc, #164]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 8001328:	4013      	ands	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	4923      	ldr	r1, [pc, #140]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	608b      	str	r3, [r1, #8]
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	43db      	mvns	r3, r3
 800134e:	491f      	ldr	r1, [pc, #124]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 8001350:	4013      	ands	r3, r2
 8001352:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	4919      	ldr	r1, [pc, #100]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	60cb      	str	r3, [r1, #12]
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	43db      	mvns	r3, r3
 8001376:	4915      	ldr	r1, [pc, #84]	; (80013cc <HAL_GPIO_Init+0x2f0>)
 8001378:	4013      	ands	r3, r2
 800137a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	3301      	adds	r3, #1
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	f47f aeaf 	bne.w	80010f0 <HAL_GPIO_Init+0x14>
  }
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	372c      	adds	r7, #44	; 0x2c
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	10320000 	.word	0x10320000
 80013a4:	10310000 	.word	0x10310000
 80013a8:	10220000 	.word	0x10220000
 80013ac:	10210000 	.word	0x10210000
 80013b0:	10120000 	.word	0x10120000
 80013b4:	10110000 	.word	0x10110000
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010000 	.word	0x40010000
 80013c0:	40010800 	.word	0x40010800
 80013c4:	40010c00 	.word	0x40010c00
 80013c8:	40011000 	.word	0x40011000
 80013cc:	40010400 	.word	0x40010400

080013d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e001      	b.n	80013f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	807b      	strh	r3, [r7, #2]
 800140a:	4613      	mov	r3, r2
 800140c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800140e:	787b      	ldrb	r3, [r7, #1]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001414:	887a      	ldrh	r2, [r7, #2]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800141a:	e003      	b.n	8001424 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	041a      	lsls	r2, r3, #16
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	611a      	str	r2, [r3, #16]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800142e:	b480      	push	{r7}
 8001430:	b085      	sub	sp, #20
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	460b      	mov	r3, r1
 8001438:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001440:	887a      	ldrh	r2, [r7, #2]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4013      	ands	r3, r2
 8001446:	041a      	lsls	r2, r3, #16
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43d9      	mvns	r1, r3
 800144c:	887b      	ldrh	r3, [r7, #2]
 800144e:	400b      	ands	r3, r1
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	611a      	str	r2, [r3, #16]
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e26c      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8087 	beq.w	800158e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001480:	4b92      	ldr	r3, [pc, #584]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b04      	cmp	r3, #4
 800148a:	d00c      	beq.n	80014a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800148c:	4b8f      	ldr	r3, [pc, #572]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b08      	cmp	r3, #8
 8001496:	d112      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
 8001498:	4b8c      	ldr	r3, [pc, #560]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a4:	d10b      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	4b89      	ldr	r3, [pc, #548]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d06c      	beq.n	800158c <HAL_RCC_OscConfig+0x12c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d168      	bne.n	800158c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e246      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x76>
 80014c8:	4b80      	ldr	r3, [pc, #512]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a7f      	ldr	r2, [pc, #508]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e02e      	b.n	8001534 <HAL_RCC_OscConfig+0xd4>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x98>
 80014de:	4b7b      	ldr	r3, [pc, #492]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a7a      	ldr	r2, [pc, #488]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b78      	ldr	r3, [pc, #480]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a77      	ldr	r2, [pc, #476]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e01d      	b.n	8001534 <HAL_RCC_OscConfig+0xd4>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0xbc>
 8001502:	4b72      	ldr	r3, [pc, #456]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a71      	ldr	r2, [pc, #452]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b6f      	ldr	r3, [pc, #444]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a6e      	ldr	r2, [pc, #440]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e00b      	b.n	8001534 <HAL_RCC_OscConfig+0xd4>
 800151c:	4b6b      	ldr	r3, [pc, #428]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a6a      	ldr	r2, [pc, #424]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b68      	ldr	r3, [pc, #416]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a67      	ldr	r2, [pc, #412]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001532:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fcb6 	bl	8000eac <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fcb2 	bl	8000eac <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e1fa      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0xe4>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fca2 	bl	8000eac <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fc9e 	bl	8000eac <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e1e6      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x10c>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d063      	beq.n	8001662 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800159a:	4b4c      	ldr	r3, [pc, #304]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015a6:	4b49      	ldr	r3, [pc, #292]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d11c      	bne.n	80015ec <HAL_RCC_OscConfig+0x18c>
 80015b2:	4b46      	ldr	r3, [pc, #280]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d116      	bne.n	80015ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	4b43      	ldr	r3, [pc, #268]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_RCC_OscConfig+0x176>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e1ba      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4939      	ldr	r1, [pc, #228]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	e03a      	b.n	8001662 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d020      	beq.n	8001636 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fc57 	bl	8000eac <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fc53 	bl	8000eac <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e19b      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4927      	ldr	r1, [pc, #156]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001630:	4313      	orrs	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
 8001634:	e015      	b.n	8001662 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fc36 	bl	8000eac <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fc32 	bl	8000eac <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e17a      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d03a      	beq.n	80016e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d019      	beq.n	80016aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_RCC_OscConfig+0x274>)
 8001678:	2201      	movs	r2, #1
 800167a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167c:	f7ff fc16 	bl	8000eac <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff fc12 	bl	8000eac <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e15a      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f000 fad8 	bl	8001c58 <RCC_Delay>
 80016a8:	e01c      	b.n	80016e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_RCC_OscConfig+0x274>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff fbfc 	bl	8000eac <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b6:	e00f      	b.n	80016d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff fbf8 	bl	8000eac <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d908      	bls.n	80016d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e140      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	42420000 	.word	0x42420000
 80016d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d8:	4b9e      	ldr	r3, [pc, #632]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1e9      	bne.n	80016b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80a6 	beq.w	800183e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f6:	4b97      	ldr	r3, [pc, #604]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10d      	bne.n	800171e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b94      	ldr	r3, [pc, #592]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a93      	ldr	r2, [pc, #588]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b91      	ldr	r3, [pc, #580]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171a:	2301      	movs	r3, #1
 800171c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	4b8e      	ldr	r3, [pc, #568]	; (8001958 <HAL_RCC_OscConfig+0x4f8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d118      	bne.n	800175c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172a:	4b8b      	ldr	r3, [pc, #556]	; (8001958 <HAL_RCC_OscConfig+0x4f8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a8a      	ldr	r2, [pc, #552]	; (8001958 <HAL_RCC_OscConfig+0x4f8>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001736:	f7ff fbb9 	bl	8000eac <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173e:	f7ff fbb5 	bl	8000eac <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b64      	cmp	r3, #100	; 0x64
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e0fd      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001750:	4b81      	ldr	r3, [pc, #516]	; (8001958 <HAL_RCC_OscConfig+0x4f8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x312>
 8001764:	4b7b      	ldr	r3, [pc, #492]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4a7a      	ldr	r2, [pc, #488]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6213      	str	r3, [r2, #32]
 8001770:	e02d      	b.n	80017ce <HAL_RCC_OscConfig+0x36e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x334>
 800177a:	4b76      	ldr	r3, [pc, #472]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a75      	ldr	r2, [pc, #468]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	6213      	str	r3, [r2, #32]
 8001786:	4b73      	ldr	r3, [pc, #460]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4a72      	ldr	r2, [pc, #456]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	6213      	str	r3, [r2, #32]
 8001792:	e01c      	b.n	80017ce <HAL_RCC_OscConfig+0x36e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b05      	cmp	r3, #5
 800179a:	d10c      	bne.n	80017b6 <HAL_RCC_OscConfig+0x356>
 800179c:	4b6d      	ldr	r3, [pc, #436]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4a6c      	ldr	r2, [pc, #432]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	6213      	str	r3, [r2, #32]
 80017a8:	4b6a      	ldr	r3, [pc, #424]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a69      	ldr	r2, [pc, #420]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6213      	str	r3, [r2, #32]
 80017b4:	e00b      	b.n	80017ce <HAL_RCC_OscConfig+0x36e>
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a66      	ldr	r2, [pc, #408]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	4b64      	ldr	r3, [pc, #400]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a63      	ldr	r2, [pc, #396]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d015      	beq.n	8001802 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fb69 	bl	8000eac <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff fb65 	bl	8000eac <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e0ab      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f4:	4b57      	ldr	r3, [pc, #348]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0ee      	beq.n	80017de <HAL_RCC_OscConfig+0x37e>
 8001800:	e014      	b.n	800182c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7ff fb53 	bl	8000eac <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180a:	f7ff fb4f 	bl	8000eac <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f241 3288 	movw	r2, #5000	; 0x1388
 8001818:	4293      	cmp	r3, r2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e095      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001820:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ee      	bne.n	800180a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d105      	bne.n	800183e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001832:	4b48      	ldr	r3, [pc, #288]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a47      	ldr	r2, [pc, #284]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8081 	beq.w	800194a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001848:	4b42      	ldr	r3, [pc, #264]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	d061      	beq.n	8001918 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d146      	bne.n	80018ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185c:	4b3f      	ldr	r3, [pc, #252]	; (800195c <HAL_RCC_OscConfig+0x4fc>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff fb23 	bl	8000eac <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff fb1f 	bl	8000eac <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e067      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187c:	4b35      	ldr	r3, [pc, #212]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001890:	d108      	bne.n	80018a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001892:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	492d      	ldr	r1, [pc, #180]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a4:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a19      	ldr	r1, [r3, #32]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	430b      	orrs	r3, r1
 80018b6:	4927      	ldr	r1, [pc, #156]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_RCC_OscConfig+0x4fc>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff faf3 	bl	8000eac <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff faef 	bl	8000eac <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e037      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x46a>
 80018e8:	e02f      	b.n	800194a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <HAL_RCC_OscConfig+0x4fc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fadc 	bl	8000eac <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff fad8 	bl	8000eac <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e020      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x498>
 8001916:	e018      	b.n	800194a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e013      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	429a      	cmp	r2, r3
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	40007000 	.word	0x40007000
 800195c:	42420060 	.word	0x42420060

08001960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0d0      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d910      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b67      	ldr	r3, [pc, #412]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 0207 	bic.w	r2, r3, #7
 800198a:	4965      	ldr	r1, [pc, #404]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0b8      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019bc:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a58      	ldr	r2, [pc, #352]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d4:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4a52      	ldr	r2, [pc, #328]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e0:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	494d      	ldr	r1, [pc, #308]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d040      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d115      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e07f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e073      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e06b      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4936      	ldr	r1, [pc, #216]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a50:	f7ff fa2c 	bl	8000eac <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7ff fa28 	bl	8000eac <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e053      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 020c 	and.w	r2, r3, #12
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d1eb      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d210      	bcs.n	8001ab0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 0207 	bic.w	r2, r3, #7
 8001a96:	4922      	ldr	r1, [pc, #136]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e032      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4916      	ldr	r1, [pc, #88]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	490e      	ldr	r1, [pc, #56]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aee:	f000 f821 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001af2:	4602      	mov	r2, r0
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	490a      	ldr	r1, [pc, #40]	; (8001b28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b00:	5ccb      	ldrb	r3, [r1, r3]
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <HAL_RCC_ClockConfig+0x1cc>)
 8001b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_RCC_ClockConfig+0x1d0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f98a 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40022000 	.word	0x40022000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	08003730 	.word	0x08003730
 8001b2c:	20000030 	.word	0x20000030
 8001b30:	20000034 	.word	0x20000034

08001b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b34:	b490      	push	{r4, r7}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b3c:	1d3c      	adds	r4, r7, #4
 8001b3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b44:	f240 2301 	movw	r3, #513	; 0x201
 8001b48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d002      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x40>
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d003      	beq.n	8001b7a <HAL_RCC_GetSysClockFreq+0x46>
 8001b72:	e02d      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b76:	623b      	str	r3, [r7, #32]
      break;
 8001b78:	e02d      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	0c9b      	lsrs	r3, r3, #18
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b86:	4413      	add	r3, r2
 8001b88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b8c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	0c5b      	lsrs	r3, r3, #17
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb2:	fb02 f203 	mul.w	r2, r2, r3
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbe:	e004      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	623b      	str	r3, [r7, #32]
      break;
 8001bce:	e002      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd2:	623b      	str	r3, [r7, #32]
      break;
 8001bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3728      	adds	r7, #40	; 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc90      	pop	{r4, r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	08003720 	.word	0x08003720
 8001be8:	40021000 	.word	0x40021000
 8001bec:	007a1200 	.word	0x007a1200
 8001bf0:	003d0900 	.word	0x003d0900

08001bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	20000030 	.word	0x20000030

08001c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c0c:	f7ff fff2 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	4903      	ldr	r1, [pc, #12]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c1e:	5ccb      	ldrb	r3, [r1, r3]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08003740 	.word	0x08003740

08001c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c34:	f7ff ffde 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	0adb      	lsrs	r3, r3, #11
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4903      	ldr	r1, [pc, #12]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40021000 	.word	0x40021000
 8001c54:	08003740 	.word	0x08003740

08001c58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <RCC_Delay+0x34>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <RCC_Delay+0x38>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0a5b      	lsrs	r3, r3, #9
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c74:	bf00      	nop
  }
  while (Delay --);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1e5a      	subs	r2, r3, #1
 8001c7a:	60fa      	str	r2, [r7, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f9      	bne.n	8001c74 <RCC_Delay+0x1c>
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	20000030 	.word	0x20000030
 8001c90:	10624dd3 	.word	0x10624dd3

08001c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e041      	b.n	8001d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7fe fef8 	bl	8000ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f000 fa6a 	bl	80021ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d001      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e035      	b.n	8001db8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <HAL_TIM_Base_Start_IT+0x90>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d009      	beq.n	8001d82 <HAL_TIM_Base_Start_IT+0x4e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d76:	d004      	beq.n	8001d82 <HAL_TIM_Base_Start_IT+0x4e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <HAL_TIM_Base_Start_IT+0x94>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d111      	bne.n	8001da6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b06      	cmp	r3, #6
 8001d92:	d010      	beq.n	8001db6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da4:	e007      	b.n	8001db6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40012c00 	.word	0x40012c00
 8001dc8:	40000400 	.word	0x40000400

08001dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d122      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d11b      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0202 	mvn.w	r2, #2
 8001df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f9b1 	bl	8002176 <HAL_TIM_IC_CaptureCallback>
 8001e14:	e005      	b.n	8001e22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f9a4 	bl	8002164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f9b3 	bl	8002188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d122      	bne.n	8001e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d11b      	bne.n	8001e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0204 	mvn.w	r2, #4
 8001e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f987 	bl	8002176 <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f97a 	bl	8002164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f989 	bl	8002188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d122      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d11b      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0208 	mvn.w	r2, #8
 8001ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f95d 	bl	8002176 <HAL_TIM_IC_CaptureCallback>
 8001ebc:	e005      	b.n	8001eca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f950 	bl	8002164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f95f 	bl	8002188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b10      	cmp	r3, #16
 8001edc:	d122      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	d11b      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0210 	mvn.w	r2, #16
 8001ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2208      	movs	r2, #8
 8001efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f933 	bl	8002176 <HAL_TIM_IC_CaptureCallback>
 8001f10:	e005      	b.n	8001f1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f926 	bl	8002164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f935 	bl	8002188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d107      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0201 	mvn.w	r2, #1
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fedc 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5a:	2b80      	cmp	r3, #128	; 0x80
 8001f5c:	d10e      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f68:	2b80      	cmp	r3, #128	; 0x80
 8001f6a:	d107      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa67 	bl	800244a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f86:	2b40      	cmp	r3, #64	; 0x40
 8001f88:	d10e      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f94:	2b40      	cmp	r3, #64	; 0x40
 8001f96:	d107      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8f9 	bl	800219a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d10e      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d107      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0220 	mvn.w	r2, #32
 8001fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fa32 	bl	8002438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_TIM_ConfigClockSource+0x18>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e0b3      	b.n	800215c <HAL_TIM_ConfigClockSource+0x180>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002012:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800201a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800202c:	d03e      	beq.n	80020ac <HAL_TIM_ConfigClockSource+0xd0>
 800202e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002032:	f200 8087 	bhi.w	8002144 <HAL_TIM_ConfigClockSource+0x168>
 8002036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203a:	f000 8085 	beq.w	8002148 <HAL_TIM_ConfigClockSource+0x16c>
 800203e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002042:	d87f      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x168>
 8002044:	2b70      	cmp	r3, #112	; 0x70
 8002046:	d01a      	beq.n	800207e <HAL_TIM_ConfigClockSource+0xa2>
 8002048:	2b70      	cmp	r3, #112	; 0x70
 800204a:	d87b      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x168>
 800204c:	2b60      	cmp	r3, #96	; 0x60
 800204e:	d050      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x116>
 8002050:	2b60      	cmp	r3, #96	; 0x60
 8002052:	d877      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x168>
 8002054:	2b50      	cmp	r3, #80	; 0x50
 8002056:	d03c      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0xf6>
 8002058:	2b50      	cmp	r3, #80	; 0x50
 800205a:	d873      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x168>
 800205c:	2b40      	cmp	r3, #64	; 0x40
 800205e:	d058      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x136>
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d86f      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x168>
 8002064:	2b30      	cmp	r3, #48	; 0x30
 8002066:	d064      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x156>
 8002068:	2b30      	cmp	r3, #48	; 0x30
 800206a:	d86b      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x168>
 800206c:	2b20      	cmp	r3, #32
 800206e:	d060      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x156>
 8002070:	2b20      	cmp	r3, #32
 8002072:	d867      	bhi.n	8002144 <HAL_TIM_ConfigClockSource+0x168>
 8002074:	2b00      	cmp	r3, #0
 8002076:	d05c      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x156>
 8002078:	2b10      	cmp	r3, #16
 800207a:	d05a      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800207c:	e062      	b.n	8002144 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6899      	ldr	r1, [r3, #8]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f000 f95c 	bl	800234a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	609a      	str	r2, [r3, #8]
      break;
 80020aa:	e04e      	b.n	800214a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6899      	ldr	r1, [r3, #8]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f000 f945 	bl	800234a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ce:	609a      	str	r2, [r3, #8]
      break;
 80020d0:	e03b      	b.n	800214a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6859      	ldr	r1, [r3, #4]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	461a      	mov	r2, r3
 80020e0:	f000 f8bc 	bl	800225c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2150      	movs	r1, #80	; 0x50
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f913 	bl	8002316 <TIM_ITRx_SetConfig>
      break;
 80020f0:	e02b      	b.n	800214a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6859      	ldr	r1, [r3, #4]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	461a      	mov	r2, r3
 8002100:	f000 f8da 	bl	80022b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2160      	movs	r1, #96	; 0x60
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f903 	bl	8002316 <TIM_ITRx_SetConfig>
      break;
 8002110:	e01b      	b.n	800214a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	461a      	mov	r2, r3
 8002120:	f000 f89c 	bl	800225c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2140      	movs	r1, #64	; 0x40
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f8f3 	bl	8002316 <TIM_ITRx_SetConfig>
      break;
 8002130:	e00b      	b.n	800214a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4619      	mov	r1, r3
 800213c:	4610      	mov	r0, r2
 800213e:	f000 f8ea 	bl	8002316 <TIM_ITRx_SetConfig>
        break;
 8002142:	e002      	b.n	800214a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002144:	bf00      	nop
 8002146:	e000      	b.n	800214a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002148:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a25      	ldr	r2, [pc, #148]	; (8002254 <TIM_Base_SetConfig+0xa8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d007      	beq.n	80021d4 <TIM_Base_SetConfig+0x28>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ca:	d003      	beq.n	80021d4 <TIM_Base_SetConfig+0x28>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a22      	ldr	r2, [pc, #136]	; (8002258 <TIM_Base_SetConfig+0xac>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d108      	bne.n	80021e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <TIM_Base_SetConfig+0xa8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <TIM_Base_SetConfig+0x52>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f4:	d003      	beq.n	80021fe <TIM_Base_SetConfig+0x52>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a17      	ldr	r2, [pc, #92]	; (8002258 <TIM_Base_SetConfig+0xac>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d108      	bne.n	8002210 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4313      	orrs	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a07      	ldr	r2, [pc, #28]	; (8002254 <TIM_Base_SetConfig+0xa8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d103      	bne.n	8002244 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	615a      	str	r2, [r3, #20]
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40012c00 	.word	0x40012c00
 8002258:	40000400 	.word	0x40000400

0800225c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	f023 0201 	bic.w	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f023 030a 	bic.w	r3, r3, #10
 8002298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	621a      	str	r2, [r3, #32]
}
 80022ae:	bf00      	nop
 80022b0:	371c      	adds	r7, #28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f023 0210 	bic.w	r2, r3, #16
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	031b      	lsls	r3, r3, #12
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	621a      	str	r2, [r3, #32]
}
 800230c:	bf00      	nop
 800230e:	371c      	adds	r7, #28
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002316:	b480      	push	{r7}
 8002318:	b085      	sub	sp, #20
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	f043 0307 	orr.w	r3, r3, #7
 8002338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	609a      	str	r2, [r3, #8]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800234a:	b480      	push	{r7}
 800234c:	b087      	sub	sp, #28
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002364:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	021a      	lsls	r2, r3, #8
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	431a      	orrs	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	4313      	orrs	r3, r2
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	609a      	str	r2, [r3, #8]
}
 800237e:	bf00      	nop
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800239c:	2302      	movs	r3, #2
 800239e:	e041      	b.n	8002424 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a14      	ldr	r2, [pc, #80]	; (8002430 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d009      	beq.n	80023f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ec:	d004      	beq.n	80023f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d10c      	bne.n	8002412 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	4313      	orrs	r3, r2
 8002408:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40012c00 	.word	0x40012c00
 8002434:	40000400 	.word	0x40000400

08002438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e03f      	b.n	80024ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe fb38 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2224      	movs	r2, #36	; 0x24
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800249e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f905 	bl	80026b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b08a      	sub	sp, #40	; 0x28
 80024fa:	af02      	add	r7, sp, #8
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	4613      	mov	r3, r2
 8002504:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b20      	cmp	r3, #32
 8002514:	d17c      	bne.n	8002610 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_UART_Transmit+0x2c>
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e075      	b.n	8002612 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_UART_Transmit+0x3e>
 8002530:	2302      	movs	r3, #2
 8002532:	e06e      	b.n	8002612 <HAL_UART_Transmit+0x11c>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2221      	movs	r2, #33	; 0x21
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800254a:	f7fe fcaf 	bl	8000eac <HAL_GetTick>
 800254e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	88fa      	ldrh	r2, [r7, #6]
 8002554:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	88fa      	ldrh	r2, [r7, #6]
 800255a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002564:	d108      	bne.n	8002578 <HAL_UART_Transmit+0x82>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d104      	bne.n	8002578 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	e003      	b.n	8002580 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002588:	e02a      	b.n	80025e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2200      	movs	r2, #0
 8002592:	2180      	movs	r1, #128	; 0x80
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f840 	bl	800261a <UART_WaitOnFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e036      	b.n	8002612 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10b      	bne.n	80025c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	3302      	adds	r3, #2
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	e007      	b.n	80025d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	3301      	adds	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1cf      	bne.n	800258a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2200      	movs	r2, #0
 80025f2:	2140      	movs	r1, #64	; 0x40
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f810 	bl	800261a <UART_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e006      	b.n	8002612 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	e000      	b.n	8002612 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002610:	2302      	movs	r3, #2
  }
}
 8002612:	4618      	mov	r0, r3
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	4613      	mov	r3, r2
 8002628:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800262a:	e02c      	b.n	8002686 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002632:	d028      	beq.n	8002686 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <UART_WaitOnFlagUntilTimeout+0x30>
 800263a:	f7fe fc37 	bl	8000eac <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	429a      	cmp	r2, r3
 8002648:	d21d      	bcs.n	8002686 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002658:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0201 	bic.w	r2, r2, #1
 8002668:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e00f      	b.n	80026a6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4013      	ands	r3, r2
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	429a      	cmp	r2, r3
 8002694:	bf0c      	ite	eq
 8002696:	2301      	moveq	r3, #1
 8002698:	2300      	movne	r3, #0
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d0c3      	beq.n	800262c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026ea:	f023 030c 	bic.w	r3, r3, #12
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2c      	ldr	r2, [pc, #176]	; (80027c4 <UART_SetConfig+0x114>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d103      	bne.n	8002720 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002718:	f7ff fa8a 	bl	8001c30 <HAL_RCC_GetPCLK2Freq>
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	e002      	b.n	8002726 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002720:	f7ff fa72 	bl	8001c08 <HAL_RCC_GetPCLK1Freq>
 8002724:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	009a      	lsls	r2, r3, #2
 8002730:	441a      	add	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	4a22      	ldr	r2, [pc, #136]	; (80027c8 <UART_SetConfig+0x118>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	0119      	lsls	r1, r3, #4
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	009a      	lsls	r2, r3, #2
 8002750:	441a      	add	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	fbb2 f2f3 	udiv	r2, r2, r3
 800275c:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <UART_SetConfig+0x118>)
 800275e:	fba3 0302 	umull	r0, r3, r3, r2
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2064      	movs	r0, #100	; 0x64
 8002766:	fb00 f303 	mul.w	r3, r0, r3
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	3332      	adds	r3, #50	; 0x32
 8002770:	4a15      	ldr	r2, [pc, #84]	; (80027c8 <UART_SetConfig+0x118>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800277c:	4419      	add	r1, r3
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	009a      	lsls	r2, r3, #2
 8002788:	441a      	add	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	fbb2 f2f3 	udiv	r2, r2, r3
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <UART_SetConfig+0x118>)
 8002796:	fba3 0302 	umull	r0, r3, r3, r2
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2064      	movs	r0, #100	; 0x64
 800279e:	fb00 f303 	mul.w	r3, r0, r3
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	3332      	adds	r3, #50	; 0x32
 80027a8:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <UART_SetConfig+0x118>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	f003 020f 	and.w	r2, r3, #15
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	440a      	add	r2, r1
 80027ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40013800 	.word	0x40013800
 80027c8:	51eb851f 	.word	0x51eb851f

080027cc <__errno>:
 80027cc:	4b01      	ldr	r3, [pc, #4]	; (80027d4 <__errno+0x8>)
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	2000003c 	.word	0x2000003c

080027d8 <__libc_init_array>:
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	2600      	movs	r6, #0
 80027dc:	4d0c      	ldr	r5, [pc, #48]	; (8002810 <__libc_init_array+0x38>)
 80027de:	4c0d      	ldr	r4, [pc, #52]	; (8002814 <__libc_init_array+0x3c>)
 80027e0:	1b64      	subs	r4, r4, r5
 80027e2:	10a4      	asrs	r4, r4, #2
 80027e4:	42a6      	cmp	r6, r4
 80027e6:	d109      	bne.n	80027fc <__libc_init_array+0x24>
 80027e8:	f000 ff82 	bl	80036f0 <_init>
 80027ec:	2600      	movs	r6, #0
 80027ee:	4d0a      	ldr	r5, [pc, #40]	; (8002818 <__libc_init_array+0x40>)
 80027f0:	4c0a      	ldr	r4, [pc, #40]	; (800281c <__libc_init_array+0x44>)
 80027f2:	1b64      	subs	r4, r4, r5
 80027f4:	10a4      	asrs	r4, r4, #2
 80027f6:	42a6      	cmp	r6, r4
 80027f8:	d105      	bne.n	8002806 <__libc_init_array+0x2e>
 80027fa:	bd70      	pop	{r4, r5, r6, pc}
 80027fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002800:	4798      	blx	r3
 8002802:	3601      	adds	r6, #1
 8002804:	e7ee      	b.n	80027e4 <__libc_init_array+0xc>
 8002806:	f855 3b04 	ldr.w	r3, [r5], #4
 800280a:	4798      	blx	r3
 800280c:	3601      	adds	r6, #1
 800280e:	e7f2      	b.n	80027f6 <__libc_init_array+0x1e>
 8002810:	080037e0 	.word	0x080037e0
 8002814:	080037e0 	.word	0x080037e0
 8002818:	080037e0 	.word	0x080037e0
 800281c:	080037e4 	.word	0x080037e4

08002820 <memset>:
 8002820:	4603      	mov	r3, r0
 8002822:	4402      	add	r2, r0
 8002824:	4293      	cmp	r3, r2
 8002826:	d100      	bne.n	800282a <memset+0xa>
 8002828:	4770      	bx	lr
 800282a:	f803 1b01 	strb.w	r1, [r3], #1
 800282e:	e7f9      	b.n	8002824 <memset+0x4>

08002830 <iprintf>:
 8002830:	b40f      	push	{r0, r1, r2, r3}
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <iprintf+0x2c>)
 8002834:	b513      	push	{r0, r1, r4, lr}
 8002836:	681c      	ldr	r4, [r3, #0]
 8002838:	b124      	cbz	r4, 8002844 <iprintf+0x14>
 800283a:	69a3      	ldr	r3, [r4, #24]
 800283c:	b913      	cbnz	r3, 8002844 <iprintf+0x14>
 800283e:	4620      	mov	r0, r4
 8002840:	f000 f866 	bl	8002910 <__sinit>
 8002844:	ab05      	add	r3, sp, #20
 8002846:	4620      	mov	r0, r4
 8002848:	9a04      	ldr	r2, [sp, #16]
 800284a:	68a1      	ldr	r1, [r4, #8]
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	f000 f981 	bl	8002b54 <_vfiprintf_r>
 8002852:	b002      	add	sp, #8
 8002854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002858:	b004      	add	sp, #16
 800285a:	4770      	bx	lr
 800285c:	2000003c 	.word	0x2000003c

08002860 <std>:
 8002860:	2300      	movs	r3, #0
 8002862:	b510      	push	{r4, lr}
 8002864:	4604      	mov	r4, r0
 8002866:	e9c0 3300 	strd	r3, r3, [r0]
 800286a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800286e:	6083      	str	r3, [r0, #8]
 8002870:	8181      	strh	r1, [r0, #12]
 8002872:	6643      	str	r3, [r0, #100]	; 0x64
 8002874:	81c2      	strh	r2, [r0, #14]
 8002876:	6183      	str	r3, [r0, #24]
 8002878:	4619      	mov	r1, r3
 800287a:	2208      	movs	r2, #8
 800287c:	305c      	adds	r0, #92	; 0x5c
 800287e:	f7ff ffcf 	bl	8002820 <memset>
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <std+0x38>)
 8002884:	6224      	str	r4, [r4, #32]
 8002886:	6263      	str	r3, [r4, #36]	; 0x24
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <std+0x3c>)
 800288a:	62a3      	str	r3, [r4, #40]	; 0x28
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <std+0x40>)
 800288e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <std+0x44>)
 8002892:	6323      	str	r3, [r4, #48]	; 0x30
 8002894:	bd10      	pop	{r4, pc}
 8002896:	bf00      	nop
 8002898:	08003101 	.word	0x08003101
 800289c:	08003123 	.word	0x08003123
 80028a0:	0800315b 	.word	0x0800315b
 80028a4:	0800317f 	.word	0x0800317f

080028a8 <_cleanup_r>:
 80028a8:	4901      	ldr	r1, [pc, #4]	; (80028b0 <_cleanup_r+0x8>)
 80028aa:	f000 b8af 	b.w	8002a0c <_fwalk_reent>
 80028ae:	bf00      	nop
 80028b0:	08003459 	.word	0x08003459

080028b4 <__sfmoreglue>:
 80028b4:	b570      	push	{r4, r5, r6, lr}
 80028b6:	2568      	movs	r5, #104	; 0x68
 80028b8:	1e4a      	subs	r2, r1, #1
 80028ba:	4355      	muls	r5, r2
 80028bc:	460e      	mov	r6, r1
 80028be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80028c2:	f000 f8c5 	bl	8002a50 <_malloc_r>
 80028c6:	4604      	mov	r4, r0
 80028c8:	b140      	cbz	r0, 80028dc <__sfmoreglue+0x28>
 80028ca:	2100      	movs	r1, #0
 80028cc:	e9c0 1600 	strd	r1, r6, [r0]
 80028d0:	300c      	adds	r0, #12
 80028d2:	60a0      	str	r0, [r4, #8]
 80028d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80028d8:	f7ff ffa2 	bl	8002820 <memset>
 80028dc:	4620      	mov	r0, r4
 80028de:	bd70      	pop	{r4, r5, r6, pc}

080028e0 <__sfp_lock_acquire>:
 80028e0:	4801      	ldr	r0, [pc, #4]	; (80028e8 <__sfp_lock_acquire+0x8>)
 80028e2:	f000 b8b3 	b.w	8002a4c <__retarget_lock_acquire_recursive>
 80028e6:	bf00      	nop
 80028e8:	200001b4 	.word	0x200001b4

080028ec <__sfp_lock_release>:
 80028ec:	4801      	ldr	r0, [pc, #4]	; (80028f4 <__sfp_lock_release+0x8>)
 80028ee:	f000 b8ae 	b.w	8002a4e <__retarget_lock_release_recursive>
 80028f2:	bf00      	nop
 80028f4:	200001b4 	.word	0x200001b4

080028f8 <__sinit_lock_acquire>:
 80028f8:	4801      	ldr	r0, [pc, #4]	; (8002900 <__sinit_lock_acquire+0x8>)
 80028fa:	f000 b8a7 	b.w	8002a4c <__retarget_lock_acquire_recursive>
 80028fe:	bf00      	nop
 8002900:	200001af 	.word	0x200001af

08002904 <__sinit_lock_release>:
 8002904:	4801      	ldr	r0, [pc, #4]	; (800290c <__sinit_lock_release+0x8>)
 8002906:	f000 b8a2 	b.w	8002a4e <__retarget_lock_release_recursive>
 800290a:	bf00      	nop
 800290c:	200001af 	.word	0x200001af

08002910 <__sinit>:
 8002910:	b510      	push	{r4, lr}
 8002912:	4604      	mov	r4, r0
 8002914:	f7ff fff0 	bl	80028f8 <__sinit_lock_acquire>
 8002918:	69a3      	ldr	r3, [r4, #24]
 800291a:	b11b      	cbz	r3, 8002924 <__sinit+0x14>
 800291c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002920:	f7ff bff0 	b.w	8002904 <__sinit_lock_release>
 8002924:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002928:	6523      	str	r3, [r4, #80]	; 0x50
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <__sinit+0x68>)
 800292c:	4a13      	ldr	r2, [pc, #76]	; (800297c <__sinit+0x6c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	62a2      	str	r2, [r4, #40]	; 0x28
 8002932:	42a3      	cmp	r3, r4
 8002934:	bf08      	it	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	4620      	mov	r0, r4
 800293a:	bf08      	it	eq
 800293c:	61a3      	streq	r3, [r4, #24]
 800293e:	f000 f81f 	bl	8002980 <__sfp>
 8002942:	6060      	str	r0, [r4, #4]
 8002944:	4620      	mov	r0, r4
 8002946:	f000 f81b 	bl	8002980 <__sfp>
 800294a:	60a0      	str	r0, [r4, #8]
 800294c:	4620      	mov	r0, r4
 800294e:	f000 f817 	bl	8002980 <__sfp>
 8002952:	2200      	movs	r2, #0
 8002954:	2104      	movs	r1, #4
 8002956:	60e0      	str	r0, [r4, #12]
 8002958:	6860      	ldr	r0, [r4, #4]
 800295a:	f7ff ff81 	bl	8002860 <std>
 800295e:	2201      	movs	r2, #1
 8002960:	2109      	movs	r1, #9
 8002962:	68a0      	ldr	r0, [r4, #8]
 8002964:	f7ff ff7c 	bl	8002860 <std>
 8002968:	2202      	movs	r2, #2
 800296a:	2112      	movs	r1, #18
 800296c:	68e0      	ldr	r0, [r4, #12]
 800296e:	f7ff ff77 	bl	8002860 <std>
 8002972:	2301      	movs	r3, #1
 8002974:	61a3      	str	r3, [r4, #24]
 8002976:	e7d1      	b.n	800291c <__sinit+0xc>
 8002978:	08003748 	.word	0x08003748
 800297c:	080028a9 	.word	0x080028a9

08002980 <__sfp>:
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	4607      	mov	r7, r0
 8002984:	f7ff ffac 	bl	80028e0 <__sfp_lock_acquire>
 8002988:	4b1e      	ldr	r3, [pc, #120]	; (8002a04 <__sfp+0x84>)
 800298a:	681e      	ldr	r6, [r3, #0]
 800298c:	69b3      	ldr	r3, [r6, #24]
 800298e:	b913      	cbnz	r3, 8002996 <__sfp+0x16>
 8002990:	4630      	mov	r0, r6
 8002992:	f7ff ffbd 	bl	8002910 <__sinit>
 8002996:	3648      	adds	r6, #72	; 0x48
 8002998:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800299c:	3b01      	subs	r3, #1
 800299e:	d503      	bpl.n	80029a8 <__sfp+0x28>
 80029a0:	6833      	ldr	r3, [r6, #0]
 80029a2:	b30b      	cbz	r3, 80029e8 <__sfp+0x68>
 80029a4:	6836      	ldr	r6, [r6, #0]
 80029a6:	e7f7      	b.n	8002998 <__sfp+0x18>
 80029a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80029ac:	b9d5      	cbnz	r5, 80029e4 <__sfp+0x64>
 80029ae:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <__sfp+0x88>)
 80029b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80029b4:	60e3      	str	r3, [r4, #12]
 80029b6:	6665      	str	r5, [r4, #100]	; 0x64
 80029b8:	f000 f847 	bl	8002a4a <__retarget_lock_init_recursive>
 80029bc:	f7ff ff96 	bl	80028ec <__sfp_lock_release>
 80029c0:	2208      	movs	r2, #8
 80029c2:	4629      	mov	r1, r5
 80029c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80029c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80029cc:	6025      	str	r5, [r4, #0]
 80029ce:	61a5      	str	r5, [r4, #24]
 80029d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80029d4:	f7ff ff24 	bl	8002820 <memset>
 80029d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80029dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80029e0:	4620      	mov	r0, r4
 80029e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029e4:	3468      	adds	r4, #104	; 0x68
 80029e6:	e7d9      	b.n	800299c <__sfp+0x1c>
 80029e8:	2104      	movs	r1, #4
 80029ea:	4638      	mov	r0, r7
 80029ec:	f7ff ff62 	bl	80028b4 <__sfmoreglue>
 80029f0:	4604      	mov	r4, r0
 80029f2:	6030      	str	r0, [r6, #0]
 80029f4:	2800      	cmp	r0, #0
 80029f6:	d1d5      	bne.n	80029a4 <__sfp+0x24>
 80029f8:	f7ff ff78 	bl	80028ec <__sfp_lock_release>
 80029fc:	230c      	movs	r3, #12
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	e7ee      	b.n	80029e0 <__sfp+0x60>
 8002a02:	bf00      	nop
 8002a04:	08003748 	.word	0x08003748
 8002a08:	ffff0001 	.word	0xffff0001

08002a0c <_fwalk_reent>:
 8002a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a10:	4606      	mov	r6, r0
 8002a12:	4688      	mov	r8, r1
 8002a14:	2700      	movs	r7, #0
 8002a16:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002a1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a1e:	f1b9 0901 	subs.w	r9, r9, #1
 8002a22:	d505      	bpl.n	8002a30 <_fwalk_reent+0x24>
 8002a24:	6824      	ldr	r4, [r4, #0]
 8002a26:	2c00      	cmp	r4, #0
 8002a28:	d1f7      	bne.n	8002a1a <_fwalk_reent+0xe>
 8002a2a:	4638      	mov	r0, r7
 8002a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a30:	89ab      	ldrh	r3, [r5, #12]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d907      	bls.n	8002a46 <_fwalk_reent+0x3a>
 8002a36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	d003      	beq.n	8002a46 <_fwalk_reent+0x3a>
 8002a3e:	4629      	mov	r1, r5
 8002a40:	4630      	mov	r0, r6
 8002a42:	47c0      	blx	r8
 8002a44:	4307      	orrs	r7, r0
 8002a46:	3568      	adds	r5, #104	; 0x68
 8002a48:	e7e9      	b.n	8002a1e <_fwalk_reent+0x12>

08002a4a <__retarget_lock_init_recursive>:
 8002a4a:	4770      	bx	lr

08002a4c <__retarget_lock_acquire_recursive>:
 8002a4c:	4770      	bx	lr

08002a4e <__retarget_lock_release_recursive>:
 8002a4e:	4770      	bx	lr

08002a50 <_malloc_r>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	1ccd      	adds	r5, r1, #3
 8002a54:	f025 0503 	bic.w	r5, r5, #3
 8002a58:	3508      	adds	r5, #8
 8002a5a:	2d0c      	cmp	r5, #12
 8002a5c:	bf38      	it	cc
 8002a5e:	250c      	movcc	r5, #12
 8002a60:	2d00      	cmp	r5, #0
 8002a62:	4606      	mov	r6, r0
 8002a64:	db01      	blt.n	8002a6a <_malloc_r+0x1a>
 8002a66:	42a9      	cmp	r1, r5
 8002a68:	d903      	bls.n	8002a72 <_malloc_r+0x22>
 8002a6a:	230c      	movs	r3, #12
 8002a6c:	6033      	str	r3, [r6, #0]
 8002a6e:	2000      	movs	r0, #0
 8002a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a72:	f000 fdb1 	bl	80035d8 <__malloc_lock>
 8002a76:	4921      	ldr	r1, [pc, #132]	; (8002afc <_malloc_r+0xac>)
 8002a78:	680a      	ldr	r2, [r1, #0]
 8002a7a:	4614      	mov	r4, r2
 8002a7c:	b99c      	cbnz	r4, 8002aa6 <_malloc_r+0x56>
 8002a7e:	4f20      	ldr	r7, [pc, #128]	; (8002b00 <_malloc_r+0xb0>)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	b923      	cbnz	r3, 8002a8e <_malloc_r+0x3e>
 8002a84:	4621      	mov	r1, r4
 8002a86:	4630      	mov	r0, r6
 8002a88:	f000 fb2a 	bl	80030e0 <_sbrk_r>
 8002a8c:	6038      	str	r0, [r7, #0]
 8002a8e:	4629      	mov	r1, r5
 8002a90:	4630      	mov	r0, r6
 8002a92:	f000 fb25 	bl	80030e0 <_sbrk_r>
 8002a96:	1c43      	adds	r3, r0, #1
 8002a98:	d123      	bne.n	8002ae2 <_malloc_r+0x92>
 8002a9a:	230c      	movs	r3, #12
 8002a9c:	4630      	mov	r0, r6
 8002a9e:	6033      	str	r3, [r6, #0]
 8002aa0:	f000 fda0 	bl	80035e4 <__malloc_unlock>
 8002aa4:	e7e3      	b.n	8002a6e <_malloc_r+0x1e>
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	1b5b      	subs	r3, r3, r5
 8002aaa:	d417      	bmi.n	8002adc <_malloc_r+0x8c>
 8002aac:	2b0b      	cmp	r3, #11
 8002aae:	d903      	bls.n	8002ab8 <_malloc_r+0x68>
 8002ab0:	6023      	str	r3, [r4, #0]
 8002ab2:	441c      	add	r4, r3
 8002ab4:	6025      	str	r5, [r4, #0]
 8002ab6:	e004      	b.n	8002ac2 <_malloc_r+0x72>
 8002ab8:	6863      	ldr	r3, [r4, #4]
 8002aba:	42a2      	cmp	r2, r4
 8002abc:	bf0c      	ite	eq
 8002abe:	600b      	streq	r3, [r1, #0]
 8002ac0:	6053      	strne	r3, [r2, #4]
 8002ac2:	4630      	mov	r0, r6
 8002ac4:	f000 fd8e 	bl	80035e4 <__malloc_unlock>
 8002ac8:	f104 000b 	add.w	r0, r4, #11
 8002acc:	1d23      	adds	r3, r4, #4
 8002ace:	f020 0007 	bic.w	r0, r0, #7
 8002ad2:	1ac2      	subs	r2, r0, r3
 8002ad4:	d0cc      	beq.n	8002a70 <_malloc_r+0x20>
 8002ad6:	1a1b      	subs	r3, r3, r0
 8002ad8:	50a3      	str	r3, [r4, r2]
 8002ada:	e7c9      	b.n	8002a70 <_malloc_r+0x20>
 8002adc:	4622      	mov	r2, r4
 8002ade:	6864      	ldr	r4, [r4, #4]
 8002ae0:	e7cc      	b.n	8002a7c <_malloc_r+0x2c>
 8002ae2:	1cc4      	adds	r4, r0, #3
 8002ae4:	f024 0403 	bic.w	r4, r4, #3
 8002ae8:	42a0      	cmp	r0, r4
 8002aea:	d0e3      	beq.n	8002ab4 <_malloc_r+0x64>
 8002aec:	1a21      	subs	r1, r4, r0
 8002aee:	4630      	mov	r0, r6
 8002af0:	f000 faf6 	bl	80030e0 <_sbrk_r>
 8002af4:	3001      	adds	r0, #1
 8002af6:	d1dd      	bne.n	8002ab4 <_malloc_r+0x64>
 8002af8:	e7cf      	b.n	8002a9a <_malloc_r+0x4a>
 8002afa:	bf00      	nop
 8002afc:	20000114 	.word	0x20000114
 8002b00:	20000118 	.word	0x20000118

08002b04 <__sfputc_r>:
 8002b04:	6893      	ldr	r3, [r2, #8]
 8002b06:	b410      	push	{r4}
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	6093      	str	r3, [r2, #8]
 8002b0e:	da07      	bge.n	8002b20 <__sfputc_r+0x1c>
 8002b10:	6994      	ldr	r4, [r2, #24]
 8002b12:	42a3      	cmp	r3, r4
 8002b14:	db01      	blt.n	8002b1a <__sfputc_r+0x16>
 8002b16:	290a      	cmp	r1, #10
 8002b18:	d102      	bne.n	8002b20 <__sfputc_r+0x1c>
 8002b1a:	bc10      	pop	{r4}
 8002b1c:	f000 bb34 	b.w	8003188 <__swbuf_r>
 8002b20:	6813      	ldr	r3, [r2, #0]
 8002b22:	1c58      	adds	r0, r3, #1
 8002b24:	6010      	str	r0, [r2, #0]
 8002b26:	7019      	strb	r1, [r3, #0]
 8002b28:	4608      	mov	r0, r1
 8002b2a:	bc10      	pop	{r4}
 8002b2c:	4770      	bx	lr

08002b2e <__sfputs_r>:
 8002b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b30:	4606      	mov	r6, r0
 8002b32:	460f      	mov	r7, r1
 8002b34:	4614      	mov	r4, r2
 8002b36:	18d5      	adds	r5, r2, r3
 8002b38:	42ac      	cmp	r4, r5
 8002b3a:	d101      	bne.n	8002b40 <__sfputs_r+0x12>
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	e007      	b.n	8002b50 <__sfputs_r+0x22>
 8002b40:	463a      	mov	r2, r7
 8002b42:	4630      	mov	r0, r6
 8002b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b48:	f7ff ffdc 	bl	8002b04 <__sfputc_r>
 8002b4c:	1c43      	adds	r3, r0, #1
 8002b4e:	d1f3      	bne.n	8002b38 <__sfputs_r+0xa>
 8002b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b54 <_vfiprintf_r>:
 8002b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b58:	460d      	mov	r5, r1
 8002b5a:	4614      	mov	r4, r2
 8002b5c:	4698      	mov	r8, r3
 8002b5e:	4606      	mov	r6, r0
 8002b60:	b09d      	sub	sp, #116	; 0x74
 8002b62:	b118      	cbz	r0, 8002b6c <_vfiprintf_r+0x18>
 8002b64:	6983      	ldr	r3, [r0, #24]
 8002b66:	b90b      	cbnz	r3, 8002b6c <_vfiprintf_r+0x18>
 8002b68:	f7ff fed2 	bl	8002910 <__sinit>
 8002b6c:	4b89      	ldr	r3, [pc, #548]	; (8002d94 <_vfiprintf_r+0x240>)
 8002b6e:	429d      	cmp	r5, r3
 8002b70:	d11b      	bne.n	8002baa <_vfiprintf_r+0x56>
 8002b72:	6875      	ldr	r5, [r6, #4]
 8002b74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b76:	07d9      	lsls	r1, r3, #31
 8002b78:	d405      	bmi.n	8002b86 <_vfiprintf_r+0x32>
 8002b7a:	89ab      	ldrh	r3, [r5, #12]
 8002b7c:	059a      	lsls	r2, r3, #22
 8002b7e:	d402      	bmi.n	8002b86 <_vfiprintf_r+0x32>
 8002b80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b82:	f7ff ff63 	bl	8002a4c <__retarget_lock_acquire_recursive>
 8002b86:	89ab      	ldrh	r3, [r5, #12]
 8002b88:	071b      	lsls	r3, r3, #28
 8002b8a:	d501      	bpl.n	8002b90 <_vfiprintf_r+0x3c>
 8002b8c:	692b      	ldr	r3, [r5, #16]
 8002b8e:	b9eb      	cbnz	r3, 8002bcc <_vfiprintf_r+0x78>
 8002b90:	4629      	mov	r1, r5
 8002b92:	4630      	mov	r0, r6
 8002b94:	f000 fb5c 	bl	8003250 <__swsetup_r>
 8002b98:	b1c0      	cbz	r0, 8002bcc <_vfiprintf_r+0x78>
 8002b9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b9c:	07dc      	lsls	r4, r3, #31
 8002b9e:	d50e      	bpl.n	8002bbe <_vfiprintf_r+0x6a>
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba4:	b01d      	add	sp, #116	; 0x74
 8002ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002baa:	4b7b      	ldr	r3, [pc, #492]	; (8002d98 <_vfiprintf_r+0x244>)
 8002bac:	429d      	cmp	r5, r3
 8002bae:	d101      	bne.n	8002bb4 <_vfiprintf_r+0x60>
 8002bb0:	68b5      	ldr	r5, [r6, #8]
 8002bb2:	e7df      	b.n	8002b74 <_vfiprintf_r+0x20>
 8002bb4:	4b79      	ldr	r3, [pc, #484]	; (8002d9c <_vfiprintf_r+0x248>)
 8002bb6:	429d      	cmp	r5, r3
 8002bb8:	bf08      	it	eq
 8002bba:	68f5      	ldreq	r5, [r6, #12]
 8002bbc:	e7da      	b.n	8002b74 <_vfiprintf_r+0x20>
 8002bbe:	89ab      	ldrh	r3, [r5, #12]
 8002bc0:	0598      	lsls	r0, r3, #22
 8002bc2:	d4ed      	bmi.n	8002ba0 <_vfiprintf_r+0x4c>
 8002bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bc6:	f7ff ff42 	bl	8002a4e <__retarget_lock_release_recursive>
 8002bca:	e7e9      	b.n	8002ba0 <_vfiprintf_r+0x4c>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9309      	str	r3, [sp, #36]	; 0x24
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bd6:	2330      	movs	r3, #48	; 0x30
 8002bd8:	f04f 0901 	mov.w	r9, #1
 8002bdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002be0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002da0 <_vfiprintf_r+0x24c>
 8002be4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002be8:	4623      	mov	r3, r4
 8002bea:	469a      	mov	sl, r3
 8002bec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bf0:	b10a      	cbz	r2, 8002bf6 <_vfiprintf_r+0xa2>
 8002bf2:	2a25      	cmp	r2, #37	; 0x25
 8002bf4:	d1f9      	bne.n	8002bea <_vfiprintf_r+0x96>
 8002bf6:	ebba 0b04 	subs.w	fp, sl, r4
 8002bfa:	d00b      	beq.n	8002c14 <_vfiprintf_r+0xc0>
 8002bfc:	465b      	mov	r3, fp
 8002bfe:	4622      	mov	r2, r4
 8002c00:	4629      	mov	r1, r5
 8002c02:	4630      	mov	r0, r6
 8002c04:	f7ff ff93 	bl	8002b2e <__sfputs_r>
 8002c08:	3001      	adds	r0, #1
 8002c0a:	f000 80aa 	beq.w	8002d62 <_vfiprintf_r+0x20e>
 8002c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c10:	445a      	add	r2, fp
 8002c12:	9209      	str	r2, [sp, #36]	; 0x24
 8002c14:	f89a 3000 	ldrb.w	r3, [sl]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80a2 	beq.w	8002d62 <_vfiprintf_r+0x20e>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c28:	f10a 0a01 	add.w	sl, sl, #1
 8002c2c:	9304      	str	r3, [sp, #16]
 8002c2e:	9307      	str	r3, [sp, #28]
 8002c30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c34:	931a      	str	r3, [sp, #104]	; 0x68
 8002c36:	4654      	mov	r4, sl
 8002c38:	2205      	movs	r2, #5
 8002c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c3e:	4858      	ldr	r0, [pc, #352]	; (8002da0 <_vfiprintf_r+0x24c>)
 8002c40:	f000 fcbc 	bl	80035bc <memchr>
 8002c44:	9a04      	ldr	r2, [sp, #16]
 8002c46:	b9d8      	cbnz	r0, 8002c80 <_vfiprintf_r+0x12c>
 8002c48:	06d1      	lsls	r1, r2, #27
 8002c4a:	bf44      	itt	mi
 8002c4c:	2320      	movmi	r3, #32
 8002c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c52:	0713      	lsls	r3, r2, #28
 8002c54:	bf44      	itt	mi
 8002c56:	232b      	movmi	r3, #43	; 0x2b
 8002c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8002c60:	2b2a      	cmp	r3, #42	; 0x2a
 8002c62:	d015      	beq.n	8002c90 <_vfiprintf_r+0x13c>
 8002c64:	4654      	mov	r4, sl
 8002c66:	2000      	movs	r0, #0
 8002c68:	f04f 0c0a 	mov.w	ip, #10
 8002c6c:	9a07      	ldr	r2, [sp, #28]
 8002c6e:	4621      	mov	r1, r4
 8002c70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c74:	3b30      	subs	r3, #48	; 0x30
 8002c76:	2b09      	cmp	r3, #9
 8002c78:	d94e      	bls.n	8002d18 <_vfiprintf_r+0x1c4>
 8002c7a:	b1b0      	cbz	r0, 8002caa <_vfiprintf_r+0x156>
 8002c7c:	9207      	str	r2, [sp, #28]
 8002c7e:	e014      	b.n	8002caa <_vfiprintf_r+0x156>
 8002c80:	eba0 0308 	sub.w	r3, r0, r8
 8002c84:	fa09 f303 	lsl.w	r3, r9, r3
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	46a2      	mov	sl, r4
 8002c8c:	9304      	str	r3, [sp, #16]
 8002c8e:	e7d2      	b.n	8002c36 <_vfiprintf_r+0xe2>
 8002c90:	9b03      	ldr	r3, [sp, #12]
 8002c92:	1d19      	adds	r1, r3, #4
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	9103      	str	r1, [sp, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bfbb      	ittet	lt
 8002c9c:	425b      	neglt	r3, r3
 8002c9e:	f042 0202 	orrlt.w	r2, r2, #2
 8002ca2:	9307      	strge	r3, [sp, #28]
 8002ca4:	9307      	strlt	r3, [sp, #28]
 8002ca6:	bfb8      	it	lt
 8002ca8:	9204      	strlt	r2, [sp, #16]
 8002caa:	7823      	ldrb	r3, [r4, #0]
 8002cac:	2b2e      	cmp	r3, #46	; 0x2e
 8002cae:	d10c      	bne.n	8002cca <_vfiprintf_r+0x176>
 8002cb0:	7863      	ldrb	r3, [r4, #1]
 8002cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8002cb4:	d135      	bne.n	8002d22 <_vfiprintf_r+0x1ce>
 8002cb6:	9b03      	ldr	r3, [sp, #12]
 8002cb8:	3402      	adds	r4, #2
 8002cba:	1d1a      	adds	r2, r3, #4
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	9203      	str	r2, [sp, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bfb8      	it	lt
 8002cc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002cc8:	9305      	str	r3, [sp, #20]
 8002cca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002db0 <_vfiprintf_r+0x25c>
 8002cce:	2203      	movs	r2, #3
 8002cd0:	4650      	mov	r0, sl
 8002cd2:	7821      	ldrb	r1, [r4, #0]
 8002cd4:	f000 fc72 	bl	80035bc <memchr>
 8002cd8:	b140      	cbz	r0, 8002cec <_vfiprintf_r+0x198>
 8002cda:	2340      	movs	r3, #64	; 0x40
 8002cdc:	eba0 000a 	sub.w	r0, r0, sl
 8002ce0:	fa03 f000 	lsl.w	r0, r3, r0
 8002ce4:	9b04      	ldr	r3, [sp, #16]
 8002ce6:	3401      	adds	r4, #1
 8002ce8:	4303      	orrs	r3, r0
 8002cea:	9304      	str	r3, [sp, #16]
 8002cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cf0:	2206      	movs	r2, #6
 8002cf2:	482c      	ldr	r0, [pc, #176]	; (8002da4 <_vfiprintf_r+0x250>)
 8002cf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cf8:	f000 fc60 	bl	80035bc <memchr>
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d03f      	beq.n	8002d80 <_vfiprintf_r+0x22c>
 8002d00:	4b29      	ldr	r3, [pc, #164]	; (8002da8 <_vfiprintf_r+0x254>)
 8002d02:	bb1b      	cbnz	r3, 8002d4c <_vfiprintf_r+0x1f8>
 8002d04:	9b03      	ldr	r3, [sp, #12]
 8002d06:	3307      	adds	r3, #7
 8002d08:	f023 0307 	bic.w	r3, r3, #7
 8002d0c:	3308      	adds	r3, #8
 8002d0e:	9303      	str	r3, [sp, #12]
 8002d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d12:	443b      	add	r3, r7
 8002d14:	9309      	str	r3, [sp, #36]	; 0x24
 8002d16:	e767      	b.n	8002be8 <_vfiprintf_r+0x94>
 8002d18:	460c      	mov	r4, r1
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d20:	e7a5      	b.n	8002c6e <_vfiprintf_r+0x11a>
 8002d22:	2300      	movs	r3, #0
 8002d24:	f04f 0c0a 	mov.w	ip, #10
 8002d28:	4619      	mov	r1, r3
 8002d2a:	3401      	adds	r4, #1
 8002d2c:	9305      	str	r3, [sp, #20]
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d34:	3a30      	subs	r2, #48	; 0x30
 8002d36:	2a09      	cmp	r2, #9
 8002d38:	d903      	bls.n	8002d42 <_vfiprintf_r+0x1ee>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0c5      	beq.n	8002cca <_vfiprintf_r+0x176>
 8002d3e:	9105      	str	r1, [sp, #20]
 8002d40:	e7c3      	b.n	8002cca <_vfiprintf_r+0x176>
 8002d42:	4604      	mov	r4, r0
 8002d44:	2301      	movs	r3, #1
 8002d46:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d4a:	e7f0      	b.n	8002d2e <_vfiprintf_r+0x1da>
 8002d4c:	ab03      	add	r3, sp, #12
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	462a      	mov	r2, r5
 8002d52:	4630      	mov	r0, r6
 8002d54:	4b15      	ldr	r3, [pc, #84]	; (8002dac <_vfiprintf_r+0x258>)
 8002d56:	a904      	add	r1, sp, #16
 8002d58:	f3af 8000 	nop.w
 8002d5c:	4607      	mov	r7, r0
 8002d5e:	1c78      	adds	r0, r7, #1
 8002d60:	d1d6      	bne.n	8002d10 <_vfiprintf_r+0x1bc>
 8002d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d64:	07d9      	lsls	r1, r3, #31
 8002d66:	d405      	bmi.n	8002d74 <_vfiprintf_r+0x220>
 8002d68:	89ab      	ldrh	r3, [r5, #12]
 8002d6a:	059a      	lsls	r2, r3, #22
 8002d6c:	d402      	bmi.n	8002d74 <_vfiprintf_r+0x220>
 8002d6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d70:	f7ff fe6d 	bl	8002a4e <__retarget_lock_release_recursive>
 8002d74:	89ab      	ldrh	r3, [r5, #12]
 8002d76:	065b      	lsls	r3, r3, #25
 8002d78:	f53f af12 	bmi.w	8002ba0 <_vfiprintf_r+0x4c>
 8002d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d7e:	e711      	b.n	8002ba4 <_vfiprintf_r+0x50>
 8002d80:	ab03      	add	r3, sp, #12
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	462a      	mov	r2, r5
 8002d86:	4630      	mov	r0, r6
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <_vfiprintf_r+0x258>)
 8002d8a:	a904      	add	r1, sp, #16
 8002d8c:	f000 f882 	bl	8002e94 <_printf_i>
 8002d90:	e7e4      	b.n	8002d5c <_vfiprintf_r+0x208>
 8002d92:	bf00      	nop
 8002d94:	0800376c 	.word	0x0800376c
 8002d98:	0800378c 	.word	0x0800378c
 8002d9c:	0800374c 	.word	0x0800374c
 8002da0:	080037ac 	.word	0x080037ac
 8002da4:	080037b6 	.word	0x080037b6
 8002da8:	00000000 	.word	0x00000000
 8002dac:	08002b2f 	.word	0x08002b2f
 8002db0:	080037b2 	.word	0x080037b2

08002db4 <_printf_common>:
 8002db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002db8:	4616      	mov	r6, r2
 8002dba:	4699      	mov	r9, r3
 8002dbc:	688a      	ldr	r2, [r1, #8]
 8002dbe:	690b      	ldr	r3, [r1, #16]
 8002dc0:	4607      	mov	r7, r0
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	bfb8      	it	lt
 8002dc6:	4613      	movlt	r3, r2
 8002dc8:	6033      	str	r3, [r6, #0]
 8002dca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dce:	460c      	mov	r4, r1
 8002dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002dd4:	b10a      	cbz	r2, 8002dda <_printf_common+0x26>
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	6033      	str	r3, [r6, #0]
 8002dda:	6823      	ldr	r3, [r4, #0]
 8002ddc:	0699      	lsls	r1, r3, #26
 8002dde:	bf42      	ittt	mi
 8002de0:	6833      	ldrmi	r3, [r6, #0]
 8002de2:	3302      	addmi	r3, #2
 8002de4:	6033      	strmi	r3, [r6, #0]
 8002de6:	6825      	ldr	r5, [r4, #0]
 8002de8:	f015 0506 	ands.w	r5, r5, #6
 8002dec:	d106      	bne.n	8002dfc <_printf_common+0x48>
 8002dee:	f104 0a19 	add.w	sl, r4, #25
 8002df2:	68e3      	ldr	r3, [r4, #12]
 8002df4:	6832      	ldr	r2, [r6, #0]
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	42ab      	cmp	r3, r5
 8002dfa:	dc28      	bgt.n	8002e4e <_printf_common+0x9a>
 8002dfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e00:	1e13      	subs	r3, r2, #0
 8002e02:	6822      	ldr	r2, [r4, #0]
 8002e04:	bf18      	it	ne
 8002e06:	2301      	movne	r3, #1
 8002e08:	0692      	lsls	r2, r2, #26
 8002e0a:	d42d      	bmi.n	8002e68 <_printf_common+0xb4>
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	4638      	mov	r0, r7
 8002e10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e14:	47c0      	blx	r8
 8002e16:	3001      	adds	r0, #1
 8002e18:	d020      	beq.n	8002e5c <_printf_common+0xa8>
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	68e5      	ldr	r5, [r4, #12]
 8002e1e:	f003 0306 	and.w	r3, r3, #6
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	bf18      	it	ne
 8002e26:	2500      	movne	r5, #0
 8002e28:	6832      	ldr	r2, [r6, #0]
 8002e2a:	f04f 0600 	mov.w	r6, #0
 8002e2e:	68a3      	ldr	r3, [r4, #8]
 8002e30:	bf08      	it	eq
 8002e32:	1aad      	subeq	r5, r5, r2
 8002e34:	6922      	ldr	r2, [r4, #16]
 8002e36:	bf08      	it	eq
 8002e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bfc4      	itt	gt
 8002e40:	1a9b      	subgt	r3, r3, r2
 8002e42:	18ed      	addgt	r5, r5, r3
 8002e44:	341a      	adds	r4, #26
 8002e46:	42b5      	cmp	r5, r6
 8002e48:	d11a      	bne.n	8002e80 <_printf_common+0xcc>
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	e008      	b.n	8002e60 <_printf_common+0xac>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	4652      	mov	r2, sl
 8002e52:	4649      	mov	r1, r9
 8002e54:	4638      	mov	r0, r7
 8002e56:	47c0      	blx	r8
 8002e58:	3001      	adds	r0, #1
 8002e5a:	d103      	bne.n	8002e64 <_printf_common+0xb0>
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e64:	3501      	adds	r5, #1
 8002e66:	e7c4      	b.n	8002df2 <_printf_common+0x3e>
 8002e68:	2030      	movs	r0, #48	; 0x30
 8002e6a:	18e1      	adds	r1, r4, r3
 8002e6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e76:	4422      	add	r2, r4
 8002e78:	3302      	adds	r3, #2
 8002e7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e7e:	e7c5      	b.n	8002e0c <_printf_common+0x58>
 8002e80:	2301      	movs	r3, #1
 8002e82:	4622      	mov	r2, r4
 8002e84:	4649      	mov	r1, r9
 8002e86:	4638      	mov	r0, r7
 8002e88:	47c0      	blx	r8
 8002e8a:	3001      	adds	r0, #1
 8002e8c:	d0e6      	beq.n	8002e5c <_printf_common+0xa8>
 8002e8e:	3601      	adds	r6, #1
 8002e90:	e7d9      	b.n	8002e46 <_printf_common+0x92>
	...

08002e94 <_printf_i>:
 8002e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e98:	460c      	mov	r4, r1
 8002e9a:	7e27      	ldrb	r7, [r4, #24]
 8002e9c:	4691      	mov	r9, r2
 8002e9e:	2f78      	cmp	r7, #120	; 0x78
 8002ea0:	4680      	mov	r8, r0
 8002ea2:	469a      	mov	sl, r3
 8002ea4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ea6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eaa:	d807      	bhi.n	8002ebc <_printf_i+0x28>
 8002eac:	2f62      	cmp	r7, #98	; 0x62
 8002eae:	d80a      	bhi.n	8002ec6 <_printf_i+0x32>
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	f000 80d9 	beq.w	8003068 <_printf_i+0x1d4>
 8002eb6:	2f58      	cmp	r7, #88	; 0x58
 8002eb8:	f000 80a4 	beq.w	8003004 <_printf_i+0x170>
 8002ebc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ec4:	e03a      	b.n	8002f3c <_printf_i+0xa8>
 8002ec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002eca:	2b15      	cmp	r3, #21
 8002ecc:	d8f6      	bhi.n	8002ebc <_printf_i+0x28>
 8002ece:	a001      	add	r0, pc, #4	; (adr r0, 8002ed4 <_printf_i+0x40>)
 8002ed0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ed4:	08002f2d 	.word	0x08002f2d
 8002ed8:	08002f41 	.word	0x08002f41
 8002edc:	08002ebd 	.word	0x08002ebd
 8002ee0:	08002ebd 	.word	0x08002ebd
 8002ee4:	08002ebd 	.word	0x08002ebd
 8002ee8:	08002ebd 	.word	0x08002ebd
 8002eec:	08002f41 	.word	0x08002f41
 8002ef0:	08002ebd 	.word	0x08002ebd
 8002ef4:	08002ebd 	.word	0x08002ebd
 8002ef8:	08002ebd 	.word	0x08002ebd
 8002efc:	08002ebd 	.word	0x08002ebd
 8002f00:	0800304f 	.word	0x0800304f
 8002f04:	08002f71 	.word	0x08002f71
 8002f08:	08003031 	.word	0x08003031
 8002f0c:	08002ebd 	.word	0x08002ebd
 8002f10:	08002ebd 	.word	0x08002ebd
 8002f14:	08003071 	.word	0x08003071
 8002f18:	08002ebd 	.word	0x08002ebd
 8002f1c:	08002f71 	.word	0x08002f71
 8002f20:	08002ebd 	.word	0x08002ebd
 8002f24:	08002ebd 	.word	0x08002ebd
 8002f28:	08003039 	.word	0x08003039
 8002f2c:	680b      	ldr	r3, [r1, #0]
 8002f2e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f32:	1d1a      	adds	r2, r3, #4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	600a      	str	r2, [r1, #0]
 8002f38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0a4      	b.n	800308a <_printf_i+0x1f6>
 8002f40:	6825      	ldr	r5, [r4, #0]
 8002f42:	6808      	ldr	r0, [r1, #0]
 8002f44:	062e      	lsls	r6, r5, #24
 8002f46:	f100 0304 	add.w	r3, r0, #4
 8002f4a:	d50a      	bpl.n	8002f62 <_printf_i+0xce>
 8002f4c:	6805      	ldr	r5, [r0, #0]
 8002f4e:	600b      	str	r3, [r1, #0]
 8002f50:	2d00      	cmp	r5, #0
 8002f52:	da03      	bge.n	8002f5c <_printf_i+0xc8>
 8002f54:	232d      	movs	r3, #45	; 0x2d
 8002f56:	426d      	negs	r5, r5
 8002f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f5c:	230a      	movs	r3, #10
 8002f5e:	485e      	ldr	r0, [pc, #376]	; (80030d8 <_printf_i+0x244>)
 8002f60:	e019      	b.n	8002f96 <_printf_i+0x102>
 8002f62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f66:	6805      	ldr	r5, [r0, #0]
 8002f68:	600b      	str	r3, [r1, #0]
 8002f6a:	bf18      	it	ne
 8002f6c:	b22d      	sxthne	r5, r5
 8002f6e:	e7ef      	b.n	8002f50 <_printf_i+0xbc>
 8002f70:	680b      	ldr	r3, [r1, #0]
 8002f72:	6825      	ldr	r5, [r4, #0]
 8002f74:	1d18      	adds	r0, r3, #4
 8002f76:	6008      	str	r0, [r1, #0]
 8002f78:	0628      	lsls	r0, r5, #24
 8002f7a:	d501      	bpl.n	8002f80 <_printf_i+0xec>
 8002f7c:	681d      	ldr	r5, [r3, #0]
 8002f7e:	e002      	b.n	8002f86 <_printf_i+0xf2>
 8002f80:	0669      	lsls	r1, r5, #25
 8002f82:	d5fb      	bpl.n	8002f7c <_printf_i+0xe8>
 8002f84:	881d      	ldrh	r5, [r3, #0]
 8002f86:	2f6f      	cmp	r7, #111	; 0x6f
 8002f88:	bf0c      	ite	eq
 8002f8a:	2308      	moveq	r3, #8
 8002f8c:	230a      	movne	r3, #10
 8002f8e:	4852      	ldr	r0, [pc, #328]	; (80030d8 <_printf_i+0x244>)
 8002f90:	2100      	movs	r1, #0
 8002f92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f96:	6866      	ldr	r6, [r4, #4]
 8002f98:	2e00      	cmp	r6, #0
 8002f9a:	bfa8      	it	ge
 8002f9c:	6821      	ldrge	r1, [r4, #0]
 8002f9e:	60a6      	str	r6, [r4, #8]
 8002fa0:	bfa4      	itt	ge
 8002fa2:	f021 0104 	bicge.w	r1, r1, #4
 8002fa6:	6021      	strge	r1, [r4, #0]
 8002fa8:	b90d      	cbnz	r5, 8002fae <_printf_i+0x11a>
 8002faa:	2e00      	cmp	r6, #0
 8002fac:	d04d      	beq.n	800304a <_printf_i+0x1b6>
 8002fae:	4616      	mov	r6, r2
 8002fb0:	fbb5 f1f3 	udiv	r1, r5, r3
 8002fb4:	fb03 5711 	mls	r7, r3, r1, r5
 8002fb8:	5dc7      	ldrb	r7, [r0, r7]
 8002fba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002fbe:	462f      	mov	r7, r5
 8002fc0:	42bb      	cmp	r3, r7
 8002fc2:	460d      	mov	r5, r1
 8002fc4:	d9f4      	bls.n	8002fb0 <_printf_i+0x11c>
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d10b      	bne.n	8002fe2 <_printf_i+0x14e>
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	07df      	lsls	r7, r3, #31
 8002fce:	d508      	bpl.n	8002fe2 <_printf_i+0x14e>
 8002fd0:	6923      	ldr	r3, [r4, #16]
 8002fd2:	6861      	ldr	r1, [r4, #4]
 8002fd4:	4299      	cmp	r1, r3
 8002fd6:	bfde      	ittt	le
 8002fd8:	2330      	movle	r3, #48	; 0x30
 8002fda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002fde:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002fe2:	1b92      	subs	r2, r2, r6
 8002fe4:	6122      	str	r2, [r4, #16]
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	4621      	mov	r1, r4
 8002fea:	4640      	mov	r0, r8
 8002fec:	f8cd a000 	str.w	sl, [sp]
 8002ff0:	aa03      	add	r2, sp, #12
 8002ff2:	f7ff fedf 	bl	8002db4 <_printf_common>
 8002ff6:	3001      	adds	r0, #1
 8002ff8:	d14c      	bne.n	8003094 <_printf_i+0x200>
 8002ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffe:	b004      	add	sp, #16
 8003000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003004:	4834      	ldr	r0, [pc, #208]	; (80030d8 <_printf_i+0x244>)
 8003006:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800300a:	680e      	ldr	r6, [r1, #0]
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003012:	061f      	lsls	r7, r3, #24
 8003014:	600e      	str	r6, [r1, #0]
 8003016:	d514      	bpl.n	8003042 <_printf_i+0x1ae>
 8003018:	07d9      	lsls	r1, r3, #31
 800301a:	bf44      	itt	mi
 800301c:	f043 0320 	orrmi.w	r3, r3, #32
 8003020:	6023      	strmi	r3, [r4, #0]
 8003022:	b91d      	cbnz	r5, 800302c <_printf_i+0x198>
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	f023 0320 	bic.w	r3, r3, #32
 800302a:	6023      	str	r3, [r4, #0]
 800302c:	2310      	movs	r3, #16
 800302e:	e7af      	b.n	8002f90 <_printf_i+0xfc>
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	f043 0320 	orr.w	r3, r3, #32
 8003036:	6023      	str	r3, [r4, #0]
 8003038:	2378      	movs	r3, #120	; 0x78
 800303a:	4828      	ldr	r0, [pc, #160]	; (80030dc <_printf_i+0x248>)
 800303c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003040:	e7e3      	b.n	800300a <_printf_i+0x176>
 8003042:	065e      	lsls	r6, r3, #25
 8003044:	bf48      	it	mi
 8003046:	b2ad      	uxthmi	r5, r5
 8003048:	e7e6      	b.n	8003018 <_printf_i+0x184>
 800304a:	4616      	mov	r6, r2
 800304c:	e7bb      	b.n	8002fc6 <_printf_i+0x132>
 800304e:	680b      	ldr	r3, [r1, #0]
 8003050:	6826      	ldr	r6, [r4, #0]
 8003052:	1d1d      	adds	r5, r3, #4
 8003054:	6960      	ldr	r0, [r4, #20]
 8003056:	600d      	str	r5, [r1, #0]
 8003058:	0635      	lsls	r5, r6, #24
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	d501      	bpl.n	8003062 <_printf_i+0x1ce>
 800305e:	6018      	str	r0, [r3, #0]
 8003060:	e002      	b.n	8003068 <_printf_i+0x1d4>
 8003062:	0671      	lsls	r1, r6, #25
 8003064:	d5fb      	bpl.n	800305e <_printf_i+0x1ca>
 8003066:	8018      	strh	r0, [r3, #0]
 8003068:	2300      	movs	r3, #0
 800306a:	4616      	mov	r6, r2
 800306c:	6123      	str	r3, [r4, #16]
 800306e:	e7ba      	b.n	8002fe6 <_printf_i+0x152>
 8003070:	680b      	ldr	r3, [r1, #0]
 8003072:	1d1a      	adds	r2, r3, #4
 8003074:	600a      	str	r2, [r1, #0]
 8003076:	681e      	ldr	r6, [r3, #0]
 8003078:	2100      	movs	r1, #0
 800307a:	4630      	mov	r0, r6
 800307c:	6862      	ldr	r2, [r4, #4]
 800307e:	f000 fa9d 	bl	80035bc <memchr>
 8003082:	b108      	cbz	r0, 8003088 <_printf_i+0x1f4>
 8003084:	1b80      	subs	r0, r0, r6
 8003086:	6060      	str	r0, [r4, #4]
 8003088:	6863      	ldr	r3, [r4, #4]
 800308a:	6123      	str	r3, [r4, #16]
 800308c:	2300      	movs	r3, #0
 800308e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003092:	e7a8      	b.n	8002fe6 <_printf_i+0x152>
 8003094:	4632      	mov	r2, r6
 8003096:	4649      	mov	r1, r9
 8003098:	4640      	mov	r0, r8
 800309a:	6923      	ldr	r3, [r4, #16]
 800309c:	47d0      	blx	sl
 800309e:	3001      	adds	r0, #1
 80030a0:	d0ab      	beq.n	8002ffa <_printf_i+0x166>
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	079b      	lsls	r3, r3, #30
 80030a6:	d413      	bmi.n	80030d0 <_printf_i+0x23c>
 80030a8:	68e0      	ldr	r0, [r4, #12]
 80030aa:	9b03      	ldr	r3, [sp, #12]
 80030ac:	4298      	cmp	r0, r3
 80030ae:	bfb8      	it	lt
 80030b0:	4618      	movlt	r0, r3
 80030b2:	e7a4      	b.n	8002ffe <_printf_i+0x16a>
 80030b4:	2301      	movs	r3, #1
 80030b6:	4632      	mov	r2, r6
 80030b8:	4649      	mov	r1, r9
 80030ba:	4640      	mov	r0, r8
 80030bc:	47d0      	blx	sl
 80030be:	3001      	adds	r0, #1
 80030c0:	d09b      	beq.n	8002ffa <_printf_i+0x166>
 80030c2:	3501      	adds	r5, #1
 80030c4:	68e3      	ldr	r3, [r4, #12]
 80030c6:	9903      	ldr	r1, [sp, #12]
 80030c8:	1a5b      	subs	r3, r3, r1
 80030ca:	42ab      	cmp	r3, r5
 80030cc:	dcf2      	bgt.n	80030b4 <_printf_i+0x220>
 80030ce:	e7eb      	b.n	80030a8 <_printf_i+0x214>
 80030d0:	2500      	movs	r5, #0
 80030d2:	f104 0619 	add.w	r6, r4, #25
 80030d6:	e7f5      	b.n	80030c4 <_printf_i+0x230>
 80030d8:	080037bd 	.word	0x080037bd
 80030dc:	080037ce 	.word	0x080037ce

080030e0 <_sbrk_r>:
 80030e0:	b538      	push	{r3, r4, r5, lr}
 80030e2:	2300      	movs	r3, #0
 80030e4:	4d05      	ldr	r5, [pc, #20]	; (80030fc <_sbrk_r+0x1c>)
 80030e6:	4604      	mov	r4, r0
 80030e8:	4608      	mov	r0, r1
 80030ea:	602b      	str	r3, [r5, #0]
 80030ec:	f7fd fdd0 	bl	8000c90 <_sbrk>
 80030f0:	1c43      	adds	r3, r0, #1
 80030f2:	d102      	bne.n	80030fa <_sbrk_r+0x1a>
 80030f4:	682b      	ldr	r3, [r5, #0]
 80030f6:	b103      	cbz	r3, 80030fa <_sbrk_r+0x1a>
 80030f8:	6023      	str	r3, [r4, #0]
 80030fa:	bd38      	pop	{r3, r4, r5, pc}
 80030fc:	200001b8 	.word	0x200001b8

08003100 <__sread>:
 8003100:	b510      	push	{r4, lr}
 8003102:	460c      	mov	r4, r1
 8003104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003108:	f000 fabe 	bl	8003688 <_read_r>
 800310c:	2800      	cmp	r0, #0
 800310e:	bfab      	itete	ge
 8003110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003112:	89a3      	ldrhlt	r3, [r4, #12]
 8003114:	181b      	addge	r3, r3, r0
 8003116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800311a:	bfac      	ite	ge
 800311c:	6563      	strge	r3, [r4, #84]	; 0x54
 800311e:	81a3      	strhlt	r3, [r4, #12]
 8003120:	bd10      	pop	{r4, pc}

08003122 <__swrite>:
 8003122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003126:	461f      	mov	r7, r3
 8003128:	898b      	ldrh	r3, [r1, #12]
 800312a:	4605      	mov	r5, r0
 800312c:	05db      	lsls	r3, r3, #23
 800312e:	460c      	mov	r4, r1
 8003130:	4616      	mov	r6, r2
 8003132:	d505      	bpl.n	8003140 <__swrite+0x1e>
 8003134:	2302      	movs	r3, #2
 8003136:	2200      	movs	r2, #0
 8003138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800313c:	f000 f9c8 	bl	80034d0 <_lseek_r>
 8003140:	89a3      	ldrh	r3, [r4, #12]
 8003142:	4632      	mov	r2, r6
 8003144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003148:	81a3      	strh	r3, [r4, #12]
 800314a:	4628      	mov	r0, r5
 800314c:	463b      	mov	r3, r7
 800314e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003156:	f000 b869 	b.w	800322c <_write_r>

0800315a <__sseek>:
 800315a:	b510      	push	{r4, lr}
 800315c:	460c      	mov	r4, r1
 800315e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003162:	f000 f9b5 	bl	80034d0 <_lseek_r>
 8003166:	1c43      	adds	r3, r0, #1
 8003168:	89a3      	ldrh	r3, [r4, #12]
 800316a:	bf15      	itete	ne
 800316c:	6560      	strne	r0, [r4, #84]	; 0x54
 800316e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003176:	81a3      	strheq	r3, [r4, #12]
 8003178:	bf18      	it	ne
 800317a:	81a3      	strhne	r3, [r4, #12]
 800317c:	bd10      	pop	{r4, pc}

0800317e <__sclose>:
 800317e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003182:	f000 b8d3 	b.w	800332c <_close_r>
	...

08003188 <__swbuf_r>:
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	460e      	mov	r6, r1
 800318c:	4614      	mov	r4, r2
 800318e:	4605      	mov	r5, r0
 8003190:	b118      	cbz	r0, 800319a <__swbuf_r+0x12>
 8003192:	6983      	ldr	r3, [r0, #24]
 8003194:	b90b      	cbnz	r3, 800319a <__swbuf_r+0x12>
 8003196:	f7ff fbbb 	bl	8002910 <__sinit>
 800319a:	4b21      	ldr	r3, [pc, #132]	; (8003220 <__swbuf_r+0x98>)
 800319c:	429c      	cmp	r4, r3
 800319e:	d12b      	bne.n	80031f8 <__swbuf_r+0x70>
 80031a0:	686c      	ldr	r4, [r5, #4]
 80031a2:	69a3      	ldr	r3, [r4, #24]
 80031a4:	60a3      	str	r3, [r4, #8]
 80031a6:	89a3      	ldrh	r3, [r4, #12]
 80031a8:	071a      	lsls	r2, r3, #28
 80031aa:	d52f      	bpl.n	800320c <__swbuf_r+0x84>
 80031ac:	6923      	ldr	r3, [r4, #16]
 80031ae:	b36b      	cbz	r3, 800320c <__swbuf_r+0x84>
 80031b0:	6923      	ldr	r3, [r4, #16]
 80031b2:	6820      	ldr	r0, [r4, #0]
 80031b4:	b2f6      	uxtb	r6, r6
 80031b6:	1ac0      	subs	r0, r0, r3
 80031b8:	6963      	ldr	r3, [r4, #20]
 80031ba:	4637      	mov	r7, r6
 80031bc:	4283      	cmp	r3, r0
 80031be:	dc04      	bgt.n	80031ca <__swbuf_r+0x42>
 80031c0:	4621      	mov	r1, r4
 80031c2:	4628      	mov	r0, r5
 80031c4:	f000 f948 	bl	8003458 <_fflush_r>
 80031c8:	bb30      	cbnz	r0, 8003218 <__swbuf_r+0x90>
 80031ca:	68a3      	ldr	r3, [r4, #8]
 80031cc:	3001      	adds	r0, #1
 80031ce:	3b01      	subs	r3, #1
 80031d0:	60a3      	str	r3, [r4, #8]
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	6022      	str	r2, [r4, #0]
 80031d8:	701e      	strb	r6, [r3, #0]
 80031da:	6963      	ldr	r3, [r4, #20]
 80031dc:	4283      	cmp	r3, r0
 80031de:	d004      	beq.n	80031ea <__swbuf_r+0x62>
 80031e0:	89a3      	ldrh	r3, [r4, #12]
 80031e2:	07db      	lsls	r3, r3, #31
 80031e4:	d506      	bpl.n	80031f4 <__swbuf_r+0x6c>
 80031e6:	2e0a      	cmp	r6, #10
 80031e8:	d104      	bne.n	80031f4 <__swbuf_r+0x6c>
 80031ea:	4621      	mov	r1, r4
 80031ec:	4628      	mov	r0, r5
 80031ee:	f000 f933 	bl	8003458 <_fflush_r>
 80031f2:	b988      	cbnz	r0, 8003218 <__swbuf_r+0x90>
 80031f4:	4638      	mov	r0, r7
 80031f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <__swbuf_r+0x9c>)
 80031fa:	429c      	cmp	r4, r3
 80031fc:	d101      	bne.n	8003202 <__swbuf_r+0x7a>
 80031fe:	68ac      	ldr	r4, [r5, #8]
 8003200:	e7cf      	b.n	80031a2 <__swbuf_r+0x1a>
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <__swbuf_r+0xa0>)
 8003204:	429c      	cmp	r4, r3
 8003206:	bf08      	it	eq
 8003208:	68ec      	ldreq	r4, [r5, #12]
 800320a:	e7ca      	b.n	80031a2 <__swbuf_r+0x1a>
 800320c:	4621      	mov	r1, r4
 800320e:	4628      	mov	r0, r5
 8003210:	f000 f81e 	bl	8003250 <__swsetup_r>
 8003214:	2800      	cmp	r0, #0
 8003216:	d0cb      	beq.n	80031b0 <__swbuf_r+0x28>
 8003218:	f04f 37ff 	mov.w	r7, #4294967295
 800321c:	e7ea      	b.n	80031f4 <__swbuf_r+0x6c>
 800321e:	bf00      	nop
 8003220:	0800376c 	.word	0x0800376c
 8003224:	0800378c 	.word	0x0800378c
 8003228:	0800374c 	.word	0x0800374c

0800322c <_write_r>:
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	4604      	mov	r4, r0
 8003230:	4608      	mov	r0, r1
 8003232:	4611      	mov	r1, r2
 8003234:	2200      	movs	r2, #0
 8003236:	4d05      	ldr	r5, [pc, #20]	; (800324c <_write_r+0x20>)
 8003238:	602a      	str	r2, [r5, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	f7fd fb5e 	bl	80008fc <_write>
 8003240:	1c43      	adds	r3, r0, #1
 8003242:	d102      	bne.n	800324a <_write_r+0x1e>
 8003244:	682b      	ldr	r3, [r5, #0]
 8003246:	b103      	cbz	r3, 800324a <_write_r+0x1e>
 8003248:	6023      	str	r3, [r4, #0]
 800324a:	bd38      	pop	{r3, r4, r5, pc}
 800324c:	200001b8 	.word	0x200001b8

08003250 <__swsetup_r>:
 8003250:	4b32      	ldr	r3, [pc, #200]	; (800331c <__swsetup_r+0xcc>)
 8003252:	b570      	push	{r4, r5, r6, lr}
 8003254:	681d      	ldr	r5, [r3, #0]
 8003256:	4606      	mov	r6, r0
 8003258:	460c      	mov	r4, r1
 800325a:	b125      	cbz	r5, 8003266 <__swsetup_r+0x16>
 800325c:	69ab      	ldr	r3, [r5, #24]
 800325e:	b913      	cbnz	r3, 8003266 <__swsetup_r+0x16>
 8003260:	4628      	mov	r0, r5
 8003262:	f7ff fb55 	bl	8002910 <__sinit>
 8003266:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <__swsetup_r+0xd0>)
 8003268:	429c      	cmp	r4, r3
 800326a:	d10f      	bne.n	800328c <__swsetup_r+0x3c>
 800326c:	686c      	ldr	r4, [r5, #4]
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003274:	0719      	lsls	r1, r3, #28
 8003276:	d42c      	bmi.n	80032d2 <__swsetup_r+0x82>
 8003278:	06dd      	lsls	r5, r3, #27
 800327a:	d411      	bmi.n	80032a0 <__swsetup_r+0x50>
 800327c:	2309      	movs	r3, #9
 800327e:	6033      	str	r3, [r6, #0]
 8003280:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	81a3      	strh	r3, [r4, #12]
 800328a:	e03e      	b.n	800330a <__swsetup_r+0xba>
 800328c:	4b25      	ldr	r3, [pc, #148]	; (8003324 <__swsetup_r+0xd4>)
 800328e:	429c      	cmp	r4, r3
 8003290:	d101      	bne.n	8003296 <__swsetup_r+0x46>
 8003292:	68ac      	ldr	r4, [r5, #8]
 8003294:	e7eb      	b.n	800326e <__swsetup_r+0x1e>
 8003296:	4b24      	ldr	r3, [pc, #144]	; (8003328 <__swsetup_r+0xd8>)
 8003298:	429c      	cmp	r4, r3
 800329a:	bf08      	it	eq
 800329c:	68ec      	ldreq	r4, [r5, #12]
 800329e:	e7e6      	b.n	800326e <__swsetup_r+0x1e>
 80032a0:	0758      	lsls	r0, r3, #29
 80032a2:	d512      	bpl.n	80032ca <__swsetup_r+0x7a>
 80032a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032a6:	b141      	cbz	r1, 80032ba <__swsetup_r+0x6a>
 80032a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032ac:	4299      	cmp	r1, r3
 80032ae:	d002      	beq.n	80032b6 <__swsetup_r+0x66>
 80032b0:	4630      	mov	r0, r6
 80032b2:	f000 f99d 	bl	80035f0 <_free_r>
 80032b6:	2300      	movs	r3, #0
 80032b8:	6363      	str	r3, [r4, #52]	; 0x34
 80032ba:	89a3      	ldrh	r3, [r4, #12]
 80032bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032c0:	81a3      	strh	r3, [r4, #12]
 80032c2:	2300      	movs	r3, #0
 80032c4:	6063      	str	r3, [r4, #4]
 80032c6:	6923      	ldr	r3, [r4, #16]
 80032c8:	6023      	str	r3, [r4, #0]
 80032ca:	89a3      	ldrh	r3, [r4, #12]
 80032cc:	f043 0308 	orr.w	r3, r3, #8
 80032d0:	81a3      	strh	r3, [r4, #12]
 80032d2:	6923      	ldr	r3, [r4, #16]
 80032d4:	b94b      	cbnz	r3, 80032ea <__swsetup_r+0x9a>
 80032d6:	89a3      	ldrh	r3, [r4, #12]
 80032d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e0:	d003      	beq.n	80032ea <__swsetup_r+0x9a>
 80032e2:	4621      	mov	r1, r4
 80032e4:	4630      	mov	r0, r6
 80032e6:	f000 f929 	bl	800353c <__smakebuf_r>
 80032ea:	89a0      	ldrh	r0, [r4, #12]
 80032ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032f0:	f010 0301 	ands.w	r3, r0, #1
 80032f4:	d00a      	beq.n	800330c <__swsetup_r+0xbc>
 80032f6:	2300      	movs	r3, #0
 80032f8:	60a3      	str	r3, [r4, #8]
 80032fa:	6963      	ldr	r3, [r4, #20]
 80032fc:	425b      	negs	r3, r3
 80032fe:	61a3      	str	r3, [r4, #24]
 8003300:	6923      	ldr	r3, [r4, #16]
 8003302:	b943      	cbnz	r3, 8003316 <__swsetup_r+0xc6>
 8003304:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003308:	d1ba      	bne.n	8003280 <__swsetup_r+0x30>
 800330a:	bd70      	pop	{r4, r5, r6, pc}
 800330c:	0781      	lsls	r1, r0, #30
 800330e:	bf58      	it	pl
 8003310:	6963      	ldrpl	r3, [r4, #20]
 8003312:	60a3      	str	r3, [r4, #8]
 8003314:	e7f4      	b.n	8003300 <__swsetup_r+0xb0>
 8003316:	2000      	movs	r0, #0
 8003318:	e7f7      	b.n	800330a <__swsetup_r+0xba>
 800331a:	bf00      	nop
 800331c:	2000003c 	.word	0x2000003c
 8003320:	0800376c 	.word	0x0800376c
 8003324:	0800378c 	.word	0x0800378c
 8003328:	0800374c 	.word	0x0800374c

0800332c <_close_r>:
 800332c:	b538      	push	{r3, r4, r5, lr}
 800332e:	2300      	movs	r3, #0
 8003330:	4d05      	ldr	r5, [pc, #20]	; (8003348 <_close_r+0x1c>)
 8003332:	4604      	mov	r4, r0
 8003334:	4608      	mov	r0, r1
 8003336:	602b      	str	r3, [r5, #0]
 8003338:	f7fd fc79 	bl	8000c2e <_close>
 800333c:	1c43      	adds	r3, r0, #1
 800333e:	d102      	bne.n	8003346 <_close_r+0x1a>
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	b103      	cbz	r3, 8003346 <_close_r+0x1a>
 8003344:	6023      	str	r3, [r4, #0]
 8003346:	bd38      	pop	{r3, r4, r5, pc}
 8003348:	200001b8 	.word	0x200001b8

0800334c <__sflush_r>:
 800334c:	898a      	ldrh	r2, [r1, #12]
 800334e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003352:	4605      	mov	r5, r0
 8003354:	0710      	lsls	r0, r2, #28
 8003356:	460c      	mov	r4, r1
 8003358:	d458      	bmi.n	800340c <__sflush_r+0xc0>
 800335a:	684b      	ldr	r3, [r1, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	dc05      	bgt.n	800336c <__sflush_r+0x20>
 8003360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	dc02      	bgt.n	800336c <__sflush_r+0x20>
 8003366:	2000      	movs	r0, #0
 8003368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800336c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800336e:	2e00      	cmp	r6, #0
 8003370:	d0f9      	beq.n	8003366 <__sflush_r+0x1a>
 8003372:	2300      	movs	r3, #0
 8003374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003378:	682f      	ldr	r7, [r5, #0]
 800337a:	602b      	str	r3, [r5, #0]
 800337c:	d032      	beq.n	80033e4 <__sflush_r+0x98>
 800337e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003380:	89a3      	ldrh	r3, [r4, #12]
 8003382:	075a      	lsls	r2, r3, #29
 8003384:	d505      	bpl.n	8003392 <__sflush_r+0x46>
 8003386:	6863      	ldr	r3, [r4, #4]
 8003388:	1ac0      	subs	r0, r0, r3
 800338a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800338c:	b10b      	cbz	r3, 8003392 <__sflush_r+0x46>
 800338e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003390:	1ac0      	subs	r0, r0, r3
 8003392:	2300      	movs	r3, #0
 8003394:	4602      	mov	r2, r0
 8003396:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003398:	4628      	mov	r0, r5
 800339a:	6a21      	ldr	r1, [r4, #32]
 800339c:	47b0      	blx	r6
 800339e:	1c43      	adds	r3, r0, #1
 80033a0:	89a3      	ldrh	r3, [r4, #12]
 80033a2:	d106      	bne.n	80033b2 <__sflush_r+0x66>
 80033a4:	6829      	ldr	r1, [r5, #0]
 80033a6:	291d      	cmp	r1, #29
 80033a8:	d82c      	bhi.n	8003404 <__sflush_r+0xb8>
 80033aa:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <__sflush_r+0x108>)
 80033ac:	40ca      	lsrs	r2, r1
 80033ae:	07d6      	lsls	r6, r2, #31
 80033b0:	d528      	bpl.n	8003404 <__sflush_r+0xb8>
 80033b2:	2200      	movs	r2, #0
 80033b4:	6062      	str	r2, [r4, #4]
 80033b6:	6922      	ldr	r2, [r4, #16]
 80033b8:	04d9      	lsls	r1, r3, #19
 80033ba:	6022      	str	r2, [r4, #0]
 80033bc:	d504      	bpl.n	80033c8 <__sflush_r+0x7c>
 80033be:	1c42      	adds	r2, r0, #1
 80033c0:	d101      	bne.n	80033c6 <__sflush_r+0x7a>
 80033c2:	682b      	ldr	r3, [r5, #0]
 80033c4:	b903      	cbnz	r3, 80033c8 <__sflush_r+0x7c>
 80033c6:	6560      	str	r0, [r4, #84]	; 0x54
 80033c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033ca:	602f      	str	r7, [r5, #0]
 80033cc:	2900      	cmp	r1, #0
 80033ce:	d0ca      	beq.n	8003366 <__sflush_r+0x1a>
 80033d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033d4:	4299      	cmp	r1, r3
 80033d6:	d002      	beq.n	80033de <__sflush_r+0x92>
 80033d8:	4628      	mov	r0, r5
 80033da:	f000 f909 	bl	80035f0 <_free_r>
 80033de:	2000      	movs	r0, #0
 80033e0:	6360      	str	r0, [r4, #52]	; 0x34
 80033e2:	e7c1      	b.n	8003368 <__sflush_r+0x1c>
 80033e4:	6a21      	ldr	r1, [r4, #32]
 80033e6:	2301      	movs	r3, #1
 80033e8:	4628      	mov	r0, r5
 80033ea:	47b0      	blx	r6
 80033ec:	1c41      	adds	r1, r0, #1
 80033ee:	d1c7      	bne.n	8003380 <__sflush_r+0x34>
 80033f0:	682b      	ldr	r3, [r5, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0c4      	beq.n	8003380 <__sflush_r+0x34>
 80033f6:	2b1d      	cmp	r3, #29
 80033f8:	d001      	beq.n	80033fe <__sflush_r+0xb2>
 80033fa:	2b16      	cmp	r3, #22
 80033fc:	d101      	bne.n	8003402 <__sflush_r+0xb6>
 80033fe:	602f      	str	r7, [r5, #0]
 8003400:	e7b1      	b.n	8003366 <__sflush_r+0x1a>
 8003402:	89a3      	ldrh	r3, [r4, #12]
 8003404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003408:	81a3      	strh	r3, [r4, #12]
 800340a:	e7ad      	b.n	8003368 <__sflush_r+0x1c>
 800340c:	690f      	ldr	r7, [r1, #16]
 800340e:	2f00      	cmp	r7, #0
 8003410:	d0a9      	beq.n	8003366 <__sflush_r+0x1a>
 8003412:	0793      	lsls	r3, r2, #30
 8003414:	bf18      	it	ne
 8003416:	2300      	movne	r3, #0
 8003418:	680e      	ldr	r6, [r1, #0]
 800341a:	bf08      	it	eq
 800341c:	694b      	ldreq	r3, [r1, #20]
 800341e:	eba6 0807 	sub.w	r8, r6, r7
 8003422:	600f      	str	r7, [r1, #0]
 8003424:	608b      	str	r3, [r1, #8]
 8003426:	f1b8 0f00 	cmp.w	r8, #0
 800342a:	dd9c      	ble.n	8003366 <__sflush_r+0x1a>
 800342c:	4643      	mov	r3, r8
 800342e:	463a      	mov	r2, r7
 8003430:	4628      	mov	r0, r5
 8003432:	6a21      	ldr	r1, [r4, #32]
 8003434:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003436:	47b0      	blx	r6
 8003438:	2800      	cmp	r0, #0
 800343a:	dc06      	bgt.n	800344a <__sflush_r+0xfe>
 800343c:	89a3      	ldrh	r3, [r4, #12]
 800343e:	f04f 30ff 	mov.w	r0, #4294967295
 8003442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003446:	81a3      	strh	r3, [r4, #12]
 8003448:	e78e      	b.n	8003368 <__sflush_r+0x1c>
 800344a:	4407      	add	r7, r0
 800344c:	eba8 0800 	sub.w	r8, r8, r0
 8003450:	e7e9      	b.n	8003426 <__sflush_r+0xda>
 8003452:	bf00      	nop
 8003454:	20400001 	.word	0x20400001

08003458 <_fflush_r>:
 8003458:	b538      	push	{r3, r4, r5, lr}
 800345a:	690b      	ldr	r3, [r1, #16]
 800345c:	4605      	mov	r5, r0
 800345e:	460c      	mov	r4, r1
 8003460:	b913      	cbnz	r3, 8003468 <_fflush_r+0x10>
 8003462:	2500      	movs	r5, #0
 8003464:	4628      	mov	r0, r5
 8003466:	bd38      	pop	{r3, r4, r5, pc}
 8003468:	b118      	cbz	r0, 8003472 <_fflush_r+0x1a>
 800346a:	6983      	ldr	r3, [r0, #24]
 800346c:	b90b      	cbnz	r3, 8003472 <_fflush_r+0x1a>
 800346e:	f7ff fa4f 	bl	8002910 <__sinit>
 8003472:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <_fflush_r+0x6c>)
 8003474:	429c      	cmp	r4, r3
 8003476:	d11b      	bne.n	80034b0 <_fflush_r+0x58>
 8003478:	686c      	ldr	r4, [r5, #4]
 800347a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0ef      	beq.n	8003462 <_fflush_r+0xa>
 8003482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003484:	07d0      	lsls	r0, r2, #31
 8003486:	d404      	bmi.n	8003492 <_fflush_r+0x3a>
 8003488:	0599      	lsls	r1, r3, #22
 800348a:	d402      	bmi.n	8003492 <_fflush_r+0x3a>
 800348c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800348e:	f7ff fadd 	bl	8002a4c <__retarget_lock_acquire_recursive>
 8003492:	4628      	mov	r0, r5
 8003494:	4621      	mov	r1, r4
 8003496:	f7ff ff59 	bl	800334c <__sflush_r>
 800349a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800349c:	4605      	mov	r5, r0
 800349e:	07da      	lsls	r2, r3, #31
 80034a0:	d4e0      	bmi.n	8003464 <_fflush_r+0xc>
 80034a2:	89a3      	ldrh	r3, [r4, #12]
 80034a4:	059b      	lsls	r3, r3, #22
 80034a6:	d4dd      	bmi.n	8003464 <_fflush_r+0xc>
 80034a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034aa:	f7ff fad0 	bl	8002a4e <__retarget_lock_release_recursive>
 80034ae:	e7d9      	b.n	8003464 <_fflush_r+0xc>
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <_fflush_r+0x70>)
 80034b2:	429c      	cmp	r4, r3
 80034b4:	d101      	bne.n	80034ba <_fflush_r+0x62>
 80034b6:	68ac      	ldr	r4, [r5, #8]
 80034b8:	e7df      	b.n	800347a <_fflush_r+0x22>
 80034ba:	4b04      	ldr	r3, [pc, #16]	; (80034cc <_fflush_r+0x74>)
 80034bc:	429c      	cmp	r4, r3
 80034be:	bf08      	it	eq
 80034c0:	68ec      	ldreq	r4, [r5, #12]
 80034c2:	e7da      	b.n	800347a <_fflush_r+0x22>
 80034c4:	0800376c 	.word	0x0800376c
 80034c8:	0800378c 	.word	0x0800378c
 80034cc:	0800374c 	.word	0x0800374c

080034d0 <_lseek_r>:
 80034d0:	b538      	push	{r3, r4, r5, lr}
 80034d2:	4604      	mov	r4, r0
 80034d4:	4608      	mov	r0, r1
 80034d6:	4611      	mov	r1, r2
 80034d8:	2200      	movs	r2, #0
 80034da:	4d05      	ldr	r5, [pc, #20]	; (80034f0 <_lseek_r+0x20>)
 80034dc:	602a      	str	r2, [r5, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	f7fd fbc9 	bl	8000c76 <_lseek>
 80034e4:	1c43      	adds	r3, r0, #1
 80034e6:	d102      	bne.n	80034ee <_lseek_r+0x1e>
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	b103      	cbz	r3, 80034ee <_lseek_r+0x1e>
 80034ec:	6023      	str	r3, [r4, #0]
 80034ee:	bd38      	pop	{r3, r4, r5, pc}
 80034f0:	200001b8 	.word	0x200001b8

080034f4 <__swhatbuf_r>:
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	460e      	mov	r6, r1
 80034f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034fc:	4614      	mov	r4, r2
 80034fe:	2900      	cmp	r1, #0
 8003500:	461d      	mov	r5, r3
 8003502:	b096      	sub	sp, #88	; 0x58
 8003504:	da07      	bge.n	8003516 <__swhatbuf_r+0x22>
 8003506:	2300      	movs	r3, #0
 8003508:	602b      	str	r3, [r5, #0]
 800350a:	89b3      	ldrh	r3, [r6, #12]
 800350c:	061a      	lsls	r2, r3, #24
 800350e:	d410      	bmi.n	8003532 <__swhatbuf_r+0x3e>
 8003510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003514:	e00e      	b.n	8003534 <__swhatbuf_r+0x40>
 8003516:	466a      	mov	r2, sp
 8003518:	f000 f8c8 	bl	80036ac <_fstat_r>
 800351c:	2800      	cmp	r0, #0
 800351e:	dbf2      	blt.n	8003506 <__swhatbuf_r+0x12>
 8003520:	9a01      	ldr	r2, [sp, #4]
 8003522:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003526:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800352a:	425a      	negs	r2, r3
 800352c:	415a      	adcs	r2, r3
 800352e:	602a      	str	r2, [r5, #0]
 8003530:	e7ee      	b.n	8003510 <__swhatbuf_r+0x1c>
 8003532:	2340      	movs	r3, #64	; 0x40
 8003534:	2000      	movs	r0, #0
 8003536:	6023      	str	r3, [r4, #0]
 8003538:	b016      	add	sp, #88	; 0x58
 800353a:	bd70      	pop	{r4, r5, r6, pc}

0800353c <__smakebuf_r>:
 800353c:	898b      	ldrh	r3, [r1, #12]
 800353e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003540:	079d      	lsls	r5, r3, #30
 8003542:	4606      	mov	r6, r0
 8003544:	460c      	mov	r4, r1
 8003546:	d507      	bpl.n	8003558 <__smakebuf_r+0x1c>
 8003548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	6123      	str	r3, [r4, #16]
 8003550:	2301      	movs	r3, #1
 8003552:	6163      	str	r3, [r4, #20]
 8003554:	b002      	add	sp, #8
 8003556:	bd70      	pop	{r4, r5, r6, pc}
 8003558:	466a      	mov	r2, sp
 800355a:	ab01      	add	r3, sp, #4
 800355c:	f7ff ffca 	bl	80034f4 <__swhatbuf_r>
 8003560:	9900      	ldr	r1, [sp, #0]
 8003562:	4605      	mov	r5, r0
 8003564:	4630      	mov	r0, r6
 8003566:	f7ff fa73 	bl	8002a50 <_malloc_r>
 800356a:	b948      	cbnz	r0, 8003580 <__smakebuf_r+0x44>
 800356c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003570:	059a      	lsls	r2, r3, #22
 8003572:	d4ef      	bmi.n	8003554 <__smakebuf_r+0x18>
 8003574:	f023 0303 	bic.w	r3, r3, #3
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	81a3      	strh	r3, [r4, #12]
 800357e:	e7e3      	b.n	8003548 <__smakebuf_r+0xc>
 8003580:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <__smakebuf_r+0x7c>)
 8003582:	62b3      	str	r3, [r6, #40]	; 0x28
 8003584:	89a3      	ldrh	r3, [r4, #12]
 8003586:	6020      	str	r0, [r4, #0]
 8003588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358c:	81a3      	strh	r3, [r4, #12]
 800358e:	9b00      	ldr	r3, [sp, #0]
 8003590:	6120      	str	r0, [r4, #16]
 8003592:	6163      	str	r3, [r4, #20]
 8003594:	9b01      	ldr	r3, [sp, #4]
 8003596:	b15b      	cbz	r3, 80035b0 <__smakebuf_r+0x74>
 8003598:	4630      	mov	r0, r6
 800359a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800359e:	f000 f897 	bl	80036d0 <_isatty_r>
 80035a2:	b128      	cbz	r0, 80035b0 <__smakebuf_r+0x74>
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	81a3      	strh	r3, [r4, #12]
 80035b0:	89a0      	ldrh	r0, [r4, #12]
 80035b2:	4305      	orrs	r5, r0
 80035b4:	81a5      	strh	r5, [r4, #12]
 80035b6:	e7cd      	b.n	8003554 <__smakebuf_r+0x18>
 80035b8:	080028a9 	.word	0x080028a9

080035bc <memchr>:
 80035bc:	4603      	mov	r3, r0
 80035be:	b510      	push	{r4, lr}
 80035c0:	b2c9      	uxtb	r1, r1
 80035c2:	4402      	add	r2, r0
 80035c4:	4293      	cmp	r3, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	d101      	bne.n	80035ce <memchr+0x12>
 80035ca:	2000      	movs	r0, #0
 80035cc:	e003      	b.n	80035d6 <memchr+0x1a>
 80035ce:	7804      	ldrb	r4, [r0, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	428c      	cmp	r4, r1
 80035d4:	d1f6      	bne.n	80035c4 <memchr+0x8>
 80035d6:	bd10      	pop	{r4, pc}

080035d8 <__malloc_lock>:
 80035d8:	4801      	ldr	r0, [pc, #4]	; (80035e0 <__malloc_lock+0x8>)
 80035da:	f7ff ba37 	b.w	8002a4c <__retarget_lock_acquire_recursive>
 80035de:	bf00      	nop
 80035e0:	200001b0 	.word	0x200001b0

080035e4 <__malloc_unlock>:
 80035e4:	4801      	ldr	r0, [pc, #4]	; (80035ec <__malloc_unlock+0x8>)
 80035e6:	f7ff ba32 	b.w	8002a4e <__retarget_lock_release_recursive>
 80035ea:	bf00      	nop
 80035ec:	200001b0 	.word	0x200001b0

080035f0 <_free_r>:
 80035f0:	b538      	push	{r3, r4, r5, lr}
 80035f2:	4605      	mov	r5, r0
 80035f4:	2900      	cmp	r1, #0
 80035f6:	d043      	beq.n	8003680 <_free_r+0x90>
 80035f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035fc:	1f0c      	subs	r4, r1, #4
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bfb8      	it	lt
 8003602:	18e4      	addlt	r4, r4, r3
 8003604:	f7ff ffe8 	bl	80035d8 <__malloc_lock>
 8003608:	4a1e      	ldr	r2, [pc, #120]	; (8003684 <_free_r+0x94>)
 800360a:	6813      	ldr	r3, [r2, #0]
 800360c:	4610      	mov	r0, r2
 800360e:	b933      	cbnz	r3, 800361e <_free_r+0x2e>
 8003610:	6063      	str	r3, [r4, #4]
 8003612:	6014      	str	r4, [r2, #0]
 8003614:	4628      	mov	r0, r5
 8003616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800361a:	f7ff bfe3 	b.w	80035e4 <__malloc_unlock>
 800361e:	42a3      	cmp	r3, r4
 8003620:	d90a      	bls.n	8003638 <_free_r+0x48>
 8003622:	6821      	ldr	r1, [r4, #0]
 8003624:	1862      	adds	r2, r4, r1
 8003626:	4293      	cmp	r3, r2
 8003628:	bf01      	itttt	eq
 800362a:	681a      	ldreq	r2, [r3, #0]
 800362c:	685b      	ldreq	r3, [r3, #4]
 800362e:	1852      	addeq	r2, r2, r1
 8003630:	6022      	streq	r2, [r4, #0]
 8003632:	6063      	str	r3, [r4, #4]
 8003634:	6004      	str	r4, [r0, #0]
 8003636:	e7ed      	b.n	8003614 <_free_r+0x24>
 8003638:	461a      	mov	r2, r3
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	b10b      	cbz	r3, 8003642 <_free_r+0x52>
 800363e:	42a3      	cmp	r3, r4
 8003640:	d9fa      	bls.n	8003638 <_free_r+0x48>
 8003642:	6811      	ldr	r1, [r2, #0]
 8003644:	1850      	adds	r0, r2, r1
 8003646:	42a0      	cmp	r0, r4
 8003648:	d10b      	bne.n	8003662 <_free_r+0x72>
 800364a:	6820      	ldr	r0, [r4, #0]
 800364c:	4401      	add	r1, r0
 800364e:	1850      	adds	r0, r2, r1
 8003650:	4283      	cmp	r3, r0
 8003652:	6011      	str	r1, [r2, #0]
 8003654:	d1de      	bne.n	8003614 <_free_r+0x24>
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4401      	add	r1, r0
 800365c:	6011      	str	r1, [r2, #0]
 800365e:	6053      	str	r3, [r2, #4]
 8003660:	e7d8      	b.n	8003614 <_free_r+0x24>
 8003662:	d902      	bls.n	800366a <_free_r+0x7a>
 8003664:	230c      	movs	r3, #12
 8003666:	602b      	str	r3, [r5, #0]
 8003668:	e7d4      	b.n	8003614 <_free_r+0x24>
 800366a:	6820      	ldr	r0, [r4, #0]
 800366c:	1821      	adds	r1, r4, r0
 800366e:	428b      	cmp	r3, r1
 8003670:	bf01      	itttt	eq
 8003672:	6819      	ldreq	r1, [r3, #0]
 8003674:	685b      	ldreq	r3, [r3, #4]
 8003676:	1809      	addeq	r1, r1, r0
 8003678:	6021      	streq	r1, [r4, #0]
 800367a:	6063      	str	r3, [r4, #4]
 800367c:	6054      	str	r4, [r2, #4]
 800367e:	e7c9      	b.n	8003614 <_free_r+0x24>
 8003680:	bd38      	pop	{r3, r4, r5, pc}
 8003682:	bf00      	nop
 8003684:	20000114 	.word	0x20000114

08003688 <_read_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	4604      	mov	r4, r0
 800368c:	4608      	mov	r0, r1
 800368e:	4611      	mov	r1, r2
 8003690:	2200      	movs	r2, #0
 8003692:	4d05      	ldr	r5, [pc, #20]	; (80036a8 <_read_r+0x20>)
 8003694:	602a      	str	r2, [r5, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	f7fd faac 	bl	8000bf4 <_read>
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d102      	bne.n	80036a6 <_read_r+0x1e>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	b103      	cbz	r3, 80036a6 <_read_r+0x1e>
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
 80036a8:	200001b8 	.word	0x200001b8

080036ac <_fstat_r>:
 80036ac:	b538      	push	{r3, r4, r5, lr}
 80036ae:	2300      	movs	r3, #0
 80036b0:	4d06      	ldr	r5, [pc, #24]	; (80036cc <_fstat_r+0x20>)
 80036b2:	4604      	mov	r4, r0
 80036b4:	4608      	mov	r0, r1
 80036b6:	4611      	mov	r1, r2
 80036b8:	602b      	str	r3, [r5, #0]
 80036ba:	f7fd fac3 	bl	8000c44 <_fstat>
 80036be:	1c43      	adds	r3, r0, #1
 80036c0:	d102      	bne.n	80036c8 <_fstat_r+0x1c>
 80036c2:	682b      	ldr	r3, [r5, #0]
 80036c4:	b103      	cbz	r3, 80036c8 <_fstat_r+0x1c>
 80036c6:	6023      	str	r3, [r4, #0]
 80036c8:	bd38      	pop	{r3, r4, r5, pc}
 80036ca:	bf00      	nop
 80036cc:	200001b8 	.word	0x200001b8

080036d0 <_isatty_r>:
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	2300      	movs	r3, #0
 80036d4:	4d05      	ldr	r5, [pc, #20]	; (80036ec <_isatty_r+0x1c>)
 80036d6:	4604      	mov	r4, r0
 80036d8:	4608      	mov	r0, r1
 80036da:	602b      	str	r3, [r5, #0]
 80036dc:	f7fd fac1 	bl	8000c62 <_isatty>
 80036e0:	1c43      	adds	r3, r0, #1
 80036e2:	d102      	bne.n	80036ea <_isatty_r+0x1a>
 80036e4:	682b      	ldr	r3, [r5, #0]
 80036e6:	b103      	cbz	r3, 80036ea <_isatty_r+0x1a>
 80036e8:	6023      	str	r3, [r4, #0]
 80036ea:	bd38      	pop	{r3, r4, r5, pc}
 80036ec:	200001b8 	.word	0x200001b8

080036f0 <_init>:
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f2:	bf00      	nop
 80036f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f6:	bc08      	pop	{r3}
 80036f8:	469e      	mov	lr, r3
 80036fa:	4770      	bx	lr

080036fc <_fini>:
 80036fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fe:	bf00      	nop
 8003700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003702:	bc08      	pop	{r3}
 8003704:	469e      	mov	lr, r3
 8003706:	4770      	bx	lr
