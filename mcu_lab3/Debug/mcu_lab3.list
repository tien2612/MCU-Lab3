
mcu_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000260c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002718  08002718  00012718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002740  08002740  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08002740  08002740  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002740  08002740  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002740  08002740  00012740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002744  08002744  00012744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08002748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000048  08002790  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002790  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0d2  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe3  00000000  00000000  0002c143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0002e128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00017f5c  00000000  00000000  0002edc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000dd40  00000000  00000000  00046d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000888d5  00000000  00000000  00054a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000dd331  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b98  00000000  00000000  000dd388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003274  00000000  00000000  000ddf20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08002700 	.word	0x08002700

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08002700 	.word	0x08002700

0800014c <WhichButtonIsPressed>:
	BUTTON_PRESS_MORE_THAN_1S
};

enum ButtonState buttonState = BUTTON_RELEASED;

int WhichButtonIsPressed() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) return button_mode_is_pressed;
 8000150:	2000      	movs	r0, #0
 8000152:	f000 f977 	bl	8000444 <is_button_pressed>
 8000156:	4603      	mov	r3, r0
 8000158:	2b00      	cmp	r3, #0
 800015a:	d001      	beq.n	8000160 <WhichButtonIsPressed+0x14>
 800015c:	230a      	movs	r3, #10
 800015e:	e018      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(1)) return button_add_is_pressed;
 8000160:	2001      	movs	r0, #1
 8000162:	f000 f96f 	bl	8000444 <is_button_pressed>
 8000166:	4603      	mov	r3, r0
 8000168:	2b00      	cmp	r3, #0
 800016a:	d001      	beq.n	8000170 <WhichButtonIsPressed+0x24>
 800016c:	230b      	movs	r3, #11
 800016e:	e010      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(2)) return button_confirm_is_pressed;
 8000170:	2002      	movs	r0, #2
 8000172:	f000 f967 	bl	8000444 <is_button_pressed>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d001      	beq.n	8000180 <WhichButtonIsPressed+0x34>
 800017c:	230c      	movs	r3, #12
 800017e:	e008      	b.n	8000192 <WhichButtonIsPressed+0x46>
	if (is_button_pressed(3)) return button_reset_is_pressed;
 8000180:	2003      	movs	r0, #3
 8000182:	f000 f95f 	bl	8000444 <is_button_pressed>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <WhichButtonIsPressed+0x44>
 800018c:	230d      	movs	r3, #13
 800018e:	e000      	b.n	8000192 <WhichButtonIsPressed+0x46>

	return 0; // None of these buttons are pressed
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}
	...

08000198 <fsm_for_input_processing>:
void fsm_for_input_processing() {
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	if (status != NORMAL_MODE) light_time1 = status;
 800019c:	4b61      	ldr	r3, [pc, #388]	; (8000324 <fsm_for_input_processing+0x18c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d003      	beq.n	80001ac <fsm_for_input_processing+0x14>
 80001a4:	4b5f      	ldr	r3, [pc, #380]	; (8000324 <fsm_for_input_processing+0x18c>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a5f      	ldr	r2, [pc, #380]	; (8000328 <fsm_for_input_processing+0x190>)
 80001aa:	6013      	str	r3, [r2, #0]
	switch(buttonState) {
 80001ac:	4b5f      	ldr	r3, [pc, #380]	; (800032c <fsm_for_input_processing+0x194>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	f000 80a7 	beq.w	8000304 <fsm_for_input_processing+0x16c>
 80001b6:	2b02      	cmp	r3, #2
 80001b8:	f300 80ad 	bgt.w	8000316 <fsm_for_input_processing+0x17e>
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d003      	beq.n	80001c8 <fsm_for_input_processing+0x30>
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	f000 808c 	beq.w	80002de <fsm_for_input_processing+0x146>
				buttonState = BUTTON_RELEASED;
			}
			// TODO
			break;
		default:
			break;
 80001c6:	e0a6      	b.n	8000316 <fsm_for_input_processing+0x17e>
			if (WhichButtonIsPressed()) {
 80001c8:	f7ff ffc0 	bl	800014c <WhichButtonIsPressed>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	f000 8081 	beq.w	80002d6 <fsm_for_input_processing+0x13e>
				buttonState = BUTTON_PRESSED;
 80001d4:	4b55      	ldr	r3, [pc, #340]	; (800032c <fsm_for_input_processing+0x194>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	701a      	strb	r2, [r3, #0]
				switch(WhichButtonIsPressed()) {
 80001da:	f7ff ffb7 	bl	800014c <WhichButtonIsPressed>
 80001de:	4603      	mov	r3, r0
 80001e0:	3b0a      	subs	r3, #10
 80001e2:	2b03      	cmp	r3, #3
 80001e4:	d879      	bhi.n	80002da <fsm_for_input_processing+0x142>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <fsm_for_input_processing+0x54>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	080001fd 	.word	0x080001fd
 80001f0:	0800029b 	.word	0x0800029b
 80001f4:	080002d1 	.word	0x080002d1
 80001f8:	080002db 	.word	0x080002db
						switch(status) {
 80001fc:	4b49      	ldr	r3, [pc, #292]	; (8000324 <fsm_for_input_processing+0x18c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	3b01      	subs	r3, #1
 8000202:	2b07      	cmp	r3, #7
 8000204:	d844      	bhi.n	8000290 <fsm_for_input_processing+0xf8>
 8000206:	a201      	add	r2, pc, #4	; (adr r2, 800020c <fsm_for_input_processing+0x74>)
 8000208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020c:	0800022d 	.word	0x0800022d
 8000210:	08000245 	.word	0x08000245
 8000214:	0800025d 	.word	0x0800025d
 8000218:	08000275 	.word	0x08000275
 800021c:	08000245 	.word	0x08000245
 8000220:	0800025d 	.word	0x0800025d
 8000224:	08000275 	.word	0x08000275
 8000228:	0800028b 	.word	0x0800028b
								status = RED_MODE;
 800022c:	4b3d      	ldr	r3, [pc, #244]	; (8000324 <fsm_for_input_processing+0x18c>)
 800022e:	2202      	movs	r2, #2
 8000230:	601a      	str	r2, [r3, #0]
								light_time = man_red_time;
 8000232:	4b3f      	ldr	r3, [pc, #252]	; (8000330 <fsm_for_input_processing+0x198>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a3f      	ldr	r2, [pc, #252]	; (8000334 <fsm_for_input_processing+0x19c>)
 8000238:	6013      	str	r3, [r2, #0]
								temp_value = light_time;
 800023a:	4b3e      	ldr	r3, [pc, #248]	; (8000334 <fsm_for_input_processing+0x19c>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a3e      	ldr	r2, [pc, #248]	; (8000338 <fsm_for_input_processing+0x1a0>)
 8000240:	6013      	str	r3, [r2, #0]
								break;
 8000242:	e026      	b.n	8000292 <fsm_for_input_processing+0xfa>
								light_time = man_amber_time;
 8000244:	4b3d      	ldr	r3, [pc, #244]	; (800033c <fsm_for_input_processing+0x1a4>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a3a      	ldr	r2, [pc, #232]	; (8000334 <fsm_for_input_processing+0x19c>)
 800024a:	6013      	str	r3, [r2, #0]
								temp_value = light_time; // store value to temp variable if button add is pressed
 800024c:	4b39      	ldr	r3, [pc, #228]	; (8000334 <fsm_for_input_processing+0x19c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a39      	ldr	r2, [pc, #228]	; (8000338 <fsm_for_input_processing+0x1a0>)
 8000252:	6013      	str	r3, [r2, #0]
								status = AMBER_MODE;
 8000254:	4b33      	ldr	r3, [pc, #204]	; (8000324 <fsm_for_input_processing+0x18c>)
 8000256:	2203      	movs	r2, #3
 8000258:	601a      	str	r2, [r3, #0]
								break;
 800025a:	e01a      	b.n	8000292 <fsm_for_input_processing+0xfa>
								light_time = man_green_time;
 800025c:	4b38      	ldr	r3, [pc, #224]	; (8000340 <fsm_for_input_processing+0x1a8>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a34      	ldr	r2, [pc, #208]	; (8000334 <fsm_for_input_processing+0x19c>)
 8000262:	6013      	str	r3, [r2, #0]
								temp_value = light_time; // store value to temp variable if button add is pressed
 8000264:	4b33      	ldr	r3, [pc, #204]	; (8000334 <fsm_for_input_processing+0x19c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a33      	ldr	r2, [pc, #204]	; (8000338 <fsm_for_input_processing+0x1a0>)
 800026a:	6013      	str	r3, [r2, #0]
								status = GREEN_MODE;
 800026c:	4b2d      	ldr	r3, [pc, #180]	; (8000324 <fsm_for_input_processing+0x18c>)
 800026e:	2204      	movs	r2, #4
 8000270:	601a      	str	r2, [r3, #0]
								break;
 8000272:	e00e      	b.n	8000292 <fsm_for_input_processing+0xfa>
								light_time = man_red_time;
 8000274:	4b2e      	ldr	r3, [pc, #184]	; (8000330 <fsm_for_input_processing+0x198>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a2e      	ldr	r2, [pc, #184]	; (8000334 <fsm_for_input_processing+0x19c>)
 800027a:	6013      	str	r3, [r2, #0]
								temp_value = light_time; // store value to temp variable if button add is pressed
 800027c:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <fsm_for_input_processing+0x19c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <fsm_for_input_processing+0x1a0>)
 8000282:	6013      	str	r3, [r2, #0]
								status = NORMAL_MODE;
 8000284:	4b27      	ldr	r3, [pc, #156]	; (8000324 <fsm_for_input_processing+0x18c>)
 8000286:	2201      	movs	r2, #1
 8000288:	601a      	str	r2, [r3, #0]
								status = NORMAL_MODE;
 800028a:	4b26      	ldr	r3, [pc, #152]	; (8000324 <fsm_for_input_processing+0x18c>)
 800028c:	2201      	movs	r2, #1
 800028e:	601a      	str	r2, [r3, #0]
								break;
 8000290:	bf00      	nop
						buttonState = BUTTON_PRESSED;
 8000292:	4b26      	ldr	r3, [pc, #152]	; (800032c <fsm_for_input_processing+0x194>)
 8000294:	2201      	movs	r2, #1
 8000296:	701a      	strb	r2, [r3, #0]
						break;
 8000298:	e020      	b.n	80002dc <fsm_for_input_processing+0x144>
						switch(status) {
 800029a:	4b22      	ldr	r3, [pc, #136]	; (8000324 <fsm_for_input_processing+0x18c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2b04      	cmp	r3, #4
 80002a0:	d00e      	beq.n	80002c0 <fsm_for_input_processing+0x128>
 80002a2:	2b04      	cmp	r3, #4
 80002a4:	dc10      	bgt.n	80002c8 <fsm_for_input_processing+0x130>
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d002      	beq.n	80002b0 <fsm_for_input_processing+0x118>
 80002aa:	2b03      	cmp	r3, #3
 80002ac:	d004      	beq.n	80002b8 <fsm_for_input_processing+0x120>
							break;
 80002ae:	e00b      	b.n	80002c8 <fsm_for_input_processing+0x130>
							status = MAN_RED_MODE;
 80002b0:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <fsm_for_input_processing+0x18c>)
 80002b2:	2205      	movs	r2, #5
 80002b4:	601a      	str	r2, [r3, #0]
							break;
 80002b6:	e008      	b.n	80002ca <fsm_for_input_processing+0x132>
							status = MAN_AMBER_MODE;
 80002b8:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <fsm_for_input_processing+0x18c>)
 80002ba:	2206      	movs	r2, #6
 80002bc:	601a      	str	r2, [r3, #0]
							break;
 80002be:	e004      	b.n	80002ca <fsm_for_input_processing+0x132>
							status = MAN_GREEN_MODE;
 80002c0:	4b18      	ldr	r3, [pc, #96]	; (8000324 <fsm_for_input_processing+0x18c>)
 80002c2:	2207      	movs	r2, #7
 80002c4:	601a      	str	r2, [r3, #0]
							break;
 80002c6:	e000      	b.n	80002ca <fsm_for_input_processing+0x132>
							break;
 80002c8:	bf00      	nop
						updateTempTime();
 80002ca:	f000 fce3 	bl	8000c94 <updateTempTime>
						break;
 80002ce:	e005      	b.n	80002dc <fsm_for_input_processing+0x144>
						confirmAdjustedTime();
 80002d0:	f000 fd30 	bl	8000d34 <confirmAdjustedTime>
						break;
 80002d4:	e002      	b.n	80002dc <fsm_for_input_processing+0x144>
			}
 80002d6:	bf00      	nop
 80002d8:	e022      	b.n	8000320 <fsm_for_input_processing+0x188>
						break;
 80002da:	bf00      	nop
			break;
 80002dc:	e020      	b.n	8000320 <fsm_for_input_processing+0x188>
			if (!WhichButtonIsPressed()) {
 80002de:	f7ff ff35 	bl	800014c <WhichButtonIsPressed>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d103      	bne.n	80002f0 <fsm_for_input_processing+0x158>
				buttonState = BUTTON_RELEASED;
 80002e8:	4b10      	ldr	r3, [pc, #64]	; (800032c <fsm_for_input_processing+0x194>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	701a      	strb	r2, [r3, #0]
			break;
 80002ee:	e014      	b.n	800031a <fsm_for_input_processing+0x182>
				if (is_button_pressed_1s(0)) {
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 f8c9 	bl	8000488 <is_button_pressed_1s>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d00e      	beq.n	800031a <fsm_for_input_processing+0x182>
					buttonState = BUTTON_PRESS_MORE_THAN_1S;
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <fsm_for_input_processing+0x194>)
 80002fe:	2202      	movs	r2, #2
 8000300:	701a      	strb	r2, [r3, #0]
			break;
 8000302:	e00a      	b.n	800031a <fsm_for_input_processing+0x182>
			if (!WhichButtonIsPressed()) {
 8000304:	f7ff ff22 	bl	800014c <WhichButtonIsPressed>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d107      	bne.n	800031e <fsm_for_input_processing+0x186>
				buttonState = BUTTON_RELEASED;
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <fsm_for_input_processing+0x194>)
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]
			break;
 8000314:	e003      	b.n	800031e <fsm_for_input_processing+0x186>
			break;
 8000316:	bf00      	nop
 8000318:	e002      	b.n	8000320 <fsm_for_input_processing+0x188>
			break;
 800031a:	bf00      	nop
 800031c:	e000      	b.n	8000320 <fsm_for_input_processing+0x188>
			break;
 800031e:	bf00      	nop
	}
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000014 	.word	0x20000014
 8000328:	20000010 	.word	0x20000010
 800032c:	2000006c 	.word	0x2000006c
 8000330:	20000000 	.word	0x20000000
 8000334:	2000000c 	.word	0x2000000c
 8000338:	20000064 	.word	0x20000064
 800033c:	20000004 	.word	0x20000004
 8000340:	20000008 	.word	0x20000008

08000344 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	e061      	b.n	8000414 <button_reading+0xd0>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000350:	4a34      	ldr	r2, [pc, #208]	; (8000424 <button_reading+0xe0>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4413      	add	r3, r2
 8000356:	7819      	ldrb	r1, [r3, #0]
 8000358:	4a33      	ldr	r2, [pc, #204]	; (8000428 <button_reading+0xe4>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4413      	add	r3, r2
 800035e:	460a      	mov	r2, r1
 8000360:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000362:	4a32      	ldr	r2, [pc, #200]	; (800042c <button_reading+0xe8>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800036a:	4931      	ldr	r1, [pc, #196]	; (8000430 <button_reading+0xec>)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000372:	4619      	mov	r1, r3
 8000374:	4610      	mov	r0, r2
 8000376:	f001 f875 	bl	8001464 <HAL_GPIO_ReadPin>
 800037a:	4603      	mov	r3, r0
 800037c:	4619      	mov	r1, r3
 800037e:	4a29      	ldr	r2, [pc, #164]	; (8000424 <button_reading+0xe0>)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4413      	add	r3, r2
 8000384:	460a      	mov	r2, r1
 8000386:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8000388:	4a26      	ldr	r2, [pc, #152]	; (8000424 <button_reading+0xe0>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	781a      	ldrb	r2, [r3, #0]
 8000390:	4925      	ldr	r1, [pc, #148]	; (8000428 <button_reading+0xe4>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	440b      	add	r3, r1
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	429a      	cmp	r2, r3
 800039a:	d138      	bne.n	800040e <button_reading+0xca>
			//valid input, can read now
			buttonBufferPrev[i] = buttonBuffer[i];
 800039c:	4a25      	ldr	r2, [pc, #148]	; (8000434 <button_reading+0xf0>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4413      	add	r3, r2
 80003a2:	7819      	ldrb	r1, [r3, #0]
 80003a4:	4a24      	ldr	r2, [pc, #144]	; (8000438 <button_reading+0xf4>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4413      	add	r3, r2
 80003aa:	460a      	mov	r2, r1
 80003ac:	701a      	strb	r2, [r3, #0]
			// chap nhan input
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80003ae:	4a1d      	ldr	r2, [pc, #116]	; (8000424 <button_reading+0xe0>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4413      	add	r3, r2
 80003b4:	7819      	ldrb	r1, [r3, #0]
 80003b6:	4a1f      	ldr	r2, [pc, #124]	; (8000434 <button_reading+0xf0>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4413      	add	r3, r2
 80003bc:	460a      	mov	r2, r1
 80003be:	701a      	strb	r2, [r3, #0]
			if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80003c0:	4a1c      	ldr	r2, [pc, #112]	; (8000434 <button_reading+0xf0>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4413      	add	r3, r2
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d116      	bne.n	80003fa <button_reading+0xb6>
				//toggle pin to validate
				//HAL_GPIO_TogglePin(BRESP_GPIO_Port, BRESP_Pin);
				//if a button is pressed , we start counting
				if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80003cc:	4a1b      	ldr	r2, [pc, #108]	; (800043c <button_reading+0xf8>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003d4:	2b63      	cmp	r3, #99	; 0x63
 80003d6:	d80a      	bhi.n	80003ee <button_reading+0xaa>
					counterForButtonPress1s[i]++;
 80003d8:	4a18      	ldr	r2, [pc, #96]	; (800043c <button_reading+0xf8>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003e0:	3301      	adds	r3, #1
 80003e2:	b299      	uxth	r1, r3
 80003e4:	4a15      	ldr	r2, [pc, #84]	; (800043c <button_reading+0xf8>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80003ec:	e00f      	b.n	800040e <button_reading+0xca>
				}

				else {
					//the flag is turned on when 1 second has passed
					//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 80003ee:	4a14      	ldr	r2, [pc, #80]	; (8000440 <button_reading+0xfc>)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4413      	add	r3, r2
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
 80003f8:	e009      	b.n	800040e <button_reading+0xca>
				}
			}

			else {
				counterForButtonPress1s[i] = 0;
 80003fa:	4a10      	ldr	r2, [pc, #64]	; (800043c <button_reading+0xf8>)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2100      	movs	r1, #0
 8000400:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000404:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <button_reading+0xfc>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4413      	add	r3, r2
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3301      	adds	r3, #1
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2b03      	cmp	r3, #3
 8000418:	dd9a      	ble.n	8000350 <button_reading+0xc>
			}
		}
	}
}
 800041a:	bf00      	nop
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000078 	.word	0x20000078
 8000428:	2000007c 	.word	0x2000007c
 800042c:	20000018 	.word	0x20000018
 8000430:	20000028 	.word	0x20000028
 8000434:	20000070 	.word	0x20000070
 8000438:	20000074 	.word	0x20000074
 800043c:	20000084 	.word	0x20000084
 8000440:	20000080 	.word	0x20000080

08000444 <is_button_pressed>:
// Check if a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
	if (index >= N0_OF_BUTTONS) return 0;
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b03      	cmp	r3, #3
 8000452:	d901      	bls.n	8000458 <is_button_pressed+0x14>
 8000454:	2300      	movs	r3, #0
 8000456:	e00d      	b.n	8000474 <is_button_pressed+0x30>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	4a09      	ldr	r2, [pc, #36]	; (8000480 <is_button_pressed+0x3c>)
 800045c:	5cd3      	ldrb	r3, [r2, r3]
			&& buttonBufferPrev[index] == BUTTON_IS_RELEASED);
 800045e:	2b00      	cmp	r3, #0
 8000460:	d106      	bne.n	8000470 <is_button_pressed+0x2c>
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	4a07      	ldr	r2, [pc, #28]	; (8000484 <is_button_pressed+0x40>)
 8000466:	5cd3      	ldrb	r3, [r2, r3]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d101      	bne.n	8000470 <is_button_pressed+0x2c>
 800046c:	2301      	movs	r3, #1
 800046e:	e000      	b.n	8000472 <is_button_pressed+0x2e>
 8000470:	2300      	movs	r3, #0
 8000472:	b2db      	uxtb	r3, r3
}
 8000474:	4618      	mov	r0, r3
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	20000070 	.word	0x20000070
 8000484:	20000074 	.word	0x20000074

08000488 <is_button_pressed_1s>:

// Check for button is pressed more than a second or not
unsigned char is_button_pressed_1s (unsigned char index ) {
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS ) return 0xff ;
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	2b03      	cmp	r3, #3
 8000496:	d901      	bls.n	800049c <is_button_pressed_1s+0x14>
 8000498:	23ff      	movs	r3, #255	; 0xff
 800049a:	e007      	b.n	80004ac <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1) ;
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	4a06      	ldr	r2, [pc, #24]	; (80004b8 <is_button_pressed_1s+0x30>)
 80004a0:	5cd3      	ldrb	r3, [r2, r3]
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	bf0c      	ite	eq
 80004a6:	2301      	moveq	r3, #1
 80004a8:	2300      	movne	r3, #0
 80004aa:	b2db      	uxtb	r3, r3
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	20000080 	.word	0x20000080

080004bc <update_buffer>:
#include "led7seg.h"
#include "global.h"
static uint8_t led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
static uint8_t led_buffer[4] = {0};
//static uint8_t man_led_buffer[3] = {0};
void update_buffer() {
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
	if (light_time1 >= 10) return;
 80004c0:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <update_buffer+0x78>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b09      	cmp	r3, #9
 80004c6:	dc30      	bgt.n	800052a <update_buffer+0x6e>
	else {
		led_buffer[0] = 0;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <update_buffer+0x7c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = light_time1;
 80004ce:	4b19      	ldr	r3, [pc, #100]	; (8000534 <update_buffer+0x78>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	4b18      	ldr	r3, [pc, #96]	; (8000538 <update_buffer+0x7c>)
 80004d6:	705a      	strb	r2, [r3, #1]
	}

	if (light_time >= 10) {
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <update_buffer+0x80>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b09      	cmp	r3, #9
 80004de:	dd1b      	ble.n	8000518 <update_buffer+0x5c>
		led_buffer[2] = light_time / 10;
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <update_buffer+0x80>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a16      	ldr	r2, [pc, #88]	; (8000540 <update_buffer+0x84>)
 80004e6:	fb82 1203 	smull	r1, r2, r2, r3
 80004ea:	1092      	asrs	r2, r2, #2
 80004ec:	17db      	asrs	r3, r3, #31
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <update_buffer+0x7c>)
 80004f4:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time % 10;
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <update_buffer+0x80>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <update_buffer+0x84>)
 80004fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000500:	1099      	asrs	r1, r3, #2
 8000502:	17d3      	asrs	r3, r2, #31
 8000504:	1ac9      	subs	r1, r1, r3
 8000506:	460b      	mov	r3, r1
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	440b      	add	r3, r1
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	1ad1      	subs	r1, r2, r3
 8000510:	b2ca      	uxtb	r2, r1
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <update_buffer+0x7c>)
 8000514:	70da      	strb	r2, [r3, #3]
 8000516:	e009      	b.n	800052c <update_buffer+0x70>
	} else {
		led_buffer[2] = 0;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <update_buffer+0x7c>)
 800051a:	2200      	movs	r2, #0
 800051c:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = light_time;
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <update_buffer+0x80>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <update_buffer+0x7c>)
 8000526:	70da      	strb	r2, [r3, #3]
 8000528:	e000      	b.n	800052c <update_buffer+0x70>
	if (light_time1 >= 10) return;
 800052a:	bf00      	nop
	}
}
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000010 	.word	0x20000010
 8000538:	2000008c 	.word	0x2000008c
 800053c:	2000000c 	.word	0x2000000c
 8000540:	66666667 	.word	0x66666667

08000544 <led_init>:

void led_init() {
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
	GPIOB->BSRR = 0xFF00;
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <led_init+0x14>)
 800054a:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800054e:	611a      	str	r2, [r3, #16]
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	40010c00 	.word	0x40010c00

0800055c <update7SEG>:

void led_clear() {
	HAL_GPIO_WritePin(GPIOA, D1_Pin | D2_Pin | D3_Pin | D4_Pin | D5_Pin | D6_Pin, 1);
}
void update7SEG(int index){
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b03      	cmp	r3, #3
 8000568:	d872      	bhi.n	8000650 <update7SEG+0xf4>
 800056a:	a201      	add	r2, pc, #4	; (adr r2, 8000570 <update7SEG+0x14>)
 800056c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000570:	08000581 	.word	0x08000581
 8000574:	080005b5 	.word	0x080005b5
 8000578:	080005e9 	.word	0x080005e9
 800057c:	0800061d 	.word	0x0800061d
	switch(index) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, ON_7SEG); // turn on the first SEG
 8000580:	2201      	movs	r2, #1
 8000582:	2110      	movs	r1, #16
 8000584:	4835      	ldr	r0, [pc, #212]	; (800065c <update7SEG+0x100>)
 8000586:	f000 ff84 	bl	8001492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 800058a:	2200      	movs	r2, #0
 800058c:	2120      	movs	r1, #32
 800058e:	4833      	ldr	r0, [pc, #204]	; (800065c <update7SEG+0x100>)
 8000590:	f000 ff7f 	bl	8001492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 8000594:	2200      	movs	r2, #0
 8000596:	2140      	movs	r1, #64	; 0x40
 8000598:	4830      	ldr	r0, [pc, #192]	; (800065c <update7SEG+0x100>)
 800059a:	f000 ff7a 	bl	8001492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 800059e:	2200      	movs	r2, #0
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	482e      	ldr	r0, [pc, #184]	; (800065c <update7SEG+0x100>)
 80005a4:	f000 ff75 	bl	8001492 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 80005a8:	4b2d      	ldr	r3, [pc, #180]	; (8000660 <update7SEG+0x104>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f859 	bl	8000664 <display7SEG>
			break;
 80005b2:	e04e      	b.n	8000652 <update7SEG+0xf6>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 80005b4:	2200      	movs	r2, #0
 80005b6:	2110      	movs	r1, #16
 80005b8:	4828      	ldr	r0, [pc, #160]	; (800065c <update7SEG+0x100>)
 80005ba:	f000 ff6a 	bl	8001492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, ON_7SEG); // turn on the second SEG
 80005be:	2201      	movs	r2, #1
 80005c0:	2120      	movs	r1, #32
 80005c2:	4826      	ldr	r0, [pc, #152]	; (800065c <update7SEG+0x100>)
 80005c4:	f000 ff65 	bl	8001492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 80005c8:	2200      	movs	r2, #0
 80005ca:	2140      	movs	r1, #64	; 0x40
 80005cc:	4823      	ldr	r0, [pc, #140]	; (800065c <update7SEG+0x100>)
 80005ce:	f000 ff60 	bl	8001492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 80005d2:	2200      	movs	r2, #0
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	4821      	ldr	r0, [pc, #132]	; (800065c <update7SEG+0x100>)
 80005d8:	f000 ff5b 	bl	8001492 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <update7SEG+0x104>)
 80005de:	785b      	ldrb	r3, [r3, #1]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f83f 	bl	8000664 <display7SEG>
			break;
 80005e6:	e034      	b.n	8000652 <update7SEG+0xf6>
		case 2:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	481b      	ldr	r0, [pc, #108]	; (800065c <update7SEG+0x100>)
 80005ee:	f000 ff50 	bl	8001492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	4819      	ldr	r0, [pc, #100]	; (800065c <update7SEG+0x100>)
 80005f8:	f000 ff4b 	bl	8001492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, ON_7SEG); // turn on the third SEG
 80005fc:	2201      	movs	r2, #1
 80005fe:	2140      	movs	r1, #64	; 0x40
 8000600:	4816      	ldr	r0, [pc, #88]	; (800065c <update7SEG+0x100>)
 8000602:	f000 ff46 	bl	8001492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, OFF_7SEG); // turn off the fourth SEG
 8000606:	2200      	movs	r2, #0
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	4814      	ldr	r0, [pc, #80]	; (800065c <update7SEG+0x100>)
 800060c:	f000 ff41 	bl	8001492 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <update7SEG+0x104>)
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f825 	bl	8000664 <display7SEG>
			break;
 800061a:	e01a      	b.n	8000652 <update7SEG+0xf6>
		case 3:
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, OFF_7SEG); // turn off the first SEG
 800061c:	2200      	movs	r2, #0
 800061e:	2110      	movs	r1, #16
 8000620:	480e      	ldr	r0, [pc, #56]	; (800065c <update7SEG+0x100>)
 8000622:	f000 ff36 	bl	8001492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, OFF_7SEG); // turn off the second SEG
 8000626:	2200      	movs	r2, #0
 8000628:	2120      	movs	r1, #32
 800062a:	480c      	ldr	r0, [pc, #48]	; (800065c <update7SEG+0x100>)
 800062c:	f000 ff31 	bl	8001492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, OFF_7SEG); // turn off the third SEG
 8000630:	2200      	movs	r2, #0
 8000632:	2140      	movs	r1, #64	; 0x40
 8000634:	4809      	ldr	r0, [pc, #36]	; (800065c <update7SEG+0x100>)
 8000636:	f000 ff2c 	bl	8001492 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, ON_7SEG); // turn on the fourth SEG
 800063a:	2201      	movs	r2, #1
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	4807      	ldr	r0, [pc, #28]	; (800065c <update7SEG+0x100>)
 8000640:	f000 ff27 	bl	8001492 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <update7SEG+0x104>)
 8000646:	78db      	ldrb	r3, [r3, #3]
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f80b 	bl	8000664 <display7SEG>
			break;
 800064e:	e000      	b.n	8000652 <update7SEG+0xf6>
		default:
			break;
 8000650:	bf00      	nop
	}
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40010800 	.word	0x40010800
 8000660:	2000008c 	.word	0x2000008c

08000664 <display7SEG>:
void display7SEG(int num) {
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	GPIOB->BRR= 0xFF;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <display7SEG+0x24>)
 800066e:	22ff      	movs	r2, #255	; 0xff
 8000670:	615a      	str	r2, [r3, #20]
	GPIOB->BSRR = led7seg[num];
 8000672:	4a06      	ldr	r2, [pc, #24]	; (800068c <display7SEG+0x28>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	781a      	ldrb	r2, [r3, #0]
 800067a:	4b03      	ldr	r3, [pc, #12]	; (8000688 <display7SEG+0x24>)
 800067c:	611a      	str	r2, [r3, #16]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	40010c00 	.word	0x40010c00
 800068c:	20000030 	.word	0x20000030

08000690 <displayMode>:

void displayMode() {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	update_buffer();
 8000694:	f7ff ff12 	bl	80004bc <update_buffer>
	if (index_led >= 4) index_led = 0;
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <displayMode+0x2c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b03      	cmp	r3, #3
 800069e:	dd02      	ble.n	80006a6 <displayMode+0x16>
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <displayMode+0x2c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
	update7SEG(index_led++);
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <displayMode+0x2c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	4903      	ldr	r1, [pc, #12]	; (80006bc <displayMode+0x2c>)
 80006ae:	600a      	str	r2, [r1, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff53 	bl	800055c <update7SEG>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000068 	.word	0x20000068

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 fbe4 	bl	8000e90 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f82a 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f000 f8da 	bl	8000884 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006d0:	f000 f862 	bl	8000798 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80006d4:	f000 f8ac 	bl	8000830 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2) ;
 80006d8:	480e      	ldr	r0, [pc, #56]	; (8000714 <main+0x54>)
 80006da:	f001 fb75 	bl	8001dc8 <HAL_TIM_Base_Start_IT>
  //led7SEG_init();
  GPIOA->BRR=0xFF;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <main+0x58>)
 80006e0:	22ff      	movs	r2, #255	; 0xff
 80006e2:	615a      	str	r2, [r3, #20]
  led_init();
 80006e4:	f7ff ff2e 	bl	8000544 <led_init>
  setTimer1(2);
 80006e8:	2002      	movs	r0, #2
 80006ea:	f000 f93f 	bl	800096c <setTimer1>
  setTimer2(3);
 80006ee:	2003      	movs	r0, #3
 80006f0:	f000 f950 	bl	8000994 <setTimer2>
  setTimer3(100);
 80006f4:	2064      	movs	r0, #100	; 0x64
 80006f6:	f000 f961 	bl	80009bc <setTimer3>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // display mode
	  if (timer1_flag == 1) {
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <main+0x5c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d104      	bne.n	800070c <main+0x4c>
		  traffic_light_processing();
 8000702:	f000 fb5b 	bl	8000dbc <traffic_light_processing>
		  setTimer1(50);
 8000706:	2032      	movs	r0, #50	; 0x32
 8000708:	f000 f930 	bl	800096c <setTimer1>
	  }
	  fsm_for_input_processing();
 800070c:	f7ff fd44 	bl	8000198 <fsm_for_input_processing>
	  if (timer1_flag == 1) {
 8000710:	e7f3      	b.n	80006fa <main+0x3a>
 8000712:	bf00      	nop
 8000714:	200000fc 	.word	0x200000fc
 8000718:	40010800 	.word	0x40010800
 800071c:	20000090 	.word	0x20000090

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b090      	sub	sp, #64	; 0x40
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0318 	add.w	r3, r7, #24
 800072a:	2228      	movs	r2, #40	; 0x28
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f001 ffde 	bl	80026f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000742:	2302      	movs	r3, #2
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000746:	2301      	movs	r3, #1
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074a:	2310      	movs	r3, #16
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800074e:	2300      	movs	r3, #0
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	f107 0318 	add.w	r3, r7, #24
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fecc 	bl	80014f4 <HAL_RCC_OscConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000762:	f000 f8fd 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f001 f938 	bl	80019f4 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800078a:	f000 f8e9 	bl	8000960 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3740      	adds	r7, #64	; 0x40
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ac:	463b      	mov	r3, r7
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_TIM2_Init+0x94>)
 80007b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_TIM2_Init+0x94>)
 80007be:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_TIM2_Init+0x94>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_TIM2_Init+0x94>)
 80007cc:	2209      	movs	r2, #9
 80007ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_TIM2_Init+0x94>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_TIM2_Init+0x94>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <MX_TIM2_Init+0x94>)
 80007de:	f001 faa3 	bl	8001d28 <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007e8:	f000 f8ba 	bl	8000960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <MX_TIM2_Init+0x94>)
 80007fa:	f001 fc39 	bl	8002070 <HAL_TIM_ConfigClockSource>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000804:	f000 f8ac 	bl	8000960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_TIM2_Init+0x94>)
 8000816:	f001 fe01 	bl	800241c <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000820:	f000 f89e 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000fc 	.word	0x200000fc

08000830 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_USART1_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USART1_UART_Init+0x4c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART1_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART1_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART1_UART_Init+0x4c>)
 8000868:	f001 fe42 	bl	80024f0 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 f875 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000b8 	.word	0x200000b8
 8000880:	40013800 	.word	0x40013800

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <MX_GPIO_Init+0xd0>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a2d      	ldr	r2, [pc, #180]	; (8000954 <MX_GPIO_Init+0xd0>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b0:	4b28      	ldr	r3, [pc, #160]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a27      	ldr	r2, [pc, #156]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008b6:	f043 0308 	orr.w	r3, r3, #8
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <MX_GPIO_Init+0xd0>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	21f0      	movs	r1, #240	; 0xf0
 80008cc:	4822      	ldr	r0, [pc, #136]	; (8000958 <MX_GPIO_Init+0xd4>)
 80008ce:	f000 fde0 	bl	8001492 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_Pin|D4_Pin|D5_Pin|D6_Pin
 80008d2:	2200      	movs	r2, #0
 80008d4:	f643 71f8 	movw	r1, #16376	; 0x3ff8
 80008d8:	4820      	ldr	r0, [pc, #128]	; (800095c <MX_GPIO_Init+0xd8>)
 80008da:	f000 fdda 	bl	8001492 <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |GPIO_PIN_7|D1_Pin|D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 80008de:	23f0      	movs	r3, #240	; 0xf0
 80008e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2302      	movs	r3, #2
 80008ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	4619      	mov	r1, r3
 80008f4:	4818      	ldr	r0, [pc, #96]	; (8000958 <MX_GPIO_Init+0xd4>)
 80008f6:	f000 fc3b 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin;
 80008fa:	2307      	movs	r3, #7
 80008fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000902:	2301      	movs	r3, #1
 8000904:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	4619      	mov	r1, r3
 800090c:	4813      	ldr	r0, [pc, #76]	; (800095c <MX_GPIO_Init+0xd8>)
 800090e:	f000 fc2f 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D4_Pin D5_Pin D6_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           PB7 D1_Pin D2_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D4_Pin|D5_Pin|D6_Pin
 8000912:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 8000916:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |GPIO_PIN_7|D1_Pin|D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2302      	movs	r3, #2
 8000922:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	4619      	mov	r1, r3
 800092a:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_GPIO_Init+0xd8>)
 800092c:	f000 fc20 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin CONFIRM_Pin RESET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|CONFIRM_Pin|RESET_Pin;
 8000930:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000934:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093a:	2301      	movs	r3, #1
 800093c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	4619      	mov	r1, r3
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_GPIO_Init+0xd4>)
 8000946:	f000 fc13 	bl	8001170 <HAL_GPIO_Init>

}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000
 8000958:	40010800 	.word	0x40010800
 800095c:	40010c00 	.word	0x40010c00

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <setTimer1>:
int timer4_counter = 0;
int timer5_counter = 0;

int tick = 50;

void setTimer1(int duration) {
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
//	if (duration != tick) {
//		duration = tick;
//	}
	timer1_counter = duration ;
 8000974:	4a05      	ldr	r2, [pc, #20]	; (800098c <setTimer1+0x20>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <setTimer1+0x24>)
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	200000a4 	.word	0x200000a4
 8000990:	20000090 	.word	0x20000090

08000994 <setTimer2>:
void setTimer2(int duration) {
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
//	if (duration != DURATION_LED_BLINKING_2HZ) {
//		duration = DURATION_LED_BLINKING_2HZ;
//	}
	timer2_counter = duration;
 800099c:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <setTimer2+0x20>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <setTimer2+0x24>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	200000a8 	.word	0x200000a8
 80009b8:	20000094 	.word	0x20000094

080009bc <setTimer3>:
void setTimer3(int duration) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80009c4:	4a05      	ldr	r2, [pc, #20]	; (80009dc <setTimer3+0x20>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <setTimer3+0x24>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	200000ac 	.word	0x200000ac
 80009e0:	20000098 	.word	0x20000098

080009e4 <timerRun>:
	}
	timer5_counter = duration;
	timer5_flag = 0;
}

void timerRun() {
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <timerRun+0xac>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	dd0b      	ble.n	8000a08 <timerRun+0x24>
		timer1_counter--;
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <timerRun+0xac>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	4a26      	ldr	r2, [pc, #152]	; (8000a90 <timerRun+0xac>)
 80009f8:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <timerRun+0xac>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	dc02      	bgt.n	8000a08 <timerRun+0x24>
			timer1_flag = 1;
 8000a02:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <timerRun+0xb0>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8000a08:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <timerRun+0xb4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	dd0b      	ble.n	8000a28 <timerRun+0x44>
		timer2_counter--;
 8000a10:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <timerRun+0xb4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	4a20      	ldr	r2, [pc, #128]	; (8000a98 <timerRun+0xb4>)
 8000a18:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <timerRun+0xb4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	dc02      	bgt.n	8000a28 <timerRun+0x44>
			timer2_flag = 1;
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <timerRun+0xb8>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <timerRun+0xbc>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	dd0b      	ble.n	8000a48 <timerRun+0x64>
		timer3_counter--;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <timerRun+0xbc>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <timerRun+0xbc>)
 8000a38:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <timerRun+0xbc>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	dc02      	bgt.n	8000a48 <timerRun+0x64>
			timer3_flag = 1;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <timerRun+0xc0>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <timerRun+0xc4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	dd0b      	ble.n	8000a68 <timerRun+0x84>
		timer4_counter--;
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <timerRun+0xc4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <timerRun+0xc4>)
 8000a58:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <timerRun+0xc4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	dc02      	bgt.n	8000a68 <timerRun+0x84>
			timer4_flag = 1;
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <timerRun+0xc8>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <timerRun+0xcc>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	dd0b      	ble.n	8000a88 <timerRun+0xa4>
		timer5_counter--;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <timerRun+0xcc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <timerRun+0xcc>)
 8000a78:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <timerRun+0xcc>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	dc02      	bgt.n	8000a88 <timerRun+0xa4>
			timer5_flag = 1;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <timerRun+0xd0>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	200000a4 	.word	0x200000a4
 8000a94:	20000090 	.word	0x20000090
 8000a98:	200000a8 	.word	0x200000a8
 8000a9c:	20000094 	.word	0x20000094
 8000aa0:	200000ac 	.word	0x200000ac
 8000aa4:	20000098 	.word	0x20000098
 8000aa8:	200000b0 	.word	0x200000b0
 8000aac:	2000009c 	.word	0x2000009c
 8000ab0:	200000b4 	.word	0x200000b4
 8000ab4:	200000a0 	.word	0x200000a0

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_MspInit+0x5c>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_MspInit+0x5c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_MspInit+0x60>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_MspInit+0x60>)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000

08000b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b2c:	d113      	bne.n	8000b56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_TIM_Base_MspInit+0x44>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <HAL_TIM_Base_MspInit+0x44>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_TIM_Base_MspInit+0x44>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	201c      	movs	r0, #28
 8000b4c:	f000 fad9 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b50:	201c      	movs	r0, #28
 8000b52:	f000 faf2 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	; (8000bf0 <HAL_UART_MspInit+0x8c>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d131      	bne.n	8000be8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_UART_MspInit+0x90>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a1a      	ldr	r2, [pc, #104]	; (8000bf4 <HAL_UART_MspInit+0x90>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_UART_MspInit+0x90>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_UART_MspInit+0x90>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <HAL_UART_MspInit+0x90>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_UART_MspInit+0x90>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <HAL_UART_MspInit+0x94>)
 8000bca:	f000 fad1 	bl	8001170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4619      	mov	r1, r3
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <HAL_UART_MspInit+0x94>)
 8000be4:	f000 fac4 	bl	8001170 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40013800 	.word	0x40013800
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010800 	.word	0x40010800

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr

08000c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c42:	f000 f96b 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM2_IRQHandler+0x10>)
 8000c52:	f001 f905 	bl	8001e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000fc 	.word	0x200000fc

08000c60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <HAL_TIM_PeriodElapsedCallback>:
#include "input_reading.h"
#include "software_timer.h"
#include "led7seg.h"
#include "global.h"

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c7c:	d103      	bne.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 8000c7e:	f7ff fb61 	bl	8000344 <button_reading>
		displayMode();
 8000c82:	f7ff fd05 	bl	8000690 <displayMode>
	}
	timerRun();
 8000c86:	f7ff fead 	bl	80009e4 <timerRun>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <updateTempTime>:
#include "input_processing.h"
#include "global.h"
#include "led7seg.h"
#include "software_timer.h"

void updateTempTime() {
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
	switch(status) {
 8000c98:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <updateTempTime+0x94>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d83a      	bhi.n	8000d18 <updateTempTime+0x84>
 8000ca2:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <updateTempTime+0x14>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000d19 	.word	0x08000d19
 8000cac:	08000d19 	.word	0x08000d19
 8000cb0:	08000d19 	.word	0x08000d19
 8000cb4:	08000d19 	.word	0x08000d19
 8000cb8:	08000cc5 	.word	0x08000cc5
 8000cbc:	08000ce1 	.word	0x08000ce1
 8000cc0:	08000cfd 	.word	0x08000cfd
		case NORMAL_MODE:
			break;
		case MAN_RED_MODE:
			//light_time = man_red_time;
			if (temp_value >= 99) temp_value = 0;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <updateTempTime+0x98>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b62      	cmp	r3, #98	; 0x62
 8000cca:	dd03      	ble.n	8000cd4 <updateTempTime+0x40>
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <updateTempTime+0x98>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 8000cd2:	e021      	b.n	8000d18 <updateTempTime+0x84>
			else temp_value++;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <updateTempTime+0x98>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <updateTempTime+0x98>)
 8000cdc:	6013      	str	r3, [r2, #0]
			break;
 8000cde:	e01b      	b.n	8000d18 <updateTempTime+0x84>
		case MAN_AMBER_MODE:
			//temp_value = temp_value;
			if (temp_value >= 99) temp_value = 0;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <updateTempTime+0x98>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b62      	cmp	r3, #98	; 0x62
 8000ce6:	dd03      	ble.n	8000cf0 <updateTempTime+0x5c>
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <updateTempTime+0x98>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 8000cee:	e013      	b.n	8000d18 <updateTempTime+0x84>
			else temp_value++;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <updateTempTime+0x98>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <updateTempTime+0x98>)
 8000cf8:	6013      	str	r3, [r2, #0]
			break;
 8000cfa:	e00d      	b.n	8000d18 <updateTempTime+0x84>
		case MAN_GREEN_MODE:
			//light_time = man_green_time;
			if (temp_value >= 99) temp_value = 0;
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <updateTempTime+0x98>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b62      	cmp	r3, #98	; 0x62
 8000d02:	dd03      	ble.n	8000d0c <updateTempTime+0x78>
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <updateTempTime+0x98>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
			else temp_value++;
			break;
 8000d0a:	e004      	b.n	8000d16 <updateTempTime+0x82>
			else temp_value++;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <updateTempTime+0x98>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <updateTempTime+0x98>)
 8000d14:	6013      	str	r3, [r2, #0]
			break;
 8000d16:	bf00      	nop
	}
	light_time = temp_value;
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <updateTempTime+0x98>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <updateTempTime+0x9c>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	20000014 	.word	0x20000014
 8000d2c:	20000064 	.word	0x20000064
 8000d30:	2000000c 	.word	0x2000000c

08000d34 <confirmAdjustedTime>:

void confirmAdjustedTime() {
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	switch(status) {
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <confirmAdjustedTime+0x70>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d82b      	bhi.n	8000d9a <confirmAdjustedTime+0x66>
 8000d42:	a201      	add	r2, pc, #4	; (adr r2, 8000d48 <confirmAdjustedTime+0x14>)
 8000d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d48:	08000d9b 	.word	0x08000d9b
 8000d4c:	08000d9b 	.word	0x08000d9b
 8000d50:	08000d9b 	.word	0x08000d9b
 8000d54:	08000d9b 	.word	0x08000d9b
 8000d58:	08000d65 	.word	0x08000d65
 8000d5c:	08000d77 	.word	0x08000d77
 8000d60:	08000d89 	.word	0x08000d89
		case NORMAL_MODE:
			//temp_value = light_time;
			break;
		case MAN_RED_MODE:
			man_red_time = temp_value;
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <confirmAdjustedTime+0x74>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a10      	ldr	r2, [pc, #64]	; (8000dac <confirmAdjustedTime+0x78>)
 8000d6a:	6013      	str	r3, [r2, #0]
			light_time = man_red_time;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <confirmAdjustedTime+0x78>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <confirmAdjustedTime+0x7c>)
 8000d72:	6013      	str	r3, [r2, #0]
			break;
 8000d74:	e012      	b.n	8000d9c <confirmAdjustedTime+0x68>
		case MAN_AMBER_MODE:
			man_amber_time = temp_value;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <confirmAdjustedTime+0x74>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <confirmAdjustedTime+0x80>)
 8000d7c:	6013      	str	r3, [r2, #0]
			light_time = man_amber_time;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <confirmAdjustedTime+0x80>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <confirmAdjustedTime+0x7c>)
 8000d84:	6013      	str	r3, [r2, #0]
			break;
 8000d86:	e009      	b.n	8000d9c <confirmAdjustedTime+0x68>
		case MAN_GREEN_MODE:
			man_green_time = temp_value;
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <confirmAdjustedTime+0x74>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <confirmAdjustedTime+0x84>)
 8000d8e:	6013      	str	r3, [r2, #0]
			light_time = man_green_time;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <confirmAdjustedTime+0x84>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <confirmAdjustedTime+0x7c>)
 8000d96:	6013      	str	r3, [r2, #0]
			break;
 8000d98:	e000      	b.n	8000d9c <confirmAdjustedTime+0x68>
		default:
			break;
 8000d9a:	bf00      	nop
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	20000014 	.word	0x20000014
 8000da8:	20000064 	.word	0x20000064
 8000dac:	20000000 	.word	0x20000000
 8000db0:	2000000c 	.word	0x2000000c
 8000db4:	20000004 	.word	0x20000004
 8000db8:	20000008 	.word	0x20000008

08000dbc <traffic_light_processing>:
		default:
			break;
	}
}

void traffic_light_processing() {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	switch(status) {
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <traffic_light_processing+0x80>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d835      	bhi.n	8000e36 <traffic_light_processing+0x7a>
 8000dca:	a201      	add	r2, pc, #4	; (adr r2, 8000dd0 <traffic_light_processing+0x14>)
 8000dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd0:	08000e35 	.word	0x08000e35
 8000dd4:	08000ded 	.word	0x08000ded
 8000dd8:	08000e05 	.word	0x08000e05
 8000ddc:	08000e1d 	.word	0x08000e1d
 8000de0:	08000ded 	.word	0x08000ded
 8000de4:	08000e05 	.word	0x08000e05
 8000de8:	08000e1d 	.word	0x08000e1d
//				setTimer3(100);
//			}
			break;
		case RED_MODE: case MAN_RED_MODE:
				// Turn off GREEN AND AMBER LED
				HAL_GPIO_WritePin(GPIOB, D3_Pin | D6_Pin | D2_Pin | D5_Pin, 1);
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 5158 	mov.w	r1, #13824	; 0x3600
 8000df2:	4813      	ldr	r0, [pc, #76]	; (8000e40 <traffic_light_processing+0x84>)
 8000df4:	f000 fb4d 	bl	8001492 <HAL_GPIO_WritePin>
				// Toggle RED
				HAL_GPIO_TogglePin(GPIOB, D4_Pin | D1_Pin);
 8000df8:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000dfc:	4810      	ldr	r0, [pc, #64]	; (8000e40 <traffic_light_processing+0x84>)
 8000dfe:	f000 fb60 	bl	80014c2 <HAL_GPIO_TogglePin>
			break;
 8000e02:	e018      	b.n	8000e36 <traffic_light_processing+0x7a>
		case AMBER_MODE: case MAN_AMBER_MODE:
			// Turn off RED AND GREEN LED
			HAL_GPIO_WritePin(GPIOB, D1_Pin | D4_Pin | D3_Pin | D6_Pin, 1);
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 5134 	mov.w	r1, #11520	; 0x2d00
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <traffic_light_processing+0x84>)
 8000e0c:	f000 fb41 	bl	8001492 <HAL_GPIO_WritePin>
			// Toggle AMBER
			HAL_GPIO_TogglePin(GPIOB, D2_Pin | D5_Pin);
 8000e10:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000e14:	480a      	ldr	r0, [pc, #40]	; (8000e40 <traffic_light_processing+0x84>)
 8000e16:	f000 fb54 	bl	80014c2 <HAL_GPIO_TogglePin>
			break;
 8000e1a:	e00c      	b.n	8000e36 <traffic_light_processing+0x7a>
		case GREEN_MODE: case MAN_GREEN_MODE:
			// turn off RED AND AMBER LED
			HAL_GPIO_WritePin(GPIOB, D1_Pin | D2_Pin | D4_Pin | D5_Pin, 1);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
 8000e22:	4807      	ldr	r0, [pc, #28]	; (8000e40 <traffic_light_processing+0x84>)
 8000e24:	f000 fb35 	bl	8001492 <HAL_GPIO_WritePin>
			// Toggle GREEN
			HAL_GPIO_TogglePin(GPIOB, D3_Pin | D6_Pin);
 8000e28:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <traffic_light_processing+0x84>)
 8000e2e:	f000 fb48 	bl	80014c2 <HAL_GPIO_TogglePin>
			break;
 8000e32:	e000      	b.n	8000e36 <traffic_light_processing+0x7a>
			break;
 8000e34:	bf00      	nop
	}
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000014 	.word	0x20000014
 8000e40:	40010c00 	.word	0x40010c00

08000e44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e44:	480c      	ldr	r0, [pc, #48]	; (8000e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e46:	490d      	ldr	r1, [pc, #52]	; (8000e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e5c:	4c0a      	ldr	r4, [pc, #40]	; (8000e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e6a:	f7ff fef9 	bl	8000c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f001 fc1b 	bl	80026a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e72:	f7ff fc25 	bl	80006c0 <main>
  bx lr
 8000e76:	4770      	bx	lr
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000e80:	08002748 	.word	0x08002748
  ldr r2, =_sbss
 8000e84:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000e88:	20000148 	.word	0x20000148

08000e8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC1_2_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x28>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x28>)
 8000e9a:	f043 0310 	orr.w	r3, r3, #16
 8000e9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f923 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	200f      	movs	r0, #15
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fe04 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40022000 	.word	0x40022000

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f93b 	bl	8001156 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 f903 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000003c 	.word	0x2000003c
 8000f14:	20000044 	.word	0x20000044
 8000f18:	20000040 	.word	0x20000040

08000f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <HAL_IncTick+0x1c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_IncTick+0x20>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a03      	ldr	r2, [pc, #12]	; (8000f3c <HAL_IncTick+0x20>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	20000044 	.word	0x20000044
 8000f3c:	20000144 	.word	0x20000144

08000f40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <HAL_GetTick+0x10>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	20000144 	.word	0x20000144

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4906      	ldr	r1, [pc, #24]	; (8000fec <__NVIC_EnableIRQ+0x34>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff90 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff2d 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff42 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff90 	bl	8001044 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5f 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff35 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffa2 	bl	80010a8 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001170:	b480      	push	{r7}
 8001172:	b08b      	sub	sp, #44	; 0x2c
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001182:	e148      	b.n	8001416 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001184:	2201      	movs	r2, #1
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8137 	bne.w	8001410 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4aa3      	ldr	r2, [pc, #652]	; (8001434 <HAL_GPIO_Init+0x2c4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d05e      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011ac:	4aa1      	ldr	r2, [pc, #644]	; (8001434 <HAL_GPIO_Init+0x2c4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d875      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011b2:	4aa1      	ldr	r2, [pc, #644]	; (8001438 <HAL_GPIO_Init+0x2c8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d058      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011b8:	4a9f      	ldr	r2, [pc, #636]	; (8001438 <HAL_GPIO_Init+0x2c8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d86f      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011be:	4a9f      	ldr	r2, [pc, #636]	; (800143c <HAL_GPIO_Init+0x2cc>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d052      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011c4:	4a9d      	ldr	r2, [pc, #628]	; (800143c <HAL_GPIO_Init+0x2cc>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d869      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011ca:	4a9d      	ldr	r2, [pc, #628]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d04c      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011d0:	4a9b      	ldr	r2, [pc, #620]	; (8001440 <HAL_GPIO_Init+0x2d0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d863      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011d6:	4a9b      	ldr	r2, [pc, #620]	; (8001444 <HAL_GPIO_Init+0x2d4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d046      	beq.n	800126a <HAL_GPIO_Init+0xfa>
 80011dc:	4a99      	ldr	r2, [pc, #612]	; (8001444 <HAL_GPIO_Init+0x2d4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d85d      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d82a      	bhi.n	800123c <HAL_GPIO_Init+0xcc>
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d859      	bhi.n	800129e <HAL_GPIO_Init+0x12e>
 80011ea:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <HAL_GPIO_Init+0x80>)
 80011ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f0:	0800126b 	.word	0x0800126b
 80011f4:	08001245 	.word	0x08001245
 80011f8:	08001257 	.word	0x08001257
 80011fc:	08001299 	.word	0x08001299
 8001200:	0800129f 	.word	0x0800129f
 8001204:	0800129f 	.word	0x0800129f
 8001208:	0800129f 	.word	0x0800129f
 800120c:	0800129f 	.word	0x0800129f
 8001210:	0800129f 	.word	0x0800129f
 8001214:	0800129f 	.word	0x0800129f
 8001218:	0800129f 	.word	0x0800129f
 800121c:	0800129f 	.word	0x0800129f
 8001220:	0800129f 	.word	0x0800129f
 8001224:	0800129f 	.word	0x0800129f
 8001228:	0800129f 	.word	0x0800129f
 800122c:	0800129f 	.word	0x0800129f
 8001230:	0800129f 	.word	0x0800129f
 8001234:	0800124d 	.word	0x0800124d
 8001238:	08001261 	.word	0x08001261
 800123c:	4a82      	ldr	r2, [pc, #520]	; (8001448 <HAL_GPIO_Init+0x2d8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001242:	e02c      	b.n	800129e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	623b      	str	r3, [r7, #32]
          break;
 800124a:	e029      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	3304      	adds	r3, #4
 8001252:	623b      	str	r3, [r7, #32]
          break;
 8001254:	e024      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	3308      	adds	r3, #8
 800125c:	623b      	str	r3, [r7, #32]
          break;
 800125e:	e01f      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	330c      	adds	r3, #12
 8001266:	623b      	str	r3, [r7, #32]
          break;
 8001268:	e01a      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d102      	bne.n	8001278 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001272:	2304      	movs	r3, #4
 8001274:	623b      	str	r3, [r7, #32]
          break;
 8001276:	e013      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d105      	bne.n	800128c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001280:	2308      	movs	r3, #8
 8001282:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	611a      	str	r2, [r3, #16]
          break;
 800128a:	e009      	b.n	80012a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800128c:	2308      	movs	r3, #8
 800128e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	615a      	str	r2, [r3, #20]
          break;
 8001296:	e003      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
          break;
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x130>
          break;
 800129e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2bff      	cmp	r3, #255	; 0xff
 80012a4:	d801      	bhi.n	80012aa <HAL_GPIO_Init+0x13a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	e001      	b.n	80012ae <HAL_GPIO_Init+0x13e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3304      	adds	r3, #4
 80012ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2bff      	cmp	r3, #255	; 0xff
 80012b4:	d802      	bhi.n	80012bc <HAL_GPIO_Init+0x14c>
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	e002      	b.n	80012c2 <HAL_GPIO_Init+0x152>
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	3b08      	subs	r3, #8
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	210f      	movs	r1, #15
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	fa01 f303 	lsl.w	r3, r1, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	401a      	ands	r2, r3
 80012d4:	6a39      	ldr	r1, [r7, #32]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	431a      	orrs	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8090 	beq.w	8001410 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012f0:	4b56      	ldr	r3, [pc, #344]	; (800144c <HAL_GPIO_Init+0x2dc>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a55      	ldr	r2, [pc, #340]	; (800144c <HAL_GPIO_Init+0x2dc>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b53      	ldr	r3, [pc, #332]	; (800144c <HAL_GPIO_Init+0x2dc>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_GPIO_Init+0x2e0>)
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001314:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a49      	ldr	r2, [pc, #292]	; (8001454 <HAL_GPIO_Init+0x2e4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d00d      	beq.n	8001350 <HAL_GPIO_Init+0x1e0>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a48      	ldr	r2, [pc, #288]	; (8001458 <HAL_GPIO_Init+0x2e8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d007      	beq.n	800134c <HAL_GPIO_Init+0x1dc>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a47      	ldr	r2, [pc, #284]	; (800145c <HAL_GPIO_Init+0x2ec>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d101      	bne.n	8001348 <HAL_GPIO_Init+0x1d8>
 8001344:	2302      	movs	r3, #2
 8001346:	e004      	b.n	8001352 <HAL_GPIO_Init+0x1e2>
 8001348:	2303      	movs	r3, #3
 800134a:	e002      	b.n	8001352 <HAL_GPIO_Init+0x1e2>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <HAL_GPIO_Init+0x1e2>
 8001350:	2300      	movs	r3, #0
 8001352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001354:	f002 0203 	and.w	r2, r2, #3
 8001358:	0092      	lsls	r2, r2, #2
 800135a:	4093      	lsls	r3, r2
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001362:	493b      	ldr	r1, [pc, #236]	; (8001450 <HAL_GPIO_Init+0x2e0>)
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800137c:	4b38      	ldr	r3, [pc, #224]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4937      	ldr	r1, [pc, #220]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800138a:	4b35      	ldr	r3, [pc, #212]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	43db      	mvns	r3, r3
 8001392:	4933      	ldr	r1, [pc, #204]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 8001394:	4013      	ands	r3, r2
 8001396:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013a4:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	492d      	ldr	r1, [pc, #180]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013b2:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	4929      	ldr	r1, [pc, #164]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 80013bc:	4013      	ands	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d006      	beq.n	80013da <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	4923      	ldr	r1, [pc, #140]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	608b      	str	r3, [r1, #8]
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013da:	4b21      	ldr	r3, [pc, #132]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	491f      	ldr	r1, [pc, #124]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	4919      	ldr	r1, [pc, #100]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	60cb      	str	r3, [r1, #12]
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	43db      	mvns	r3, r3
 800140a:	4915      	ldr	r1, [pc, #84]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 800140c:	4013      	ands	r3, r2
 800140e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	3301      	adds	r3, #1
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	f47f aeaf 	bne.w	8001184 <HAL_GPIO_Init+0x14>
  }
}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	372c      	adds	r7, #44	; 0x2c
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	10320000 	.word	0x10320000
 8001438:	10310000 	.word	0x10310000
 800143c:	10220000 	.word	0x10220000
 8001440:	10210000 	.word	0x10210000
 8001444:	10120000 	.word	0x10120000
 8001448:	10110000 	.word	0x10110000
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000
 8001454:	40010800 	.word	0x40010800
 8001458:	40010c00 	.word	0x40010c00
 800145c:	40011000 	.word	0x40011000
 8001460:	40010400 	.word	0x40010400

08001464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	887b      	ldrh	r3, [r7, #2]
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	e001      	b.n	8001486 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001486:	7bfb      	ldrb	r3, [r7, #15]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]
 800149e:	4613      	mov	r3, r2
 80014a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a2:	787b      	ldrb	r3, [r7, #1]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a8:	887a      	ldrh	r2, [r7, #2]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014ae:	e003      	b.n	80014b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	041a      	lsls	r2, r3, #16
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	611a      	str	r2, [r3, #16]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b085      	sub	sp, #20
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014d4:	887a      	ldrh	r2, [r7, #2]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4013      	ands	r3, r2
 80014da:	041a      	lsls	r2, r3, #16
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43d9      	mvns	r1, r3
 80014e0:	887b      	ldrh	r3, [r7, #2]
 80014e2:	400b      	ands	r3, r1
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	611a      	str	r2, [r3, #16]
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e26c      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 8087 	beq.w	8001622 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001514:	4b92      	ldr	r3, [pc, #584]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b04      	cmp	r3, #4
 800151e:	d00c      	beq.n	800153a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001520:	4b8f      	ldr	r3, [pc, #572]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b08      	cmp	r3, #8
 800152a:	d112      	bne.n	8001552 <HAL_RCC_OscConfig+0x5e>
 800152c:	4b8c      	ldr	r3, [pc, #560]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001538:	d10b      	bne.n	8001552 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153a:	4b89      	ldr	r3, [pc, #548]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d06c      	beq.n	8001620 <HAL_RCC_OscConfig+0x12c>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d168      	bne.n	8001620 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e246      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x76>
 800155c:	4b80      	ldr	r3, [pc, #512]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a7f      	ldr	r2, [pc, #508]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	e02e      	b.n	80015c8 <HAL_RCC_OscConfig+0xd4>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0x98>
 8001572:	4b7b      	ldr	r3, [pc, #492]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a7a      	ldr	r2, [pc, #488]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	4b78      	ldr	r3, [pc, #480]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a77      	ldr	r2, [pc, #476]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e01d      	b.n	80015c8 <HAL_RCC_OscConfig+0xd4>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0xbc>
 8001596:	4b72      	ldr	r3, [pc, #456]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a71      	ldr	r2, [pc, #452]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b6f      	ldr	r3, [pc, #444]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a6e      	ldr	r2, [pc, #440]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0xd4>
 80015b0:	4b6b      	ldr	r3, [pc, #428]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a6a      	ldr	r2, [pc, #424]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b68      	ldr	r3, [pc, #416]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a67      	ldr	r2, [pc, #412]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fcb6 	bl	8000f40 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fcb2 	bl	8000f40 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e1fa      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b5d      	ldr	r3, [pc, #372]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0xe4>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fca2 	bl	8000f40 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fc9e 	bl	8000f40 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e1e6      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	4b53      	ldr	r3, [pc, #332]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x10c>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d063      	beq.n	80016f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800162e:	4b4c      	ldr	r3, [pc, #304]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800163a:	4b49      	ldr	r3, [pc, #292]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b08      	cmp	r3, #8
 8001644:	d11c      	bne.n	8001680 <HAL_RCC_OscConfig+0x18c>
 8001646:	4b46      	ldr	r3, [pc, #280]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d116      	bne.n	8001680 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	4b43      	ldr	r3, [pc, #268]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_RCC_OscConfig+0x176>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d001      	beq.n	800166a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e1ba      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166a:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4939      	ldr	r1, [pc, #228]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	e03a      	b.n	80016f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001688:	4b36      	ldr	r3, [pc, #216]	; (8001764 <HAL_RCC_OscConfig+0x270>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7ff fc57 	bl	8000f40 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fc53 	bl	8000f40 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e19b      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4927      	ldr	r1, [pc, #156]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
 80016c8:	e015      	b.n	80016f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <HAL_RCC_OscConfig+0x270>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fc36 	bl	8000f40 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fc32 	bl	8000f40 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e17a      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d03a      	beq.n	8001778 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d019      	beq.n	800173e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_RCC_OscConfig+0x274>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001710:	f7ff fc16 	bl	8000f40 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff fc12 	bl	8000f40 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e15a      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <HAL_RCC_OscConfig+0x26c>)
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001736:	2001      	movs	r0, #1
 8001738:	f000 fad8 	bl	8001cec <RCC_Delay>
 800173c:	e01c      	b.n	8001778 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_RCC_OscConfig+0x274>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001744:	f7ff fbfc 	bl	8000f40 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174a:	e00f      	b.n	800176c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff fbf8 	bl	8000f40 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d908      	bls.n	800176c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e140      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000
 8001764:	42420000 	.word	0x42420000
 8001768:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176c:	4b9e      	ldr	r3, [pc, #632]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1e9      	bne.n	800174c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80a6 	beq.w	80018d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800178a:	4b97      	ldr	r3, [pc, #604]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10d      	bne.n	80017b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b94      	ldr	r3, [pc, #592]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a93      	ldr	r2, [pc, #588]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	61d3      	str	r3, [r2, #28]
 80017a2:	4b91      	ldr	r3, [pc, #580]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ae:	2301      	movs	r3, #1
 80017b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b2:	4b8e      	ldr	r3, [pc, #568]	; (80019ec <HAL_RCC_OscConfig+0x4f8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d118      	bne.n	80017f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017be:	4b8b      	ldr	r3, [pc, #556]	; (80019ec <HAL_RCC_OscConfig+0x4f8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a8a      	ldr	r2, [pc, #552]	; (80019ec <HAL_RCC_OscConfig+0x4f8>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fbb9 	bl	8000f40 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d2:	f7ff fbb5 	bl	8000f40 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b64      	cmp	r3, #100	; 0x64
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e0fd      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	4b81      	ldr	r3, [pc, #516]	; (80019ec <HAL_RCC_OscConfig+0x4f8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x312>
 80017f8:	4b7b      	ldr	r3, [pc, #492]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a7a      	ldr	r2, [pc, #488]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	e02d      	b.n	8001862 <HAL_RCC_OscConfig+0x36e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x334>
 800180e:	4b76      	ldr	r3, [pc, #472]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	4a75      	ldr	r2, [pc, #468]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001814:	f023 0301 	bic.w	r3, r3, #1
 8001818:	6213      	str	r3, [r2, #32]
 800181a:	4b73      	ldr	r3, [pc, #460]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	4a72      	ldr	r2, [pc, #456]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001820:	f023 0304 	bic.w	r3, r3, #4
 8001824:	6213      	str	r3, [r2, #32]
 8001826:	e01c      	b.n	8001862 <HAL_RCC_OscConfig+0x36e>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b05      	cmp	r3, #5
 800182e:	d10c      	bne.n	800184a <HAL_RCC_OscConfig+0x356>
 8001830:	4b6d      	ldr	r3, [pc, #436]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4a6c      	ldr	r2, [pc, #432]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	6213      	str	r3, [r2, #32]
 800183c:	4b6a      	ldr	r3, [pc, #424]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4a69      	ldr	r2, [pc, #420]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6213      	str	r3, [r2, #32]
 8001848:	e00b      	b.n	8001862 <HAL_RCC_OscConfig+0x36e>
 800184a:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4a66      	ldr	r2, [pc, #408]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	6213      	str	r3, [r2, #32]
 8001856:	4b64      	ldr	r3, [pc, #400]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a63      	ldr	r2, [pc, #396]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	f023 0304 	bic.w	r3, r3, #4
 8001860:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d015      	beq.n	8001896 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186a:	f7ff fb69 	bl	8000f40 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7ff fb65 	bl	8000f40 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e0ab      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001888:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0ee      	beq.n	8001872 <HAL_RCC_OscConfig+0x37e>
 8001894:	e014      	b.n	80018c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001896:	f7ff fb53 	bl	8000f40 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f7ff fb4f 	bl	8000f40 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e095      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b4:	4b4c      	ldr	r3, [pc, #304]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1ee      	bne.n	800189e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d105      	bne.n	80018d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c6:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	4a47      	ldr	r2, [pc, #284]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80018cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 8081 	beq.w	80019de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018dc:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d061      	beq.n	80019ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d146      	bne.n	800197e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f0:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <HAL_RCC_OscConfig+0x4fc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff fb23 	bl	8000f40 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fe:	f7ff fb1f 	bl	8000f40 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e067      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001910:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d108      	bne.n	8001938 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001926:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	492d      	ldr	r1, [pc, #180]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001938:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a19      	ldr	r1, [r3, #32]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	430b      	orrs	r3, r1
 800194a:	4927      	ldr	r1, [pc, #156]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_RCC_OscConfig+0x4fc>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff faf3 	bl	8000f40 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195e:	f7ff faef 	bl	8000f40 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e037      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x46a>
 800197c:	e02f      	b.n	80019de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197e:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <HAL_RCC_OscConfig+0x4fc>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fadc 	bl	8000f40 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff fad8 	bl	8000f40 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e020      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x498>
 80019aa:	e018      	b.n	80019de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e013      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_OscConfig+0x4f4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40007000 	.word	0x40007000
 80019f0:	42420060 	.word	0x42420060

080019f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0d0      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a08:	4b6a      	ldr	r3, [pc, #424]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d910      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 0207 	bic.w	r2, r3, #7
 8001a1e:	4965      	ldr	r1, [pc, #404]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0b8      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d020      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a50:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a68:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a52      	ldr	r2, [pc, #328]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a74:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	494d      	ldr	r1, [pc, #308]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d040      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d115      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e07f      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab2:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e073      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e06b      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad2:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f023 0203 	bic.w	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4936      	ldr	r1, [pc, #216]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae4:	f7ff fa2c 	bl	8000f40 <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f7ff fa28 	bl	8000f40 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e053      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 020c 	and.w	r2, r3, #12
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d1eb      	bne.n	8001aec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d210      	bcs.n	8001b44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 0207 	bic.w	r2, r3, #7
 8001b2a:	4922      	ldr	r1, [pc, #136]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e032      	b.n	8001baa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4916      	ldr	r1, [pc, #88]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d009      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b82:	f000 f821 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001b86:	4602      	mov	r2, r0
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	490a      	ldr	r1, [pc, #40]	; (8001bbc <HAL_RCC_ClockConfig+0x1c8>)
 8001b94:	5ccb      	ldrb	r3, [r1, r3]
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1cc>)
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f98a 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40022000 	.word	0x40022000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08002728 	.word	0x08002728
 8001bc0:	2000003c 	.word	0x2000003c
 8001bc4:	20000040 	.word	0x20000040

08001bc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc8:	b490      	push	{r4, r7}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bd0:	1d3c      	adds	r4, r7, #4
 8001bd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bd8:	f240 2301 	movw	r3, #513	; 0x201
 8001bdc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bf2:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d002      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x40>
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x46>
 8001c06:	e02d      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c0a:	623b      	str	r3, [r7, #32]
      break;
 8001c0c:	e02d      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	0c9b      	lsrs	r3, r3, #18
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c20:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d013      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	0c5b      	lsrs	r3, r3, #17
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c46:	fb02 f203 	mul.w	r2, r2, r3
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
 8001c52:	e004      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	4a0b      	ldr	r2, [pc, #44]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c58:	fb02 f303 	mul.w	r3, r2, r3
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	623b      	str	r3, [r7, #32]
      break;
 8001c62:	e002      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c66:	623b      	str	r3, [r7, #32]
      break;
 8001c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3728      	adds	r7, #40	; 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc90      	pop	{r4, r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	08002718 	.word	0x08002718
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	007a1200 	.word	0x007a1200
 8001c84:	003d0900 	.word	0x003d0900

08001c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c8c:	4b02      	ldr	r3, [pc, #8]	; (8001c98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	2000003c 	.word	0x2000003c

08001c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ca0:	f7ff fff2 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4903      	ldr	r1, [pc, #12]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	08002738 	.word	0x08002738

08001cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc8:	f7ff ffde 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	0adb      	lsrs	r3, r3, #11
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4903      	ldr	r1, [pc, #12]	; (8001ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	08002738 	.word	0x08002738

08001cec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <RCC_Delay+0x34>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <RCC_Delay+0x38>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	0a5b      	lsrs	r3, r3, #9
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d08:	bf00      	nop
  }
  while (Delay --);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1e5a      	subs	r2, r3, #1
 8001d0e:	60fa      	str	r2, [r7, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f9      	bne.n	8001d08 <RCC_Delay+0x1c>
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	2000003c 	.word	0x2000003c
 8001d24:	10624dd3 	.word	0x10624dd3

08001d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e041      	b.n	8001dbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fee4 	bl	8000b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3304      	adds	r3, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f000 fa6a 	bl	8002240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d001      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e035      	b.n	8001e4c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a16      	ldr	r2, [pc, #88]	; (8001e58 <HAL_TIM_Base_Start_IT+0x90>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d009      	beq.n	8001e16 <HAL_TIM_Base_Start_IT+0x4e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0a:	d004      	beq.n	8001e16 <HAL_TIM_Base_Start_IT+0x4e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <HAL_TIM_Base_Start_IT+0x94>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d111      	bne.n	8001e3a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b06      	cmp	r3, #6
 8001e26:	d010      	beq.n	8001e4a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e38:	e007      	b.n	8001e4a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40012c00 	.word	0x40012c00
 8001e5c:	40000400 	.word	0x40000400

08001e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d122      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d11b      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0202 	mvn.w	r2, #2
 8001e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f9b1 	bl	800220a <HAL_TIM_IC_CaptureCallback>
 8001ea8:	e005      	b.n	8001eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f9a4 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f9b3 	bl	800221c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d122      	bne.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d11b      	bne.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0204 	mvn.w	r2, #4
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f987 	bl	800220a <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f97a 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f989 	bl	800221c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d122      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d11b      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0208 	mvn.w	r2, #8
 8001f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2204      	movs	r2, #4
 8001f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f95d 	bl	800220a <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f950 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f95f 	bl	800221c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	d122      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d11b      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0210 	mvn.w	r2, #16
 8001f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f933 	bl	800220a <HAL_TIM_IC_CaptureCallback>
 8001fa4:	e005      	b.n	8001fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f926 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f935 	bl	800221c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0201 	mvn.w	r2, #1
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe fe44 	bl	8000c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	2b80      	cmp	r3, #128	; 0x80
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	2b80      	cmp	r3, #128	; 0x80
 8001ffe:	d107      	bne.n	8002010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fa67 	bl	80024de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201a:	2b40      	cmp	r3, #64	; 0x40
 800201c:	d10e      	bne.n	800203c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002028:	2b40      	cmp	r3, #64	; 0x40
 800202a:	d107      	bne.n	800203c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f8f9 	bl	800222e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b20      	cmp	r3, #32
 8002048:	d10e      	bne.n	8002068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b20      	cmp	r3, #32
 8002056:	d107      	bne.n	8002068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0220 	mvn.w	r2, #32
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fa32 	bl	80024cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_TIM_ConfigClockSource+0x18>
 8002084:	2302      	movs	r3, #2
 8002086:	e0b3      	b.n	80021f0 <HAL_TIM_ConfigClockSource+0x180>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c0:	d03e      	beq.n	8002140 <HAL_TIM_ConfigClockSource+0xd0>
 80020c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c6:	f200 8087 	bhi.w	80021d8 <HAL_TIM_ConfigClockSource+0x168>
 80020ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ce:	f000 8085 	beq.w	80021dc <HAL_TIM_ConfigClockSource+0x16c>
 80020d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d6:	d87f      	bhi.n	80021d8 <HAL_TIM_ConfigClockSource+0x168>
 80020d8:	2b70      	cmp	r3, #112	; 0x70
 80020da:	d01a      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0xa2>
 80020dc:	2b70      	cmp	r3, #112	; 0x70
 80020de:	d87b      	bhi.n	80021d8 <HAL_TIM_ConfigClockSource+0x168>
 80020e0:	2b60      	cmp	r3, #96	; 0x60
 80020e2:	d050      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0x116>
 80020e4:	2b60      	cmp	r3, #96	; 0x60
 80020e6:	d877      	bhi.n	80021d8 <HAL_TIM_ConfigClockSource+0x168>
 80020e8:	2b50      	cmp	r3, #80	; 0x50
 80020ea:	d03c      	beq.n	8002166 <HAL_TIM_ConfigClockSource+0xf6>
 80020ec:	2b50      	cmp	r3, #80	; 0x50
 80020ee:	d873      	bhi.n	80021d8 <HAL_TIM_ConfigClockSource+0x168>
 80020f0:	2b40      	cmp	r3, #64	; 0x40
 80020f2:	d058      	beq.n	80021a6 <HAL_TIM_ConfigClockSource+0x136>
 80020f4:	2b40      	cmp	r3, #64	; 0x40
 80020f6:	d86f      	bhi.n	80021d8 <HAL_TIM_ConfigClockSource+0x168>
 80020f8:	2b30      	cmp	r3, #48	; 0x30
 80020fa:	d064      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0x156>
 80020fc:	2b30      	cmp	r3, #48	; 0x30
 80020fe:	d86b      	bhi.n	80021d8 <HAL_TIM_ConfigClockSource+0x168>
 8002100:	2b20      	cmp	r3, #32
 8002102:	d060      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0x156>
 8002104:	2b20      	cmp	r3, #32
 8002106:	d867      	bhi.n	80021d8 <HAL_TIM_ConfigClockSource+0x168>
 8002108:	2b00      	cmp	r3, #0
 800210a:	d05c      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0x156>
 800210c:	2b10      	cmp	r3, #16
 800210e:	d05a      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002110:	e062      	b.n	80021d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6899      	ldr	r1, [r3, #8]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f000 f95c 	bl	80023de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002134:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	609a      	str	r2, [r3, #8]
      break;
 800213e:	e04e      	b.n	80021de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6899      	ldr	r1, [r3, #8]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f000 f945 	bl	80023de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002162:	609a      	str	r2, [r3, #8]
      break;
 8002164:	e03b      	b.n	80021de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6859      	ldr	r1, [r3, #4]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	461a      	mov	r2, r3
 8002174:	f000 f8bc 	bl	80022f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2150      	movs	r1, #80	; 0x50
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f913 	bl	80023aa <TIM_ITRx_SetConfig>
      break;
 8002184:	e02b      	b.n	80021de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6859      	ldr	r1, [r3, #4]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	461a      	mov	r2, r3
 8002194:	f000 f8da 	bl	800234c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2160      	movs	r1, #96	; 0x60
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f903 	bl	80023aa <TIM_ITRx_SetConfig>
      break;
 80021a4:	e01b      	b.n	80021de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6859      	ldr	r1, [r3, #4]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	461a      	mov	r2, r3
 80021b4:	f000 f89c 	bl	80022f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2140      	movs	r1, #64	; 0x40
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f8f3 	bl	80023aa <TIM_ITRx_SetConfig>
      break;
 80021c4:	e00b      	b.n	80021de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4619      	mov	r1, r3
 80021d0:	4610      	mov	r0, r2
 80021d2:	f000 f8ea 	bl	80023aa <TIM_ITRx_SetConfig>
        break;
 80021d6:	e002      	b.n	80021de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80021d8:	bf00      	nop
 80021da:	e000      	b.n	80021de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80021dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <TIM_Base_SetConfig+0xa8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d007      	beq.n	8002268 <TIM_Base_SetConfig+0x28>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225e:	d003      	beq.n	8002268 <TIM_Base_SetConfig+0x28>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a22      	ldr	r2, [pc, #136]	; (80022ec <TIM_Base_SetConfig+0xac>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d108      	bne.n	800227a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a1a      	ldr	r2, [pc, #104]	; (80022e8 <TIM_Base_SetConfig+0xa8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <TIM_Base_SetConfig+0x52>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002288:	d003      	beq.n	8002292 <TIM_Base_SetConfig+0x52>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a17      	ldr	r2, [pc, #92]	; (80022ec <TIM_Base_SetConfig+0xac>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d108      	bne.n	80022a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <TIM_Base_SetConfig+0xa8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d103      	bne.n	80022d8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	615a      	str	r2, [r3, #20]
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	40000400 	.word	0x40000400

080022f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f023 0201 	bic.w	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800231a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f023 030a 	bic.w	r3, r3, #10
 800232c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4313      	orrs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	621a      	str	r2, [r3, #32]
}
 8002342:	bf00      	nop
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f023 0210 	bic.w	r2, r3, #16
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002376:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	031b      	lsls	r3, r3, #12
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002388:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	621a      	str	r2, [r3, #32]
}
 80023a0:	bf00      	nop
 80023a2:	371c      	adds	r7, #28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b085      	sub	sp, #20
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f043 0307 	orr.w	r3, r3, #7
 80023cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	609a      	str	r2, [r3, #8]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023de:	b480      	push	{r7}
 80023e0:	b087      	sub	sp, #28
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	021a      	lsls	r2, r3, #8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	431a      	orrs	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4313      	orrs	r3, r2
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	609a      	str	r2, [r3, #8]
}
 8002412:	bf00      	nop
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002430:	2302      	movs	r3, #2
 8002432:	e041      	b.n	80024b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800245a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d009      	beq.n	800248c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002480:	d004      	beq.n	800248c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a10      	ldr	r2, [pc, #64]	; (80024c8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d10c      	bne.n	80024a6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002492:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	4313      	orrs	r3, r2
 800249c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40000400 	.word	0x40000400

080024cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e03f      	b.n	8002582 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe fb24 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2224      	movs	r2, #36	; 0x24
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f829 	bl	800258c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025c6:	f023 030c 	bic.w	r3, r3, #12
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	430b      	orrs	r3, r1
 80025d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a2c      	ldr	r2, [pc, #176]	; (80026a0 <UART_SetConfig+0x114>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d103      	bne.n	80025fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025f4:	f7ff fb66 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	e002      	b.n	8002602 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025fc:	f7ff fb4e 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8002600:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	009a      	lsls	r2, r3, #2
 800260c:	441a      	add	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <UART_SetConfig+0x118>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	0119      	lsls	r1, r3, #4
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	009a      	lsls	r2, r3, #2
 800262c:	441a      	add	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fbb2 f2f3 	udiv	r2, r2, r3
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <UART_SetConfig+0x118>)
 800263a:	fba3 0302 	umull	r0, r3, r3, r2
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	2064      	movs	r0, #100	; 0x64
 8002642:	fb00 f303 	mul.w	r3, r0, r3
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	3332      	adds	r3, #50	; 0x32
 800264c:	4a15      	ldr	r2, [pc, #84]	; (80026a4 <UART_SetConfig+0x118>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002658:	4419      	add	r1, r3
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	009a      	lsls	r2, r3, #2
 8002664:	441a      	add	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <UART_SetConfig+0x118>)
 8002672:	fba3 0302 	umull	r0, r3, r3, r2
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2064      	movs	r0, #100	; 0x64
 800267a:	fb00 f303 	mul.w	r3, r0, r3
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	3332      	adds	r3, #50	; 0x32
 8002684:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <UART_SetConfig+0x118>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	f003 020f 	and.w	r2, r3, #15
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	440a      	add	r2, r1
 8002696:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40013800 	.word	0x40013800
 80026a4:	51eb851f 	.word	0x51eb851f

080026a8 <__libc_init_array>:
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	2600      	movs	r6, #0
 80026ac:	4d0c      	ldr	r5, [pc, #48]	; (80026e0 <__libc_init_array+0x38>)
 80026ae:	4c0d      	ldr	r4, [pc, #52]	; (80026e4 <__libc_init_array+0x3c>)
 80026b0:	1b64      	subs	r4, r4, r5
 80026b2:	10a4      	asrs	r4, r4, #2
 80026b4:	42a6      	cmp	r6, r4
 80026b6:	d109      	bne.n	80026cc <__libc_init_array+0x24>
 80026b8:	f000 f822 	bl	8002700 <_init>
 80026bc:	2600      	movs	r6, #0
 80026be:	4d0a      	ldr	r5, [pc, #40]	; (80026e8 <__libc_init_array+0x40>)
 80026c0:	4c0a      	ldr	r4, [pc, #40]	; (80026ec <__libc_init_array+0x44>)
 80026c2:	1b64      	subs	r4, r4, r5
 80026c4:	10a4      	asrs	r4, r4, #2
 80026c6:	42a6      	cmp	r6, r4
 80026c8:	d105      	bne.n	80026d6 <__libc_init_array+0x2e>
 80026ca:	bd70      	pop	{r4, r5, r6, pc}
 80026cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d0:	4798      	blx	r3
 80026d2:	3601      	adds	r6, #1
 80026d4:	e7ee      	b.n	80026b4 <__libc_init_array+0xc>
 80026d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026da:	4798      	blx	r3
 80026dc:	3601      	adds	r6, #1
 80026de:	e7f2      	b.n	80026c6 <__libc_init_array+0x1e>
 80026e0:	08002740 	.word	0x08002740
 80026e4:	08002740 	.word	0x08002740
 80026e8:	08002740 	.word	0x08002740
 80026ec:	08002744 	.word	0x08002744

080026f0 <memset>:
 80026f0:	4603      	mov	r3, r0
 80026f2:	4402      	add	r2, r0
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d100      	bne.n	80026fa <memset+0xa>
 80026f8:	4770      	bx	lr
 80026fa:	f803 1b01 	strb.w	r1, [r3], #1
 80026fe:	e7f9      	b.n	80026f4 <memset+0x4>

08002700 <_init>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	bf00      	nop
 8002704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002706:	bc08      	pop	{r3}
 8002708:	469e      	mov	lr, r3
 800270a:	4770      	bx	lr

0800270c <_fini>:
 800270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270e:	bf00      	nop
 8002710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002712:	bc08      	pop	{r3}
 8002714:	469e      	mov	lr, r3
 8002716:	4770      	bx	lr
